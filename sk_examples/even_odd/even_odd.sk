Sk {
  datatypes = {
    bool = false | true;
    list_0 = nil_0 | ::_0 of (list_0, word32);
  },
  fun even_odd (zs: list_0) = {
    L1 () =
      goto L3 (R_zs)

    L3 (xs_0: list_0) =
      match (R_xs_0; R_nil => goto L4 (), R_list_0_1 => goto L5 (R_xs_0_0, R_xs_0_1));

    L4 () =
      goto L10 (R_true);

    L5 (xs_1: list_0, x: word32) =
      goto L7 (R_xs_1);

    L7 (ys_1: list_0) =
      match (R_ys_1; R_nil => goto L9 (), R_list_0_1 => goto L8 (R_ys_1_0, R_ys_1_1));

    L8 (ys_2: list_0, y: word32) =
      goto L3 (R_ys_2);

    L9 () =
      goto L10 (R_false);

    L10 (b: bool) =
      return (R_b);
  }
} FPeg {
  R_zs = {
    <param zs: list_0>
  }

  R_xs_0 = {
    <param xs_0: list_0>
  }

  R_nil = {
    <cons nil_0: list_0>
  }

  R_list_0_1 = {
    <cons "::_0": list_0> (#0, #1),

    #0 {
      <param : list_0>
    }

    #1 {
      <param : word 32>
    }
  }

  R_xs_0_0 = {
    <decons "::_0": list_0; 0> (R_xs_0)
  }

  R_xs_0_1 = {
    <decons "::_0": list_0; 1> (R_xs_0)
  }

  R_true = {
    <cons true: bool>
  }

  R_false = {
    <cons false: bool>
  }

  R_xs_1 = {
    <param xs_1: list_0>
  }

  R_ys_1 {
    <decons ys_1: list_0>
  }

  R_ys_1_0 = {
    <decons "::_0": list_0; 0> (R_ys_1)
  }

  R_ys_1_1 = {
    <decons "::_0": list_0; 1> (R_ys_1)
  }

  R_ys_2 = {
    <param ys_2: list_0>
  }

  R_b = {
    <param b: bool>
  }
}
