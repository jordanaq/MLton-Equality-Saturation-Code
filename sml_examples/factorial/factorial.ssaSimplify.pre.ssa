(* MLton 20210117 on-20210117-release *)


(* Datatypes: *)
datatype exn = UNKNOWN_0 of ((unit) ref)
             | Poll_0 of ((unit) ref)
             | DoublyRedirected_0 of ((unit) ref)
             | MisuseOfForget_0 of ((unit) ref)
             | Interrupt_0 of ((unit) ref)
             | Io_1 of (((unit) ref, (word8) vector) tuple)
             | Ord_0 of ((unit) ref)
             | Ln_0 of ((unit) ref)
             | Sqrt_0 of ((unit) ref)
             | InvalidArc_0 of ((unit) ref)
             | Path_0 of ((unit) ref)
             | RandomAccessNotSupported_0 of ((unit) ref)
             | NonblockingNotSupported_0 of ((unit) ref)
             | Io_0 of (((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
             | ClosedStream_0 of ((unit) ref)
             | BlockingNotSupported_0 of ((unit) ref)
             | Date_0 of ((unit) ref)
             | Time_0 of ((unit) ref)
             | Bad_1 of ((unit) ref)
             | Bad_0 of ((unit) ref)
             | Unordered_0 of ((unit) ref)
             | SysErr_0 of (((unit) ref, ((word8) vector, t_0) tuple) tuple)
             | UnequalLengths_0 of ((unit) ref)
             | Empty_0 of ((unit) ref)
             | Option_0 of ((unit) ref)
             | Fail_0 of (((unit) ref, (word8) vector) tuple)
             | Chr_0 of ((unit) ref)
             | CreateVectorNotFull_1 of ((unit) ref)
             | CreateAlreadyGotVector_1 of ((unit) ref)
             | Vector_updateUnsafe_0 of ((unit) ref)
             | Vector_uninitUnsafe_0 of ((unit) ref)
             | Vector_uninitIsNop_0 of ((unit) ref)
             | CreateVectorNotFull_0 of ((unit) ref)
             | CreateAlreadyGotVector_0 of ((unit) ref)
             | Subscript_0 of ((unit) ref)
             | Span_0 of ((unit) ref)
             | Size_0 of ((unit) ref)
             | Overflow_0 of ((unit) ref)
             | Fail32_0 of (((unit) ref, (word32) vector) tuple)
             | Fail16_0 of (((unit) ref, (word16) vector) tuple)
             | Fail8_0 of (((unit) ref, (word8) vector) tuple)
             | Domain_0 of ((unit) ref)
             | Div_0 of ((unit) ref)
             | Match_0 of ((unit) ref)
             | Bind_0 of ((unit) ref)
datatype bool = false | true
datatype t_0 = NONE_1 | SOME_0 of (word32)
datatype t_1 = Linux_1 | MinGW_0
datatype ans_0 = Big_0 of ((bool, bool, word8) tuple) | Small_0 of (word64)
datatype ans_1 = Big_1 of ((bool, bool, word16) tuple) | Small_1 of (word64)
datatype ans_2 = Big_2 of ((bool, bool, word32) tuple) | Small_2 of (word64)
datatype ans_3 = Big_3 of ((bool, bool, word64) tuple) | Small_3 of (word64)
datatype t_2 = NONE_3 | SOME_1 of ((word8) vector)
datatype list_0 = nil_1 | ::_3 of ((lambdas_0, list_0) tuple)
datatype radix_0 = BIN_1 | OCT_1 | DEC_1 | HEX_0
datatype list_1 = nil_2 | ::_4 of ((lambdas_1, list_1) tuple)
datatype t_3 = T_0 of ((lambdas_2, (word8) array, (bool) ref) tuple)
datatype t_4 = NONE_14 | SOME_2 of ((word8, word32) tuple)
datatype t_5 = NONE_15 | SOME_3 of ((word32, word32) tuple)
datatype t_6 = NONE_16 | SOME_4 of ((intInf, word32) tuple)
datatype t_7 = NONE_5 | SOME_5 of (intInf)
datatype t_8 = NONE_2 | SOME_6 of (word8)
datatype list_2 = nil_4 | ::_5 of ((lambdas_3, list_2) tuple)
datatype list_3 = nil_5
                | ::_6 of (((word32, (word8) vector) tuple, list_3) tuple)
datatype t_9 = TO_NEAREST_0 | TO_NEGINF_0 | TO_POSINF_0 | TO_ZERO_0
datatype float_class_0 = INF_0 | NAN_1 | NORMAL_1 | SUBNORMAL_1 | ZERO_1
datatype time_0 = T_1 of (intInf)
datatype list_4 = nil_10 | ::_2 of ((word32, list_4) tuple)
datatype stat_0 = T_2 of ((time_0,
                           time_0,
                           word64,
                           word32,
                           word64,
                           word32,
                           time_0,
                           word32,
                           word64,
                           word32) tuple)
datatype t_10 = NONE_11 | SOME_7 of (lambdas_2)
datatype t_11 = NONE_12 | SOME_8 of (lambdas_2)
datatype t_12 = NONE_9 | SOME_9 of (lambdas_4)
datatype t_13 = T_3 of ((word64, (word8) array, word64) tuple)
datatype t_14 = NONE_17 | SOME_10 of (lambdas_5)
datatype t_15 = NONE_18 | SOME_11 of (lambdas_6)
datatype t_16 = SOME_12 of (lambdas_2)
datatype t_17 = SOME_13 of (lambdas_2)
datatype t_18 = NONE_10 | SOME_14 of (lambdas_7)
datatype reader_0 = RD_0 of ((lambdas_2,
                              t_10,
                              t_11,
                              word32,
                              lambdas_2,
                              t_12,
                              t_12,
                              t_0,
                              (word8) vector,
                              t_14,
                              t_15,
                              t_16,
                              t_17,
                              t_18,
                              t_12) tuple)
datatype t_19 = T_4 of ((word64, (word8) vector, word64) tuple)
datatype t_20 = NONE_19 | SOME_15 of (lambdas_8)
datatype t_21 = NONE_20 | SOME_16 of (lambdas_9)
datatype writer_0 = WR_0 of ((t_10,
                              t_11,
                              word32,
                              lambdas_10,
                              t_12,
                              t_12,
                              t_0,
                              (word8) vector,
                              t_18,
                              t_12,
                              t_14,
                              t_15,
                              t_20,
                              t_21) tuple)
datatype outstream_0 = Out_0 of ((writer_0,
                                  (bufferMode_0) ref,
                                  (state_0) ref,
                                  writer_0) tuple)
datatype list_5 = nil_9 | ::_7 of (((outstream_0, bool) tuple, list_5) tuple)
datatype buffer_mode_0 = NO_BUF_1 | LINE_BUF_0 | BLOCK_BUF_0
datatype state_0 = Active_1 | Closed_1
datatype bufferMode_0 = NO_BUF_0
                      | LINE_BUF_1 of (buf_0)
                      | BLOCK_BUF_1 of (buf_0)
datatype t_22 = T_5 of ((outstream_0) ref)
datatype t_23 = T_6 of (((bool) ref, (bool) ref, cpointer) tuple)
datatype list_6 = nil_11 | ::_8 of ((t_23, list_6) tuple)
datatype buf_0 = Buf_0 of (((word8) array, (word32) ref) tuple)
datatype list_7 = nil_3 | ::_1 of (((word8) vector, list_7) tuple)
datatype whence_0 = SEEK_SET_1 | SEEK_CUR_1 | SEEK_END_1
datatype list_8 = nil_6 | ::_9 of (((word32, lambdas_2) tuple, list_8) tuple)
datatype list_9 = nil_8 | ::_10 of (((word32, lambdas_2) tuple, list_9) tuple)
datatype list_10 = nil_7 | ::_11 of (((word32, lambdas_2) tuple, list_10) tuple)
datatype t_24 = NONE_6 | SOME_17 of ((word32, lambdas_2) tuple)
datatype t_25 = NONE_8 | SOME_18 of ((word32, lambdas_2) tuple)
datatype t_26 = NONE_7 | SOME_19 of ((word32, lambdas_2) tuple)
datatype t_27 = NONE_4 | SOME_20 of ((word32, (word8) vector) tuple)
datatype t_28 = NONE_0 | SOME_21 of (word64)
datatype t_29 = NONE_21 | SOME_22 of ((word64, word32) tuple)
datatype t_30 = NONE_22
              | SOME_23 of (((word64, bool, word64) tuple, word32) tuple)
datatype list_11 = nil_12 | ::_12 of ((word8, list_11) tuple)
datatype t_31 = T_7 of ((word64, (bool) array, word64) tuple)
datatype t_32 = T_8 of ((word64, (t_0) array, word64) tuple)
datatype list_12 = nil_0 | ::_0 of (((word64, word64) tuple, list_12) tuple)
datatype t_33 = T_9 of ((word64, (word64) vector, word64) tuple)
datatype t_34 = NONE_13 | SOME_24 of ((word64, word8) tuple)
datatype t_35 = T_10 of ((word64, (word64) array, word64) tuple)
datatype t_36 = A_0 of (word64) | E_0 of (exn)
datatype t_37 = A_1 of (stat_0) | E_1 of (exn)
datatype t_38 = A_2 of ((word8) vector) | E_2 of (exn)
datatype t_39 = A_3 of (word32) | E_3 of (exn)
datatype lambdas_11 = xEnv_73 of (exn)
datatype lambdas_12 = loopEnv_5 of ((word64,
                                     word64,
                                     word64,
                                     (word8) vector,
                                     (word8) array) tuple)
datatype lambdas_13 = loopEnv_6 of ((word64, word64, (word8) vector) tuple)
datatype lambdas_14 = xEnv_74 of (exn)
datatype lambdas_15 = xEnv_75 of (exn)
datatype lambdas_16 = loopEnv_7 of ((word64,
                                     word64,
                                     word64,
                                     (word8) vector,
                                     (word8) array) tuple)
datatype lambdas_17 = xEnv_76 of (exn)
datatype lambdas_18 = xEnv_77 of (exn)
datatype lambdas_19 = loopEnv_8 of ((word32, (word8) vector, lambdas_8) tuple)
datatype lambdas_20 = putEnv_0 of (((word8) vector, writer_0) tuple)
datatype lambdas_21 = factorialEnv_0 of (unit)
datatype lambdas_22 = xEnv_78 of ((lambdas_23, (list_6) ref) tuple)
datatype lambdas_24 = loopEnv_4 of (unit)
datatype lambdas_25 = xEnv_79 of (((list_6) ref,
                                   lambdas_27,
                                   (word8) vector,
                                   lambdas_26) tuple)
datatype lambdas_28 = makeEnv_0 of (unit)
datatype lambdas_29 = defaultTopLevelHandlerEnv_0 of ((lambdas_32,
                                                       lambdas_31,
                                                       lambdas_30,
                                                       word32) tuple)
datatype lambdas_33 = defaultTopLevelSuffixEnv_0 of ((lambdas_30, word32, word32) tuple)
datatype lambdas_34 = loopEnv_3 of (unit)
datatype lambdas_35 = haltEnv_0 of (unit)
datatype lambdas_36 = xEnv_72 of (unit)
datatype lambdas_37 = xEnv_80 of (exn)
datatype lambdas_38 = xEnv_81 of (exn)
datatype lambdas_39 = xEnv_71 of (unit)
datatype lambdas_40 = loopEnv_9 of (word32)
datatype lambdas_41 = xEnv_70 of (unit)
datatype lambdas_42 = xEnv_69 of (unit)
datatype lambdas_43 = loopEnv_10 of (word32)
datatype lambdas_44 = errUnblockedEnv_0 of ((word32,
                                             (bool) ref,
                                             word32,
                                             (lambdas_46) ref,
                                             lambdas_45) tuple)
datatype lambdas_47 = xEnv_68 of (unit)
datatype lambdas_48 = xEnv_67 of (unit)
datatype lambdas_49 = loopEnv_11 of (word32)
datatype lambdas_50 = xEnv_66 of (unit)
datatype lambdas_51 = xEnv_65 of (unit)
datatype lambdas_52 = loopEnv_12 of (word32)
datatype lambdas_53 = errUnblockedEnv_1 of ((word32,
                                             (bool) ref,
                                             lambdas_55,
                                             word64,
                                             (lambdas_46) ref,
                                             lambdas_54) tuple)
datatype lambdas_55 = xEnv_82 of (((word8) array, word32, word32, word32) tuple)
datatype lambdas_56 = xEnv_64 of (unit)
datatype lambdas_57 = loopEnv_13 of (word32)
datatype lambdas_58 = xEnv_63 of (unit)
datatype lambdas_59 = xEnv_62 of (unit)
datatype lambdas_60 = loopEnv_14 of (word32)
datatype lambdas_61 = errUnblockedEnv_2 of ((word32,
                                             (bool) ref,
                                             lambdas_62,
                                             word64,
                                             (lambdas_46) ref,
                                             lambdas_54) tuple)
datatype lambdas_62 = xEnv_83 of (((word8) vector, word32, word32, word32) tuple)
datatype lambdas_63 = verifyPosEnv_0 of ((word64, lambdas_64, (word64) ref) tuple)
datatype lambdas_65 = endPosEnv_0 of (((bool) ref, lambdas_66) tuple)
datatype lambdas_67 = getPosEnv_0 of ((word64) ref)
datatype lambdas_68 = getEnv_0 of (unit)
datatype lambdas_69 = doitEnv_0 of (unit)
datatype lambdas_70 = loopEnv_2 of (unit)
datatype lambdas_71 = xEnv_84 of ((list_5) ref)
datatype lambdas_72 = flushOutEnv_0 of (unit)
datatype lambdas_73 = loopEnv_15 of ((word32, (word8) array, lambdas_5) tuple)
datatype lambdas_74 = flushBufEnv_0 of (unit)
datatype lambdas_75 = outstreamNameEnv_0 of (unit)
datatype lambdas_76 = outstreamWriterEnv_0 of (unit)
datatype lambdas_77 = terminatedEnv_0 of (unit)
datatype lambdas_78 = xEnv_85 of (((word8) vector, (word8) vector) tuple)
datatype lambdas_79 = xEnv_86 of ((word8) vector)
datatype lambdas_80 = liftExnEnv_0 of (unit)
datatype lambdas_81 = loopEnv_16 of (word32)
datatype lambdas_82 = xEnv_61 of (unit)
datatype lambdas_83 = xEnv_60 of (unit)
datatype lambdas_84 = loopEnv_17 of (word32)
datatype lambdas_85 = xEnv_59 of (unit)
datatype lambdas_86 = xEnv_58 of (unit)
datatype lambdas_87 = loopEnv_18 of (word32)
datatype lambdas_88 = errUnblockedEnv_3 of ((word32,
                                             (bool) ref,
                                             lambdas_89,
                                             word32,
                                             (lambdas_46) ref,
                                             lambdas_45) tuple)
datatype lambdas_89 = xEnv_87 of ((word32, word32) tuple)
datatype lambdas_90 = loopEnv_19 of (word32)
datatype lambdas_91 = xEnv_88 of (lambdas_92)
datatype lambdas_93 = loopEnv_1 of (unit)
datatype lambdas_94 = xEnv_89 of (exn)
datatype lambdas_95 = xEnv_57 of (unit)
datatype lambdas_96 = xEnv_90 of ((lambdas_31, lambdas_32) tuple)
datatype lambdas_97 = xEnv_91 of ((word64,
                                   real64,
                                   word64,
                                   real64,
                                   lambdas_99,
                                   t_9,
                                   real64,
                                   real64,
                                   lambdas_98) tuple)
datatype lambdas_100 = xEnv_92 of ((lambdas_98,
                                    real64,
                                    real64,
                                    lambdas_99,
                                    real64,
                                    word64,
                                    real64,
                                    word64) tuple)
datatype lambdas_101 = xEnv_93 of ((real64,
                                    word64,
                                    real64,
                                    lambdas_99,
                                    t_9,
                                    real64,
                                    real64,
                                    lambdas_98) tuple)
datatype lambdas_102 = xEnv_94 of ((lambdas_98,
                                    real64,
                                    real64,
                                    lambdas_99,
                                    real64,
                                    word64,
                                    real64) tuple)
datatype lambdas_103 = xEnv_96 of ((lambdas_98,
                                    real64,
                                    real64,
                                    lambdas_99,
                                    real64,
                                    word64,
                                    real64) tuple)
                     | xEnv_95 of ((lambdas_98,
                                    real64,
                                    real64,
                                    lambdas_99,
                                    real64,
                                    word64,
                                    real64,
                                    word64) tuple)
datatype lambdas_104 = xEnv_97 of ((lambdas_106, lambdas_105, word64) tuple)
datatype lambdas_107 = xEnv_98 of ((word32,
                                    real64,
                                    word32,
                                    real64,
                                    lambdas_99,
                                    t_9,
                                    real64,
                                    real64,
                                    lambdas_98) tuple)
datatype lambdas_108 = xEnv_99 of ((lambdas_98,
                                    real64,
                                    real64,
                                    lambdas_99,
                                    real64,
                                    word32,
                                    real64,
                                    word32) tuple)
datatype lambdas_109 = xEnv_100 of ((real64,
                                     word32,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_98) tuple)
datatype lambdas_110 = xEnv_101 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word32,
                                     real64) tuple)
datatype lambdas_111 = xEnv_103 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word32,
                                     real64) tuple)
                     | xEnv_102 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_112 = xEnv_104 of ((lambdas_114, lambdas_113, word32) tuple)
datatype lambdas_115 = xEnv_105 of ((real64,
                                     word16,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_98) tuple)
datatype lambdas_116 = xEnv_106 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word16,
                                     real64) tuple)
datatype lambdas_117 = xEnv_107 of ((real64,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_98) tuple)
datatype lambdas_118 = xEnv_108 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     real64) tuple)
datatype lambdas_119 = xEnv_110 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     real64) tuple)
                     | xEnv_109 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word16,
                                     real64) tuple)
datatype lambdas_120 = xEnv_111 of ((lambdas_122, lambdas_121, word16) tuple)
datatype lambdas_123 = xEnv_112 of ((real64,
                                     word8,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_98) tuple)
datatype lambdas_124 = xEnv_113 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word8,
                                     real64) tuple)
datatype lambdas_125 = xEnv_114 of ((real64,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_98) tuple)
datatype lambdas_126 = xEnv_115 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     real64) tuple)
datatype lambdas_127 = xEnv_117 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     real64) tuple)
                     | xEnv_116 of ((lambdas_98,
                                     real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word8,
                                     real64) tuple)
datatype lambdas_128 = xEnv_118 of ((lambdas_130, lambdas_129, word8) tuple)
datatype lambdas_131 = xEnv_119 of ((word64,
                                     real64,
                                     word64,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_132 = xEnv_120 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word64,
                                     real64,
                                     word64) tuple)
datatype lambdas_133 = xEnv_121 of ((lambdas_99, t_9, real64, real64) tuple)
datatype lambdas_134 = xEnv_122 of ((real64, real64, lambdas_99) tuple)
datatype lambdas_135 = xEnv_124 of ((real64, real64, lambdas_99) tuple)
                     | xEnv_123 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word64,
                                     real64,
                                     word64) tuple)
datatype lambdas_136 = xEnv_125 of ((lambdas_138, lambdas_137, word64) tuple)
datatype lambdas_139 = xEnv_126 of ((word32,
                                     real64,
                                     word32,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_140 = xEnv_127 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_141 = xEnv_128 of ((lambdas_99, t_9, real64, real64) tuple)
datatype lambdas_142 = xEnv_129 of ((real64, real64, lambdas_99) tuple)
datatype lambdas_143 = xEnv_131 of ((real64, real64, lambdas_99) tuple)
                     | xEnv_130 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_144 = xEnv_132 of ((lambdas_146, lambdas_145, word32) tuple)
datatype lambdas_147 = xEnv_133 of ((word16,
                                     real64,
                                     word16,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_148 = xEnv_134 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word16,
                                     real64,
                                     word16) tuple)
datatype lambdas_149 = xEnv_135 of ((lambdas_99, t_9, real64, real64) tuple)
datatype lambdas_150 = xEnv_136 of ((real64, real64, lambdas_99) tuple)
datatype lambdas_151 = xEnv_138 of ((real64, real64, lambdas_99) tuple)
                     | xEnv_137 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word16,
                                     real64,
                                     word16) tuple)
datatype lambdas_152 = xEnv_139 of ((lambdas_154, lambdas_153, word16) tuple)
datatype lambdas_155 = xEnv_140 of ((word8,
                                     real64,
                                     word8,
                                     real64,
                                     lambdas_99,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_156 = xEnv_141 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word8,
                                     real64,
                                     word8) tuple)
datatype lambdas_157 = xEnv_142 of ((lambdas_99, t_9, real64, real64) tuple)
datatype lambdas_158 = xEnv_143 of ((real64, real64, lambdas_99) tuple)
datatype lambdas_159 = xEnv_145 of ((real64, real64, lambdas_99) tuple)
                     | xEnv_144 of ((real64,
                                     real64,
                                     lambdas_99,
                                     real64,
                                     word8,
                                     real64,
                                     word8) tuple)
datatype lambdas_160 = xEnv_146 of ((lambdas_162, lambdas_161, word8) tuple)
datatype lambdas_163 = xEnv_147 of ((t_9, lambdas_99) tuple)
datatype lambdas_164 = xEnv_148 of (lambdas_99)
datatype lambdas_165 = xEnv_56 of (unit)
datatype lambdas_166 = xEnv_150 of (unit) | xEnv_149 of (lambdas_99)
datatype lambdas_98 = classEnv_0 of ((word64, word64, word64) tuple)
datatype lambdas_167 = mkMaskEnv_0 of ((lambdas_106, word64) tuple)
datatype lambdas_168 = xEnv_151 of ((word64,
                                     real32,
                                     word64,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_170 = xEnv_152 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_171 = xEnv_153 of ((real32,
                                     word64,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_172 = xEnv_154 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word64,
                                     real32) tuple)
datatype lambdas_173 = xEnv_156 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word64,
                                     real32) tuple)
                     | xEnv_155 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_174 = xEnv_157 of ((lambdas_106, lambdas_105, word64) tuple)
datatype lambdas_175 = xEnv_158 of ((word32,
                                     real32,
                                     word32,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_176 = xEnv_159 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_177 = xEnv_160 of ((real32,
                                     word32,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_178 = xEnv_161 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word32,
                                     real32) tuple)
datatype lambdas_179 = xEnv_163 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word32,
                                     real32) tuple)
                     | xEnv_162 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_180 = xEnv_164 of ((lambdas_114, lambdas_113, word32) tuple)
datatype lambdas_181 = xEnv_165 of ((real32,
                                     word16,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_182 = xEnv_166 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word16,
                                     real32) tuple)
datatype lambdas_183 = xEnv_167 of ((real32,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_184 = xEnv_168 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     real32) tuple)
datatype lambdas_185 = xEnv_170 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     real32) tuple)
                     | xEnv_169 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word16,
                                     real32) tuple)
datatype lambdas_186 = xEnv_171 of ((lambdas_122, lambdas_121, word16) tuple)
datatype lambdas_187 = xEnv_172 of ((real32,
                                     word8,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_188 = xEnv_173 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word8,
                                     real32) tuple)
datatype lambdas_189 = xEnv_174 of ((real32,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_169) tuple)
datatype lambdas_190 = xEnv_175 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     real32) tuple)
datatype lambdas_191 = xEnv_177 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     real32) tuple)
                     | xEnv_176 of ((lambdas_169,
                                     real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word8,
                                     real32) tuple)
datatype lambdas_192 = xEnv_178 of ((lambdas_130, lambdas_129, word8) tuple)
datatype lambdas_193 = xEnv_179 of ((word64,
                                     real32,
                                     word64,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_194 = xEnv_180 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_195 = xEnv_181 of ((lambdas_99, t_9, real32, real32) tuple)
datatype lambdas_196 = xEnv_182 of ((real32, real32, lambdas_99) tuple)
datatype lambdas_197 = xEnv_184 of ((real32, real32, lambdas_99) tuple)
                     | xEnv_183 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_198 = xEnv_185 of ((lambdas_138, lambdas_137, word64) tuple)
datatype lambdas_199 = xEnv_186 of ((word32,
                                     real32,
                                     word32,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_200 = xEnv_187 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_201 = xEnv_188 of ((lambdas_99, t_9, real32, real32) tuple)
datatype lambdas_202 = xEnv_189 of ((real32, real32, lambdas_99) tuple)
datatype lambdas_203 = xEnv_191 of ((real32, real32, lambdas_99) tuple)
                     | xEnv_190 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_204 = xEnv_192 of ((lambdas_146, lambdas_145, word32) tuple)
datatype lambdas_205 = xEnv_193 of ((word16,
                                     real32,
                                     word16,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_206 = xEnv_194 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word16,
                                     real32,
                                     word16) tuple)
datatype lambdas_207 = xEnv_195 of ((lambdas_99, t_9, real32, real32) tuple)
datatype lambdas_208 = xEnv_196 of ((real32, real32, lambdas_99) tuple)
datatype lambdas_209 = xEnv_198 of ((real32, real32, lambdas_99) tuple)
                     | xEnv_197 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word16,
                                     real32,
                                     word16) tuple)
datatype lambdas_210 = xEnv_199 of ((lambdas_154, lambdas_153, word16) tuple)
datatype lambdas_211 = xEnv_200 of ((word8,
                                     real32,
                                     word8,
                                     real32,
                                     lambdas_99,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_212 = xEnv_201 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word8,
                                     real32,
                                     word8) tuple)
datatype lambdas_213 = xEnv_202 of ((lambdas_99, t_9, real32, real32) tuple)
datatype lambdas_214 = xEnv_203 of ((real32, real32, lambdas_99) tuple)
datatype lambdas_215 = xEnv_205 of ((real32, real32, lambdas_99) tuple)
                     | xEnv_204 of ((real32,
                                     real32,
                                     lambdas_99,
                                     real32,
                                     word8,
                                     real32,
                                     word8) tuple)
datatype lambdas_216 = xEnv_206 of ((lambdas_162, lambdas_161, word8) tuple)
datatype lambdas_217 = xEnv_207 of ((t_9, lambdas_99) tuple)
datatype lambdas_218 = xEnv_208 of (lambdas_99)
datatype lambdas_219 = xEnv_55 of (unit)
datatype lambdas_220 = xEnv_210 of (unit) | xEnv_209 of (lambdas_99)
datatype lambdas_169 = classEnv_1 of ((word32, word32, word32) tuple)
datatype lambdas_221 = mkMaskEnv_1 of ((lambdas_114, word32) tuple)
datatype lambdas_222 = xEnv_54 of (unit)
datatype lambdas_99 = setRoundingModeEnv_0 of ((lambdas_223, word32) tuple)
datatype lambdas_224 = xEnv_52 of (unit)
datatype lambdas_225 = loopEnv_20 of ((word64, word64, (word8) array) tuple)
datatype lambdas_226 = loopEnv_21 of (word64)
datatype lambdas_227 = loopEnv_22 of (word32)
datatype lambdas_228 = xEnv_51 of (unit)
datatype lambdas_229 = xEnv_211 of ((lambdas_31, list_3) tuple)
datatype lambdas_230 = ::?Env_0 of (unit)
datatype lambdas_231 = fromRepEnv_0 of (unit)
datatype lambdas_232 = toRepEnv_1 of (unit)
datatype lambdas_233 = toRepEnv_0 of (unit)
datatype lambdas_234 = newEnv_0 of (unit)
datatype lambdas_235 = subEnv_0 of (unit)
datatype lambdas_236 = xEnv_50 of (unit)
datatype lambdas_237 = xEnv_212 of (lambdas_31)
datatype lambdas_238 = loopEnv_23 of ((word64, (word8) array, word8) tuple)
datatype lambdas_105 = >>Env_0 of ((word32, word64) tuple)
datatype lambdas_106 = <<Env_0 of ((word32, word64) tuple)
datatype lambdas_239 = xEnv_49 of (unit)
datatype lambdas_240 = xEnv_48 of (unit)
datatype lambdas_241 = xEnv_47 of (unit)
datatype lambdas_242 = xEnv_215 of (unit)
                     | xEnv_214 of (unit)
                     | xEnv_213 of (unit)
                     | stEnv_1 of (unit)
datatype lambdas_243 = stEnv_0 of (unit)
datatype lambdas_113 = >>Env_1 of ((word32, word32) tuple)
datatype lambdas_114 = <<Env_1 of ((word32, word32) tuple)
datatype lambdas_121 = >>Env_2 of (word32)
datatype lambdas_122 = <<Env_2 of (word32)
datatype lambdas_129 = >>Env_3 of (word32)
datatype lambdas_130 = <<Env_3 of (word32)
datatype lambdas_244 = loopEnv_24 of ((word64,
                                       word64,
                                       word64,
                                       word64,
                                       (word8) array,
                                       lambdas_245,
                                       word64) tuple)
datatype lambdas_246 = xEnv_216 of (((bool) ref, bool) tuple)
datatype lambdas_247 = fmtEnv_0 of ((word32,
                                     lambdas_245,
                                     word64,
                                     word64,
                                     word64,
                                     (word8) array,
                                     lambdas_248,
                                     (bool) ref) tuple)
datatype lambdas_137 = >>Env_4 of ((word32, word64) tuple)
datatype lambdas_138 = <<Env_4 of ((word32, word64) tuple)
datatype lambdas_249 = loopEnv_25 of ((word32,
                                       word32,
                                       word32,
                                       word32,
                                       (word8) array,
                                       lambdas_250,
                                       word32) tuple)
datatype lambdas_251 = xEnv_217 of (((bool) ref, bool) tuple)
datatype lambdas_145 = >>Env_5 of ((word32, word32) tuple)
datatype lambdas_146 = <<Env_5 of ((word32, word32) tuple)
datatype lambdas_153 = >>Env_6 of ((word32, word16) tuple)
datatype lambdas_154 = <<Env_6 of ((word32, word16) tuple)
datatype lambdas_161 = >>Env_7 of ((word32, word8) tuple)
datatype lambdas_162 = <<Env_7 of ((word32, word8) tuple)
datatype lambdas_252 = xEnv_218 of (exn)
datatype lambdas_253 = digitToCharEnv_0 of (unit)
datatype lambdas_254 = loopEnv_26 of ((word64, (bool) array) tuple)
datatype lambdas_255 = loopEnv_27 of (word8)
datatype lambdas_256 = loopEnv_28 of ((word64, list_1, (t_0) array) tuple)
datatype lambdas_257 = loopEnv_29 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_258 = loopEnv_30 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_259 = loopEnv_31 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_260 = rangeEnv_0 of (unit)
datatype lambdas_261 = radixToIntEnv_0 of (unit)
datatype lambdas_262 = xEnv_46 of (unit)
datatype lambdas_263 = xEnv_45 of (unit)
datatype lambdas_264 = xEnv_219 of (exn)
datatype lambdas_265 = updateEnv_0 of (unit)
datatype lambdas_266 = xEnv_220 of (exn)
datatype lambdas_267 = baseEnv_2 of (unit)
datatype lambdas_268 = xEnv_221 of (exn)
datatype lambdas_269 = sliceEnv_0 of (unit)
datatype lambdas_270 = loopEnv_32 of ((word64, (word8) array, word8) tuple)
datatype lambdas_271 = xEnv_222 of (exn)
datatype lambdas_272 = lengthEnv_1 of (unit)
datatype lambdas_273 = loopEnv_33 of ((word64,
                                       word64,
                                       word64,
                                       (word8) vector,
                                       (word8) array) tuple)
datatype lambdas_274 = loopEnv_34 of ((word8) array)
datatype lambdas_275 = xEnv_223 of (exn)
datatype lambdas_276 = loopEnv_0 of (unit)
datatype lambdas_277 = loopEnv_35 of ((word64, (word8) array) tuple)
datatype lambdas_278 = xEnv_224 of (exn)
datatype lambdas_279 = baseEnv_1 of (unit)
datatype lambdas_280 = xEnv_225 of (exn)
datatype lambdas_281 = fromIntForLengthEnv_0 of (unit)
datatype lambdas_282 = findEnv_0 of (exn)
datatype lambdas_283 = loopEnv_36 of (word32)
datatype lambdas_284 = xEnv_226 of ((word64,
                                     word32,
                                     word32,
                                     word32,
                                     lambdas_250,
                                     word32,
                                     word32,
                                     word32,
                                     (word32, lambdas_285) tuple) tuple)
datatype lambdas_285 = xEnv_227 of ((word32,
                                     lambdas_245,
                                     word64,
                                     word64,
                                     word64,
                                     radix_0,
                                     (word8) array,
                                     lambdas_248,
                                     (bool) ref) tuple)
datatype lambdas_248 = xEnv_228 of ((lambdas_286, word32) tuple)
datatype lambdas_287 = mkBigCvtEnv_0 of ((word64,
                                          word32,
                                          word32,
                                          word32,
                                          lambdas_250,
                                          word32,
                                          word32,
                                          word32) tuple)
datatype lambdas_288 = loopEnv_37 of ((word64) array)
datatype lambdas_289 = loopEnv_38 of ((word64, word32) tuple)
datatype lambdas_290 = addTagEnv_0 of (unit)
datatype lambdas_291 = dropTagCoerceEnv_0 of (unit)
datatype lambdas_292 = numLimbsEnv_0 of (unit)
datatype lambdas_293 = areSmallEnv_0 of (unit)
datatype lambdas_294 = isSmallEnv_0 of (unit)
datatype lambdas_295 = baseEnv_0 of (unit)
datatype lambdas_296 = fullEnv_1 of (unit)
datatype lambdas_297 = lengthEnv_0 of (unit)
datatype lambdas_298 = valOfEnv_1 of (unit)
datatype lambdas_299 = loopEnv_39 of ((word64,
                                       word64,
                                       (word8) array,
                                       (word8) array) tuple)
datatype lambdas_300 = vectorEnv_0 of (unit)
datatype lambdas_301 = fullEnv_0 of (unit)
datatype lambdas_302 = unsafeArrayAllocEnv_0 of (unit)
datatype lambdas_303 = valOfEnv_0 of (unit)
datatype lambdas_304 = xEnv_44 of (unit)
datatype lambdas_305 = >=Env_5 of (unit)
datatype lambdas_306 = >Env_4 of (unit)
datatype lambdas_307 = ltuEnv_0 of (unit)
datatype lambdas_245 = quotEnv_0 of ((word64, word64, word64) tuple)
datatype lambdas_308 = xEnv_43 of (unit)
datatype lambdas_309 = xEnv_42 of (unit)
datatype lambdas_310 = xEnv_41 of (unit)
datatype lambdas_311 = xEnv_40 of (unit)
datatype lambdas_312 = xEnv_39 of (unit)
datatype lambdas_313 = xEnv_38 of (unit)
datatype lambdas_314 = xEnv_37 of (unit)
datatype lambdas_315 = xEnv_36 of (unit)
datatype lambdas_316 = xEnv_35 of (unit)
datatype lambdas_317 = xEnv_34 of (unit)
datatype lambdas_318 = xEnv_229 of (exn)
datatype lambdas_319 = xEnv_33 of (unit)
datatype lambdas_320 = castFromWordEnv_1 of (unit)
datatype lambdas_321 = castFromWordEnv_0 of (unit)
datatype lambdas_322 = >=Env_4 of (unit)
datatype lambdas_323 = >Env_3 of (unit)
datatype lambdas_324 = toWord64UnsafeEnv_1 of (unit)
datatype lambdas_325 = toWord32UnsafeEnv_1 of (unit)
datatype lambdas_326 = toWord16UnsafeEnv_1 of (unit)
datatype lambdas_327 = toWord8UnsafeEnv_1 of (unit)
datatype lambdas_328 = toReal32UnsafeEnv_1 of (unit)
datatype lambdas_329 = toInt64UnsafeEnv_1 of (unit)
datatype lambdas_330 = toInt32UnsafeEnv_1 of (unit)
datatype lambdas_331 = toInt16UnsafeEnv_1 of (unit)
datatype lambdas_332 = toInt8UnsafeEnv_1 of (unit)
datatype lambdas_333 = fromWord64UnsafeEnv_1 of (unit)
datatype lambdas_334 = fromWord32UnsafeEnv_1 of (unit)
datatype lambdas_335 = fromWord16UnsafeEnv_1 of (unit)
datatype lambdas_336 = fromWord8UnsafeEnv_1 of (unit)
datatype lambdas_337 = fromReal32UnsafeEnv_1 of (unit)
datatype lambdas_338 = fromInt64UnsafeEnv_1 of (unit)
datatype lambdas_339 = fromInt32UnsafeEnv_1 of (unit)
datatype lambdas_340 = fromInt16UnsafeEnv_1 of (unit)
datatype lambdas_341 = fromInt8UnsafeEnv_1 of (unit)
datatype lambdas_342 = roundEnv_1 of (unit)
datatype lambdas_343 = <=Env_3 of (unit)
datatype lambdas_344 = <Env_4 of (unit)
datatype lambdas_345 = ~Env_1 of (unit)
datatype lambdas_346 = -Env_2 of (unit)
datatype lambdas_347 = +Env_2 of (unit)
datatype lambdas_348 = >=Env_3 of (unit)
datatype lambdas_349 = >Env_2 of (unit)
datatype lambdas_350 = toWord64UnsafeEnv_0 of (unit)
datatype lambdas_351 = toWord32UnsafeEnv_0 of (unit)
datatype lambdas_352 = toWord16UnsafeEnv_0 of (unit)
datatype lambdas_353 = toWord8UnsafeEnv_0 of (unit)
datatype lambdas_354 = toReal32UnsafeEnv_0 of (unit)
datatype lambdas_355 = toInt64UnsafeEnv_0 of (unit)
datatype lambdas_356 = toInt32UnsafeEnv_0 of (unit)
datatype lambdas_357 = toInt16UnsafeEnv_0 of (unit)
datatype lambdas_358 = toInt8UnsafeEnv_0 of (unit)
datatype lambdas_359 = fromWord64UnsafeEnv_0 of (unit)
datatype lambdas_360 = fromWord32UnsafeEnv_0 of (unit)
datatype lambdas_361 = fromWord16UnsafeEnv_0 of (unit)
datatype lambdas_362 = fromWord8UnsafeEnv_0 of (unit)
datatype lambdas_363 = fromReal32UnsafeEnv_0 of (unit)
datatype lambdas_364 = fromInt64UnsafeEnv_0 of (unit)
datatype lambdas_365 = fromInt32UnsafeEnv_0 of (unit)
datatype lambdas_366 = fromInt16UnsafeEnv_0 of (unit)
datatype lambdas_367 = fromInt8UnsafeEnv_0 of (unit)
datatype lambdas_368 = roundEnv_0 of (unit)
datatype lambdas_369 = <=Env_2 of (unit)
datatype lambdas_370 = <Env_3 of (unit)
datatype lambdas_371 = ~Env_0 of (unit)
datatype lambdas_372 = -Env_1 of (unit)
datatype lambdas_373 = +Env_1 of (unit)
datatype lambdas_374 = <=Env_1 of (unit)
datatype lambdas_375 = idFromWord8Env_0 of (unit)
datatype lambdas_376 = toWordEnv_0 of (unit)
datatype lambdas_377 = fromWordEnv_1 of (unit)
datatype lambdas_378 = printEnv_0 of (unit)
datatype lambdas_379 = atomicEndEnv_0 of (unit)
datatype lambdas_380 = atomicBeginEnv_0 of (unit)
datatype lambdas_381 = atomicStateEnv_0 of (unit)
datatype lambdas_382 = fromWordEnv_0 of (unit)
datatype lambdas_383 = bugEnv_0 of (unit)
datatype lambdas_384 = gcStateEnv_0 of (unit)
datatype lambdas_385 = xEnv_32 of (unit)
datatype lambdas_386 = xEnv_31 of (unit)
datatype lambdas_387 = xEnv_30 of (unit)
datatype lambdas_388 = xEnv_29 of (unit)
datatype lambdas_389 = xEnv_28 of (unit)
datatype lambdas_390 = xEnv_27 of (unit)
datatype lambdas_391 = xEnv_26 of (unit)
datatype lambdas_392 = xEnv_25 of (unit)
datatype lambdas_393 = >=Env_2 of (unit)
datatype lambdas_394 = >Env_1 of (unit)
datatype lambdas_395 = <Env_2 of (unit)
datatype lambdas_396 = xEnv_24 of (unit)
datatype lambdas_397 = -!Env_1 of (unit)
datatype lambdas_398 = xEnv_23 of (unit)
datatype lambdas_399 = ~!Env_1 of (unit)
datatype lambdas_400 = xEnv_22 of (unit)
datatype lambdas_401 = +!Env_1 of (unit)
datatype lambdas_402 = >=Env_1 of (unit)
datatype lambdas_403 = >Env_0 of (unit)
datatype lambdas_404 = <=Env_0 of (unit)
datatype lambdas_405 = <Env_1 of (unit)
datatype lambdas_406 = remUnsafeEnv_0 of (unit)
datatype lambdas_407 = xEnv_21 of (unit)
datatype lambdas_408 = -!Env_0 of (unit)
datatype lambdas_409 = xEnv_20 of (unit)
datatype lambdas_410 = ~!Env_0 of (unit)
datatype lambdas_411 = xEnv_19 of (unit)
datatype lambdas_412 = +!Env_0 of (unit)
datatype lambdas_413 = >>?Env_3 of (unit)
datatype lambdas_414 = ~>>?Env_0 of (unit)
datatype lambdas_415 = notbEnv_3 of (unit)
datatype lambdas_416 = *Env_0 of (unit)
datatype lambdas_417 = <<?Env_3 of (unit)
datatype lambdas_418 = andbEnv_1 of (unit)
datatype lambdas_419 = +Env_0 of (unit)
datatype lambdas_420 = >=Env_0 of (unit)
datatype lambdas_421 = <Env_0 of (unit)
datatype lambdas_422 = xorbEnv_0 of (unit)
datatype lambdas_423 = -Env_0 of (unit)
datatype lambdas_424 = >>?Env_2 of (unit)
datatype lambdas_425 = notbEnv_2 of (unit)
datatype lambdas_426 = <<?Env_2 of (unit)
datatype lambdas_427 = andbEnv_0 of (unit)
datatype lambdas_428 = >>?Env_1 of (unit)
datatype lambdas_429 = notbEnv_1 of (unit)
datatype lambdas_430 = <<?Env_1 of (unit)
datatype lambdas_431 = >>?Env_0 of (unit)
datatype lambdas_432 = notbEnv_0 of (unit)
datatype lambdas_433 = <<?Env_0 of (unit)
datatype lambdas_434 = sextdFromInt64ToInt64Env_0 of (unit)
datatype lambdas_435 = sextdFromInt64ToInt32Env_0 of (unit)
datatype lambdas_436 = sextdFromInt32ToWord64Env_0 of (unit)
datatype lambdas_437 = sextdFromInt32ToWord32Env_0 of (unit)
datatype lambdas_438 = sextdFromInt32ToInt64Env_0 of (unit)
datatype lambdas_439 = sextdFromInt32ToInt32Env_0 of (unit)
datatype lambdas_440 = sextdFromInt16ToInt64Env_0 of (unit)
datatype lambdas_441 = sextdFromInt8ToInt64Env_0 of (unit)
datatype lambdas_442 = zextdFromWord64ToInt64Env_0 of (unit)
datatype lambdas_443 = zextdFromWord64ToInt32Env_0 of (unit)
datatype lambdas_444 = zextdFromWord32ToWord64Env_0 of (unit)
datatype lambdas_445 = zextdFromWord32ToWord32Env_0 of (unit)
datatype lambdas_446 = zextdFromInt64ToWord64Env_0 of (unit)
datatype lambdas_447 = zextdFromInt32ToWord64Env_0 of (unit)
datatype lambdas_448 = zextdFromInt32ToWord32Env_0 of (unit)
datatype lambdas_449 = zextdFromInt32ToInt64Env_0 of (unit)
datatype lambdas_450 = zextdFromInt32ToInt32Env_0 of (unit)
datatype lambdas_451 = zextdFromInt32ToInt16Env_0 of (unit)
datatype lambdas_452 = zextdFromInt32ToInt8Env_0 of (unit)
datatype lambdas_453 = idFromWord64ToInt64Env_0 of (unit)
datatype lambdas_454 = idFromWord32ToInt32Env_0 of (unit)
datatype lambdas_455 = idFromWord16ToInt16Env_0 of (unit)
datatype lambdas_456 = idFromWord8ToInt8Env_0 of (unit)
datatype lambdas_457 = idFromInt64ToWord64Env_0 of (unit)
datatype lambdas_458 = idFromInt32ToWord32Env_0 of (unit)
datatype lambdas_459 = idFromInt16ToWord16Env_0 of (unit)
datatype lambdas_460 = idFromInt8ToWord8Env_0 of (unit)
datatype lambdas_461 = xEnv_18 of (unit)
datatype lambdas_462 = xEnv_17 of (unit)
datatype lambdas_463 = xEnv_16 of (unit)
datatype lambdas_464 = xEnv_15 of (unit)
datatype lambdas_465 = xEnv_14 of (unit)
datatype lambdas_466 = xEnv_13 of (unit)
datatype lambdas_467 = xEnv_12 of (unit)
datatype lambdas_468 = xEnv_11 of (unit)
datatype lambdas_469 = xEnv_10 of (unit)
datatype lambdas_470 = xEnv_9 of (unit)
datatype lambdas_471 = xEnv_8 of (unit)
datatype lambdas_472 = xEnv_7 of (unit)
datatype lambdas_473 = xEnv_6 of (unit)
datatype lambdas_474 = xEnv_5 of (unit)
datatype lambdas_475 = xEnv_4 of (unit)
datatype lambdas_476 = xEnv_3 of (unit)
datatype lambdas_477 = xEnv_2 of (unit)
datatype lambdas_478 = nameEnv_0 of (unit)
datatype lambdas_479 = notEnv_0 of (unit)
datatype lambdas_480 = xEnv_231 of (unit)
                     | xEnv_230 of (unit)
                     | defaultTopLevelSuffixEnv_1 of ((lambdas_30,
                                                       word32,
                                                       word32) tuple)
datatype lambdas_481 = xEnv_1 of (unit)
datatype lambdas_482 = xEnv_233 of (unit)
                     | xEnv_232 of (unit)
                     | defaultTopLevelHandlerEnv_1 of ((lambdas_32,
                                                        lambdas_31,
                                                        lambdas_30,
                                                        word32) tuple)
datatype lambdas_30 = exitEnv_0 of (((bool) ref,
                                     (list_2) ref,
                                     lambdas_483,
                                     lambdas_31) tuple)
datatype lambdas_483 = xEnv_234 of ((word32,
                                     lambdas_250,
                                     word32,
                                     word32,
                                     word32,
                                     (word8) array,
                                     lambdas_484,
                                     (bool) ref) tuple)
datatype lambdas_484 = xEnv_235 of ((lambdas_286, word32) tuple)
datatype lambdas_286 = newEnv_1 of (lambdas_485)
datatype lambdas_250 = quotEnv_1 of ((word32, word32, word32) tuple)
datatype lambdas_486 = xEnv_0 of (unit)
datatype lambdas_10 = closeEnv_0 of ((lambdas_45,
                                      (lambdas_46) ref,
                                      (bool) ref,
                                      word32,
                                      (bool) ref) tuple)
datatype lambdas_9 = xEnv_236 of ((word32,
                                   lambdas_489,
                                   lambdas_488,
                                   lambdas_487,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_8 = xEnv_237 of ((lambdas_489,
                                   lambdas_488,
                                   lambdas_487,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_489 = putVEnv_0 of ((word32,
                                      (bool) ref,
                                      (lambdas_46) ref,
                                      lambdas_54,
                                      lambdas_490) tuple)
datatype lambdas_7 = setPosEnv_0 of (((bool) ref, lambdas_64, (word64) ref) tuple)
datatype lambdas_6 = xEnv_238 of ((word32,
                                   lambdas_491,
                                   lambdas_488,
                                   lambdas_487,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_5 = xEnv_239 of ((lambdas_491,
                                   lambdas_488,
                                   lambdas_487,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_487 = xEnv_240 of (word32)
datatype lambdas_488 = setflEnv_0 of ((word32,
                                       (bool) ref,
                                       (lambdas_46) ref,
                                       lambdas_45) tuple)
datatype lambdas_45 = raiseSysEnv_0 of (lambdas_223)
datatype lambdas_491 = putAEnv_0 of ((word32,
                                      (bool) ref,
                                      (lambdas_46) ref,
                                      lambdas_54,
                                      lambdas_490) tuple)
datatype lambdas_490 = incPosEnv_0 of ((word64) ref)
datatype lambdas_46 = xEnv_53 of (unit)
datatype lambdas_4 = endPosEnv_1 of (((bool) ref, lambdas_66) tuple)
                   | getPosEnv_1 of ((word64) ref)
                   | verifyPosEnv_1 of ((word64, lambdas_64, (word64) ref) tuple)
datatype lambdas_64 = lseekEnv_0 of (lambdas_54)
datatype lambdas_54 = raiseSysEnv_1 of (lambdas_223)
datatype lambdas_66 = xEnv_241 of ((lambdas_223, lambdas_92) tuple)
datatype lambdas_92 = xEnv_242 of ((lambdas_493, intInf, lambdas_492) tuple)
datatype lambdas_492 = sextdFromInt64Env_0 of ((word32, word64) tuple)
datatype lambdas_493 = reserveEnv_0 of ((word64, word64) tuple)
datatype lambdas_223 = errorMsgEnv_0 of ((cpointer, lambdas_485) tuple)
datatype lambdas_3 = xEnv_245 of (((list_6) ref,
                                   lambdas_27,
                                   (word8) vector,
                                   lambdas_26) tuple)
                   | xEnv_244 of ((list_5) ref)
                   | xEnv_243 of ((lambdas_23, (list_6) ref) tuple)
datatype lambdas_23 = initEnv_0 of ((lambdas_26, (t_23) ref) tuple)
datatype lambdas_26 = currentEnv_0 of ((t_23) ref)
datatype lambdas_27 = appendEnv_0 of ((lambdas_495, lambdas_494) tuple)
datatype lambdas_2 = 
datatype lambdas_1 = xEnv_246 of ((word32, word32, word8, word8) tuple)
datatype lambdas_0 = xEnv_249 of ((lambdas_31, list_3) tuple)
                   | xEnv_248 of (lambdas_31)
                   | xEnv_247 of ((lambdas_31, lambdas_32) tuple)
datatype lambdas_32 = exnMessageEnv_0 of ((list_0) ref)
datatype lambdas_31 = concatEnv_0 of ((lambdas_494, lambdas_485, lambdas_495) tuple)
datatype lambdas_495 = sequenceEnv_0 of (lambdas_494)
datatype lambdas_485 = arrayAllocEnv_0 of (word64)
datatype lambdas_494 = arrayAllocEnv_1 of (word64)


(* Globals: *)
val x_0: (word8) vector = "toplevel handler not installed"
val x_1: unit = ()
val x_2: lambdas_486 = con xEnv_0 (x_1 (*()*))
val x_3: (word8) vector = "toplevel suffix not installed"
val x_4: unit = ()
val x_5: lambdas_481 = con xEnv_1 (x_4 (*()*))
val tuple_0: unit = ()
val not_0: lambdas_479 = con notEnv_0 (tuple_0 (*()*))
val x_6: bool = con false
val x_7: bool = con true
val bufSize_0: word32 = 0x1000:w32
val x_8: (word8) vector = "UNKNOWN"
val x_9: (word8) vector = "Poll"
val x_10: (word8) vector = "DoublyRedirected"
val x_11: (word8) vector = "MisuseOfForget"
val x_12: (word8) vector = "Interrupt"
val x_13: (word8) vector = "Io"
val x_14: (word8) vector = "Ord"
val x_15: (word8) vector = "Ln"
val x_16: (word8) vector = "Sqrt"
val x_17: (word8) vector = "InvalidArc"
val x_18: (word8) vector = "Path"
val x_19: (word8) vector = "RandomAccessNotSupported"
val x_20: (word8) vector = "NonblockingNotSupported"
val x_21: (word8) vector = "Io"
val x_22: (word8) vector = "ClosedStream"
val x_23: (word8) vector = "BlockingNotSupported"
val x_24: (word8) vector = "Date"
val x_25: (word8) vector = "Time"
val x_26: (word8) vector = "Bad"
val x_27: (word8) vector = "Bad"
val x_28: (word8) vector = "Unordered"
val x_29: (word8) vector = "SysErr"
val x_30: (word8) vector = "UnequalLengths"
val x_31: (word8) vector = "Empty"
val x_32: (word8) vector = "Option"
val x_33: (word8) vector = "Fail"
val x_34: (word8) vector = "Chr"
val x_35: (word8) vector = "CreateVectorNotFull"
val x_36: (word8) vector = "CreateAlreadyGotVector"
val x_37: (word8) vector = "Vector_updateUnsafe"
val x_38: (word8) vector = "Vector_uninitUnsafe"
val x_39: (word8) vector = "Vector_uninitIsNop"
val x_40: (word8) vector = "CreateVectorNotFull"
val x_41: (word8) vector = "CreateAlreadyGotVector"
val x_42: (word8) vector = "Subscript"
val x_43: (word8) vector = "Span"
val x_44: (word8) vector = "Size"
val x_45: (word8) vector = "Overflow"
val x_46: (word8) vector = "Fail32"
val x_47: (word8) vector = "Fail16"
val x_48: (word8) vector = "Fail8"
val x_49: (word8) vector = "Domain"
val x_50: (word8) vector = "Div"
val x_51: (word8) vector = "Match"
val x_52: (word8) vector = "Bind"
val x_53: unit = ()
val name_0: lambdas_478 = con nameEnv_0 (x_53 (*()*))
val x_54: unit = ()
val x_55: (unit) ref = prim Ref_ref[unit] (x_54 (*()*))
val x_56: exn = con Div_0 (x_55)
val x_57: unit = ()
val x_58: (unit) ref = prim Ref_ref[unit] (x_57 (*()*))
val x_59: exn = con Domain_0 (x_58)
val x_60: unit = ()
val x_1446: (unit) ref = prim Ref_ref[unit] (x_60 (*()*))
val x_61: unit = ()
val x_62: (unit) ref = prim Ref_ref[unit] (x_61 (*()*))
val x_63: exn = con Overflow_0 (x_62)
val x_64: unit = ()
val x_65: (unit) ref = prim Ref_ref[unit] (x_64 (*()*))
val x_66: exn = con Size_0 (x_65)
val x_67: unit = ()
val x_68: (unit) ref = prim Ref_ref[unit] (x_67 (*()*))
val x_69: exn = con Subscript_0 (x_68)
val x_70: unit = ()
val x_71: lambdas_477 = con xEnv_2 (x_70 (*()*))
val x_72: unit = ()
val x_73: lambdas_476 = con xEnv_3 (x_72 (*()*))
val x_74: unit = ()
val x_75: lambdas_475 = con xEnv_4 (x_74 (*()*))
val x_76: unit = ()
val x_77: lambdas_474 = con xEnv_5 (x_76 (*()*))
val x_78: unit = ()
val x_79: lambdas_473 = con xEnv_6 (x_78 (*()*))
val x_80: unit = ()
val x_81: lambdas_472 = con xEnv_7 (x_80 (*()*))
val x_82: unit = ()
val x_83: lambdas_471 = con xEnv_8 (x_82 (*()*))
val x_84: unit = ()
val x_85: lambdas_470 = con xEnv_9 (x_84 (*()*))
val x_86: unit = ()
val x_87: lambdas_469 = con xEnv_10 (x_86 (*()*))
val x_88: unit = ()
val x_89: lambdas_468 = con xEnv_11 (x_88 (*()*))
val x_90: unit = ()
val x_91: lambdas_467 = con xEnv_12 (x_90 (*()*))
val x_92: unit = ()
val x_93: lambdas_466 = con xEnv_13 (x_92 (*()*))
val x_94: unit = ()
val x_95: lambdas_465 = con xEnv_14 (x_94 (*()*))
val x_96: unit = ()
val x_97: lambdas_464 = con xEnv_15 (x_96 (*()*))
val x_98: unit = ()
val x_99: lambdas_463 = con xEnv_16 (x_98 (*()*))
val x_100: unit = ()
val x_101: lambdas_462 = con xEnv_17 (x_100 (*()*))
val x_102: unit = ()
val x_103: lambdas_461 = con xEnv_18 (x_102 (*()*))
val x_104: unit = ()
val idFromInt8ToWord8_0: lambdas_460 = con idFromInt8ToWord8Env_0 (x_104 (*()*))
val x_105: unit = ()
val idFromInt16ToWord16_0: lambdas_459 =
  con idFromInt16ToWord16Env_0 (x_105 (*()*))
val x_106: unit = ()
val idFromInt32ToWord32_0: lambdas_458 =
  con idFromInt32ToWord32Env_0 (x_106 (*()*))
val x_107: unit = ()
val idFromInt64ToWord64_0: lambdas_457 =
  con idFromInt64ToWord64Env_0 (x_107 (*()*))
val x_108: unit = ()
val idFromWord8ToInt8_0: lambdas_456 = con idFromWord8ToInt8Env_0 (x_108 (*()*))
val x_109: unit = ()
val idFromWord16ToInt16_0: lambdas_455 =
  con idFromWord16ToInt16Env_0 (x_109 (*()*))
val x_110: unit = ()
val idFromWord32ToInt32_0: lambdas_454 =
  con idFromWord32ToInt32Env_0 (x_110 (*()*))
val x_111: unit = ()
val idFromWord64ToInt64_0: lambdas_453 =
  con idFromWord64ToInt64Env_0 (x_111 (*()*))
val x_112: unit = ()
val zextdFromInt32ToInt8_0: lambdas_452 =
  con zextdFromInt32ToInt8Env_0 (x_112 (*()*))
val x_113: unit = ()
val zextdFromInt32ToInt16_0: lambdas_451 =
  con zextdFromInt32ToInt16Env_0 (x_113 (*()*))
val x_114: unit = ()
val zextdFromInt32ToInt32_0: lambdas_450 =
  con zextdFromInt32ToInt32Env_0 (x_114 (*()*))
val x_115: unit = ()
val zextdFromInt32ToInt64_0: lambdas_449 =
  con zextdFromInt32ToInt64Env_0 (x_115 (*()*))
val x_116: unit = ()
val zextdFromInt32ToWord32_0: lambdas_448 =
  con zextdFromInt32ToWord32Env_0 (x_116 (*()*))
val x_117: unit = ()
val zextdFromInt32ToWord64_0: lambdas_447 =
  con zextdFromInt32ToWord64Env_0 (x_117 (*()*))
val x_118: unit = ()
val zextdFromInt64ToWord64_0: lambdas_446 =
  con zextdFromInt64ToWord64Env_0 (x_118 (*()*))
val x_119: unit = ()
val zextdFromWord32ToWord32_0: lambdas_445 =
  con zextdFromWord32ToWord32Env_0 (x_119 (*()*))
val x_120: unit = ()
val zextdFromWord32ToWord64_0: lambdas_444 =
  con zextdFromWord32ToWord64Env_0 (x_120 (*()*))
val x_121: unit = ()
val zextdFromWord64ToInt32_0: lambdas_443 =
  con zextdFromWord64ToInt32Env_0 (x_121 (*()*))
val x_122: unit = ()
val zextdFromWord64ToInt64_0: lambdas_442 =
  con zextdFromWord64ToInt64Env_0 (x_122 (*()*))
val x_123: unit = ()
val sextdFromInt8ToInt64_0: lambdas_441 =
  con sextdFromInt8ToInt64Env_0 (x_123 (*()*))
val x_124: unit = ()
val sextdFromInt16ToInt64_0: lambdas_440 =
  con sextdFromInt16ToInt64Env_0 (x_124 (*()*))
val x_125: unit = ()
val sextdFromInt32ToInt32_0: lambdas_439 =
  con sextdFromInt32ToInt32Env_0 (x_125 (*()*))
val x_126: unit = ()
val sextdFromInt32ToInt64_0: lambdas_438 =
  con sextdFromInt32ToInt64Env_0 (x_126 (*()*))
val x_127: unit = ()
val sextdFromInt32ToWord32_0: lambdas_437 =
  con sextdFromInt32ToWord32Env_0 (x_127 (*()*))
val x_128: unit = ()
val sextdFromInt32ToWord64_0: lambdas_436 =
  con sextdFromInt32ToWord64Env_0 (x_128 (*()*))
val x_129: unit = ()
val sextdFromInt64ToInt32_0: lambdas_435 =
  con sextdFromInt64ToInt32Env_0 (x_129 (*()*))
val x_130: unit = ()
val sextdFromInt64ToInt64_0: lambdas_434 =
  con sextdFromInt64ToInt64Env_0 (x_130 (*()*))
val sizeInBits_0: word32 = 0x1:w32
val sizeInBits_1: word32 = 0x2:w32
val sizeInBits_2: word32 = 0x3:w32
val sizeInBits_3: word32 = 0x4:w32
val sizeInBits_4: word32 = 0x5:w32
val sizeInBits_5: word32 = 0x6:w32
val sizeInBits_6: word32 = 0x7:w32
val sizeInBits_7: word32 = 0x8:w32
val x_131: unit = ()
val <<?_0: lambdas_433 = con <<?Env_0 (x_131 (*()*))
val x_132: unit = ()
val notb_0: lambdas_432 = con notbEnv_0 (x_132 (*()*))
val x_133: unit = ()
val >>?_0: lambdas_431 = con >>?Env_0 (x_133 (*()*))
val sizeInBits_8: word32 = 0x9:w32
val sizeInBits_9: word32 = 0xA:w32
val sizeInBits_10: word32 = 0xB:w32
val sizeInBits_11: word32 = 0xC:w32
val sizeInBits_12: word32 = 0xD:w32
val sizeInBits_13: word32 = 0xE:w32
val sizeInBits_14: word32 = 0xF:w32
val sizeInBits_15: word32 = 0x10:w32
val x_134: unit = ()
val <<?_1: lambdas_430 = con <<?Env_1 (x_134 (*()*))
val x_135: unit = ()
val notb_1: lambdas_429 = con notbEnv_1 (x_135 (*()*))
val x_136: unit = ()
val >>?_1: lambdas_428 = con >>?Env_1 (x_136 (*()*))
val sizeInBits_16: word32 = 0x11:w32
val sizeInBits_17: word32 = 0x12:w32
val sizeInBits_18: word32 = 0x13:w32
val sizeInBits_19: word32 = 0x14:w32
val sizeInBits_20: word32 = 0x15:w32
val sizeInBits_21: word32 = 0x16:w32
val sizeInBits_22: word32 = 0x17:w32
val sizeInBits_23: word32 = 0x18:w32
val sizeInBits_24: word32 = 0x19:w32
val sizeInBits_25: word32 = 0x1A:w32
val sizeInBits_26: word32 = 0x1B:w32
val sizeInBits_27: word32 = 0x1C:w32
val sizeInBits_28: word32 = 0x1D:w32
val sizeInBits_29: word32 = 0x1E:w32
val sizeInBits_30: word32 = 0x1F:w32
val sizeInBits_31: word32 = 0x20:w32
val x_137: unit = ()
val andb_0: lambdas_427 = con andbEnv_0 (x_137 (*()*))
val x_138: unit = ()
val <<?_2: lambdas_426 = con <<?Env_2 (x_138 (*()*))
val x_139: unit = ()
val notb_2: lambdas_425 = con notbEnv_2 (x_139 (*()*))
val x_140: unit = ()
val >>?_2: lambdas_424 = con >>?Env_2 (x_140 (*()*))
val x_141: unit = ()
val -_0: lambdas_423 = con -Env_0 (x_141 (*()*))
val x_142: unit = ()
val xorb_0: lambdas_422 = con xorbEnv_0 (x_142 (*()*))
val x_143: unit = ()
val <_0: lambdas_421 = con <Env_0 (x_143 (*()*))
val tuple_1: unit = ()
val >=_0: lambdas_420 = con >=Env_0 (tuple_1 (*()*))
val sizeInBits_32: word32 = 0x40:w32
val x_144: unit = ()
val +_0: lambdas_419 = con +Env_0 (x_144 (*()*))
val x_145: unit = ()
val andb_1: lambdas_418 = con andbEnv_1 (x_145 (*()*))
val x_146: unit = ()
val <<?_3: lambdas_417 = con <<?Env_3 (x_146 (*()*))
val x_147: unit = ()
val *_0: lambdas_416 = con *Env_0 (x_147 (*()*))
val x_148: unit = ()
val notb_3: lambdas_415 = con notbEnv_3 (x_148 (*()*))
val x_149: unit = ()
val ~>>?_0: lambdas_414 = con ~>>?Env_0 (x_149 (*()*))
val x_150: unit = ()
val >>?_3: lambdas_413 = con >>?Env_3 (x_150 (*()*))
val sizeInBits_33: word32 = 0x1:w32
val sizeInBits_34: word32 = 0x2:w32
val sizeInBits_35: word32 = 0x3:w32
val sizeInBits_36: word32 = 0x4:w32
val sizeInBits_37: word32 = 0x5:w32
val sizeInBits_38: word32 = 0x6:w32
val sizeInBits_39: word32 = 0x7:w32
val sizeInBits_40: word32 = 0x8:w32
val precision_0: t_0 = con SOME_0 (sizeInBits_40 (*0x8:w32*))
val sizeInBits_41: word32 = 0x9:w32
val sizeInBits_42: word32 = 0xA:w32
val sizeInBits_43: word32 = 0xB:w32
val sizeInBits_44: word32 = 0xC:w32
val sizeInBits_45: word32 = 0xD:w32
val sizeInBits_46: word32 = 0xE:w32
val sizeInBits_47: word32 = 0xF:w32
val sizeInBits_48: word32 = 0x10:w32
val precision_1: t_0 = con SOME_0 (sizeInBits_48 (*0x10:w32*))
val sizeInBits_49: word32 = 0x11:w32
val sizeInBits_50: word32 = 0x12:w32
val sizeInBits_51: word32 = 0x13:w32
val sizeInBits_52: word32 = 0x14:w32
val sizeInBits_53: word32 = 0x15:w32
val sizeInBits_54: word32 = 0x16:w32
val sizeInBits_55: word32 = 0x17:w32
val sizeInBits_56: word32 = 0x18:w32
val sizeInBits_57: word32 = 0x19:w32
val sizeInBits_58: word32 = 0x1A:w32
val sizeInBits_59: word32 = 0x1B:w32
val sizeInBits_60: word32 = 0x1C:w32
val sizeInBits_61: word32 = 0x1D:w32
val sizeInBits_62: word32 = 0x1E:w32
val sizeInBits_63: word32 = 0x1F:w32
val sizeInBits_64: word32 = 0x20:w32
val precision_2: t_0 = con SOME_0 (sizeInBits_64 (*0x20:w32*))
val x_151: unit = ()
val +!_0: lambdas_412 = con +!Env_0 (x_151 (*()*))
val x_152: unit = ()
val x_153: lambdas_411 = con xEnv_19 (x_152 (*()*))
val x_154: unit = ()
val ~!_0: lambdas_410 = con ~!Env_0 (x_154 (*()*))
val x_155: unit = ()
val x_156: lambdas_409 = con xEnv_20 (x_155 (*()*))
val x_157: unit = ()
val -!_0: lambdas_408 = con -!Env_0 (x_157 (*()*))
val x_158: unit = ()
val x_159: lambdas_407 = con xEnv_21 (x_158 (*()*))
val x_160: unit = ()
val remUnsafe_0: lambdas_406 = con remUnsafeEnv_0 (x_160 (*()*))
val x_161: unit = ()
val <_1: lambdas_405 = con <Env_1 (x_161 (*()*))
val tuple_2: unit = ()
val <=_0: lambdas_404 = con <=Env_0 (tuple_2 (*()*))
val tuple_3: unit = ()
val >_0: lambdas_403 = con >Env_0 (tuple_3 (*()*))
val tuple_4: unit = ()
val >=_1: lambdas_402 = con >=Env_1 (tuple_4 (*()*))
val sizeInBits_65: word32 = 0x40:w32
val precision_3: t_0 = con SOME_0 (sizeInBits_65 (*0x40:w32*))
val x_162: unit = ()
val +!_1: lambdas_401 = con +!Env_1 (x_162 (*()*))
val x_163: unit = ()
val x_164: lambdas_400 = con xEnv_22 (x_163 (*()*))
val x_165: unit = ()
val ~!_1: lambdas_399 = con ~!Env_1 (x_165 (*()*))
val x_166: unit = ()
val x_167: lambdas_398 = con xEnv_23 (x_166 (*()*))
val x_168: unit = ()
val -!_1: lambdas_397 = con -!Env_1 (x_168 (*()*))
val x_169: unit = ()
val x_170: lambdas_396 = con xEnv_24 (x_169 (*()*))
val x_171: unit = ()
val <_2: lambdas_395 = con <Env_2 (x_171 (*()*))
val tuple_5: unit = ()
val >_1: lambdas_394 = con >Env_1 (tuple_5 (*()*))
val tuple_6: unit = ()
val >=_2: lambdas_393 = con >=Env_2 (tuple_6 (*()*))
val x_172: unit = ()
val x_173: lambdas_392 = con xEnv_25 (x_172 (*()*))
val x_174: unit = ()
val x_175: lambdas_391 = con xEnv_26 (x_174 (*()*))
val x_176: unit = ()
val x_177: lambdas_390 = con xEnv_27 (x_176 (*()*))
val x_178: unit = ()
val x_179: lambdas_389 = con xEnv_28 (x_178 (*()*))
val x_180: unit = ()
val x_181: lambdas_388 = con xEnv_29 (x_180 (*()*))
val x_182: unit = ()
val x_183: lambdas_387 = con xEnv_30 (x_182 (*()*))
val x_184: unit = ()
val x_185: lambdas_386 = con xEnv_31 (x_184 (*()*))
val x_186: unit = ()
val x_187: lambdas_385 = con xEnv_32 (x_186 (*()*))
val x_188: unit = ()
val gcState_0: lambdas_384 = con gcStateEnv_0 (x_188 (*()*))
val x_189: unit = ()
val bug_0: lambdas_383 = con bugEnv_0 (x_189 (*()*))
val x_190: unit = ()
val fromWord_0: lambdas_382 = con fromWordEnv_0 (x_190 (*()*))
val x_191: word64 = 0x0:w64
val isOn_0: bool = con false
val x_192: unit = ()
val atomicState_0: lambdas_381 = con atomicStateEnv_0 (x_192 (*()*))
val x_193: unit = ()
val atomicBegin_0: lambdas_380 = con atomicBeginEnv_0 (x_193 (*()*))
val tuple_7: unit = ()
val atomicEnd_0: lambdas_379 = con atomicEndEnv_0 (tuple_7 (*()*))
val x_194: unit = ()
val x_195: word32 = 0x0:w32
val x_196: (word8) vector = "Thread.atomicEnd"
val x_197: ((unit) ref, (word8) vector) tuple =
  (x_1446, x_196 (*"Thread.atomicEnd"*))
val x_198: exn = con Fail8_0 (x_197)
val FE_DOWNWARD_0: word32 = 0x400:w32
val FE_NOSUPPORT_0: word32 = 0xFFFFFFFF:w32
val FE_TONEAREST_0: word32 = 0x0:w32
val FE_TOWARDZERO_0: word32 = 0xC00:w32
val FE_UPWARD_0: word32 = 0x800:w32
val E2BIG_0: word32 = 0x7:w32
val EACCES_0: word32 = 0xD:w32
val EADDRINUSE_0: word32 = 0x62:w32
val EADDRNOTAVAIL_0: word32 = 0x63:w32
val EAFNOSUPPORT_0: word32 = 0x61:w32
val EAGAIN_0: word32 = 0xB:w32
val EALREADY_0: word32 = 0x72:w32
val EBADF_0: word32 = 0x9:w32
val EBADMSG_0: word32 = 0x4A:w32
val EBUSY_0: word32 = 0x10:w32
val ECANCELED_0: word32 = 0x7D:w32
val ECHILD_0: word32 = 0xA:w32
val ECONNABORTED_0: word32 = 0x67:w32
val ECONNREFUSED_0: word32 = 0x6F:w32
val ECONNRESET_0: word32 = 0x68:w32
val EDEADLK_0: word32 = 0x23:w32
val EDESTADDRREQ_0: word32 = 0x59:w32
val EDOM_0: word32 = 0x21:w32
val EDQUOT_0: word32 = 0x7A:w32
val EEXIST_0: word32 = 0x11:w32
val EFAULT_0: word32 = 0xE:w32
val EFBIG_0: word32 = 0x1B:w32
val EHOSTUNREACH_0: word32 = 0x71:w32
val EIDRM_0: word32 = 0x2B:w32
val EILSEQ_0: word32 = 0x54:w32
val EINPROGRESS_0: word32 = 0x73:w32
val EINTR_0: word32 = 0x4:w32
val EINVAL_0: word32 = 0x16:w32
val EIO_0: word32 = 0x5:w32
val EISCONN_0: word32 = 0x6A:w32
val EISDIR_0: word32 = 0x15:w32
val ELOOP_0: word32 = 0x28:w32
val EMFILE_0: word32 = 0x18:w32
val EMLINK_0: word32 = 0x1F:w32
val EMSGSIZE_0: word32 = 0x5A:w32
val EMULTIHOP_0: word32 = 0x48:w32
val ENAMETOOLONG_0: word32 = 0x24:w32
val ENETDOWN_0: word32 = 0x64:w32
val ENETRESET_0: word32 = 0x66:w32
val ENETUNREACH_0: word32 = 0x65:w32
val ENFILE_0: word32 = 0x17:w32
val ENOBUFS_0: word32 = 0x69:w32
val ENODATA_0: word32 = 0x3D:w32
val ENODEV_0: word32 = 0x13:w32
val ENOENT_0: word32 = 0x2:w32
val ENOEXEC_0: word32 = 0x8:w32
val ENOLCK_0: word32 = 0x25:w32
val ENOLINK_0: word32 = 0x43:w32
val ENOMEM_0: word32 = 0xC:w32
val ENOMSG_0: word32 = 0x2A:w32
val ENOPROTOOPT_0: word32 = 0x5C:w32
val ENOSPC_0: word32 = 0x1C:w32
val ENOSR_0: word32 = 0x3F:w32
val ENOSTR_0: word32 = 0x3C:w32
val ENOSYS_0: word32 = 0x26:w32
val ENOTCONN_0: word32 = 0x6B:w32
val ENOTDIR_0: word32 = 0x14:w32
val ENOTEMPTY_0: word32 = 0x27:w32
val ENOTSOCK_0: word32 = 0x58:w32
val ENOTSUP_0: word32 = 0x5F:w32
val ENOTTY_0: word32 = 0x19:w32
val ENXIO_0: word32 = 0x6:w32
val EOPNOTSUPP_0: word32 = 0x5F:w32
val EOVERFLOW_0: word32 = 0x4B:w32
val EPERM_0: word32 = 0x1:w32
val EPIPE_0: word32 = 0x20:w32
val EPROTO_0: word32 = 0x47:w32
val EPROTONOSUPPORT_0: word32 = 0x5D:w32
val EPROTOTYPE_0: word32 = 0x5B:w32
val ERANGE_0: word32 = 0x22:w32
val EROFS_0: word32 = 0x1E:w32
val ESPIPE_0: word32 = 0x1D:w32
val ESRCH_0: word32 = 0x3:w32
val ESTALE_0: word32 = 0x74:w32
val ETIME_0: word32 = 0x3E:w32
val ETIMEDOUT_0: word32 = 0x6E:w32
val ETXTBSY_0: word32 = 0x1A:w32
val EWOULDBLOCK_0: word32 = 0xB:w32
val EXDEV_0: word32 = 0x12:w32
val APPEND_0: word32 = 0x400:w32
val NONBLOCK_0: word32 = 0x800:w32
val F_SETFL_0: word32 = 0x4:w32
val SEEK_CUR_0: word32 = 0x1:w32
val SEEK_END_0: word32 = 0x2:w32
val SEEK_SET_0: word32 = 0x0:w32
val x_199: unit = ()
val print_0: lambdas_378 = con printEnv_0 (x_199 (*()*))
val x_200: unit = ()
val fromWord_1: lambdas_377 = con fromWordEnv_1 (x_200 (*()*))
val x_201: unit = ()
val toWord_0: lambdas_376 = con toWordEnv_0 (x_201 (*()*))
val x_202: unit = ()
val idFromWord8_0: lambdas_375 = con idFromWord8Env_0 (x_202 (*()*))
val tuple_8: unit = ()
val <=_1: lambdas_374 = con <=Env_1 (tuple_8 (*()*))
val realSize_0: word32 = 0x20:w32
val exponentBias_0: word32 = 0x7F:w32
val precision_4: word32 = 0x18:w32
val x_203: unit = ()
val +_1: lambdas_373 = con +Env_1 (x_203 (*()*))
val x_204: unit = ()
val -_1: lambdas_372 = con -Env_1 (x_204 (*()*))
val x_205: unit = ()
val ~_0: lambdas_371 = con ~Env_0 (x_205 (*()*))
val x_206: unit = ()
val <_3: lambdas_370 = con <Env_3 (x_206 (*()*))
val x_207: unit = ()
val <=_2: lambdas_369 = con <=Env_2 (x_207 (*()*))
val x_208: unit = ()
val round_0: lambdas_368 = con roundEnv_0 (x_208 (*()*))
val x_209: unit = ()
val fromInt8Unsafe_0: lambdas_367 = con fromInt8UnsafeEnv_0 (x_209 (*()*))
val x_210: unit = ()
val fromInt16Unsafe_0: lambdas_366 = con fromInt16UnsafeEnv_0 (x_210 (*()*))
val x_211: unit = ()
val fromInt32Unsafe_0: lambdas_365 = con fromInt32UnsafeEnv_0 (x_211 (*()*))
val x_212: unit = ()
val fromInt64Unsafe_0: lambdas_364 = con fromInt64UnsafeEnv_0 (x_212 (*()*))
val x_213: unit = ()
val fromReal32Unsafe_0: lambdas_363 = con fromReal32UnsafeEnv_0 (x_213 (*()*))
val x_214: unit = ()
val fromWord8Unsafe_0: lambdas_362 = con fromWord8UnsafeEnv_0 (x_214 (*()*))
val x_215: unit = ()
val fromWord16Unsafe_0: lambdas_361 = con fromWord16UnsafeEnv_0 (x_215 (*()*))
val x_216: unit = ()
val fromWord32Unsafe_0: lambdas_360 = con fromWord32UnsafeEnv_0 (x_216 (*()*))
val x_217: unit = ()
val fromWord64Unsafe_0: lambdas_359 = con fromWord64UnsafeEnv_0 (x_217 (*()*))
val x_218: unit = ()
val toInt8Unsafe_0: lambdas_358 = con toInt8UnsafeEnv_0 (x_218 (*()*))
val x_219: unit = ()
val toInt16Unsafe_0: lambdas_357 = con toInt16UnsafeEnv_0 (x_219 (*()*))
val x_220: unit = ()
val toInt32Unsafe_0: lambdas_356 = con toInt32UnsafeEnv_0 (x_220 (*()*))
val x_221: unit = ()
val toInt64Unsafe_0: lambdas_355 = con toInt64UnsafeEnv_0 (x_221 (*()*))
val x_222: unit = ()
val toReal32Unsafe_0: lambdas_354 = con toReal32UnsafeEnv_0 (x_222 (*()*))
val x_223: unit = ()
val toWord8Unsafe_0: lambdas_353 = con toWord8UnsafeEnv_0 (x_223 (*()*))
val x_224: unit = ()
val toWord16Unsafe_0: lambdas_352 = con toWord16UnsafeEnv_0 (x_224 (*()*))
val x_225: unit = ()
val toWord32Unsafe_0: lambdas_351 = con toWord32UnsafeEnv_0 (x_225 (*()*))
val x_226: unit = ()
val toWord64Unsafe_0: lambdas_350 = con toWord64UnsafeEnv_0 (x_226 (*()*))
val tuple_9: unit = ()
val >_2: lambdas_349 = con >Env_2 (tuple_9 (*()*))
val tuple_10: unit = ()
val >=_3: lambdas_348 = con >=Env_3 (tuple_10 (*()*))
val realSize_1: word32 = 0x40:w32
val exponentBias_1: word32 = 0x3FF:w32
val precision_5: word32 = 0x35:w32
val x_227: unit = ()
val +_2: lambdas_347 = con +Env_2 (x_227 (*()*))
val x_228: unit = ()
val -_2: lambdas_346 = con -Env_2 (x_228 (*()*))
val x_229: unit = ()
val ~_1: lambdas_345 = con ~Env_1 (x_229 (*()*))
val x_230: unit = ()
val <_4: lambdas_344 = con <Env_4 (x_230 (*()*))
val x_231: unit = ()
val <=_3: lambdas_343 = con <=Env_3 (x_231 (*()*))
val x_232: unit = ()
val round_1: lambdas_342 = con roundEnv_1 (x_232 (*()*))
val x_233: unit = ()
val fromInt8Unsafe_1: lambdas_341 = con fromInt8UnsafeEnv_1 (x_233 (*()*))
val x_234: unit = ()
val fromInt16Unsafe_1: lambdas_340 = con fromInt16UnsafeEnv_1 (x_234 (*()*))
val x_235: unit = ()
val fromInt32Unsafe_1: lambdas_339 = con fromInt32UnsafeEnv_1 (x_235 (*()*))
val x_236: unit = ()
val fromInt64Unsafe_1: lambdas_338 = con fromInt64UnsafeEnv_1 (x_236 (*()*))
val x_237: unit = ()
val fromReal32Unsafe_1: lambdas_337 = con fromReal32UnsafeEnv_1 (x_237 (*()*))
val x_238: unit = ()
val fromWord8Unsafe_1: lambdas_336 = con fromWord8UnsafeEnv_1 (x_238 (*()*))
val x_239: unit = ()
val fromWord16Unsafe_1: lambdas_335 = con fromWord16UnsafeEnv_1 (x_239 (*()*))
val x_240: unit = ()
val fromWord32Unsafe_1: lambdas_334 = con fromWord32UnsafeEnv_1 (x_240 (*()*))
val x_241: unit = ()
val fromWord64Unsafe_1: lambdas_333 = con fromWord64UnsafeEnv_1 (x_241 (*()*))
val x_242: unit = ()
val toInt8Unsafe_1: lambdas_332 = con toInt8UnsafeEnv_1 (x_242 (*()*))
val x_243: unit = ()
val toInt16Unsafe_1: lambdas_331 = con toInt16UnsafeEnv_1 (x_243 (*()*))
val x_244: unit = ()
val toInt32Unsafe_1: lambdas_330 = con toInt32UnsafeEnv_1 (x_244 (*()*))
val x_245: unit = ()
val toInt64Unsafe_1: lambdas_329 = con toInt64UnsafeEnv_1 (x_245 (*()*))
val x_246: unit = ()
val toReal32Unsafe_1: lambdas_328 = con toReal32UnsafeEnv_1 (x_246 (*()*))
val x_247: unit = ()
val toWord8Unsafe_1: lambdas_327 = con toWord8UnsafeEnv_1 (x_247 (*()*))
val x_248: unit = ()
val toWord16Unsafe_1: lambdas_326 = con toWord16UnsafeEnv_1 (x_248 (*()*))
val x_249: unit = ()
val toWord32Unsafe_1: lambdas_325 = con toWord32UnsafeEnv_1 (x_249 (*()*))
val x_250: unit = ()
val toWord64Unsafe_1: lambdas_324 = con toWord64UnsafeEnv_1 (x_250 (*()*))
val tuple_11: unit = ()
val >_3: lambdas_323 = con >Env_3 (tuple_11 (*()*))
val tuple_12: unit = ()
val >=_4: lambdas_322 = con >=Env_4 (tuple_12 (*()*))
val x_251: unit = ()
val castFromWord_0: lambdas_321 = con castFromWordEnv_0 (x_251 (*()*))
val x_252: unit = ()
val castFromWord_1: lambdas_320 = con castFromWordEnv_1 (x_252 (*()*))
val x_253: (word8) vector = "unhandled exception: "
val x_254: unit = ()
val x_255: (word8) vector = "Fail "
val x_256: unit = ()
val x_257: (word8) vector = "\n"
val x_258: (word8) vector = "unhandled exception in Basis Library"
val x_259: unit = ()
val x_260: lambdas_319 = con xEnv_33 (x_259 (*()*))
val x_261: (word8) vector = "missing suffix in Basis Library"
val x_262: unit = ()
val x_263: lambdas_317 = con xEnv_34 (x_262 (*()*))
val x_264: unit = ()
val x_265: lambdas_316 = con xEnv_35 (x_264 (*()*))
val x_1447: (word32, word32) tuple =
  (sizeInBits_40 (*0x8:w32*), sizeInBits_7 (*0x8:w32*))
val x_266: bool = con true
val x_267: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_268: ((unit) ref, (word8) vector) tuple =
  (x_1446, x_267 (*"MkNum0: I ... Bits"*))
val x_269: exn = con Fail8_0 (x_268)
val x_270: unit = ()
val x_271: word8 = 0x0:w8
val x_272: word32 = 0x0:w32
val x_273: word32 = 0x1:w32
val x_274: unit = ()
val x_275: lambdas_315 = con xEnv_36 (x_274 (*()*))
val x_276: unit = ()
val x_277: lambdas_314 = con xEnv_37 (x_276 (*()*))
val x_278: word32 = 0x1:w32
val x_279: word32 = 0x1:w32
val x_1448: (word32, word32) tuple =
  (sizeInBits_48 (*0x10:w32*), sizeInBits_15 (*0x10:w32*))
val x_280: bool = con true
val x_281: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_282: ((unit) ref, (word8) vector) tuple =
  (x_1446, x_281 (*"MkNum0: I ... Bits"*))
val x_283: exn = con Fail8_0 (x_282)
val x_284: unit = ()
val x_285: word16 = 0x0:w16
val x_286: word32 = 0x0:w32
val x_287: word32 = 0x1:w32
val x_288: unit = ()
val x_289: lambdas_313 = con xEnv_38 (x_288 (*()*))
val x_290: unit = ()
val x_291: lambdas_312 = con xEnv_39 (x_290 (*()*))
val x_292: word32 = 0x1:w32
val x_293: word32 = 0x1:w32
val x_1449: (word32, word32) tuple =
  (sizeInBits_64 (*0x20:w32*), sizeInBits_31 (*0x20:w32*))
val x_294: bool = con true
val x_295: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_296: ((unit) ref, (word8) vector) tuple =
  (x_1446, x_295 (*"MkNum0: I ... Bits"*))
val x_297: exn = con Fail8_0 (x_296)
val x_298: unit = ()
val x_299: word32 = 0x0:w32
val x_300: word32 = 0x1:w32
val x_301: word32 = 0x0:w32
val x_302: word32 = 0x1:w32
val x_303: unit = ()
val x_304: lambdas_311 = con xEnv_40 (x_303 (*()*))
val x_305: unit = ()
val x_306: lambdas_310 = con xEnv_41 (x_305 (*()*))
val x_307: word32 = 0x1:w32
val x_308: word32 = 0x1:w32
val x_309: bool = con false
val x_1450: (word32, word32) tuple =
  (sizeInBits_65 (*0x40:w32*), sizeInBits_32 (*0x40:w32*))
val x_310: bool = con true
val x_311: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_312: ((unit) ref, (word8) vector) tuple =
  (x_1446, x_311 (*"MkNum0: I ... Bits"*))
val x_313: exn = con Fail8_0 (x_312)
val x_314: unit = ()
val x_315: word32 = 0x0:w32
val x_316: word32 = 0x1:w32
val x_317: word32 = 0x0:w32
val x_318: word32 = 0x1:w32
val x_319: unit = ()
val x_320: lambdas_309 = con xEnv_42 (x_319 (*()*))
val x_321: unit = ()
val x_322: lambdas_308 = con xEnv_43 (x_321 (*()*))
val x_323: word32 = 0x1:w32
val x_324: word32 = 0x1:w32
val x_325: bool = con false
val tuple_13: unit = ()
val ltu_0: lambdas_307 = con ltuEnv_0 (tuple_13 (*()*))
val tuple_14: unit = ()
val >_4: lambdas_306 = con >Env_4 (tuple_14 (*()*))
val tuple_15: unit = ()
val >=_5: lambdas_305 = con >=Env_5 (tuple_15 (*()*))
val bytes_0: word32 = 0x18:w32
val x_326: unit = ()
val x_327: lambdas_304 = con xEnv_44 (x_326 (*()*))
val tuple_16: unit = ()
val valOf_0: lambdas_303 = con valOfEnv_0 (tuple_16 (*()*))
val x_328: word32 = 0x0:w32
val tuple_17: unit = ()
val unsafeArrayAlloc_0: lambdas_302 =
  con unsafeArrayAllocEnv_0 (tuple_17 (*()*))
val smallCopyLimit_0: word64 = 0x5:w64
val tuple_18: unit = ()
val full_0: lambdas_301 = con fullEnv_0 (tuple_18 (*()*))
val x_329: word64 = 0x0:w64
val tuple_19: unit = ()
val vector_0: lambdas_300 = con vectorEnv_0 (tuple_19 (*()*))
val x_330: word64 = 0x0:w64
val x_331: word64 = 0x1:w64
val x_332: unit = ()
val x_333: word64 = 0x1:w64
val x_334: word64 = 0x0:w64
val tuple_20: unit = ()
val valOf_1: lambdas_298 = con valOfEnv_1 (tuple_20 (*()*))
val x_335: word32 = 0x0:w32
val tuple_21: unit = ()
val length_0: lambdas_297 = con lengthEnv_0 (tuple_21 (*()*))
val smallCopyLimit_1: word64 = 0x5:w64
val tuple_22: unit = ()
val full_1: lambdas_296 = con fullEnv_1 (tuple_22 (*()*))
val x_336: word64 = 0x0:w64
val tuple_23: unit = ()
val base_0: lambdas_295 = con baseEnv_0 (tuple_23 (*()*))
val x_337: word64 = 0x0:w64
val x_338: bool = con true
val x_339: word64 = 0x0:w64
val zero_0: intInf = 0:ii
val tuple_24: unit = ()
val isSmall_0: lambdas_294 = con isSmallEnv_0 (tuple_24 (*()*))
val x_340: word64 = 0x0:w64
val x_341: word64 = 0x1:w64
val tuple_25: unit = ()
val areSmall_0: lambdas_293 = con areSmallEnv_0 (tuple_25 (*()*))
val x_342: word64 = 0x0:w64
val x_343: word64 = 0x1:w64
val tuple_26: unit = ()
val numLimbs_0: lambdas_292 = con numLimbsEnv_0 (tuple_26 (*()*))
val x_344: word64 = 0x1:w64
val x_345: word64 = 0x1:w64
val tuple_27: unit = ()
val dropTagCoerce_0: lambdas_291 = con dropTagCoerceEnv_0 (tuple_27 (*()*))
val x_346: word32 = 0x1:w32
val tuple_28: unit = ()
val addTag_0: lambdas_290 = con addTagEnv_0 (tuple_28 (*()*))
val x_347: word32 = 0x1:w32
val x_348: word64 = 0x1:w64
val x_1451: (word32, word32) tuple =
  (sizeInBits_32 (*0x40:w32*), sizeInBits_32 (*0x40:w32*))
val x_349: bool = con true
val x_350: word32 = 0x2:w32
val x_351: bool = con true
val x_352: word64 = 0x1:w64
val x_353: word64 = 0x0:w64
val x_354: word64 = 0x1:w64
val x_355: list_12 = con nil_0
val x_356: word64 = 0x0:w64
val x_357: word64 = 0x1:w64
val x_1452: (word64, word64) tuple = (x_356 (*0x0:w64*), x_357 (*0x1:w64*))
val x_358: ((word64, word64) tuple, list_12) tuple =
  (x_1452, x_355 (*con nil_0*))
val x_359: list_12 = con ::_0 (x_358)
val x_360: word64 = 0x1:w64
val x_361: list_12 = con nil_0
val x_362: word64 = 0x0:w64
val x_363: word64 = 0x0:w64
val x_1453: (word64, word64) tuple = (x_362 (*0x0:w64*), x_363 (*0x0:w64*))
val x_364: ((word64, word64) tuple, list_12) tuple =
  (x_1453, x_361 (*con nil_0*))
val x_365: list_12 = con ::_0 (x_364)
val x_366: unit = ()
val x_367: word64 = 0x0:w64
val x_368: word32 = 0x8:w32
val x_1454: (word32, word32) tuple =
  (sizeInBits_32 (*0x40:w32*), x_368 (*0x8:w32*))
val x_369: word64 = 0x7:w64
val x_370: word32 = 0x1:w32
val x_371: word64 = 0x0:w64
val x_372: word32 = 0x1:w32
val x_373: word32 = 0x1:w32
val x_374: word32 = 0x0:w32
val x_375: bool = con false
val x_376: word32 = 0x0:w32
val x_377: word32 = 0x0:w32
val x_378: word32 = 0x1:w32
val x_379: word64 = 0x1:w64
val x_380: word64 = 0x7:w64
val x_1455: (word64, word64) tuple = (x_379 (*0x1:w64*), x_380 (*0x7:w64*))
val x_381: unit = ()
val x_382: (unit) ref = prim Ref_ref[unit] (x_381 (*()*))
val x_383: exn = con Chr_0 (x_382)
val x_384: unit = ()
val x_1456: (unit) ref = prim Ref_ref[unit] (x_384 (*()*))
val x_385: list_0 = con nil_1
val tuple_29: unit = ()
val fromIntForLength_0: lambdas_281 =
  con fromIntForLengthEnv_0 (tuple_29 (*()*))
val x_386: unit = ()
val x_387: unit = ()
val tuple_30: unit = ()
val base_1: lambdas_279 = con baseEnv_1 (tuple_30 (*()*))
val x_388: unit = ()
val x_389: (word8) vector = "Sequence.Slice.base"
val x_390: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_389 (*"Sequence. ... base"*))
val x_391: exn = con Fail_0 (x_390)
val x_392: unit = ()
val x_393: word64 = 0x0:w64
val x_394: word64 = 0x0:w64
val x_395: word64 = 0x0:w64
val x_396: word32 = 0x0:w32
val x_397: unit = ()
val x_398: (word8) vector = "Sequence.seq0"
val x_399: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_398 (*"Sequence.seq0"*))
val x_400: exn = con Fail_0 (x_399)
val x_401: word64 = 0x1:w64
val x_402: word64 = 0x0:w64
val x_1457: (word64, unit) tuple = (x_402 (*0x0:w64*), x_397 (*()*))
val x_403: word64 = 0x0:w64
val tuple_31: unit = ()
val loop_0: lambdas_276 = con loopEnv_0 (tuple_31 (*()*))
val x_404: unit = ()
val x_405: unit = ()
val x_406: word64 = 0x1:w64
val x_407: unit = ()
val x_408: word64 = 0x1:w64
val x_409: word64 = 0x0:w64
val x_410: word64 = 0x0:w64
val tuple_32: unit = ()
val length_1: lambdas_272 = con lengthEnv_1 (tuple_32 (*()*))
val x_411: unit = ()
val x_412: (word8) vector = "Sequence.length"
val x_413: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_412 (*"Sequence.length"*))
val x_414: exn = con Fail_0 (x_413)
val x_415: unit = ()
val x_416: unit = ()
val x_417: unit = ()
val x_418: word64 = 0x1:w64
val x_419: word64 = 0x0:w64
val x_1458: (word64, unit) tuple = (x_419 (*0x0:w64*), x_416 (*()*))
val tuple_33: unit = ()
val slice_0: lambdas_269 = con sliceEnv_0 (tuple_33 (*()*))
val x_420: t_28 = con NONE_0
val x_421: bool = con true
val x_422: unit = ()
val x_423: unit = ()
val tuple_34: unit = ()
val base_2: lambdas_267 = con baseEnv_2 (tuple_34 (*()*))
val x_424: unit = ()
val x_425: (word8) vector = "Sequence.Slice.base"
val x_426: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_425 (*"Sequence. ... base"*))
val x_427: exn = con Fail_0 (x_426)
val x_428: unit = ()
val tuple_35: unit = ()
val update_0: lambdas_265 = con updateEnv_0 (tuple_35 (*()*))
val x_429: unit = ()
val x_430: unit = ()
val x_431: unit = ()
val x_432: lambdas_263 = con xEnv_45 (x_431 (*()*))
val x_433: unit = ()
val x_434: lambdas_262 = con xEnv_46 (x_433 (*()*))
val x_435: word32 = 0x100:w32
val x_436: word32 = 0x2:w32
val x_437: word32 = 0xA:w32
val x_438: word32 = 0x10:w32
val x_439: word32 = 0x8:w32
val x_440: unit = ()
val radixToInt_0: lambdas_261 = con radixToIntEnv_0 (x_440 (*()*))
val tuple_36: unit = ()
val range_0: lambdas_260 = con rangeEnv_0 (tuple_36 (*()*))
val x_441: bool = con false
val x_442: t_0 = con NONE_1
val x_443: word32 = 0x0:w32
val x_444: word8 = 0x30:w8
val x_445: word8 = 0x31:w8
val x_1459: (word32, word8, word8) tuple =
  (x_443 (*0x0:w32*), x_444 (*0x30:w8*), x_445 (*0x31:w8*))
val x_446: unit = ()
val x_447: unit = ()
val x_448: word64 = 0x1:w64
val x_449: word64 = 0x0:w64
val x_1460: (word64, unit) tuple = (x_449 (*0x0:w64*), x_446 (*()*))
val x_450: word32 = 0x0:w32
val x_451: word8 = 0x30:w8
val x_452: word8 = 0x37:w8
val x_1461: (word32, word8, word8) tuple =
  (x_450 (*0x0:w32*), x_451 (*0x30:w8*), x_452 (*0x37:w8*))
val x_453: unit = ()
val x_454: unit = ()
val x_455: word64 = 0x1:w64
val x_456: word64 = 0x0:w64
val x_1462: (word64, unit) tuple = (x_456 (*0x0:w64*), x_453 (*()*))
val x_457: word32 = 0x0:w32
val x_458: word8 = 0x30:w8
val x_459: word8 = 0x39:w8
val x_1463: (word32, word8, word8) tuple =
  (x_457 (*0x0:w32*), x_458 (*0x30:w8*), x_459 (*0x39:w8*))
val x_460: unit = ()
val x_461: unit = ()
val x_462: word64 = 0x1:w64
val x_463: word64 = 0x0:w64
val x_1464: (word64, unit) tuple = (x_463 (*0x0:w64*), x_460 (*()*))
val x_464: word32 = 0x0:w32
val x_465: word8 = 0x30:w8
val x_466: word8 = 0x39:w8
val x_1465: (word32, word8, word8) tuple =
  (x_464 (*0x0:w32*), x_465 (*0x30:w8*), x_466 (*0x39:w8*))
val x_467: word32 = 0xA:w32
val x_468: word8 = 0x61:w8
val x_469: word8 = 0x66:w8
val x_1466: (word32, word8, word8) tuple =
  (x_467 (*0xA:w32*), x_468 (*0x61:w8*), x_469 (*0x66:w8*))
val x_470: word32 = 0xA:w32
val x_471: word8 = 0x41:w8
val x_472: word8 = 0x46:w8
val x_1467: (word32, word8, word8) tuple =
  (x_470 (*0xA:w32*), x_471 (*0x41:w8*), x_472 (*0x46:w8*))
val x_473: list_1 = con nil_2
val x_474: unit = ()
val x_475: t_0 = con NONE_1
val x_476: unit = ()
val x_477: word64 = 0x1:w64
val x_478: word64 = 0x0:w64
val x_1468: (word64, unit) tuple = (x_478 (*0x0:w64*), x_474 (*()*))
val x_479: unit = ()
val x_480: word8 = 0x20:w8
val x_481: bool = con true
val x_482: word8 = 0x9:w8
val x_483: bool = con true
val x_484: word8 = 0xD:w8
val x_485: bool = con true
val x_486: word8 = 0xA:w8
val x_487: bool = con true
val x_488: word8 = 0xB:w8
val x_489: bool = con true
val x_490: word8 = 0xC:w8
val x_491: unit = ()
val x_492: word64 = 0x1:w64
val x_493: word64 = 0x0:w64
val x_1469: (word64, unit) tuple = (x_493 (*0x0:w64*), x_479 (*()*))
val tuple_37: unit = ()
val digitToChar_0: lambdas_253 = con digitToCharEnv_0 (tuple_37 (*()*))
val x_494: (word8) vector = "0123456789ABCDEF"
val x_495: unit = ()
val x_496: unit = ()
val x_497: word32 = 0x1:w32
val x_498: word8 = 0x0:w8
val x_499: unit = ()
val x_500: bool = con false
val x_501: radix_0 = con DEC_1
val x_502: unit = ()
val x_503: unit = ()
val x_504: unit = ()
val x_505: bool = con true
val x_506: unit = ()
val x_507: unit = ()
val x_508: bool = con false
val x_509: bool = con false
val x_510: word32 = 0x1:w32
val x_511: word8 = 0x7E:w8
val x_512: t_0 = con NONE_1
val x_513: word32 = 0x1:w32
val x_514: word32 = 0x1:w32
val x_515: unit = ()
val x_516: unit = ()
val x_517: word32 = 0x1:w32
val x_518: word8 = 0x0:w8
val x_519: unit = ()
val x_520: bool = con false
val x_521: unit = ()
val x_522: unit = ()
val x_523: unit = ()
val x_524: bool = con true
val x_525: unit = ()
val x_526: unit = ()
val x_527: bool = con false
val x_528: bool = con false
val x_529: word32 = 0x1:w32
val x_530: word8 = 0x7E:w8
val x_531: t_0 = con NONE_1
val x_532: word32 = 0x1:w32
val x_533: word32 = 0x1:w32
val x_534: unit = ()
val x_535: unit = ()
val tuple_38: unit = ()
val st_0: lambdas_243 = con stEnv_0 (tuple_38 (*()*))
val x_536: word32 = 0x1:w32
val x_537: word32 = 0x1:w32
val x_538: (word8) vector = "Word.bswap"
val x_539: ((unit) ref, (word8) vector) tuple = (x_1456, x_538 (*"Word.bswap"*))
val x_540: exn = con Fail_0 (x_539)
val x_541: unit = ()
val x_542: lambdas_241 = con xEnv_47 (x_541 (*()*))
val x_543: word32 = 0x4:w32
val x_1470: (lambdas_241, word32) tuple =
  (x_542 (*con xEnv_47 (x_541)*), x_543 (*0x4:w32*))
val x_544: unit = ()
val x_545: lambdas_240 = con xEnv_48 (x_544 (*()*))
val x_546: word32 = 0x10:w32
val x_1471: (lambdas_240, word32) tuple =
  (x_545 (*con xEnv_48 (x_544)*), x_546 (*0x10:w32*))
val x_547: unit = ()
val x_548: lambdas_239 = con xEnv_49 (x_547 (*()*))
val x_549: word32 = 0x20:w32
val x_1472: (lambdas_239, word32) tuple =
  (x_548 (*con xEnv_49 (x_547)*), x_549 (*0x20:w32*))
val x_550: word32 = 0x8:w32
val x_1473: (lambdas_243, word32) tuple =
  (st_0 (*con stEnv_ ... e_38)*), x_550 (*0x8:w32*))
val x_551: word32 = 0x2:w32
val x_552: radix_0 = con BIN_1
val x_553: word32 = 0x8:w32
val x_554: radix_0 = con OCT_1
val x_555: word32 = 0xA:w32
val x_556: radix_0 = con DEC_1
val x_557: word32 = 0x10:w32
val x_558: radix_0 = con HEX_0
val x_559: unit = ()
val x_560: (word8) vector = "EmbedWord"
val x_561: ((unit) ref, (word8) vector) tuple = (x_1456, x_560 (*"EmbedWord"*))
val x_562: exn = con Fail_0 (x_561)
val x_563: unit = ()
val x_564: (word8) vector = "EmbedWord"
val x_565: ((unit) ref, (word8) vector) tuple = (x_1456, x_564 (*"EmbedWord"*))
val x_566: exn = con Fail_0 (x_565)
val x_567: unit = ()
val x_568: (word8) vector = "EmbedWord"
val x_569: ((unit) ref, (word8) vector) tuple = (x_1456, x_568 (*"EmbedWord"*))
val x_570: exn = con Fail_0 (x_569)
val x_571: unit = ()
val x_572: (word8) vector = "EmbedWord"
val x_573: ((unit) ref, (word8) vector) tuple = (x_1456, x_572 (*"EmbedWord"*))
val x_574: exn = con Fail_0 (x_573)
val x_575: unit = ()
val x_576: (word8) vector = "EmbedWord"
val x_577: ((unit) ref, (word8) vector) tuple = (x_1456, x_576 (*"EmbedWord"*))
val x_578: exn = con Fail_0 (x_577)
val x_579: unit = ()
val x_580: (word8) vector = "EmbedWord"
val x_581: ((unit) ref, (word8) vector) tuple = (x_1456, x_580 (*"EmbedWord"*))
val x_582: exn = con Fail_0 (x_581)
val x_583: unit = ()
val x_584: (word8) vector = "EmbedWord"
val x_585: ((unit) ref, (word8) vector) tuple = (x_1456, x_584 (*"EmbedWord"*))
val x_586: exn = con Fail_0 (x_585)
val x_587: unit = ()
val x_588: (word8) vector = "EmbedWord"
val x_589: ((unit) ref, (word8) vector) tuple = (x_1456, x_588 (*"EmbedWord"*))
val x_590: exn = con Fail_0 (x_589)
val x_591: unit = ()
val x_592: (word8) vector = "EmbedWord"
val x_593: ((unit) ref, (word8) vector) tuple = (x_1456, x_592 (*"EmbedWord"*))
val x_594: exn = con Fail_0 (x_593)
val x_595: unit = ()
val x_596: (word8) vector = "EmbedWord"
val x_597: ((unit) ref, (word8) vector) tuple = (x_1456, x_596 (*"EmbedWord"*))
val x_598: exn = con Fail_0 (x_597)
val x_599: unit = ()
val x_600: (word8) vector = "EmbedWord"
val x_601: ((unit) ref, (word8) vector) tuple = (x_1456, x_600 (*"EmbedWord"*))
val x_602: exn = con Fail_0 (x_601)
val x_603: unit = ()
val x_604: (word8) vector = "EmbedWord"
val x_605: ((unit) ref, (word8) vector) tuple = (x_1456, x_604 (*"EmbedWord"*))
val x_606: exn = con Fail_0 (x_605)
val x_607: unit = ()
val x_608: (word8) vector = "EmbedWord"
val x_609: ((unit) ref, (word8) vector) tuple = (x_1456, x_608 (*"EmbedWord"*))
val x_610: exn = con Fail_0 (x_609)
val x_611: unit = ()
val x_612: (word8) vector = "EmbedWord"
val x_613: ((unit) ref, (word8) vector) tuple = (x_1456, x_612 (*"EmbedWord"*))
val x_614: exn = con Fail_0 (x_613)
val x_615: unit = ()
val x_616: (word8) vector = "EmbedWord"
val x_617: ((unit) ref, (word8) vector) tuple = (x_1456, x_616 (*"EmbedWord"*))
val x_618: exn = con Fail_0 (x_617)
val x_619: unit = ()
val x_620: (word8) vector = "EmbedWord"
val x_621: ((unit) ref, (word8) vector) tuple = (x_1456, x_620 (*"EmbedWord"*))
val x_622: exn = con Fail_0 (x_621)
val x_623: unit = ()
val x_624: (word8) vector = "EmbedWord"
val x_625: ((unit) ref, (word8) vector) tuple = (x_1456, x_624 (*"EmbedWord"*))
val x_626: exn = con Fail_0 (x_625)
val x_627: unit = ()
val x_628: (word8) vector = "EmbedWord"
val x_629: ((unit) ref, (word8) vector) tuple = (x_1456, x_628 (*"EmbedWord"*))
val x_630: exn = con Fail_0 (x_629)
val x_631: unit = ()
val x_632: (word8) vector = "EmbedWord"
val x_633: ((unit) ref, (word8) vector) tuple = (x_1456, x_632 (*"EmbedWord"*))
val x_634: exn = con Fail_0 (x_633)
val x_635: unit = ()
val x_636: (word8) vector = "EmbedWord"
val x_637: ((unit) ref, (word8) vector) tuple = (x_1456, x_636 (*"EmbedWord"*))
val x_638: exn = con Fail_0 (x_637)
val x_639: unit = ()
val x_640: (word8) vector = "EmbedWord"
val x_641: ((unit) ref, (word8) vector) tuple = (x_1456, x_640 (*"EmbedWord"*))
val x_642: exn = con Fail_0 (x_641)
val x_643: unit = ()
val x_644: (word8) vector = "EmbedWord"
val x_645: ((unit) ref, (word8) vector) tuple = (x_1456, x_644 (*"EmbedWord"*))
val x_646: exn = con Fail_0 (x_645)
val x_647: unit = ()
val x_648: (word8) vector = "EmbedWord"
val x_649: ((unit) ref, (word8) vector) tuple = (x_1456, x_648 (*"EmbedWord"*))
val x_650: exn = con Fail_0 (x_649)
val x_651: unit = ()
val x_652: (word8) vector = "EmbedWord"
val x_653: ((unit) ref, (word8) vector) tuple = (x_1456, x_652 (*"EmbedWord"*))
val x_654: exn = con Fail_0 (x_653)
val x_655: unit = ()
val x_656: (word8) vector = "EmbedWord"
val x_657: ((unit) ref, (word8) vector) tuple = (x_1456, x_656 (*"EmbedWord"*))
val x_658: exn = con Fail_0 (x_657)
val x_659: unit = ()
val x_660: (word8) vector = "EmbedWord"
val x_661: ((unit) ref, (word8) vector) tuple = (x_1456, x_660 (*"EmbedWord"*))
val x_662: exn = con Fail_0 (x_661)
val x_663: unit = ()
val x_664: (word8) vector = "EmbedWord"
val x_665: ((unit) ref, (word8) vector) tuple = (x_1456, x_664 (*"EmbedWord"*))
val x_666: exn = con Fail_0 (x_665)
val x_667: unit = ()
val x_668: (word8) vector = "EmbedWord"
val x_669: ((unit) ref, (word8) vector) tuple = (x_1456, x_668 (*"EmbedWord"*))
val x_670: exn = con Fail_0 (x_669)
val x_671: unit = ()
val x_672: (word8) vector = "EmbedWord"
val x_673: ((unit) ref, (word8) vector) tuple = (x_1456, x_672 (*"EmbedWord"*))
val x_674: exn = con Fail_0 (x_673)
val x_675: unit = ()
val x_676: (word8) vector = "EmbedWord"
val x_677: ((unit) ref, (word8) vector) tuple = (x_1456, x_676 (*"EmbedWord"*))
val x_678: exn = con Fail_0 (x_677)
val x_679: unit = ()
val x_680: (word8) vector = "EmbedWord"
val x_681: ((unit) ref, (word8) vector) tuple = (x_1456, x_680 (*"EmbedWord"*))
val x_682: exn = con Fail_0 (x_681)
val x_683: unit = ()
val x_684: (word8) vector = "EmbedWord"
val x_685: ((unit) ref, (word8) vector) tuple = (x_1456, x_684 (*"EmbedWord"*))
val x_686: exn = con Fail_0 (x_685)
val x_687: unit = ()
val x_688: (word8) vector = "EmbedWord"
val x_689: ((unit) ref, (word8) vector) tuple = (x_1456, x_688 (*"EmbedWord"*))
val x_690: exn = con Fail_0 (x_689)
val x_691: unit = ()
val x_692: (word8) vector = "EmbedWord"
val x_693: ((unit) ref, (word8) vector) tuple = (x_1456, x_692 (*"EmbedWord"*))
val x_694: exn = con Fail_0 (x_693)
val x_695: unit = ()
val x_696: (word8) vector = "EmbedWord"
val x_697: ((unit) ref, (word8) vector) tuple = (x_1456, x_696 (*"EmbedWord"*))
val x_698: exn = con Fail_0 (x_697)
val x_699: unit = ()
val x_700: (word8) vector = "EmbedWord"
val x_701: ((unit) ref, (word8) vector) tuple = (x_1456, x_700 (*"EmbedWord"*))
val x_702: exn = con Fail_0 (x_701)
val x_703: unit = ()
val x_704: (word8) vector = "EmbedWord"
val x_705: ((unit) ref, (word8) vector) tuple = (x_1456, x_704 (*"EmbedWord"*))
val x_706: exn = con Fail_0 (x_705)
val x_707: unit = ()
val x_708: (word8) vector = "EmbedWord"
val x_709: ((unit) ref, (word8) vector) tuple = (x_1456, x_708 (*"EmbedWord"*))
val x_710: exn = con Fail_0 (x_709)
val x_711: unit = ()
val x_712: (word8) vector = "EmbedWord"
val x_713: ((unit) ref, (word8) vector) tuple = (x_1456, x_712 (*"EmbedWord"*))
val x_714: exn = con Fail_0 (x_713)
val x_715: unit = ()
val x_716: (word8) vector = "EmbedWord"
val x_717: ((unit) ref, (word8) vector) tuple = (x_1456, x_716 (*"EmbedWord"*))
val x_718: exn = con Fail_0 (x_717)
val x_719: unit = ()
val x_720: (word8) vector = "EmbedWord"
val x_721: ((unit) ref, (word8) vector) tuple = (x_1456, x_720 (*"EmbedWord"*))
val x_722: exn = con Fail_0 (x_721)
val x_723: unit = ()
val x_724: (word8) vector = "EmbedWord"
val x_725: ((unit) ref, (word8) vector) tuple = (x_1456, x_724 (*"EmbedWord"*))
val x_726: exn = con Fail_0 (x_725)
val x_727: unit = ()
val x_728: (word8) vector = "EmbedWord"
val x_729: ((unit) ref, (word8) vector) tuple = (x_1456, x_728 (*"EmbedWord"*))
val x_730: exn = con Fail_0 (x_729)
val x_731: unit = ()
val x_732: (word8) vector = "EmbedWord"
val x_733: ((unit) ref, (word8) vector) tuple = (x_1456, x_732 (*"EmbedWord"*))
val x_734: exn = con Fail_0 (x_733)
val x_735: unit = ()
val x_736: (word8) vector = "EmbedWord"
val x_737: ((unit) ref, (word8) vector) tuple = (x_1456, x_736 (*"EmbedWord"*))
val x_738: exn = con Fail_0 (x_737)
val x_739: unit = ()
val x_740: (word8) vector = "EmbedWord"
val x_741: ((unit) ref, (word8) vector) tuple = (x_1456, x_740 (*"EmbedWord"*))
val x_742: exn = con Fail_0 (x_741)
val x_743: unit = ()
val x_744: (word8) vector = "EmbedWord"
val x_745: ((unit) ref, (word8) vector) tuple = (x_1456, x_744 (*"EmbedWord"*))
val x_746: exn = con Fail_0 (x_745)
val x_747: unit = ()
val x_748: (word8) vector = "EmbedWord"
val x_749: ((unit) ref, (word8) vector) tuple = (x_1456, x_748 (*"EmbedWord"*))
val x_750: exn = con Fail_0 (x_749)
val x_751: unit = ()
val x_752: (word8) vector = "EmbedWord"
val x_753: ((unit) ref, (word8) vector) tuple = (x_1456, x_752 (*"EmbedWord"*))
val x_754: exn = con Fail_0 (x_753)
val x_755: unit = ()
val x_756: (word8) vector = "EmbedWord"
val x_757: ((unit) ref, (word8) vector) tuple = (x_1456, x_756 (*"EmbedWord"*))
val x_758: exn = con Fail_0 (x_757)
val x_759: unit = ()
val x_760: (word8) vector = "EmbedWord"
val x_761: ((unit) ref, (word8) vector) tuple = (x_1456, x_760 (*"EmbedWord"*))
val x_762: exn = con Fail_0 (x_761)
val x_763: unit = ()
val x_764: (word8) vector = "EmbedWord"
val x_765: ((unit) ref, (word8) vector) tuple = (x_1456, x_764 (*"EmbedWord"*))
val x_766: exn = con Fail_0 (x_765)
val x_767: unit = ()
val x_768: (word8) vector = "EmbedWord"
val x_769: ((unit) ref, (word8) vector) tuple = (x_1456, x_768 (*"EmbedWord"*))
val x_770: exn = con Fail_0 (x_769)
val x_771: unit = ()
val x_772: (word8) vector = "EmbedWord"
val x_773: ((unit) ref, (word8) vector) tuple = (x_1456, x_772 (*"EmbedWord"*))
val x_774: exn = con Fail_0 (x_773)
val x_775: unit = ()
val x_776: (word8) vector = "EmbedWord"
val x_777: ((unit) ref, (word8) vector) tuple = (x_1456, x_776 (*"EmbedWord"*))
val x_778: exn = con Fail_0 (x_777)
val x_779: unit = ()
val x_780: (word8) vector = "EmbedWord"
val x_781: ((unit) ref, (word8) vector) tuple = (x_1456, x_780 (*"EmbedWord"*))
val x_782: exn = con Fail_0 (x_781)
val x_783: unit = ()
val x_784: (word8) vector = "EmbedWord"
val x_785: ((unit) ref, (word8) vector) tuple = (x_1456, x_784 (*"EmbedWord"*))
val x_786: exn = con Fail_0 (x_785)
val x_787: unit = ()
val x_788: (word8) vector = "EmbedWord"
val x_789: ((unit) ref, (word8) vector) tuple = (x_1456, x_788 (*"EmbedWord"*))
val x_790: exn = con Fail_0 (x_789)
val x_791: word32 = 0x1:w32
val x_1474: (word32, word32) tuple = (x_435 (*0x100:w32*), x_791 (*0x1:w32*))
val x_792: word32 = 0x0:w32
val x_793: t_8 = con NONE_2
val x_794: word32 = 0x1:w32
val x_795: unit = ()
val x_796: unit = ()
val x_797: word64 = 0x1:w64
val x_798: word64 = 0x0:w64
val x_1475: (word64, unit) tuple = (x_798 (*0x0:w64*), x_795 (*()*))
val x_799: t_2 = con NONE_3
val x_800: unit = ()
val x_801: lambdas_236 = con xEnv_50 (x_800 (*()*))
val x_802: unit = ()
val x_803: list_7 = con nil_3
val x_804: (word8) vector = "Fail: "
val x_805: unit = ()
val tuple_39: unit = ()
val sub_0: lambdas_235 = con subEnv_0 (tuple_39 (*()*))
val tuple_40: unit = ()
val new_0: lambdas_234 = con newEnv_0 (tuple_40 (*()*))
val x_806: list_2 = con nil_4
val x_807: unit = ()
val x_808: unit = ()
val x_809: unit = ()
val toRep_0: lambdas_233 = con toRepEnv_0 (x_809 (*()*))
val x_810: unit = ()
val toRep_1: lambdas_232 = con toRepEnv_1 (x_810 (*()*))
val x_811: unit = ()
val fromRep_0: lambdas_231 = con fromRepEnv_0 (x_811 (*()*))
val tuple_41: unit = ()
val ::?_0: lambdas_230 = con ::?Env_0 (tuple_41 (*()*))
val x_812: word32 = 0xFFFFFFFF:w32
val x_813: (word8) vector = "acces"
val x_814: (word8) vector = "addrinuse"
val x_815: (word8) vector = "addrnotavail"
val x_816: (word8) vector = "afnosupport"
val x_817: (word8) vector = "again"
val x_818: (word8) vector = "already"
val x_819: (word8) vector = "badf"
val x_820: (word8) vector = "badmsg"
val x_821: (word8) vector = "busy"
val x_822: (word8) vector = "canceled"
val x_823: (word8) vector = "child"
val x_824: (word8) vector = "connaborted"
val x_825: (word8) vector = "connrefused"
val x_826: (word8) vector = "connreset"
val x_827: (word8) vector = "deadlk"
val x_828: (word8) vector = "destaddrreq"
val x_829: (word8) vector = "dom"
val x_830: (word8) vector = "dquot"
val x_831: (word8) vector = "exist"
val x_832: (word8) vector = "fault"
val x_833: (word8) vector = "fbig"
val x_834: (word8) vector = "hostunreach"
val x_835: (word8) vector = "idrm"
val x_836: (word8) vector = "ilseq"
val x_837: (word8) vector = "inprogress"
val x_838: (word8) vector = "intr"
val x_839: (word8) vector = "inval"
val x_840: (word8) vector = "io"
val x_841: (word8) vector = "isconn"
val x_842: (word8) vector = "isdir"
val x_843: (word8) vector = "loop"
val x_844: (word8) vector = "mfile"
val x_845: (word8) vector = "mlink"
val x_846: (word8) vector = "msgsize"
val x_847: (word8) vector = "multihop"
val x_848: (word8) vector = "nametoolong"
val x_849: (word8) vector = "netdown"
val x_850: (word8) vector = "netreset"
val x_851: (word8) vector = "netunreach"
val x_852: (word8) vector = "nfile"
val x_853: (word8) vector = "nobufs"
val x_854: (word8) vector = "nodata"
val x_855: (word8) vector = "nodev"
val x_856: (word8) vector = "noent"
val x_857: (word8) vector = "noexec"
val x_858: (word8) vector = "nolck"
val x_859: (word8) vector = "nolink"
val x_860: (word8) vector = "nomem"
val x_861: (word8) vector = "nomsg"
val x_862: (word8) vector = "noprotoopt"
val x_863: (word8) vector = "nospc"
val x_864: (word8) vector = "nosr"
val x_865: (word8) vector = "nostr"
val x_866: (word8) vector = "nosys"
val x_867: (word8) vector = "notconn"
val x_868: (word8) vector = "notdir"
val x_869: (word8) vector = "notempty"
val x_870: (word8) vector = "notsock"
val x_871: (word8) vector = "notsup"
val x_872: (word8) vector = "notty"
val x_873: (word8) vector = "nxio"
val x_874: (word8) vector = "opnotsupp"
val x_875: (word8) vector = "overflow"
val x_876: (word8) vector = "perm"
val x_877: (word8) vector = "pipe"
val x_878: (word8) vector = "proto"
val x_879: (word8) vector = "protonosupport"
val x_880: (word8) vector = "prototype"
val x_881: (word8) vector = "range"
val x_882: (word8) vector = "rofs"
val x_883: (word8) vector = "spipe"
val x_884: (word8) vector = "srch"
val x_885: (word8) vector = "stale"
val x_886: (word8) vector = "time"
val x_887: (word8) vector = "timedout"
val x_888: (word8) vector = "toobig"
val x_889: (word8) vector = "txtbsy"
val x_890: (word8) vector = "wouldblock"
val x_891: (word8) vector = "xdev"
val x_892: list_3 = con nil_5
val x_893: unit = ()
val x_1476: (unit) ref = prim Ref_ref[unit] (x_893 (*()*))
val x_894: t_2 = con NONE_3
val x_895: unit = ()
val x_896: lambdas_228 = con xEnv_51 (x_895 (*()*))
val x_897: unit = ()
val x_898: list_7 = con nil_3
val x_899: (word8) vector = ""
val x_900: list_7 = con nil_3
val x_901: (word8) vector = "]"
val x_902: ((word8) vector, list_7) tuple = (x_901 (*"]"*), x_900 (*con nil_3*))
val x_903: list_7 = con ::_1 (x_902)
val x_904: t_27 = con NONE_4
val x_905: (word8) vector = "<UNKNOWN>"
val x_906: (word8) vector = " ["
val x_907: (word8) vector = "SysErr: "
val x_908: unit = ()
val x_909: (word8) vector = "Unknown error"
val x_910: bool = con false
val x_911: bool = con true
val x_912: word32 = 0x1:w32
val x_913: word32 = 0x0:w32
val x_914: unit = ()
val x_915: unit = ()
val x_916: word64 = 0x1:w64
val x_917: word64 = 0x0:w64
val x_1477: (word64, unit) tuple = (x_917 (*0x0:w64*), x_914 (*()*))
val x_918: unit = ()
val x_919: unit = ()
val x_920: lambdas_224 = con xEnv_52 (x_919 (*()*))
val x_921: unit = ()
val x_922: lambdas_46 = con xEnv_53 (x_921 (*()*))
val x_923: bool = con true
val x_924: (word8) vector = "IEEEReal rounding mode not supported"
val x_925: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_924 (*"IEEEReal  ... rted"*))
val x_926: exn = con Fail_0 (x_925)
val x_927: word32 = 0x0:w32
val x_928: unit = ()
val x_929: t_9 = con TO_NEAREST_0
val x_930: t_9 = con TO_NEGINF_0
val x_931: t_9 = con TO_POSINF_0
val x_932: t_9 = con TO_ZERO_0
val x_933: (word8) vector = "IEEEReal.RoundingMode.fromInt"
val x_934: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_933 (*"IEEEReal. ... mInt"*))
val x_935: exn = con Fail_0 (x_934)
val x_936: unit = ()
val x_937: lambdas_222 = con xEnv_54 (x_936 (*()*))
val x_938: float_class_0 = con INF_0
val x_939: float_class_0 = con NAN_1
val x_940: float_class_0 = con ZERO_1
val x_941: float_class_0 = con SUBNORMAL_1
val x_942: float_class_0 = con NORMAL_1
val x_1478: (word32, word32) tuple =
  (precision_4 (*0x18:w32*), precision_4 (*0x18:w32*))
val x_943: unit = ()
val x_944: lambdas_219 = con xEnv_55 (x_943 (*()*))
val x_1479: (lambdas_219, lambdas_354) tuple =
  (x_944 (*con xEnv_55 (x_943)*), toReal32Unsafe_0 (*con toReal ... _222)*))
val x_945: unit = ()
val x_946: word32 = 0x1:w32
val x_947: t_9 = con TO_NEAREST_0
val x_948: unit = ()
val x_949: word32 = 0x0:w32
val x_950: t_9 = con TO_NEAREST_0
val x_951: unit = ()
val x_952: word32 = 0x1:w32
val x_953: t_9 = con TO_NEAREST_0
val x_954: unit = ()
val x_955: word32 = 0x0:w32
val x_956: t_9 = con TO_NEAREST_0
val x_957: unit = ()
val x_958: word32 = 0x1:w32
val x_959: t_9 = con TO_NEAREST_0
val x_960: unit = ()
val x_961: word32 = 0x0:w32
val x_962: t_9 = con TO_NEAREST_0
val x_963: unit = ()
val x_964: word32 = 0x1:w32
val x_965: t_9 = con TO_NEAREST_0
val x_966: unit = ()
val x_967: word32 = 0x0:w32
val x_968: t_9 = con TO_NEAREST_0
val x_969: unit = ()
val x_970: t_9 = con TO_NEAREST_0
val x_971: unit = ()
val x_972: word32 = 0x0:w32
val x_973: t_9 = con TO_NEAREST_0
val x_974: unit = ()
val x_975: t_9 = con TO_NEAREST_0
val x_976: unit = ()
val x_977: word32 = 0x0:w32
val x_978: t_9 = con TO_NEAREST_0
val x_979: unit = ()
val x_980: t_9 = con TO_NEAREST_0
val x_981: unit = ()
val x_982: word32 = 0x0:w32
val x_983: t_9 = con TO_NEAREST_0
val x_984: unit = ()
val x_985: t_9 = con TO_NEAREST_0
val x_986: unit = ()
val x_987: word32 = 0x0:w32
val x_988: t_9 = con TO_NEAREST_0
val x_989: unit = ()
val x_990: float_class_0 = con INF_0
val x_991: float_class_0 = con NAN_1
val x_992: float_class_0 = con ZERO_1
val x_993: float_class_0 = con SUBNORMAL_1
val x_994: float_class_0 = con NORMAL_1
val x_1480: (word32, word32) tuple =
  (precision_5 (*0x35:w32*), precision_4 (*0x18:w32*))
val x_995: unit = ()
val x_996: lambdas_165 = con xEnv_56 (x_995 (*()*))
val x_1481: (lambdas_165, lambdas_328) tuple =
  (x_996 (*con xEnv_56 (x_995)*), toReal32Unsafe_1 (*con toReal ... _246)*))
val x_997: unit = ()
val x_998: word32 = 0x1:w32
val x_999: t_9 = con TO_NEAREST_0
val x_1000: unit = ()
val x_1001: word32 = 0x0:w32
val x_1002: t_9 = con TO_NEAREST_0
val x_1003: unit = ()
val x_1004: word32 = 0x1:w32
val x_1005: t_9 = con TO_NEAREST_0
val x_1006: unit = ()
val x_1007: word32 = 0x0:w32
val x_1008: t_9 = con TO_NEAREST_0
val x_1009: unit = ()
val x_1010: word32 = 0x1:w32
val x_1011: t_9 = con TO_NEAREST_0
val x_1012: unit = ()
val x_1013: word32 = 0x0:w32
val x_1014: t_9 = con TO_NEAREST_0
val x_1015: unit = ()
val x_1016: word32 = 0x1:w32
val x_1017: t_9 = con TO_NEAREST_0
val x_1018: unit = ()
val x_1019: word32 = 0x0:w32
val x_1020: t_9 = con TO_NEAREST_0
val x_1021: unit = ()
val x_1022: t_9 = con TO_NEAREST_0
val x_1023: unit = ()
val x_1024: word32 = 0x0:w32
val x_1025: t_9 = con TO_NEAREST_0
val x_1026: unit = ()
val x_1027: t_9 = con TO_NEAREST_0
val x_1028: unit = ()
val x_1029: word32 = 0x0:w32
val x_1030: t_9 = con TO_NEAREST_0
val x_1031: unit = ()
val x_1032: t_9 = con TO_NEAREST_0
val x_1033: unit = ()
val x_1034: word32 = 0x0:w32
val x_1035: t_9 = con TO_NEAREST_0
val x_1036: unit = ()
val x_1037: t_9 = con TO_NEAREST_0
val x_1038: unit = ()
val x_1039: word32 = 0x0:w32
val x_1040: t_9 = con TO_NEAREST_0
val x_1041: unit = ()
val ticksPerSecond_0: intInf = 1000000000:ii
val x_1042: intInf = 1:ii
val x_1482: (intInf, intInf) tuple =
  (ticksPerSecond_0 (*1000000000:ii*), x_1042 (*1:ii*))
val x_1043: word64 = 0xFFFFFFFFFFFFFFFF:w64
val x_1044: bool = con false
val x_1045: word64 = 0x2:w64
val x_1046: intInf = 1000000000:ii
val x_1047: unit = ()
val x_1048: (unit) ref = prim Ref_ref[unit] (x_1047 (*()*))
val x_1049: exn = con BlockingNotSupported_0 (x_1048)
val x_1050: unit = ()
val x_1051: (unit) ref = prim Ref_ref[unit] (x_1050 (*()*))
val x_1052: exn = con ClosedStream_0 (x_1051)
val x_1053: unit = ()
val x_1483: (unit) ref = prim Ref_ref[unit] (x_1053 (*()*))
val x_1054: t_2 = con NONE_3
val x_1055: unit = ()
val x_1056: lambdas_95 = con xEnv_57 (x_1055 (*()*))
val x_1057: unit = ()
val x_1058: list_7 = con nil_3
val x_1059: (word8) vector = "\" failed with "
val x_1060: (word8) vector = " \""
val x_1061: (word8) vector = "Io: "
val x_1062: unit = ()
val x_1063: word64 = 0x0:w64
val x_1064: t_7 = con NONE_5
val x_1065: unit = ()
val x_1066: t_7 = con NONE_5
val x_1067: unit = ()
val x_1068: t_7 = con NONE_5
val x_1069: word32 = 0x1:w32
val x_1070: word64 = 0x0:w64
val tuple_42: unit = ()
val loop_1: lambdas_93 = con loopEnv_1 (tuple_42 (*()*))
val x_1071: word32 = 0xFFFFFFFF:w32
val x_1072: unit = ()
val x_1484: (word32, word32) tuple =
  (sizeInBits_64 (*0x20:w32*), sizeInBits_32 (*0x40:w32*))
val x_1073: word32 = 0x0:w32
val x_1074: bool = con false
val x_1075: list_8 = con nil_6
val x_1076: unit = ()
val x_1077: unit = ()
val x_1078: t_24 = con NONE_6
val x_1079: unit = ()
val x_1080: unit = ()
val x_1081: unit = ()
val x_1082: word32 = 0xFFFFFFFF:w32
val x_1083: t_26 = con NONE_7
val x_1084: bool = con false
val x_1085: unit = ()
val x_1086: word32 = 0x0:w32
val x_1087: unit = ()
val x_1088: unit = ()
val x_1089: unit = ()
val x_1090: lambdas_86 = con xEnv_58 (x_1089 (*()*))
val x_1091: list_10 = con nil_7
val x_1092: unit = ()
val x_1093: unit = ()
val x_1094: unit = ()
val x_1095: unit = ()
val x_1096: unit = ()
val x_1097: unit = ()
val x_1098: unit = ()
val x_1099: unit = ()
val x_1100: lambdas_85 = con xEnv_59 (x_1099 (*()*))
val x_1101: list_10 = con nil_7
val x_1102: unit = ()
val x_1103: unit = ()
val x_1104: t_26 = con NONE_7
val x_1105: unit = ()
val x_1106: unit = ()
val x_1107: unit = ()
val x_1108: unit = ()
val x_1109: unit = ()
val x_1110: unit = ()
val x_1111: unit = ()
val x_1112: unit = ()
val x_1113: unit = ()
val x_1114: lambdas_83 = con xEnv_60 (x_1113 (*()*))
val x_1115: list_10 = con nil_7
val x_1116: unit = ()
val x_1117: unit = ()
val x_1118: unit = ()
val x_1119: unit = ()
val x_1120: unit = ()
val x_1121: word32 = 0xFFFFFFFF:w32
val x_1122: unit = ()
val x_1123: unit = ()
val x_1124: lambdas_82 = con xEnv_61 (x_1123 (*()*))
val x_1125: list_9 = con nil_8
val x_1126: unit = ()
val x_1127: unit = ()
val x_1128: t_25 = con NONE_8
val x_1129: unit = ()
val x_1130: unit = ()
val x_1131: unit = ()
val x_1132: word32 = 0x0:w32
val someElem_0: word8 = 0x0:w8
val tuple_43: unit = ()
val liftExn_0: lambdas_80 = con liftExnEnv_0 (tuple_43 (*()*))
val tuple_44: unit = ()
val terminated_0: lambdas_77 = con terminatedEnv_0 (tuple_44 (*()*))
val x_1133: bool = con false
val x_1134: bool = con true
val tuple_45: unit = ()
val outstreamWriter_0: lambdas_76 = con outstreamWriterEnv_0 (tuple_45 (*()*))
val tuple_46: unit = ()
val outstreamName_0: lambdas_75 = con outstreamNameEnv_0 (tuple_46 (*()*))
val tuple_47: unit = ()
val flushBuf_0: lambdas_74 = con flushBufEnv_0 (tuple_47 (*()*))
val x_1135: word32 = 0x0:w32
val x_1136: word32 = 0x0:w32
val x_1137: unit = ()
val x_1138: word32 = 0x0:w32
val x_1139: (word8) vector = "partial write"
val x_1140: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1139 (*"partial write"*))
val x_1141: exn = con Fail_0 (x_1140)
val tuple_48: unit = ()
val flushOut_0: lambdas_72 = con flushOutEnv_0 (tuple_48 (*()*))
val x_1142: unit = ()
val x_1143: unit = ()
val x_1144: (word8) vector = "flushOut"
val x_1145: list_5 = con nil_9
val x_1146: unit = ()
val tuple_49: unit = ()
val loop_2: lambdas_70 = con loopEnv_2 (tuple_49 (*()*))
val x_1147: bool = con false
val x_1148: bool = con true
val x_1149: unit = ()
val x_1150: unit = ()
val x_1151: unit = ()
val x_1152: state_0 = con Closed_1
val tuple_50: unit = ()
val doit_0: lambdas_69 = con doitEnv_0 (tuple_50 (*()*))
val x_1153: unit = ()
val x_1154: (word8) vector = "closeOut"
val tuple_51: unit = ()
val get_0: lambdas_68 = con getEnv_0 (tuple_51 (*()*))
val x_1155: bool = con false
val x_1156: (word8) vector = "<stdout>"
val x_1157: buffer_mode_0 = con LINE_BUF_0
val x_1158: buffer_mode_0 = con BLOCK_BUF_0
val x_1159: bool = con true
val x_1160: bool = con false
val x_1161: unit = ()
val x_1162: whence_0 = con SEEK_SET_1
val x_1163: unit = ()
val x_1164: whence_0 = con SEEK_CUR_1
val x_1165: unit = ()
val x_1166: t_12 = con NONE_9
val x_1167: t_18 = con NONE_10
val x_1168: t_12 = con NONE_9
val x_1169: t_12 = con NONE_9
val x_1170: list_4 = con nil_10
val x_1171: (word32, list_4) tuple =
  (APPEND_0 (*0x400:w32*), x_1170 (*con nil_10*))
val x_1172: list_4 = con ::_2 (x_1171)
val x_1173: word64 = 0xFFFFFFFFFFFFFFFF:w64
val x_1174: t_25 = con NONE_8
val x_1175: bool = con false
val x_1176: unit = ()
val x_1177: word32 = 0x0:w32
val x_1178: unit = ()
val x_1179: unit = ()
val x_1180: unit = ()
val x_1181: lambdas_59 = con xEnv_62 (x_1180 (*()*))
val x_1182: list_9 = con nil_8
val x_1183: unit = ()
val x_1184: unit = ()
val x_1185: unit = ()
val x_1186: unit = ()
val x_1187: unit = ()
val x_1188: unit = ()
val x_1189: unit = ()
val x_1190: unit = ()
val x_1191: lambdas_58 = con xEnv_63 (x_1190 (*()*))
val x_1192: list_9 = con nil_8
val x_1193: unit = ()
val x_1194: unit = ()
val x_1195: t_25 = con NONE_8
val x_1196: unit = ()
val x_1197: unit = ()
val x_1198: unit = ()
val x_1199: unit = ()
val x_1200: unit = ()
val x_1201: unit = ()
val x_1202: unit = ()
val x_1203: unit = ()
val x_1204: unit = ()
val x_1205: lambdas_56 = con xEnv_64 (x_1204 (*()*))
val x_1206: list_9 = con nil_8
val x_1207: unit = ()
val x_1208: unit = ()
val x_1209: unit = ()
val x_1210: unit = ()
val x_1211: word64 = 0xFFFFFFFFFFFFFFFF:w64
val x_1212: t_25 = con NONE_8
val x_1213: bool = con false
val x_1214: unit = ()
val x_1215: word32 = 0x0:w32
val x_1216: unit = ()
val x_1217: unit = ()
val x_1218: unit = ()
val x_1219: lambdas_51 = con xEnv_65 (x_1218 (*()*))
val x_1220: list_9 = con nil_8
val x_1221: unit = ()
val x_1222: unit = ()
val x_1223: unit = ()
val x_1224: unit = ()
val x_1225: unit = ()
val x_1226: unit = ()
val x_1227: unit = ()
val x_1228: unit = ()
val x_1229: lambdas_50 = con xEnv_66 (x_1228 (*()*))
val x_1230: list_9 = con nil_8
val x_1231: unit = ()
val x_1232: unit = ()
val x_1233: t_25 = con NONE_8
val x_1234: unit = ()
val x_1235: unit = ()
val x_1236: unit = ()
val x_1237: unit = ()
val x_1238: unit = ()
val x_1239: unit = ()
val x_1240: unit = ()
val x_1241: unit = ()
val x_1242: unit = ()
val x_1243: lambdas_48 = con xEnv_67 (x_1242 (*()*))
val x_1244: list_9 = con nil_8
val x_1245: unit = ()
val x_1246: unit = ()
val x_1247: unit = ()
val x_1248: unit = ()
val x_1249: unit = ()
val x_1250: bool = con true
val x_1251: unit = ()
val x_1252: lambdas_47 = con xEnv_68 (x_1251 (*()*))
val x_1253: word32 = 0xFFFFFFFF:w32
val x_1254: t_26 = con NONE_7
val x_1255: bool = con false
val x_1256: unit = ()
val x_1257: word32 = 0x0:w32
val x_1258: unit = ()
val x_1259: unit = ()
val x_1260: unit = ()
val x_1261: lambdas_42 = con xEnv_69 (x_1260 (*()*))
val x_1262: list_10 = con nil_7
val x_1263: unit = ()
val x_1264: unit = ()
val x_1265: unit = ()
val x_1266: unit = ()
val x_1267: unit = ()
val x_1268: unit = ()
val x_1269: unit = ()
val x_1270: unit = ()
val x_1271: lambdas_41 = con xEnv_70 (x_1270 (*()*))
val x_1272: list_10 = con nil_7
val x_1273: unit = ()
val x_1274: unit = ()
val x_1275: t_26 = con NONE_7
val x_1276: unit = ()
val x_1277: unit = ()
val x_1278: unit = ()
val x_1279: unit = ()
val x_1280: unit = ()
val x_1281: unit = ()
val x_1282: unit = ()
val x_1283: unit = ()
val x_1284: unit = ()
val x_1285: lambdas_39 = con xEnv_71 (x_1284 (*()*))
val x_1286: list_10 = con nil_7
val x_1287: unit = ()
val x_1288: unit = ()
val x_1289: unit = ()
val x_1290: unit = ()
val x_1291: unit = ()
val x_1292: t_10 = con NONE_11
val x_1293: t_11 = con NONE_12
val x_1294: bool = con true
val x_1295: unit = ()
val x_1296: unit = ()
val x_1297: list_4 = con nil_10
val x_1298: bool = con false
val x_1299: unit = ()
val x_1300: unit = ()
val x_1301: list_4 = con nil_10
val x_1302: unit = ()
val x_1303: t_0 = con NONE_1
val x_1304: unit = ()
val x_1305: bool = con true
val x_1306: unit = ()
val x_1307: unit = ()
val x_1308: list_4 = con nil_10
val x_1309: bool = con false
val x_1310: unit = ()
val x_1311: unit = ()
val x_1312: list_4 = con nil_10
val x_1313: unit = ()
val x_1314: t_0 = con NONE_1
val x_1315: unit = ()
val x_1316: state_0 = con Active_1
val x_1317: bufferMode_0 = con NO_BUF_0
val x_1318: word32 = 0x0:w32
val x_1485: (word32) ref = prim Ref_ref[word32] (x_1318 (*0x0:w32*))
val x_1319: word32 = 0x0:w32
val x_1486: (word32) ref = prim Ref_ref[word32] (x_1319 (*0x0:w32*))
val x_1320: unit = ()
val x_1321: lambdas_36 = con xEnv_72 (x_1320 (*()*))
val x_1322: word32 = 0x1:w32
val x_1323: word32 = 0x0:w32
val x_1324: bool = con false
val tuple_52: unit = ()
val halt_0: lambdas_35 = con haltEnv_0 (tuple_52 (*()*))
val x_1325: (word8) vector = "MLton.Exit.halt"
val x_1326: (word8) vector = "MLton.Exit.exit"
val x_1327: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1326 (*"MLton.Exit.exit"*))
val x_1328: exn = con Fail_0 (x_1327)
val x_1329: bool = con true
val x_1330: word32 = 0x0:w32
val x_1331: word32 = 0x100:w32
val x_1332: bool = con false
val x_1333: unit = ()
val tuple_53: unit = ()
val loop_3: lambdas_34 = con loopEnv_3 (tuple_53 (*()*))
val x_1334: unit = ()
val x_1335: unit = ()
val x_1336: (word8) vector = "MLton.Exit.exit"
val x_1337: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1336 (*"MLton.Exit.exit"*))
val x_1338: exn = con Fail_0 (x_1337)
val x_1339: list_7 = con nil_3
val x_1340: (word8) vector = "exit must have 0 <= status < 256"
val x_1341: ((word8) vector, list_7) tuple =
  (x_1340 (*"exit must ...  256"*), x_1339 (*con nil_3*))
val x_1342: list_7 = con ::_1 (x_1341)
val x_1343: (word8) vector = "): "
val x_1344: ((word8) vector, list_7) tuple =
  (x_1343 (*"): "*), x_1342 (*con ::_1 (x_1341)*))
val x_1345: list_7 = con ::_1 (x_1344)
val x_1346: (word8) vector = "MLton.Exit.exit("
val x_1347: (word8) vector = "Top-level suffix returned.\n"
val x_1348: (word8) vector = "Top-level suffix raised exception.\n"
val x_1349: (word8) vector = "MLton.Exit.wrapSuffix"
val x_1350: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1349 (*"MLton.Exi ... ffix"*))
val x_1351: exn = con Fail_0 (x_1350)
val x_1352: list_7 = con nil_3
val x_1353: (word8) vector = "\n"
val x_1354: ((word8) vector, list_7) tuple =
  (x_1353 (*"\n"*), x_1352 (*con nil_3*))
val x_1355: list_7 = con ::_1 (x_1354)
val x_1356: (word8) vector = "unhandled exception: "
val x_1357: (word8) vector = "Top-level handler returned.\n"
val x_1358: (word8) vector = "Top-level handler raised exception.\n"
val x_1359: (word8) vector = "MLton.Exn.wrapHandler"
val x_1360: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1359 (*"MLton.Exn ... dler"*))
val x_1361: exn = con Fail_0 (x_1360)
val x_1362: list_6 = con nil_11
val tuple_54: unit = ()
val make_0: lambdas_28 = con makeEnv_0 (tuple_54 (*()*))
val x_1363: bool = con false
val x_1364: bool = con false
val x_1365: unit = ()
val x_1366: unit = ()
val x_1367: (word8) vector = "setCurrent of freed profile data"
val x_1368: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1367 (*"setCurren ... data"*))
val x_1369: exn = con Fail_0 (x_1368)
val x_1370: unit = ()
val x_1371: bool = con false
val x_1372: bool = con true
val x_1373: unit = ()
val x_1374: unit = ()
val x_1375: unit = ()
val x_1376: unit = ()
val x_1377: unit = ()
val x_1378: (word8) vector = "mlmon.out"
val x_1379: unit = ()
val x_1380: (word8) vector = "write of freed profile data"
val x_1381: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1380 (*"write of  ... data"*))
val x_1382: exn = con Fail_0 (x_1381)
val x_1383: unit = ()
val x_1384: word8 = 0x0:w8
val x_1385: word64 = 0x1:w64
val x_1386: (word8) vector = "NullString.fromString"
val x_1387: ((unit) ref, (word8) vector) tuple =
  (x_1446, x_1386 (*"NullStrin ... ring"*))
val x_1388: exn = con Fail8_0 (x_1387)
val x_1389: unit = ()
val tuple_55: unit = ()
val loop_4: lambdas_24 = con loopEnv_4 (tuple_55 (*()*))
val x_1390: unit = ()
val x_1391: list_6 = con nil_11
val x_1392: unit = ()
val x_1393: unit = ()
val tuple_56: unit = ()
val factorial_0: lambdas_21 = con factorialEnv_0 (tuple_56 (*()*))
val x_1394: word32 = 0x1:w32
val x_1395: word32 = 0x1:w32
val x_1396: word32 = 0x5:w32
val x_1397: (word8) vector = "\n"
val x_1398: (word8) vector = "output"
val x_1399: unit = ()
val x_1400: bool = con true
val x_1401: unit = ()
val x_1402: unit = ()
val x_1403: word32 = 0x0:w32
val x_1404: (word8) vector = "partial write"
val x_1405: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1404 (*"partial write"*))
val x_1406: exn = con Fail_0 (x_1405)
val x_1407: unit = ()
val x_1408: unit = ()
val x_1409: (word8) vector = "Sequence.length"
val x_1410: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1409 (*"Sequence.length"*))
val x_1411: exn = con Fail_0 (x_1410)
val x_1412: unit = ()
val x_1413: bool = con true
val x_1414: bool = con false
val x_1415: unit = ()
val x_1416: bool = con true
val x_1417: word64 = 0x1:w64
val x_1418: unit = ()
val x_1419: word64 = 0x1:w64
val x_1420: word64 = 0x0:w64
val x_1421: unit = ()
val x_1422: unit = ()
val x_1423: unit = ()
val x_1424: (word8) vector = "Sequence.length"
val x_1425: ((unit) ref, (word8) vector) tuple =
  (x_1456, x_1424 (*"Sequence.length"*))
val x_1426: exn = con Fail_0 (x_1425)
val x_1427: unit = ()
val x_1428: bool = con true
val x_1429: word64 = 0x1:w64
val x_1430: t_34 = con NONE_13
val x_1431: word8 = 0xA:w8
val x_1432: word64 = 0x1:w64
val x_1433: bool = con false
val x_1434: bool = con true
val x_1435: unit = ()
val x_1436: bool = con true
val x_1437: word64 = 0x1:w64
val x_1438: unit = ()
val x_1439: word64 = 0x1:w64
val x_1440: word64 = 0x0:w64
val x_1441: unit = ()
val x_1442: unit = ()
val x_1443: (word8) vector = "output"
val x_1444: unit = ()
val x_1445: (word8) vector = "toplevel handler not installed"


(* Functions: *)
fun noinline main_0 (): {returns = Some (unit), raises = None} = L_0 ()
  block L_0 ()
    case x_2 (*con xEnv_0 (x_1)*) of
      xEnv_0 => L_1
  block L_1 (x_1487: unit)
    val x_1489: lambdas_482 = con xEnv_232 (x_1487)
    val x_1488: (lambdas_482) ref = prim Ref_ref[lambdas_482] (x_1489)
    case x_5 (*con xEnv_1 (x_4)*) of
      xEnv_1 => L_2
  block L_2 (x_1490: unit)
    val x_1492: lambdas_480 = con xEnv_230 (x_1490)
    val x_1491: (lambdas_480) ref = prim Ref_ref[lambdas_480] (x_1492)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_3
  block L_3 (env_0: unit)
    call L_4 (zextdFromInt32ToWord32_1 (env_0, sizeInBits_7 (*0x8:w32*))) handle _ => L_5
  block L_4 (sizeInBitsWord_0: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_6
  block L_6 (env_1: unit)
    call L_7 (zextdFromInt32ToWord32_1 (env_1, sizeInBits_15 (*0x10:w32*))) handle _ => L_5
  block L_7 (sizeInBitsWord_1: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_8
  block L_8 (env_2: unit)
    call L_9 (zextdFromInt32ToWord32_1 (env_2, sizeInBits_31 (*0x20:w32*))) handle _ => L_5
  block L_9 (sizeInBitsWord_2: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_10
  block L_10 (env_3: unit)
    call L_11 (zextdFromInt32ToWord32_1 (env_3, sizeInBits_32 (*0x40:w32*))) handle _ => L_5
  block L_11 (sizeInBitsWord_3: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_12
  block L_12 (env_4: unit)
    call L_13 (zextdFromInt32ToWord32_1 (env_4, sizeInBits_40 (*0x8:w32*))) handle _ => L_5
  block L_13 (sizeInBitsWord_4: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_14
  block L_14 (env_5: unit)
    call L_15 (zextdFromInt32ToWord32_1 (env_5, sizeInBits_48 (*0x10:w32*))) handle _ => L_5
  block L_15 (sizeInBitsWord_5: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_16
  block L_16 (env_6: unit)
    call L_17 (zextdFromInt32ToWord32_1 (env_6, sizeInBits_64 (*0x20:w32*))) handle _ => L_5
  block L_17 (sizeInBitsWord_6: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_18
  block L_18 (env_7: unit)
    call L_19 (zextdFromInt32ToWord32_1 (env_7, sizeInBits_65 (*0x40:w32*))) handle _ => L_5
  block L_19 (sizeInBitsWord_7: word32)
    case fromWord_0 (*con fromWo ... _190)*) of
      fromWordEnv_0 => L_20
  block L_20 (env_8: unit)
    call L_21 (fromWord_2 (env_8, x_191 (*0x0:w64*))) handle _ => L_5
  block L_21 (null_0: cpointer)
    case x_260 (*con xEnv_33 (x_259)*) of
      xEnv_33 => L_22
  block L_22 (x_1493: unit)
    val x_1494: lambdas_482 = con xEnv_233 (x_1493)
    val _: unit = prim Ref_assign[lambdas_482] (x_1488, x_1494)
    case x_263 (*con xEnv_34 (x_262)*) of
      xEnv_34 => L_23
  block L_23 (x_1495: unit)
    val x_1496: lambdas_480 = con xEnv_231 (x_1495)
    val _: unit = prim Ref_assign[lambdas_480] (x_1491, x_1496)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_24
  block L_24 (env_9: unit)
    call L_25 (x_1497 (env_9, x_1447)) handle _ => L_5
  block L_25 (x_1498: bool)
    case x_1498 of
      true => L_27 | false => L_26
  block L_26 ()
    val x_1499: (word32, word32) tuple = (sizeInBitsWord_4, sizeInBitsWord_0)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_28
  block L_28 (env_10: unit)
    call L_29 (x_1497 (env_10, x_1499)) handle _ => L_5
  block L_27 ()
    goto L_29 (x_266 (*con true*))
  block L_29 (x_1500: bool)
    case x_1500 of
      true => L_31 | false => L_30
  block L_30 ()
    case notb_0 (*con notbEn ... _132)*) of
      notbEnv_0 => L_32
  block L_32 (env_11: unit)
    call L_33 (notb_4 (env_11, x_271 (*0x0:w8*))) handle _ => L_5
  block L_33 (maxWord'_0: word8)
    case zextdFromInt32ToInt8_0 (*con zextdF ... _112)*) of
      zextdFromInt32ToInt8Env_0 => L_34
  block L_34 (env_12: unit)
    call L_35 (zextdFromInt32ToInt8_1 (env_12, x_272 (*0x0:w32*))) handle _ => L_5
  block L_35 (zero_1: word8)
    case zextdFromInt32ToInt8_0 (*con zextdF ... _112)*) of
      zextdFromInt32ToInt8Env_0 => L_36
  block L_36 (env_13: unit)
    call L_37 (zextdFromInt32ToInt8_1 (env_13, x_273 (*0x1:w32*))) handle _ => L_5
  block L_37 (one_0: word8)
    val x_1501: (word32, word32) tuple = (sizeInBitsWord_4, x_278 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_38
  block L_38 (env_14: unit)
    call L_39 (-_3 (env_14, x_1501)) handle _ => L_5
  block L_39 (x_1502: word32)
    val x_1503: (word8, word32) tuple = (one_0, x_1502)
    case x_275 (*con xEnv_36 (x_274)*) of
      xEnv_36 => L_40
  block L_40 (env_15: unit)
    call L_41 (x_1504 (env_15, x_1503)) handle _ => L_5
  block L_41 (minInt'_0: word8)
    case idFromInt8ToWord8_0 (*con idFrom ... _104)*) of
      idFromInt8ToWord8Env_0 => L_42
  block L_42 (env_16: unit)
    call L_43 (idFromInt8ToWord8_1 (env_16, zero_1)) handle _ => L_5
  block L_43 (x_1505: word8)
    case notb_0 (*con notbEn ... _132)*) of
      notbEnv_0 => L_44
  block L_44 (env_17: unit)
    call L_45 (notb_4 (env_17, x_1505)) handle _ => L_5
  block L_45 (x_1506: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... _108)*) of
      idFromWord8ToInt8Env_0 => L_46
  block L_46 (env_18: unit)
    call L_47 (idFromWord8ToInt8_1 (env_18, x_1506)) handle _ => L_5
  block L_47 (x_1507: word8)
    val x_1508: (word8, word32) tuple = (x_1507, x_279 (*0x1:w32*))
    case x_277 (*con xEnv_37 (x_276)*) of
      xEnv_37 => L_48
  block L_48 (env_19: unit)
    call L_49 (x_1509 (env_19, x_1508)) handle _ => L_5
  block L_49 (maxInt'_0: word8)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_50
  block L_50 (env_20: unit)
    call L_51 (x_1497 (env_20, x_1448)) handle _ => L_5
  block L_51 (x_1510: bool)
    case x_1510 of
      true => L_53 | false => L_52
  block L_52 ()
    val x_1511: (word32, word32) tuple = (sizeInBitsWord_5, sizeInBitsWord_1)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_54
  block L_54 (env_21: unit)
    call L_55 (x_1497 (env_21, x_1511)) handle _ => L_5
  block L_53 ()
    goto L_55 (x_280 (*con true*))
  block L_55 (x_1512: bool)
    case x_1512 of
      true => L_57 | false => L_56
  block L_56 ()
    case notb_1 (*con notbEn ... _135)*) of
      notbEnv_1 => L_58
  block L_58 (env_22: unit)
    call L_59 (notb_5 (env_22, x_285 (*0x0:w16*))) handle _ => L_5
  block L_59 (maxWord'_1: word16)
    case zextdFromInt32ToInt16_0 (*con zextdF ... _113)*) of
      zextdFromInt32ToInt16Env_0 => L_60
  block L_60 (env_23: unit)
    call L_61 (zextdFromInt32ToInt16_1 (env_23, x_286 (*0x0:w32*))) handle _ => L_5
  block L_61 (zero_2: word16)
    case zextdFromInt32ToInt16_0 (*con zextdF ... _113)*) of
      zextdFromInt32ToInt16Env_0 => L_62
  block L_62 (env_24: unit)
    call L_63 (zextdFromInt32ToInt16_1 (env_24, x_287 (*0x1:w32*))) handle _ => L_5
  block L_63 (one_1: word16)
    val x_1513: (word32, word32) tuple = (sizeInBitsWord_5, x_292 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_64
  block L_64 (env_25: unit)
    call L_65 (-_3 (env_25, x_1513)) handle _ => L_5
  block L_65 (x_1514: word32)
    val x_1515: (word16, word32) tuple = (one_1, x_1514)
    case x_289 (*con xEnv_38 (x_288)*) of
      xEnv_38 => L_66
  block L_66 (env_26: unit)
    call L_67 (x_1516 (env_26, x_1515)) handle _ => L_5
  block L_67 (minInt'_1: word16)
    case idFromInt16ToWord16_0 (*con idFrom ... _105)*) of
      idFromInt16ToWord16Env_0 => L_68
  block L_68 (env_27: unit)
    call L_69 (idFromInt16ToWord16_1 (env_27, zero_2)) handle _ => L_5
  block L_69 (x_1517: word16)
    case notb_1 (*con notbEn ... _135)*) of
      notbEnv_1 => L_70
  block L_70 (env_28: unit)
    call L_71 (notb_5 (env_28, x_1517)) handle _ => L_5
  block L_71 (x_1518: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... _109)*) of
      idFromWord16ToInt16Env_0 => L_72
  block L_72 (env_29: unit)
    call L_73 (idFromWord16ToInt16_1 (env_29, x_1518)) handle _ => L_5
  block L_73 (x_1519: word16)
    val x_1520: (word16, word32) tuple = (x_1519, x_293 (*0x1:w32*))
    case x_291 (*con xEnv_39 (x_290)*) of
      xEnv_39 => L_74
  block L_74 (env_30: unit)
    call L_75 (x_1521 (env_30, x_1520)) handle _ => L_5
  block L_75 (maxInt'_1: word16)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_76
  block L_76 (env_31: unit)
    call L_77 (x_1497 (env_31, x_1449)) handle _ => L_5
  block L_77 (x_1522: bool)
    case x_1522 of
      true => L_79 | false => L_78
  block L_78 ()
    val x_1523: (word32, word32) tuple = (sizeInBitsWord_6, sizeInBitsWord_2)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_80
  block L_80 (env_32: unit)
    call L_81 (x_1497 (env_32, x_1523)) handle _ => L_5
  block L_79 ()
    goto L_81 (x_294 (*con true*))
  block L_81 (x_1524: bool)
    case x_1524 of
      true => L_83 | false => L_82
  block L_82 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_84
  block L_84 (env_33: unit)
    call L_85 (zextdFromWord32ToWord32_1 (env_33, x_299 (*0x0:w32*))) handle _ => L_5
  block L_85 (zero_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_86
  block L_86 (env_34: unit)
    call L_87 (zextdFromWord32ToWord32_1 (env_34, x_300 (*0x1:w32*))) handle _ => L_5
  block L_87 (one_2: word32)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_88
  block L_88 (env_35: unit)
    call L_89 (notb_6 (env_35, zero_3)) handle _ => L_5
  block L_89 (maxWord'_2: word32)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_90
  block L_90 (env_36: unit)
    call L_91 (zextdFromInt32ToInt32_1 (env_36, x_301 (*0x0:w32*))) handle _ => L_5
  block L_91 (zero_4: word32)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_92
  block L_92 (env_37: unit)
    call L_93 (zextdFromInt32ToInt32_1 (env_37, x_302 (*0x1:w32*))) handle _ => L_5
  block L_93 (one_3: word32)
    val x_1525: (word32, word32) tuple = (sizeInBitsWord_6, x_307 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_94
  block L_94 (env_38: unit)
    call L_95 (-_3 (env_38, x_1525)) handle _ => L_5
  block L_95 (x_1526: word32)
    val x_1527: (word32, word32) tuple = (one_3, x_1526)
    case x_304 (*con xEnv_40 (x_303)*) of
      xEnv_40 => L_96
  block L_96 (env_39: unit)
    call L_97 (x_1528 (env_39, x_1527)) handle _ => L_5
  block L_97 (minInt'_2: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_98
  block L_98 (env_40: unit)
    call L_99 (idFromInt32ToWord32_1 (env_40, zero_4)) handle _ => L_5
  block L_99 (x_1529: word32)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_100
  block L_100 (env_41: unit)
    call L_101 (notb_6 (env_41, x_1529)) handle _ => L_5
  block L_101 (x_1530: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_102
  block L_102 (env_42: unit)
    call L_103 (idFromWord32ToInt32_1 (env_42, x_1530)) handle _ => L_5
  block L_103 (x_1531: word32)
    val x_1532: (word32, word32) tuple = (x_1531, x_308 (*0x1:w32*))
    case x_306 (*con xEnv_41 (x_305)*) of
      xEnv_41 => L_104
  block L_104 (env_43: unit)
    call L_105 (x_1533 (env_43, x_1532)) handle _ => L_5
  block L_105 (maxInt'_2: word32)
    val tuple_57: (word32, word32, word32) tuple = (zero_4, minInt'_2, one_3)
    val quot_0: lambdas_250 = con quotEnv_1 (tuple_57)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_106
  block L_106 (env_44: unit)
    call L_107 (x_1497 (env_44, x_1450)) handle _ => L_5
  block L_107 (x_1534: bool)
    case x_1534 of
      true => L_109 | false => L_108
  block L_108 ()
    val x_1535: (word32, word32) tuple = (sizeInBitsWord_7, sizeInBitsWord_3)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_110
  block L_110 (env_45: unit)
    call L_111 (x_1497 (env_45, x_1535)) handle _ => L_5
  block L_109 ()
    goto L_111 (x_310 (*con true*))
  block L_111 (x_1536: bool)
    case x_1536 of
      true => L_113 | false => L_112
  block L_112 ()
    case zextdFromWord32ToWord64_0 (*con zextdF ... _120)*) of
      zextdFromWord32ToWord64Env_0 => L_114
  block L_114 (env_46: unit)
    call L_115 (zextdFromWord32ToWord64_1 (env_46, x_315 (*0x0:w32*))) handle _ => L_5
  block L_115 (zero_5: word64)
    case zextdFromWord32ToWord64_0 (*con zextdF ... _120)*) of
      zextdFromWord32ToWord64Env_0 => L_116
  block L_116 (env_47: unit)
    call L_117 (zextdFromWord32ToWord64_1 (env_47, x_316 (*0x1:w32*))) handle _ => L_5
  block L_117 (one_4: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_118
  block L_118 (env_48: unit)
    call L_119 (notb_7 (env_48, zero_5)) handle _ => L_5
  block L_119 (maxWord'_3: word64)
    case zextdFromInt32ToInt64_0 (*con zextdF ... _115)*) of
      zextdFromInt32ToInt64Env_0 => L_120
  block L_120 (env_49: unit)
    call L_121 (zextdFromInt32ToInt64_1 (env_49, x_317 (*0x0:w32*))) handle _ => L_5
  block L_121 (zero_6: word64)
    case zextdFromInt32ToInt64_0 (*con zextdF ... _115)*) of
      zextdFromInt32ToInt64Env_0 => L_122
  block L_122 (env_50: unit)
    call L_123 (zextdFromInt32ToInt64_1 (env_50, x_318 (*0x1:w32*))) handle _ => L_5
  block L_123 (one_5: word64)
    val x_1537: (word32, word32) tuple = (sizeInBitsWord_7, x_323 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_124
  block L_124 (env_51: unit)
    call L_125 (-_3 (env_51, x_1537)) handle _ => L_5
  block L_125 (x_1538: word32)
    val x_1539: (word64, word32) tuple = (one_5, x_1538)
    case x_320 (*con xEnv_42 (x_319)*) of
      xEnv_42 => L_126
  block L_126 (env_52: unit)
    call L_127 (x_1540 (env_52, x_1539)) handle _ => L_5
  block L_127 (minInt'_3: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_128
  block L_128 (env_53: unit)
    call L_129 (idFromInt64ToWord64_1 (env_53, zero_6)) handle _ => L_5
  block L_129 (x_1541: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_130
  block L_130 (env_54: unit)
    call L_131 (notb_7 (env_54, x_1541)) handle _ => L_5
  block L_131 (x_1542: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_132
  block L_132 (env_55: unit)
    call L_133 (idFromWord64ToInt64_1 (env_55, x_1542)) handle _ => L_5
  block L_133 (x_1543: word64)
    val x_1544: (word64, word32) tuple = (x_1543, x_324 (*0x1:w32*))
    case x_322 (*con xEnv_43 (x_321)*) of
      xEnv_43 => L_134
  block L_134 (env_56: unit)
    call L_135 (x_1545 (env_56, x_1544)) handle _ => L_5
  block L_135 (maxInt'_3: word64)
    val tuple_58: (word64, word64, word64) tuple = (zero_6, minInt'_3, one_5)
    val quot_1: lambdas_245 = con quotEnv_0 (tuple_58)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_136
  block L_136 (env_57: unit)
    call L_137 (valOf_2 (env_57, precision_0 (*con SOME_0 ... s_40)*))) handle _ => L_5
  block L_137 (x_1546: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_138
  block L_138 (env_58: unit)
    call L_139 (valOf_2 (env_58, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_139 (x_1547: word32)
    val x_1548: (word32, word32) tuple = (x_1547, x_1546)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_140
  block L_140 (env_59: unit)
    call L_141 (>=_6 (env_59, x_1548)) handle _ => L_5
  block L_141 (x_1549: bool)
    case x_1549 of
      true => L_143 | false => L_142
  block L_142 ()
    goto L_144 (maxInt'_3)
  block L_143 ()
    case sextdFromInt8ToInt64_0 (*con sextdF ... _123)*) of
      sextdFromInt8ToInt64Env_0 => L_145
  block L_145 (env_60: unit)
    call L_144 (sextdFromInt8ToInt64_1 (env_60, maxInt'_0)) handle _ => L_5
  block L_144 (x_1550: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_146
  block L_146 (env_61: unit)
    call L_147 (valOf_2 (env_61, precision_1 (*con SOME_0 ... s_48)*))) handle _ => L_5
  block L_147 (x_1551: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_148
  block L_148 (env_62: unit)
    call L_149 (valOf_2 (env_62, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_149 (x_1552: word32)
    val x_1553: (word32, word32) tuple = (x_1552, x_1551)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_150
  block L_150 (env_63: unit)
    call L_151 (>=_6 (env_63, x_1553)) handle _ => L_5
  block L_151 (x_1554: bool)
    case x_1554 of
      true => L_153 | false => L_152
  block L_152 ()
    goto L_154 (maxInt'_3)
  block L_153 ()
    case sextdFromInt16ToInt64_0 (*con sextdF ... _124)*) of
      sextdFromInt16ToInt64Env_0 => L_155
  block L_155 (env_64: unit)
    call L_154 (sextdFromInt16ToInt64_1 (env_64, maxInt'_1)) handle _ => L_5
  block L_154 (x_1555: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_156
  block L_156 (env_65: unit)
    call L_157 (valOf_2 (env_65, precision_2 (*con SOME_0 ... s_64)*))) handle _ => L_5
  block L_157 (x_1556: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_158
  block L_158 (env_66: unit)
    call L_159 (valOf_2 (env_66, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_159 (x_1557: word32)
    val x_1558: (word32, word32) tuple = (x_1557, x_1556)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_160
  block L_160 (env_67: unit)
    call L_161 (>=_6 (env_67, x_1558)) handle _ => L_5
  block L_161 (x_1559: bool)
    case x_1559 of
      true => L_163 | false => L_162
  block L_162 ()
    goto L_164 (maxInt'_3)
  block L_163 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_165
  block L_165 (env_68: unit)
    call L_164 (sextdFromInt32ToInt64_1 (env_68, maxInt'_2)) handle _ => L_5
  block L_164 (x_1560: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_166
  block L_166 (env_69: unit)
    call L_167 (valOf_2 (env_69, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_167 (x_1561: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_168
  block L_168 (env_70: unit)
    call L_169 (valOf_2 (env_70, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_169 (x_1562: word32)
    val x_1563: (word32, word32) tuple = (x_1562, x_1561)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_170
  block L_170 (env_71: unit)
    call L_171 (>=_6 (env_71, x_1563)) handle _ => L_5
  block L_171 (x_1564: bool)
    case x_1564 of
      true => L_173 | false => L_172
  block L_172 ()
    goto L_174 (maxInt'_3)
  block L_173 ()
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_175
  block L_175 (env_72: unit)
    call L_174 (sextdFromInt64ToInt64_1 (env_72, maxInt'_3)) handle _ => L_5
  block L_174 (x_1565: word64)
    val arrayAlloc_0: lambdas_485 = con arrayAllocEnv_0 (x_1560)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_176
  block L_176 (env_73: unit)
    call L_177 (valOf_3 (env_73, precision_0 (*con SOME_0 ... s_40)*))) handle _ => L_5
  block L_177 (x_1566: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_178
  block L_178 (env_74: unit)
    call L_179 (valOf_3 (env_74, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_179 (x_1567: word32)
    val x_1568: (word32, word32) tuple = (x_1567, x_1566)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_180
  block L_180 (env_75: unit)
    call L_181 (>=_6 (env_75, x_1568)) handle _ => L_5
  block L_181 (x_1569: bool)
    case x_1569 of
      true => L_183 | false => L_182
  block L_182 ()
    goto L_184 (maxInt'_3)
  block L_183 ()
    case sextdFromInt8ToInt64_0 (*con sextdF ... _123)*) of
      sextdFromInt8ToInt64Env_0 => L_185
  block L_185 (env_76: unit)
    call L_184 (sextdFromInt8ToInt64_1 (env_76, maxInt'_0)) handle _ => L_5
  block L_184 (x_1570: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_186
  block L_186 (env_77: unit)
    call L_187 (valOf_3 (env_77, precision_1 (*con SOME_0 ... s_48)*))) handle _ => L_5
  block L_187 (x_1571: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_188
  block L_188 (env_78: unit)
    call L_189 (valOf_3 (env_78, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_189 (x_1572: word32)
    val x_1573: (word32, word32) tuple = (x_1572, x_1571)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_190
  block L_190 (env_79: unit)
    call L_191 (>=_6 (env_79, x_1573)) handle _ => L_5
  block L_191 (x_1574: bool)
    case x_1574 of
      true => L_193 | false => L_192
  block L_192 ()
    goto L_194 (maxInt'_3)
  block L_193 ()
    case sextdFromInt16ToInt64_0 (*con sextdF ... _124)*) of
      sextdFromInt16ToInt64Env_0 => L_195
  block L_195 (env_80: unit)
    call L_194 (sextdFromInt16ToInt64_1 (env_80, maxInt'_1)) handle _ => L_5
  block L_194 (x_1575: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_196
  block L_196 (env_81: unit)
    call L_197 (valOf_3 (env_81, precision_2 (*con SOME_0 ... s_64)*))) handle _ => L_5
  block L_197 (x_1576: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_198
  block L_198 (env_82: unit)
    call L_199 (valOf_3 (env_82, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_199 (x_1577: word32)
    val x_1578: (word32, word32) tuple = (x_1577, x_1576)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_200
  block L_200 (env_83: unit)
    call L_201 (>=_6 (env_83, x_1578)) handle _ => L_5
  block L_201 (x_1579: bool)
    case x_1579 of
      true => L_203 | false => L_202
  block L_202 ()
    goto L_204 (maxInt'_3)
  block L_203 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_205
  block L_205 (env_84: unit)
    call L_204 (sextdFromInt32ToInt64_1 (env_84, maxInt'_2)) handle _ => L_5
  block L_204 (x_1580: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_206
  block L_206 (env_85: unit)
    call L_207 (valOf_3 (env_85, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_207 (x_1581: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_208
  block L_208 (env_86: unit)
    call L_209 (valOf_3 (env_86, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_209 (x_1582: word32)
    val x_1583: (word32, word32) tuple = (x_1582, x_1581)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_210
  block L_210 (env_87: unit)
    call L_211 (>=_6 (env_87, x_1583)) handle _ => L_5
  block L_211 (x_1584: bool)
    case x_1584 of
      true => L_213 | false => L_212
  block L_212 ()
    goto L_214 (maxInt'_3)
  block L_213 ()
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_215
  block L_215 (env_88: unit)
    call L_214 (sextdFromInt64ToInt64_1 (env_88, maxInt'_3)) handle _ => L_5
  block L_214 (x_1585: word64)
    val arrayAlloc_1: lambdas_494 = con arrayAllocEnv_1 (x_1580)
    val sequence_0: lambdas_495 = con sequenceEnv_0 (arrayAlloc_1)
    val tuple_59: (word32, word64) tuple = (sizeInBitsWord_3, zero_5)
    val sextdFromInt64_0: lambdas_492 = con sextdFromInt64Env_0 (tuple_59)
    call L_216 (quot_2 (tuple_57, x_1454)) handle _ => L_5
  block L_216 (x_1586: word32)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_217
  block L_217 (env_89: unit)
    call L_218 (zextdFromInt32ToWord64_1 (env_89, x_1586)) handle _ => L_5
  block L_218 (bytesPerMPLimb_0: word64)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_219
  block L_219 (env_90: unit)
    call L_220 (zextdFromInt32ToWord64_1 (env_90, bytes_0 (*0x18:w32*))) handle _ => L_5
  block L_220 (bytesPerSequenceMetaData_0: word64)
    val tuple_60: (word64, word64) tuple =
      (bytesPerMPLimb_0, bytesPerSequenceMetaData_0)
    val reserve_0: lambdas_493 = con reserveEnv_0 (tuple_60)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_221
  block L_221 (env_91: unit)
    call L_222 (idFromInt64ToWord64_1 (env_91, minInt'_3)) handle _ => L_5
  block L_222 (x_1587: word64)
    val x_1588: (word64, word32) tuple = (x_1587, x_370 (*0x1:w32*))
    case ~>>?_0 (*con ~>>?En ... _149)*) of
      ~>>?Env_0 => L_223
  block L_223 (env_92: unit)
    call L_224 (~>>?_1 (env_92, x_1588)) handle _ => L_5
  block L_224 (x_1589: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_225
  block L_225 (env_93: unit)
    call L_226 (idFromWord64ToInt64_1 (env_93, x_1589)) handle _ => L_5
  block L_226 (x_1590: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_227
  block L_227 (env_94: unit)
    call L_228 (zextdFromInt64ToWord64_1 (env_94, x_1590)) handle _ => L_5
  block L_228 (badObjptrWord_0: word64)
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_229
  block L_229 (env_95: unit)
    call L_230 (addTag_1 (env_95, badObjptrWord_0)) handle _ => L_5
  block L_230 (badObjptrWordTagged_0: word64)
    case x_167 (*con xEnv_23 (x_166)*) of
      xEnv_23 => L_231
  block L_231 (env_96: unit)
    call L_232 (x_1591 (env_96, x_1590)) handle _ => L_5
  block L_232 (x_1592: word64)
    call L_233 (sextdFromInt64_1 (tuple_59, x_1592)) handle _ => L_5
  block L_233 (negBadIntInf_0: intInf)
    val tuple_63:
      (word64, word32, word32, word32, lambdas_250, word32, word32, word32) tuple =
      (bytesPerSequenceMetaData_0,
       minInt'_2,
       one_3,
       zero_4,
       quot_0,
       sizeInBitsWord_2,
       zero_3,
       one_2)
    val messagers_0: (list_0) ref = prim Ref_ref[list_0] (x_385 (*con nil_1*))
    val exnMessage_0: lambdas_32 = con exnMessageEnv_0 (messagers_0)
    val tuple_62: (lambdas_495, lambdas_494) tuple = (sequence_0, arrayAlloc_1)
    val append_0: lambdas_27 = con appendEnv_0 (tuple_62)
    val tuple_61: (lambdas_494, lambdas_485, lambdas_495) tuple =
      (arrayAlloc_1, arrayAlloc_0, sequence_0)
    val concat_0: lambdas_31 = con concatEnv_0 (tuple_61)
    val new_1: lambdas_286 = con newEnv_1 (arrayAlloc_0)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_234
  block L_234 (env_97: unit)
    call L_235 (range_1 (env_97, x_1459)) handle _ => L_5
  block L_235 (x_1593: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_236
  block L_236 (env_98: unit)
    call L_237 (fromIntForLength_1 (env_98, x_435 (*0x100:w32*))) handle _ => L_5
  block L_237 (x_1594: word64)
    val x_1595: (word64, word64) tuple = (x_1594, x_1560)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_238
  block L_238 (env_99: unit)
    call L_239 (>_5 (env_99, x_1595)) handle _ => L_5
  block L_239 (x_1596: bool)
    case x_1596 of
      true => L_241 | false => L_240
  block L_240 ()
    val x_1597: (t_0) array = prim Array_alloc[t_0] (x_1594)
    val tuple_64: (word64, lambdas_1, (t_0) array) tuple =
      (x_1594, x_1593, x_1597)
    call L_242 (loop_5 (tuple_64, x_1460)) handle _ => L_5
  block L_242 (b_0: unit)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_243
  block L_243 (env_100: unit)
    call L_244 (range_1 (env_100, x_1461)) handle _ => L_5
  block L_244 (x_1598: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_245
  block L_245 (env_101: unit)
    call L_246 (fromIntForLength_1 (env_101, x_435 (*0x100:w32*))) handle _ => L_5
  block L_246 (x_1599: word64)
    val x_1600: (word64, word64) tuple = (x_1599, x_1560)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_247
  block L_247 (env_102: unit)
    call L_248 (>_5 (env_102, x_1600)) handle _ => L_5
  block L_248 (x_1601: bool)
    case x_1601 of
      true => L_250 | false => L_249
  block L_249 ()
    val x_1602: (t_0) array = prim Array_alloc[t_0] (x_1599)
    val tuple_65: (word64, lambdas_1, (t_0) array) tuple =
      (x_1599, x_1598, x_1602)
    call L_251 (loop_6 (tuple_65, x_1462)) handle _ => L_5
  block L_251 (b_1: unit)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_252
  block L_252 (env_103: unit)
    call L_253 (range_1 (env_103, x_1463)) handle _ => L_5
  block L_253 (x_1603: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_254
  block L_254 (env_104: unit)
    call L_255 (fromIntForLength_1 (env_104, x_435 (*0x100:w32*))) handle _ => L_5
  block L_255 (x_1604: word64)
    val x_1605: (word64, word64) tuple = (x_1604, x_1560)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_256
  block L_256 (env_105: unit)
    call L_257 (>_5 (env_105, x_1605)) handle _ => L_5
  block L_257 (x_1606: bool)
    case x_1606 of
      true => L_259 | false => L_258
  block L_258 ()
    val x_1607: (t_0) array = prim Array_alloc[t_0] (x_1604)
    val tuple_66: (word64, lambdas_1, (t_0) array) tuple =
      (x_1604, x_1603, x_1607)
    call L_260 (loop_7 (tuple_66, x_1464)) handle _ => L_5
  block L_260 (b_2: unit)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_261
  block L_261 (env_106: unit)
    call L_262 (range_1 (env_106, x_1465)) handle _ => L_5
  block L_262 (x_1608: lambdas_1)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_263
  block L_263 (env_107: unit)
    call L_264 (range_1 (env_107, x_1466)) handle _ => L_5
  block L_264 (x_1609: lambdas_1)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_265
  block L_265 (env_108: unit)
    call L_266 (range_1 (env_108, x_1467)) handle _ => L_5
  block L_266 (x_1610: lambdas_1)
    val x_1616: (lambdas_1, list_1) tuple = (x_1610, x_473 (*con nil_2*))
    val x_1615: list_1 = con ::_4 (x_1616)
    val x_1614: (lambdas_1, list_1) tuple = (x_1609, x_1615)
    val x_1613: list_1 = con ::_4 (x_1614)
    val x_1612: (lambdas_1, list_1) tuple = (x_1608, x_1613)
    val x_1611: list_1 = con ::_4 (x_1612)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_267
  block L_267 (env_109: unit)
    call L_268 (fromIntForLength_1 (env_109, x_435 (*0x100:w32*))) handle _ => L_5
  block L_268 (x_1617: word64)
    val x_1618: (word64, word64) tuple = (x_1617, x_1560)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_269
  block L_269 (env_110: unit)
    call L_270 (>_5 (env_110, x_1618)) handle _ => L_5
  block L_270 (x_1619: bool)
    case x_1619 of
      true => L_272 | false => L_271
  block L_271 ()
    val x_1620: (t_0) array = prim Array_alloc[t_0] (x_1617)
    val tuple_67: (word64, list_1, (t_0) array) tuple = (x_1617, x_1611, x_1620)
    call L_273 (loop_8 (tuple_67, x_1468)) handle _ => L_5
  block L_273 (b_3: unit)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_274
  block L_274 (env_111: unit)
    call L_275 (fromIntForLength_1 (env_111, x_435 (*0x100:w32*))) handle _ => L_5
  block L_275 (x_1621: word64)
    val x_1622: (word64, word64) tuple = (x_1621, x_1560)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_276
  block L_276 (env_112: unit)
    call L_277 (>_5 (env_112, x_1622)) handle _ => L_5
  block L_277 (x_1623: bool)
    case x_1623 of
      true => L_279 | false => L_278
  block L_278 ()
    val x_1624: (bool) array = prim Array_alloc[bool] (x_1621)
    val tuple_68: (word64, (bool) array) tuple = (x_1621, x_1624)
    call L_280 (loop_9 (tuple_68, x_1469)) handle _ => L_5
  block L_280 (b_4: unit)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_281
  block L_281 (env_113: unit)
    call L_282 (zextdFromInt32ToInt32_1 (env_113, sizeInBits_40 (*0x8:w32*))) handle _ => L_5
  block L_282 (precision'_0: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_283
  block L_283 (env_114: unit)
    call L_284 (zextdFromWord32ToWord32_1 (env_114, sizeInBitsWord_4)) handle _ => L_5
  block L_284 (sizeInBitsWord_8: word32)
    val tuple_70: (word32, word8) tuple = (sizeInBitsWord_8, zero_1)
    val <<_0: lambdas_162 = con <<Env_7 (tuple_70)
    val tuple_69: (word32, word8) tuple = (sizeInBitsWord_8, zero_1)
    val >>_0: lambdas_161 = con >>Env_7 (tuple_69)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_285
  block L_285 (env_115: unit)
    call L_286 (zextdFromInt32ToInt32_1 (env_115, sizeInBits_48 (*0x10:w32*))) handle _ => L_5
  block L_286 (precision'_1: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_287
  block L_287 (env_116: unit)
    call L_288 (zextdFromWord32ToWord32_1 (env_116, sizeInBitsWord_5)) handle _ => L_5
  block L_288 (sizeInBitsWord_9: word32)
    val tuple_72: (word32, word16) tuple = (sizeInBitsWord_9, zero_2)
    val <<_1: lambdas_154 = con <<Env_6 (tuple_72)
    val tuple_71: (word32, word16) tuple = (sizeInBitsWord_9, zero_2)
    val >>_1: lambdas_153 = con >>Env_6 (tuple_71)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_289
  block L_289 (env_117: unit)
    call L_290 (zextdFromInt32ToInt32_1 (env_117, sizeInBits_64 (*0x20:w32*))) handle _ => L_5
  block L_290 (precision'_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_291
  block L_291 (env_118: unit)
    call L_292 (zextdFromWord32ToWord32_1 (env_118, sizeInBitsWord_6)) handle _ => L_5
  block L_292 (sizeInBitsWord_10: word32)
    val tuple_74: (word32, word32) tuple = (sizeInBitsWord_10, zero_4)
    val <<_2: lambdas_146 = con <<Env_5 (tuple_74)
    val tuple_73: (word32, word32) tuple = (sizeInBitsWord_10, zero_4)
    val >>_2: lambdas_145 = con >>Env_5 (tuple_73)
    val x_1625: (word32, word32) tuple = (precision'_2, x_497 (*0x1:w32*))
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_293
  block L_293 (env_119: unit)
    call L_294 (x_1626 (env_119, x_1625)) handle _ => L_5
  block L_294 (maxNumDigits_0: word32)
    val x_1628: (lambdas_286, word32) tuple = (new_1, maxNumDigits_0)
    val x_1627: lambdas_484 = con xEnv_235 (x_1628)
    call L_295 (x_1629 (x_1628, x_499 (*()*))) handle _ => L_5
  block L_295 (x_1630: (word8) array)
    val x_1633: (bool) ref = prim Ref_ref[bool] (x_500 (*con false*))
    val x_1632:
      (word32,
       lambdas_250,
       word32,
       word32,
       word32,
       (word8) array,
       lambdas_484,
       (bool) ref) tuple =
      (maxNumDigits_0, quot_0, one_3, minInt'_2, zero_4, x_1630, x_1627, x_1633)
    val x_1631: lambdas_483 = con xEnv_234 (x_1632)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_296
  block L_296 (env_120: unit)
    call L_297 (zextdFromInt32ToInt32_1 (env_120, sizeInBits_65 (*0x40:w32*))) handle _ => L_5
  block L_297 (precision'_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_298
  block L_298 (env_121: unit)
    call L_299 (zextdFromWord32ToWord32_1 (env_121, sizeInBitsWord_7)) handle _ => L_5
  block L_299 (sizeInBitsWord_11: word32)
    val tuple_76: (word32, word64) tuple = (sizeInBitsWord_11, zero_6)
    val <<_3: lambdas_138 = con <<Env_4 (tuple_76)
    val tuple_75: (word32, word64) tuple = (sizeInBitsWord_11, zero_6)
    val >>_3: lambdas_137 = con >>Env_4 (tuple_75)
    val x_1634: (word32, word32) tuple = (precision'_3, x_517 (*0x1:w32*))
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_300
  block L_300 (env_122: unit)
    call L_301 (x_1626 (env_122, x_1634)) handle _ => L_5
  block L_301 (maxNumDigits_1: word32)
    val x_1636: (lambdas_286, word32) tuple = (new_1, maxNumDigits_1)
    val x_1635: lambdas_248 = con xEnv_228 (x_1636)
    call L_302 (x_1637 (x_1636, x_519 (*()*))) handle _ => L_5
  block L_302 (x_1638: (word8) array)
    val x_1639: (bool) ref = prim Ref_ref[bool] (x_520 (*con false*))
    val tuple_77:
      (word32,
       lambdas_245,
       word64,
       word64,
       word64,
       (word8) array,
       lambdas_248,
       (bool) ref) tuple =
      (maxNumDigits_1, quot_1, one_5, minInt'_3, zero_6, x_1638, x_1635, x_1639)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_303
  block L_303 (env_123: unit)
    call L_304 (zextdFromInt32ToInt32_1 (env_123, sizeInBits_7 (*0x8:w32*))) handle _ => L_5
  block L_304 (wordSize_0: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_305
  block L_305 (env_124: unit)
    call L_306 (zextdFromWord32ToWord32_1 (env_124, sizeInBitsWord_0)) handle _ => L_5
  block L_306 (sizeInBitsWord_12: word32)
    val <<_4: lambdas_130 = con <<Env_3 (sizeInBitsWord_12)
    val >>_4: lambdas_129 = con >>Env_3 (sizeInBitsWord_12)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_307
  block L_307 (env_125: unit)
    call L_308 (zextdFromInt32ToInt32_1 (env_125, sizeInBits_15 (*0x10:w32*))) handle _ => L_5
  block L_308 (wordSize_1: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_309
  block L_309 (env_126: unit)
    call L_310 (zextdFromWord32ToWord32_1 (env_126, sizeInBitsWord_1)) handle _ => L_5
  block L_310 (sizeInBitsWord_13: word32)
    val <<_5: lambdas_122 = con <<Env_2 (sizeInBitsWord_13)
    val >>_5: lambdas_121 = con >>Env_2 (sizeInBitsWord_13)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_311
  block L_311 (env_127: unit)
    call L_312 (zextdFromInt32ToInt32_1 (env_127, sizeInBits_31 (*0x20:w32*))) handle _ => L_5
  block L_312 (wordSize_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_313
  block L_313 (env_128: unit)
    call L_314 (zextdFromWord32ToWord32_1 (env_128, sizeInBitsWord_2)) handle _ => L_5
  block L_314 (sizeInBitsWord_14: word32)
    val tuple_79: (word32, word32) tuple = (sizeInBitsWord_14, zero_3)
    val <<_6: lambdas_114 = con <<Env_1 (tuple_79)
    val tuple_78: (word32, word32) tuple = (sizeInBitsWord_14, zero_3)
    val >>_6: lambdas_113 = con >>Env_1 (tuple_78)
    case32 sizeInBitsWord_2 of
      0x8:w32 => L_318
    | 0x20:w32 => L_317
    | 0x40:w32 => L_316
    | 0x10:w32 => L_315
    | _ => L_319
  block L_319 ()
    goto L_5 (x_540 (*con Fail_0 (x_539)*))
  block L_315 ()
    val x_1641: lambdas_243 = #0 (x_1473)
    val x_1640: word32 = #1 (x_1473)
    case x_1641 of
      stEnv_0 => L_320
  block L_320 (x_1642: unit)
    val x_1644: lambdas_242 = con stEnv_1 (x_1642)
    val x_1643: (lambdas_242, word32) tuple = (x_1644, x_1640)
    goto L_321 (x_1643)
  block L_316 ()
    val x_1646: lambdas_239 = #0 (x_1472)
    val x_1645: word32 = #1 (x_1472)
    case x_1646 of
      xEnv_49 => L_322
  block L_322 (x_1647: unit)
    val x_1649: lambdas_242 = con xEnv_215 (x_1647)
    val x_1648: (lambdas_242, word32) tuple = (x_1649, x_1645)
    goto L_321 (x_1648)
  block L_317 ()
    val x_1651: lambdas_240 = #0 (x_1471)
    val x_1650: word32 = #1 (x_1471)
    case x_1651 of
      xEnv_48 => L_323
  block L_323 (x_1652: unit)
    val x_1654: lambdas_242 = con xEnv_213 (x_1652)
    val x_1653: (lambdas_242, word32) tuple = (x_1654, x_1650)
    goto L_321 (x_1653)
  block L_318 ()
    val x_1656: lambdas_241 = #0 (x_1470)
    val x_1655: word32 = #1 (x_1470)
    case x_1656 of
      xEnv_47 => L_324
  block L_324 (x_1657: unit)
    val x_1659: lambdas_242 = con xEnv_214 (x_1657)
    val x_1658: (lambdas_242, word32) tuple = (x_1659, x_1655)
    goto L_321 (x_1658)
  block L_321 (x_1660: (lambdas_242, word32) tuple)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_325
  block L_325 (env_129: unit)
    call L_326 (zextdFromInt32ToInt32_1 (env_129, sizeInBits_32 (*0x40:w32*))) handle _ => L_5
  block L_326 (wordSize_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_327
  block L_327 (env_130: unit)
    call L_328 (zextdFromWord32ToWord32_1 (env_130, sizeInBitsWord_3)) handle _ => L_5
  block L_328 (sizeInBitsWord_15: word32)
    val tuple_81: (word32, word64) tuple = (sizeInBitsWord_15, zero_5)
    val <<_7: lambdas_106 = con <<Env_0 (tuple_81)
    val tuple_80: (word32, word64) tuple = (sizeInBitsWord_15, zero_5)
    val >>_7: lambdas_105 = con >>Env_0 (tuple_80)
    call L_329 (fmt_0 (tuple_77, x_552 (*con BIN_1*))) handle _ => L_5
  block L_329 (x_1661: lambdas_285)
    val x_1662: (word32, lambdas_285) tuple = (x_551 (*0x2:w32*), x_1661)
    call L_330 (mkBigCvt_0 (tuple_63, x_1662)) handle _ => L_5
  block L_330 (binCvt_0: lambdas_284)
    call L_331 (fmt_0 (tuple_77, x_554 (*con OCT_1*))) handle _ => L_5
  block L_331 (x_1663: lambdas_285)
    val x_1664: (word32, lambdas_285) tuple = (x_553 (*0x8:w32*), x_1663)
    call L_332 (mkBigCvt_0 (tuple_63, x_1664)) handle _ => L_5
  block L_332 (octCvt_0: lambdas_284)
    call L_333 (fmt_0 (tuple_77, x_556 (*con DEC_1*))) handle _ => L_5
  block L_333 (x_1665: lambdas_285)
    val x_1666: (word32, lambdas_285) tuple = (x_555 (*0xA:w32*), x_1665)
    call L_334 (mkBigCvt_0 (tuple_63, x_1666)) handle _ => L_5
  block L_334 (decCvt_0: lambdas_284)
    call L_335 (fmt_0 (tuple_77, x_558 (*con HEX_0*))) handle _ => L_5
  block L_335 (x_1667: lambdas_285)
    val x_1668: (word32, lambdas_285) tuple = (x_557 (*0x10:w32*), x_1667)
    call L_336 (mkBigCvt_0 (tuple_63, x_1668)) handle _ => L_5
  block L_336 (hexCvt_0: lambdas_284)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_337
  block L_337 (env_131: unit)
    call L_338 (sextdFromInt32ToInt32_1 (env_131, sizeInBits_33 (*0x1:w32*))) handle _ => L_5
  block L_338 (precision'_4: word32)
    val x_1669: (word32, word32) tuple = (precision'_4, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_339
  block L_339 (env_132: unit)
    call L_340 (<_5 (env_132, x_1669)) handle _ => L_5
  block L_340 (x_1670: bool)
    case x_1670 of
      true => L_342 | false => L_341
  block L_341 ()
    goto L_5 (x_562 (*con Fail_0 (x_561)*))
  block L_342 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_343
  block L_343 (env_133: unit)
    call L_344 (sextdFromInt32ToInt32_1 (env_133, sizeInBits_34 (*0x2:w32*))) handle _ => L_5
  block L_344 (precision'_5: word32)
    val x_1671: (word32, word32) tuple = (precision'_5, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_345
  block L_345 (env_134: unit)
    call L_346 (<_5 (env_134, x_1671)) handle _ => L_5
  block L_346 (x_1672: bool)
    case x_1672 of
      true => L_348 | false => L_347
  block L_347 ()
    goto L_5 (x_566 (*con Fail_0 (x_565)*))
  block L_348 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_349
  block L_349 (env_135: unit)
    call L_350 (sextdFromInt32ToInt32_1 (env_135, sizeInBits_35 (*0x3:w32*))) handle _ => L_5
  block L_350 (precision'_6: word32)
    val x_1673: (word32, word32) tuple = (precision'_6, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_351
  block L_351 (env_136: unit)
    call L_352 (<_5 (env_136, x_1673)) handle _ => L_5
  block L_352 (x_1674: bool)
    case x_1674 of
      true => L_354 | false => L_353
  block L_353 ()
    goto L_5 (x_570 (*con Fail_0 (x_569)*))
  block L_354 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_355
  block L_355 (env_137: unit)
    call L_356 (sextdFromInt32ToInt32_1 (env_137, sizeInBits_36 (*0x4:w32*))) handle _ => L_5
  block L_356 (precision'_7: word32)
    val x_1675: (word32, word32) tuple = (precision'_7, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_357
  block L_357 (env_138: unit)
    call L_358 (<_5 (env_138, x_1675)) handle _ => L_5
  block L_358 (x_1676: bool)
    case x_1676 of
      true => L_360 | false => L_359
  block L_359 ()
    goto L_5 (x_574 (*con Fail_0 (x_573)*))
  block L_360 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_361
  block L_361 (env_139: unit)
    call L_362 (sextdFromInt32ToInt32_1 (env_139, sizeInBits_37 (*0x5:w32*))) handle _ => L_5
  block L_362 (precision'_8: word32)
    val x_1677: (word32, word32) tuple = (precision'_8, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_363
  block L_363 (env_140: unit)
    call L_364 (<_5 (env_140, x_1677)) handle _ => L_5
  block L_364 (x_1678: bool)
    case x_1678 of
      true => L_366 | false => L_365
  block L_365 ()
    goto L_5 (x_578 (*con Fail_0 (x_577)*))
  block L_366 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_367
  block L_367 (env_141: unit)
    call L_368 (sextdFromInt32ToInt32_1 (env_141, sizeInBits_38 (*0x6:w32*))) handle _ => L_5
  block L_368 (precision'_9: word32)
    val x_1679: (word32, word32) tuple = (precision'_9, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_369
  block L_369 (env_142: unit)
    call L_370 (<_5 (env_142, x_1679)) handle _ => L_5
  block L_370 (x_1680: bool)
    case x_1680 of
      true => L_372 | false => L_371
  block L_371 ()
    goto L_5 (x_582 (*con Fail_0 (x_581)*))
  block L_372 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_373
  block L_373 (env_143: unit)
    call L_374 (sextdFromInt32ToInt32_1 (env_143, sizeInBits_39 (*0x7:w32*))) handle _ => L_5
  block L_374 (precision'_10: word32)
    val x_1681: (word32, word32) tuple = (precision'_10, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_375
  block L_375 (env_144: unit)
    call L_376 (<_5 (env_144, x_1681)) handle _ => L_5
  block L_376 (x_1682: bool)
    case x_1682 of
      true => L_378 | false => L_377
  block L_377 ()
    goto L_5 (x_586 (*con Fail_0 (x_585)*))
  block L_378 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_379
  block L_379 (env_145: unit)
    call L_380 (sextdFromInt32ToInt32_1 (env_145, sizeInBits_41 (*0x9:w32*))) handle _ => L_5
  block L_380 (precision'_11: word32)
    val x_1683: (word32, word32) tuple = (precision'_11, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_381
  block L_381 (env_146: unit)
    call L_382 (<_5 (env_146, x_1683)) handle _ => L_5
  block L_382 (x_1684: bool)
    case x_1684 of
      true => L_384 | false => L_383
  block L_383 ()
    goto L_5 (x_590 (*con Fail_0 (x_589)*))
  block L_384 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_385
  block L_385 (env_147: unit)
    call L_386 (sextdFromInt32ToInt32_1 (env_147, sizeInBits_42 (*0xA:w32*))) handle _ => L_5
  block L_386 (precision'_12: word32)
    val x_1685: (word32, word32) tuple = (precision'_12, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_387
  block L_387 (env_148: unit)
    call L_388 (<_5 (env_148, x_1685)) handle _ => L_5
  block L_388 (x_1686: bool)
    case x_1686 of
      true => L_390 | false => L_389
  block L_389 ()
    goto L_5 (x_594 (*con Fail_0 (x_593)*))
  block L_390 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_391
  block L_391 (env_149: unit)
    call L_392 (sextdFromInt32ToInt32_1 (env_149, sizeInBits_43 (*0xB:w32*))) handle _ => L_5
  block L_392 (precision'_13: word32)
    val x_1687: (word32, word32) tuple = (precision'_13, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_393
  block L_393 (env_150: unit)
    call L_394 (<_5 (env_150, x_1687)) handle _ => L_5
  block L_394 (x_1688: bool)
    case x_1688 of
      true => L_396 | false => L_395
  block L_395 ()
    goto L_5 (x_598 (*con Fail_0 (x_597)*))
  block L_396 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_397
  block L_397 (env_151: unit)
    call L_398 (sextdFromInt32ToInt32_1 (env_151, sizeInBits_44 (*0xC:w32*))) handle _ => L_5
  block L_398 (precision'_14: word32)
    val x_1689: (word32, word32) tuple = (precision'_14, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_399
  block L_399 (env_152: unit)
    call L_400 (<_5 (env_152, x_1689)) handle _ => L_5
  block L_400 (x_1690: bool)
    case x_1690 of
      true => L_402 | false => L_401
  block L_401 ()
    goto L_5 (x_602 (*con Fail_0 (x_601)*))
  block L_402 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_403
  block L_403 (env_153: unit)
    call L_404 (sextdFromInt32ToInt32_1 (env_153, sizeInBits_45 (*0xD:w32*))) handle _ => L_5
  block L_404 (precision'_15: word32)
    val x_1691: (word32, word32) tuple = (precision'_15, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_405
  block L_405 (env_154: unit)
    call L_406 (<_5 (env_154, x_1691)) handle _ => L_5
  block L_406 (x_1692: bool)
    case x_1692 of
      true => L_408 | false => L_407
  block L_407 ()
    goto L_5 (x_606 (*con Fail_0 (x_605)*))
  block L_408 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_409
  block L_409 (env_155: unit)
    call L_410 (sextdFromInt32ToInt32_1 (env_155, sizeInBits_46 (*0xE:w32*))) handle _ => L_5
  block L_410 (precision'_16: word32)
    val x_1693: (word32, word32) tuple = (precision'_16, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_411
  block L_411 (env_156: unit)
    call L_412 (<_5 (env_156, x_1693)) handle _ => L_5
  block L_412 (x_1694: bool)
    case x_1694 of
      true => L_414 | false => L_413
  block L_413 ()
    goto L_5 (x_610 (*con Fail_0 (x_609)*))
  block L_414 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_415
  block L_415 (env_157: unit)
    call L_416 (sextdFromInt32ToInt32_1 (env_157, sizeInBits_47 (*0xF:w32*))) handle _ => L_5
  block L_416 (precision'_17: word32)
    val x_1695: (word32, word32) tuple = (precision'_17, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_417
  block L_417 (env_158: unit)
    call L_418 (<_5 (env_158, x_1695)) handle _ => L_5
  block L_418 (x_1696: bool)
    case x_1696 of
      true => L_420 | false => L_419
  block L_419 ()
    goto L_5 (x_614 (*con Fail_0 (x_613)*))
  block L_420 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_421
  block L_421 (env_159: unit)
    call L_422 (sextdFromInt32ToInt32_1 (env_159, sizeInBits_49 (*0x11:w32*))) handle _ => L_5
  block L_422 (precision'_18: word32)
    val x_1697: (word32, word32) tuple = (precision'_18, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_423
  block L_423 (env_160: unit)
    call L_424 (<_5 (env_160, x_1697)) handle _ => L_5
  block L_424 (x_1698: bool)
    case x_1698 of
      true => L_426 | false => L_425
  block L_425 ()
    goto L_5 (x_618 (*con Fail_0 (x_617)*))
  block L_426 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_427
  block L_427 (env_161: unit)
    call L_428 (sextdFromInt32ToInt32_1 (env_161, sizeInBits_50 (*0x12:w32*))) handle _ => L_5
  block L_428 (precision'_19: word32)
    val x_1699: (word32, word32) tuple = (precision'_19, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_429
  block L_429 (env_162: unit)
    call L_430 (<_5 (env_162, x_1699)) handle _ => L_5
  block L_430 (x_1700: bool)
    case x_1700 of
      true => L_432 | false => L_431
  block L_431 ()
    goto L_5 (x_622 (*con Fail_0 (x_621)*))
  block L_432 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_433
  block L_433 (env_163: unit)
    call L_434 (sextdFromInt32ToInt32_1 (env_163, sizeInBits_51 (*0x13:w32*))) handle _ => L_5
  block L_434 (precision'_20: word32)
    val x_1701: (word32, word32) tuple = (precision'_20, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_435
  block L_435 (env_164: unit)
    call L_436 (<_5 (env_164, x_1701)) handle _ => L_5
  block L_436 (x_1702: bool)
    case x_1702 of
      true => L_438 | false => L_437
  block L_437 ()
    goto L_5 (x_626 (*con Fail_0 (x_625)*))
  block L_438 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_439
  block L_439 (env_165: unit)
    call L_440 (sextdFromInt32ToInt32_1 (env_165, sizeInBits_52 (*0x14:w32*))) handle _ => L_5
  block L_440 (precision'_21: word32)
    val x_1703: (word32, word32) tuple = (precision'_21, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_441
  block L_441 (env_166: unit)
    call L_442 (<_5 (env_166, x_1703)) handle _ => L_5
  block L_442 (x_1704: bool)
    case x_1704 of
      true => L_444 | false => L_443
  block L_443 ()
    goto L_5 (x_630 (*con Fail_0 (x_629)*))
  block L_444 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_445
  block L_445 (env_167: unit)
    call L_446 (sextdFromInt32ToInt32_1 (env_167, sizeInBits_53 (*0x15:w32*))) handle _ => L_5
  block L_446 (precision'_22: word32)
    val x_1705: (word32, word32) tuple = (precision'_22, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_447
  block L_447 (env_168: unit)
    call L_448 (<_5 (env_168, x_1705)) handle _ => L_5
  block L_448 (x_1706: bool)
    case x_1706 of
      true => L_450 | false => L_449
  block L_449 ()
    goto L_5 (x_634 (*con Fail_0 (x_633)*))
  block L_450 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_451
  block L_451 (env_169: unit)
    call L_452 (sextdFromInt32ToInt32_1 (env_169, sizeInBits_54 (*0x16:w32*))) handle _ => L_5
  block L_452 (precision'_23: word32)
    val x_1707: (word32, word32) tuple = (precision'_23, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_453
  block L_453 (env_170: unit)
    call L_454 (<_5 (env_170, x_1707)) handle _ => L_5
  block L_454 (x_1708: bool)
    case x_1708 of
      true => L_456 | false => L_455
  block L_455 ()
    goto L_5 (x_638 (*con Fail_0 (x_637)*))
  block L_456 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_457
  block L_457 (env_171: unit)
    call L_458 (sextdFromInt32ToInt32_1 (env_171, sizeInBits_55 (*0x17:w32*))) handle _ => L_5
  block L_458 (precision'_24: word32)
    val x_1709: (word32, word32) tuple = (precision'_24, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_459
  block L_459 (env_172: unit)
    call L_460 (<_5 (env_172, x_1709)) handle _ => L_5
  block L_460 (x_1710: bool)
    case x_1710 of
      true => L_462 | false => L_461
  block L_461 ()
    goto L_5 (x_642 (*con Fail_0 (x_641)*))
  block L_462 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_463
  block L_463 (env_173: unit)
    call L_464 (sextdFromInt32ToInt32_1 (env_173, sizeInBits_56 (*0x18:w32*))) handle _ => L_5
  block L_464 (precision'_25: word32)
    val x_1711: (word32, word32) tuple = (precision'_25, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_465
  block L_465 (env_174: unit)
    call L_466 (<_5 (env_174, x_1711)) handle _ => L_5
  block L_466 (x_1712: bool)
    case x_1712 of
      true => L_468 | false => L_467
  block L_467 ()
    goto L_5 (x_646 (*con Fail_0 (x_645)*))
  block L_468 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_469
  block L_469 (env_175: unit)
    call L_470 (sextdFromInt32ToInt32_1 (env_175, sizeInBits_57 (*0x19:w32*))) handle _ => L_5
  block L_470 (precision'_26: word32)
    val x_1713: (word32, word32) tuple = (precision'_26, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_471
  block L_471 (env_176: unit)
    call L_472 (<_5 (env_176, x_1713)) handle _ => L_5
  block L_472 (x_1714: bool)
    case x_1714 of
      true => L_474 | false => L_473
  block L_473 ()
    goto L_5 (x_650 (*con Fail_0 (x_649)*))
  block L_474 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_475
  block L_475 (env_177: unit)
    call L_476 (sextdFromInt32ToInt32_1 (env_177, sizeInBits_58 (*0x1A:w32*))) handle _ => L_5
  block L_476 (precision'_27: word32)
    val x_1715: (word32, word32) tuple = (precision'_27, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_477
  block L_477 (env_178: unit)
    call L_478 (<_5 (env_178, x_1715)) handle _ => L_5
  block L_478 (x_1716: bool)
    case x_1716 of
      true => L_480 | false => L_479
  block L_479 ()
    goto L_5 (x_654 (*con Fail_0 (x_653)*))
  block L_480 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_481
  block L_481 (env_179: unit)
    call L_482 (sextdFromInt32ToInt32_1 (env_179, sizeInBits_59 (*0x1B:w32*))) handle _ => L_5
  block L_482 (precision'_28: word32)
    val x_1717: (word32, word32) tuple = (precision'_28, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_483
  block L_483 (env_180: unit)
    call L_484 (<_5 (env_180, x_1717)) handle _ => L_5
  block L_484 (x_1718: bool)
    case x_1718 of
      true => L_486 | false => L_485
  block L_485 ()
    goto L_5 (x_658 (*con Fail_0 (x_657)*))
  block L_486 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_487
  block L_487 (env_181: unit)
    call L_488 (sextdFromInt32ToInt32_1 (env_181, sizeInBits_60 (*0x1C:w32*))) handle _ => L_5
  block L_488 (precision'_29: word32)
    val x_1719: (word32, word32) tuple = (precision'_29, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_489
  block L_489 (env_182: unit)
    call L_490 (<_5 (env_182, x_1719)) handle _ => L_5
  block L_490 (x_1720: bool)
    case x_1720 of
      true => L_492 | false => L_491
  block L_491 ()
    goto L_5 (x_662 (*con Fail_0 (x_661)*))
  block L_492 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_493
  block L_493 (env_183: unit)
    call L_494 (sextdFromInt32ToInt32_1 (env_183, sizeInBits_61 (*0x1D:w32*))) handle _ => L_5
  block L_494 (precision'_30: word32)
    val x_1721: (word32, word32) tuple = (precision'_30, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_495
  block L_495 (env_184: unit)
    call L_496 (<_5 (env_184, x_1721)) handle _ => L_5
  block L_496 (x_1722: bool)
    case x_1722 of
      true => L_498 | false => L_497
  block L_497 ()
    goto L_5 (x_666 (*con Fail_0 (x_665)*))
  block L_498 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_499
  block L_499 (env_185: unit)
    call L_500 (sextdFromInt32ToInt32_1 (env_185, sizeInBits_62 (*0x1E:w32*))) handle _ => L_5
  block L_500 (precision'_31: word32)
    val x_1723: (word32, word32) tuple = (precision'_31, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_501
  block L_501 (env_186: unit)
    call L_502 (<_5 (env_186, x_1723)) handle _ => L_5
  block L_502 (x_1724: bool)
    case x_1724 of
      true => L_504 | false => L_503
  block L_503 ()
    goto L_5 (x_670 (*con Fail_0 (x_669)*))
  block L_504 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_505
  block L_505 (env_187: unit)
    call L_506 (sextdFromInt32ToInt32_1 (env_187, sizeInBits_63 (*0x1F:w32*))) handle _ => L_5
  block L_506 (precision'_32: word32)
    val x_1725: (word32, word32) tuple = (precision'_32, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_507
  block L_507 (env_188: unit)
    call L_508 (<_5 (env_188, x_1725)) handle _ => L_5
  block L_508 (x_1726: bool)
    case x_1726 of
      true => L_510 | false => L_509
  block L_509 ()
    goto L_5 (x_674 (*con Fail_0 (x_673)*))
  block L_510 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_511
  block L_511 (env_189: unit)
    call L_512 (sextdFromInt32ToInt32_1 (env_189, sizeInBits_0 (*0x1:w32*))) handle _ => L_5
  block L_512 (wordSize_4: word32)
    val x_1727: (word32, word32) tuple = (wordSize_4, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_513
  block L_513 (env_190: unit)
    call L_514 (<_5 (env_190, x_1727)) handle _ => L_5
  block L_514 (x_1728: bool)
    case x_1728 of
      true => L_516 | false => L_515
  block L_515 ()
    goto L_5 (x_678 (*con Fail_0 (x_677)*))
  block L_516 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_517
  block L_517 (env_191: unit)
    call L_518 (sextdFromInt32ToInt32_1 (env_191, sizeInBits_1 (*0x2:w32*))) handle _ => L_5
  block L_518 (wordSize_5: word32)
    val x_1729: (word32, word32) tuple = (wordSize_5, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_519
  block L_519 (env_192: unit)
    call L_520 (<_5 (env_192, x_1729)) handle _ => L_5
  block L_520 (x_1730: bool)
    case x_1730 of
      true => L_522 | false => L_521
  block L_521 ()
    goto L_5 (x_682 (*con Fail_0 (x_681)*))
  block L_522 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_523
  block L_523 (env_193: unit)
    call L_524 (sextdFromInt32ToInt32_1 (env_193, sizeInBits_2 (*0x3:w32*))) handle _ => L_5
  block L_524 (wordSize_6: word32)
    val x_1731: (word32, word32) tuple = (wordSize_6, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_525
  block L_525 (env_194: unit)
    call L_526 (<_5 (env_194, x_1731)) handle _ => L_5
  block L_526 (x_1732: bool)
    case x_1732 of
      true => L_528 | false => L_527
  block L_527 ()
    goto L_5 (x_686 (*con Fail_0 (x_685)*))
  block L_528 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_529
  block L_529 (env_195: unit)
    call L_530 (sextdFromInt32ToInt32_1 (env_195, sizeInBits_3 (*0x4:w32*))) handle _ => L_5
  block L_530 (wordSize_7: word32)
    val x_1733: (word32, word32) tuple = (wordSize_7, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_531
  block L_531 (env_196: unit)
    call L_532 (<_5 (env_196, x_1733)) handle _ => L_5
  block L_532 (x_1734: bool)
    case x_1734 of
      true => L_534 | false => L_533
  block L_533 ()
    goto L_5 (x_690 (*con Fail_0 (x_689)*))
  block L_534 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_535
  block L_535 (env_197: unit)
    call L_536 (sextdFromInt32ToInt32_1 (env_197, sizeInBits_4 (*0x5:w32*))) handle _ => L_5
  block L_536 (wordSize_8: word32)
    val x_1735: (word32, word32) tuple = (wordSize_8, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_537
  block L_537 (env_198: unit)
    call L_538 (<_5 (env_198, x_1735)) handle _ => L_5
  block L_538 (x_1736: bool)
    case x_1736 of
      true => L_540 | false => L_539
  block L_539 ()
    goto L_5 (x_694 (*con Fail_0 (x_693)*))
  block L_540 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_541
  block L_541 (env_199: unit)
    call L_542 (sextdFromInt32ToInt32_1 (env_199, sizeInBits_5 (*0x6:w32*))) handle _ => L_5
  block L_542 (wordSize_9: word32)
    val x_1737: (word32, word32) tuple = (wordSize_9, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_543
  block L_543 (env_200: unit)
    call L_544 (<_5 (env_200, x_1737)) handle _ => L_5
  block L_544 (x_1738: bool)
    case x_1738 of
      true => L_546 | false => L_545
  block L_545 ()
    goto L_5 (x_698 (*con Fail_0 (x_697)*))
  block L_546 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_547
  block L_547 (env_201: unit)
    call L_548 (sextdFromInt32ToInt32_1 (env_201, sizeInBits_6 (*0x7:w32*))) handle _ => L_5
  block L_548 (wordSize_10: word32)
    val x_1739: (word32, word32) tuple = (wordSize_10, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_549
  block L_549 (env_202: unit)
    call L_550 (<_5 (env_202, x_1739)) handle _ => L_5
  block L_550 (x_1740: bool)
    case x_1740 of
      true => L_552 | false => L_551
  block L_551 ()
    goto L_5 (x_702 (*con Fail_0 (x_701)*))
  block L_552 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_553
  block L_553 (env_203: unit)
    call L_554 (sextdFromInt32ToInt32_1 (env_203, sizeInBits_8 (*0x9:w32*))) handle _ => L_5
  block L_554 (wordSize_11: word32)
    val x_1741: (word32, word32) tuple = (wordSize_11, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_555
  block L_555 (env_204: unit)
    call L_556 (<_5 (env_204, x_1741)) handle _ => L_5
  block L_556 (x_1742: bool)
    case x_1742 of
      true => L_558 | false => L_557
  block L_557 ()
    goto L_5 (x_706 (*con Fail_0 (x_705)*))
  block L_558 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_559
  block L_559 (env_205: unit)
    call L_560 (sextdFromInt32ToInt32_1 (env_205, sizeInBits_9 (*0xA:w32*))) handle _ => L_5
  block L_560 (wordSize_12: word32)
    val x_1743: (word32, word32) tuple = (wordSize_12, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_561
  block L_561 (env_206: unit)
    call L_562 (<_5 (env_206, x_1743)) handle _ => L_5
  block L_562 (x_1744: bool)
    case x_1744 of
      true => L_564 | false => L_563
  block L_563 ()
    goto L_5 (x_710 (*con Fail_0 (x_709)*))
  block L_564 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_565
  block L_565 (env_207: unit)
    call L_566 (sextdFromInt32ToInt32_1 (env_207, sizeInBits_10 (*0xB:w32*))) handle _ => L_5
  block L_566 (wordSize_13: word32)
    val x_1745: (word32, word32) tuple = (wordSize_13, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_567
  block L_567 (env_208: unit)
    call L_568 (<_5 (env_208, x_1745)) handle _ => L_5
  block L_568 (x_1746: bool)
    case x_1746 of
      true => L_570 | false => L_569
  block L_569 ()
    goto L_5 (x_714 (*con Fail_0 (x_713)*))
  block L_570 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_571
  block L_571 (env_209: unit)
    call L_572 (sextdFromInt32ToInt32_1 (env_209, sizeInBits_11 (*0xC:w32*))) handle _ => L_5
  block L_572 (wordSize_14: word32)
    val x_1747: (word32, word32) tuple = (wordSize_14, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_573
  block L_573 (env_210: unit)
    call L_574 (<_5 (env_210, x_1747)) handle _ => L_5
  block L_574 (x_1748: bool)
    case x_1748 of
      true => L_576 | false => L_575
  block L_575 ()
    goto L_5 (x_718 (*con Fail_0 (x_717)*))
  block L_576 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_577
  block L_577 (env_211: unit)
    call L_578 (sextdFromInt32ToInt32_1 (env_211, sizeInBits_12 (*0xD:w32*))) handle _ => L_5
  block L_578 (wordSize_15: word32)
    val x_1749: (word32, word32) tuple = (wordSize_15, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_579
  block L_579 (env_212: unit)
    call L_580 (<_5 (env_212, x_1749)) handle _ => L_5
  block L_580 (x_1750: bool)
    case x_1750 of
      true => L_582 | false => L_581
  block L_581 ()
    goto L_5 (x_722 (*con Fail_0 (x_721)*))
  block L_582 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_583
  block L_583 (env_213: unit)
    call L_584 (sextdFromInt32ToInt32_1 (env_213, sizeInBits_13 (*0xE:w32*))) handle _ => L_5
  block L_584 (wordSize_16: word32)
    val x_1751: (word32, word32) tuple = (wordSize_16, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_585
  block L_585 (env_214: unit)
    call L_586 (<_5 (env_214, x_1751)) handle _ => L_5
  block L_586 (x_1752: bool)
    case x_1752 of
      true => L_588 | false => L_587
  block L_587 ()
    goto L_5 (x_726 (*con Fail_0 (x_725)*))
  block L_588 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_589
  block L_589 (env_215: unit)
    call L_590 (sextdFromInt32ToInt32_1 (env_215, sizeInBits_14 (*0xF:w32*))) handle _ => L_5
  block L_590 (wordSize_17: word32)
    val x_1753: (word32, word32) tuple = (wordSize_17, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_591
  block L_591 (env_216: unit)
    call L_592 (<_5 (env_216, x_1753)) handle _ => L_5
  block L_592 (x_1754: bool)
    case x_1754 of
      true => L_594 | false => L_593
  block L_593 ()
    goto L_5 (x_730 (*con Fail_0 (x_729)*))
  block L_594 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_595
  block L_595 (env_217: unit)
    call L_596 (sextdFromInt32ToInt32_1 (env_217, sizeInBits_16 (*0x11:w32*))) handle _ => L_5
  block L_596 (wordSize_18: word32)
    val x_1755: (word32, word32) tuple = (wordSize_18, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_597
  block L_597 (env_218: unit)
    call L_598 (<_5 (env_218, x_1755)) handle _ => L_5
  block L_598 (x_1756: bool)
    case x_1756 of
      true => L_600 | false => L_599
  block L_599 ()
    goto L_5 (x_734 (*con Fail_0 (x_733)*))
  block L_600 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_601
  block L_601 (env_219: unit)
    call L_602 (sextdFromInt32ToInt32_1 (env_219, sizeInBits_17 (*0x12:w32*))) handle _ => L_5
  block L_602 (wordSize_19: word32)
    val x_1757: (word32, word32) tuple = (wordSize_19, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_603
  block L_603 (env_220: unit)
    call L_604 (<_5 (env_220, x_1757)) handle _ => L_5
  block L_604 (x_1758: bool)
    case x_1758 of
      true => L_606 | false => L_605
  block L_605 ()
    goto L_5 (x_738 (*con Fail_0 (x_737)*))
  block L_606 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_607
  block L_607 (env_221: unit)
    call L_608 (sextdFromInt32ToInt32_1 (env_221, sizeInBits_18 (*0x13:w32*))) handle _ => L_5
  block L_608 (wordSize_20: word32)
    val x_1759: (word32, word32) tuple = (wordSize_20, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_609
  block L_609 (env_222: unit)
    call L_610 (<_5 (env_222, x_1759)) handle _ => L_5
  block L_610 (x_1760: bool)
    case x_1760 of
      true => L_612 | false => L_611
  block L_611 ()
    goto L_5 (x_742 (*con Fail_0 (x_741)*))
  block L_612 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_613
  block L_613 (env_223: unit)
    call L_614 (sextdFromInt32ToInt32_1 (env_223, sizeInBits_19 (*0x14:w32*))) handle _ => L_5
  block L_614 (wordSize_21: word32)
    val x_1761: (word32, word32) tuple = (wordSize_21, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_615
  block L_615 (env_224: unit)
    call L_616 (<_5 (env_224, x_1761)) handle _ => L_5
  block L_616 (x_1762: bool)
    case x_1762 of
      true => L_618 | false => L_617
  block L_617 ()
    goto L_5 (x_746 (*con Fail_0 (x_745)*))
  block L_618 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_619
  block L_619 (env_225: unit)
    call L_620 (sextdFromInt32ToInt32_1 (env_225, sizeInBits_20 (*0x15:w32*))) handle _ => L_5
  block L_620 (wordSize_22: word32)
    val x_1763: (word32, word32) tuple = (wordSize_22, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_621
  block L_621 (env_226: unit)
    call L_622 (<_5 (env_226, x_1763)) handle _ => L_5
  block L_622 (x_1764: bool)
    case x_1764 of
      true => L_624 | false => L_623
  block L_623 ()
    goto L_5 (x_750 (*con Fail_0 (x_749)*))
  block L_624 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_625
  block L_625 (env_227: unit)
    call L_626 (sextdFromInt32ToInt32_1 (env_227, sizeInBits_21 (*0x16:w32*))) handle _ => L_5
  block L_626 (wordSize_23: word32)
    val x_1765: (word32, word32) tuple = (wordSize_23, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_627
  block L_627 (env_228: unit)
    call L_628 (<_5 (env_228, x_1765)) handle _ => L_5
  block L_628 (x_1766: bool)
    case x_1766 of
      true => L_630 | false => L_629
  block L_629 ()
    goto L_5 (x_754 (*con Fail_0 (x_753)*))
  block L_630 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_631
  block L_631 (env_229: unit)
    call L_632 (sextdFromInt32ToInt32_1 (env_229, sizeInBits_22 (*0x17:w32*))) handle _ => L_5
  block L_632 (wordSize_24: word32)
    val x_1767: (word32, word32) tuple = (wordSize_24, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_633
  block L_633 (env_230: unit)
    call L_634 (<_5 (env_230, x_1767)) handle _ => L_5
  block L_634 (x_1768: bool)
    case x_1768 of
      true => L_636 | false => L_635
  block L_635 ()
    goto L_5 (x_758 (*con Fail_0 (x_757)*))
  block L_636 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_637
  block L_637 (env_231: unit)
    call L_638 (sextdFromInt32ToInt32_1 (env_231, sizeInBits_23 (*0x18:w32*))) handle _ => L_5
  block L_638 (wordSize_25: word32)
    val x_1769: (word32, word32) tuple = (wordSize_25, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_639
  block L_639 (env_232: unit)
    call L_640 (<_5 (env_232, x_1769)) handle _ => L_5
  block L_640 (x_1770: bool)
    case x_1770 of
      true => L_642 | false => L_641
  block L_641 ()
    goto L_5 (x_762 (*con Fail_0 (x_761)*))
  block L_642 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_643
  block L_643 (env_233: unit)
    call L_644 (sextdFromInt32ToInt32_1 (env_233, sizeInBits_24 (*0x19:w32*))) handle _ => L_5
  block L_644 (wordSize_26: word32)
    val x_1771: (word32, word32) tuple = (wordSize_26, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_645
  block L_645 (env_234: unit)
    call L_646 (<_5 (env_234, x_1771)) handle _ => L_5
  block L_646 (x_1772: bool)
    case x_1772 of
      true => L_648 | false => L_647
  block L_647 ()
    goto L_5 (x_766 (*con Fail_0 (x_765)*))
  block L_648 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_649
  block L_649 (env_235: unit)
    call L_650 (sextdFromInt32ToInt32_1 (env_235, sizeInBits_25 (*0x1A:w32*))) handle _ => L_5
  block L_650 (wordSize_27: word32)
    val x_1773: (word32, word32) tuple = (wordSize_27, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_651
  block L_651 (env_236: unit)
    call L_652 (<_5 (env_236, x_1773)) handle _ => L_5
  block L_652 (x_1774: bool)
    case x_1774 of
      true => L_654 | false => L_653
  block L_653 ()
    goto L_5 (x_770 (*con Fail_0 (x_769)*))
  block L_654 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_655
  block L_655 (env_237: unit)
    call L_656 (sextdFromInt32ToInt32_1 (env_237, sizeInBits_26 (*0x1B:w32*))) handle _ => L_5
  block L_656 (wordSize_28: word32)
    val x_1775: (word32, word32) tuple = (wordSize_28, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_657
  block L_657 (env_238: unit)
    call L_658 (<_5 (env_238, x_1775)) handle _ => L_5
  block L_658 (x_1776: bool)
    case x_1776 of
      true => L_660 | false => L_659
  block L_659 ()
    goto L_5 (x_774 (*con Fail_0 (x_773)*))
  block L_660 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_661
  block L_661 (env_239: unit)
    call L_662 (sextdFromInt32ToInt32_1 (env_239, sizeInBits_27 (*0x1C:w32*))) handle _ => L_5
  block L_662 (wordSize_29: word32)
    val x_1777: (word32, word32) tuple = (wordSize_29, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_663
  block L_663 (env_240: unit)
    call L_664 (<_5 (env_240, x_1777)) handle _ => L_5
  block L_664 (x_1778: bool)
    case x_1778 of
      true => L_666 | false => L_665
  block L_665 ()
    goto L_5 (x_778 (*con Fail_0 (x_777)*))
  block L_666 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_667
  block L_667 (env_241: unit)
    call L_668 (sextdFromInt32ToInt32_1 (env_241, sizeInBits_28 (*0x1D:w32*))) handle _ => L_5
  block L_668 (wordSize_30: word32)
    val x_1779: (word32, word32) tuple = (wordSize_30, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_669
  block L_669 (env_242: unit)
    call L_670 (<_5 (env_242, x_1779)) handle _ => L_5
  block L_670 (x_1780: bool)
    case x_1780 of
      true => L_672 | false => L_671
  block L_671 ()
    goto L_5 (x_782 (*con Fail_0 (x_781)*))
  block L_672 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_673
  block L_673 (env_243: unit)
    call L_674 (sextdFromInt32ToInt32_1 (env_243, sizeInBits_29 (*0x1E:w32*))) handle _ => L_5
  block L_674 (wordSize_31: word32)
    val x_1781: (word32, word32) tuple = (wordSize_31, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_675
  block L_675 (env_244: unit)
    call L_676 (<_5 (env_244, x_1781)) handle _ => L_5
  block L_676 (x_1782: bool)
    case x_1782 of
      true => L_678 | false => L_677
  block L_677 ()
    goto L_5 (x_786 (*con Fail_0 (x_785)*))
  block L_678 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_679
  block L_679 (env_245: unit)
    call L_680 (sextdFromInt32ToInt32_1 (env_245, sizeInBits_30 (*0x1F:w32*))) handle _ => L_5
  block L_680 (wordSize_32: word32)
    val x_1783: (word32, word32) tuple = (wordSize_32, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_681
  block L_681 (env_246: unit)
    call L_682 (<_5 (env_246, x_1783)) handle _ => L_5
  block L_682 (x_1784: bool)
    case x_1784 of
      true => L_684 | false => L_683
  block L_683 ()
    goto L_5 (x_790 (*con Fail_0 (x_789)*))
  block L_684 ()
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_685
  block L_685 (env_247: unit)
    call L_686 (x_1785 (env_247, x_1474)) handle _ => L_5
  block L_686 (maxOrd_0: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_687
  block L_687 (env_248: unit)
    call L_688 (idFromInt32ToWord32_1 (env_248, maxOrd_0)) handle _ => L_5
  block L_688 (x_1786: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_689
  block L_689 (env_249: unit)
    call L_690 (idFromInt32ToWord32_1 (env_249, x_792 (*0x0:w32*))) handle _ => L_5
  block L_690 (x_1787: word32)
    val x_1788: (word32, word32) tuple = (x_1786, x_1787)
    case <_0 (*con <Env_0 (x_143)*) of
      <Env_0 => L_691
  block L_691 (env_250: unit)
    call L_692 (<_6 (env_250, x_1788)) handle _ => L_5
  block L_692 (x_1789: bool)
    case x_1789 of
      true => L_694 | false => L_693
  block L_693 ()
    case x_432 (*con xEnv_45 (x_431)*) of
      xEnv_45 => L_695
  block L_695 (env_251: unit)
    call L_696 (x_1790 (env_251, x_792 (*0x0:w32*))) handle _ => L_5
  block L_696 (x_1791: word8)
    goto L_697 (x_1791)
  block L_694 ()
    goto L_698 (x_793 (*con NONE_2*))
  block L_698 (x_1792: t_8)
    case x_1792 of
      NONE_2 => L_699 | SOME_6 => L_697
  block L_697 (x_1793: word8)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_700
  block L_700 (env_252: unit)
    call L_701 (fromIntForLength_1 (env_252, x_794 (*0x1:w32*))) handle _ => L_5
  block L_701 (x_1794: word64)
    call L_702 (arrayAlloc_2 (x_1580, x_1794)) handle _ => L_5
  block L_702 (a_0: (word8) array)
    val tuple_82: (word64, (word8) array, word8) tuple = (x_1794, a_0, x_1793)
    call L_703 (loop_10 (tuple_82, x_1475)) handle _ => L_5
  block L_703 (b_5: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_704
  block L_704 (env_253: unit)
    call L_705 (x_1795 (env_253, a_0)) handle _ => L_5
  block L_705 (x_1796: (word8) vector)
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_706
  block L_706 (env_254: unit)
    call L_707 (x_1797 (env_254, messagers_0)) handle _ => L_5
  block L_707 (x_1798: list_0)
    val x_1801: lambdas_0 = con xEnv_248 (concat_0)
    val x_1800: (lambdas_0, list_0) tuple = (x_1801, x_1798)
    val x_1799: list_0 = con ::_3 (x_1800)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_1799)
    case new_0 (*con newEnv ... e_40)*) of
      newEnv_0 => L_708
  block L_708 (env_255: unit)
    call L_709 (new_2 (env_255, x_807 (*()*))) handle _ => L_5
  block L_709 (atExit_0: (list_2) ref)
    case new_0 (*con newEnv ... e_40)*) of
      newEnv_0 => L_710
  block L_710 (env_256: unit)
    call L_711 (new_2 (env_256, x_808 (*()*))) handle _ => L_5
  block L_711 (atLoadWorld_0: (list_2) ref)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_712
  block L_712 (env_257: unit)
    call L_713 (fromRep_1 (env_257, EACCES_0 (*0xD:w32*))) handle _ => L_5
  block L_713 (acces_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_714
  block L_714 (env_258: unit)
    call L_715 (fromRep_1 (env_258, EADDRINUSE_0 (*0x62:w32*))) handle _ => L_5
  block L_715 (addrinuse_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_716
  block L_716 (env_259: unit)
    call L_717 (fromRep_1 (env_259, EADDRNOTAVAIL_0 (*0x63:w32*))) handle _ => L_5
  block L_717 (addrnotavail_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_718
  block L_718 (env_260: unit)
    call L_719 (fromRep_1 (env_260, EAFNOSUPPORT_0 (*0x61:w32*))) handle _ => L_5
  block L_719 (afnosupport_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_720
  block L_720 (env_261: unit)
    call L_721 (fromRep_1 (env_261, EAGAIN_0 (*0xB:w32*))) handle _ => L_5
  block L_721 (again_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_722
  block L_722 (env_262: unit)
    call L_723 (fromRep_1 (env_262, EALREADY_0 (*0x72:w32*))) handle _ => L_5
  block L_723 (already_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_724
  block L_724 (env_263: unit)
    call L_725 (fromRep_1 (env_263, EBADF_0 (*0x9:w32*))) handle _ => L_5
  block L_725 (badf_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_726
  block L_726 (env_264: unit)
    call L_727 (fromRep_1 (env_264, EBADMSG_0 (*0x4A:w32*))) handle _ => L_5
  block L_727 (badmsg_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_728
  block L_728 (env_265: unit)
    call L_729 (fromRep_1 (env_265, EBUSY_0 (*0x10:w32*))) handle _ => L_5
  block L_729 (busy_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_730
  block L_730 (env_266: unit)
    call L_731 (fromRep_1 (env_266, ECANCELED_0 (*0x7D:w32*))) handle _ => L_5
  block L_731 (canceled_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_732
  block L_732 (env_267: unit)
    call L_733 (fromRep_1 (env_267, ECHILD_0 (*0xA:w32*))) handle _ => L_5
  block L_733 (child_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_734
  block L_734 (env_268: unit)
    call L_735 (fromRep_1 (env_268, ECONNABORTED_0 (*0x67:w32*))) handle _ => L_5
  block L_735 (connaborted_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_736
  block L_736 (env_269: unit)
    call L_737 (fromRep_1 (env_269, ECONNREFUSED_0 (*0x6F:w32*))) handle _ => L_5
  block L_737 (connrefused_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_738
  block L_738 (env_270: unit)
    call L_739 (fromRep_1 (env_270, ECONNRESET_0 (*0x68:w32*))) handle _ => L_5
  block L_739 (connreset_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_740
  block L_740 (env_271: unit)
    call L_741 (fromRep_1 (env_271, EDEADLK_0 (*0x23:w32*))) handle _ => L_5
  block L_741 (deadlk_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_742
  block L_742 (env_272: unit)
    call L_743 (fromRep_1 (env_272, EDESTADDRREQ_0 (*0x59:w32*))) handle _ => L_5
  block L_743 (destaddrreq_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_744
  block L_744 (env_273: unit)
    call L_745 (fromRep_1 (env_273, EDOM_0 (*0x21:w32*))) handle _ => L_5
  block L_745 (dom_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_746
  block L_746 (env_274: unit)
    call L_747 (fromRep_1 (env_274, EDQUOT_0 (*0x7A:w32*))) handle _ => L_5
  block L_747 (dquot_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_748
  block L_748 (env_275: unit)
    call L_749 (fromRep_1 (env_275, EEXIST_0 (*0x11:w32*))) handle _ => L_5
  block L_749 (exist_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_750
  block L_750 (env_276: unit)
    call L_751 (fromRep_1 (env_276, EFAULT_0 (*0xE:w32*))) handle _ => L_5
  block L_751 (fault_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_752
  block L_752 (env_277: unit)
    call L_753 (fromRep_1 (env_277, EFBIG_0 (*0x1B:w32*))) handle _ => L_5
  block L_753 (fbig_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_754
  block L_754 (env_278: unit)
    call L_755 (fromRep_1 (env_278, EHOSTUNREACH_0 (*0x71:w32*))) handle _ => L_5
  block L_755 (hostunreach_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_756
  block L_756 (env_279: unit)
    call L_757 (fromRep_1 (env_279, EIDRM_0 (*0x2B:w32*))) handle _ => L_5
  block L_757 (idrm_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_758
  block L_758 (env_280: unit)
    call L_759 (fromRep_1 (env_280, EILSEQ_0 (*0x54:w32*))) handle _ => L_5
  block L_759 (ilseq_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_760
  block L_760 (env_281: unit)
    call L_761 (fromRep_1 (env_281, EINPROGRESS_0 (*0x73:w32*))) handle _ => L_5
  block L_761 (inprogress_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_762
  block L_762 (env_282: unit)
    call L_763 (fromRep_1 (env_282, EINTR_0 (*0x4:w32*))) handle _ => L_5
  block L_763 (intr_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_764
  block L_764 (env_283: unit)
    call L_765 (fromRep_1 (env_283, EINVAL_0 (*0x16:w32*))) handle _ => L_5
  block L_765 (inval_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_766
  block L_766 (env_284: unit)
    call L_767 (fromRep_1 (env_284, EIO_0 (*0x5:w32*))) handle _ => L_5
  block L_767 (io_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_768
  block L_768 (env_285: unit)
    call L_769 (fromRep_1 (env_285, EISCONN_0 (*0x6A:w32*))) handle _ => L_5
  block L_769 (isconn_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_770
  block L_770 (env_286: unit)
    call L_771 (fromRep_1 (env_286, EISDIR_0 (*0x15:w32*))) handle _ => L_5
  block L_771 (isdir_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_772
  block L_772 (env_287: unit)
    call L_773 (fromRep_1 (env_287, ELOOP_0 (*0x28:w32*))) handle _ => L_5
  block L_773 (loop_11: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_774
  block L_774 (env_288: unit)
    call L_775 (fromRep_1 (env_288, EMFILE_0 (*0x18:w32*))) handle _ => L_5
  block L_775 (mfile_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_776
  block L_776 (env_289: unit)
    call L_777 (fromRep_1 (env_289, EMLINK_0 (*0x1F:w32*))) handle _ => L_5
  block L_777 (mlink_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_778
  block L_778 (env_290: unit)
    call L_779 (fromRep_1 (env_290, EMSGSIZE_0 (*0x5A:w32*))) handle _ => L_5
  block L_779 (msgsize_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_780
  block L_780 (env_291: unit)
    call L_781 (fromRep_1 (env_291, EMULTIHOP_0 (*0x48:w32*))) handle _ => L_5
  block L_781 (multihop_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_782
  block L_782 (env_292: unit)
    call L_783 (fromRep_1 (env_292, ENAMETOOLONG_0 (*0x24:w32*))) handle _ => L_5
  block L_783 (nametoolong_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_784
  block L_784 (env_293: unit)
    call L_785 (fromRep_1 (env_293, ENETDOWN_0 (*0x64:w32*))) handle _ => L_5
  block L_785 (netdown_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_786
  block L_786 (env_294: unit)
    call L_787 (fromRep_1 (env_294, ENETRESET_0 (*0x66:w32*))) handle _ => L_5
  block L_787 (netreset_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_788
  block L_788 (env_295: unit)
    call L_789 (fromRep_1 (env_295, ENETUNREACH_0 (*0x65:w32*))) handle _ => L_5
  block L_789 (netunreach_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_790
  block L_790 (env_296: unit)
    call L_791 (fromRep_1 (env_296, ENFILE_0 (*0x17:w32*))) handle _ => L_5
  block L_791 (nfile_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_792
  block L_792 (env_297: unit)
    call L_793 (fromRep_1 (env_297, ENOBUFS_0 (*0x69:w32*))) handle _ => L_5
  block L_793 (nobufs_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_794
  block L_794 (env_298: unit)
    call L_795 (fromRep_1 (env_298, ENODATA_0 (*0x3D:w32*))) handle _ => L_5
  block L_795 (nodata_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_796
  block L_796 (env_299: unit)
    call L_797 (fromRep_1 (env_299, ENODEV_0 (*0x13:w32*))) handle _ => L_5
  block L_797 (nodev_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_798
  block L_798 (env_300: unit)
    call L_799 (fromRep_1 (env_300, ENOENT_0 (*0x2:w32*))) handle _ => L_5
  block L_799 (noent_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_800
  block L_800 (env_301: unit)
    call L_801 (fromRep_1 (env_301, ENOEXEC_0 (*0x8:w32*))) handle _ => L_5
  block L_801 (noexec_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_802
  block L_802 (env_302: unit)
    call L_803 (fromRep_1 (env_302, ENOLCK_0 (*0x25:w32*))) handle _ => L_5
  block L_803 (nolck_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_804
  block L_804 (env_303: unit)
    call L_805 (fromRep_1 (env_303, ENOLINK_0 (*0x43:w32*))) handle _ => L_5
  block L_805 (nolink_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_806
  block L_806 (env_304: unit)
    call L_807 (fromRep_1 (env_304, ENOMEM_0 (*0xC:w32*))) handle _ => L_5
  block L_807 (nomem_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_808
  block L_808 (env_305: unit)
    call L_809 (fromRep_1 (env_305, ENOMSG_0 (*0x2A:w32*))) handle _ => L_5
  block L_809 (nomsg_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_810
  block L_810 (env_306: unit)
    call L_811 (fromRep_1 (env_306, ENOPROTOOPT_0 (*0x5C:w32*))) handle _ => L_5
  block L_811 (noprotoopt_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_812
  block L_812 (env_307: unit)
    call L_813 (fromRep_1 (env_307, ENOSPC_0 (*0x1C:w32*))) handle _ => L_5
  block L_813 (nospc_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_814
  block L_814 (env_308: unit)
    call L_815 (fromRep_1 (env_308, ENOSR_0 (*0x3F:w32*))) handle _ => L_5
  block L_815 (nosr_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_816
  block L_816 (env_309: unit)
    call L_817 (fromRep_1 (env_309, ENOSTR_0 (*0x3C:w32*))) handle _ => L_5
  block L_817 (nostr_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_818
  block L_818 (env_310: unit)
    call L_819 (fromRep_1 (env_310, ENOSYS_0 (*0x26:w32*))) handle _ => L_5
  block L_819 (nosys_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_820
  block L_820 (env_311: unit)
    call L_821 (fromRep_1 (env_311, ENOTCONN_0 (*0x6B:w32*))) handle _ => L_5
  block L_821 (notconn_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_822
  block L_822 (env_312: unit)
    call L_823 (fromRep_1 (env_312, ENOTDIR_0 (*0x14:w32*))) handle _ => L_5
  block L_823 (notdir_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_824
  block L_824 (env_313: unit)
    call L_825 (fromRep_1 (env_313, ENOTEMPTY_0 (*0x27:w32*))) handle _ => L_5
  block L_825 (notempty_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_826
  block L_826 (env_314: unit)
    call L_827 (fromRep_1 (env_314, ENOTSOCK_0 (*0x58:w32*))) handle _ => L_5
  block L_827 (notsock_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_828
  block L_828 (env_315: unit)
    call L_829 (fromRep_1 (env_315, ENOTSUP_0 (*0x5F:w32*))) handle _ => L_5
  block L_829 (notsup_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_830
  block L_830 (env_316: unit)
    call L_831 (fromRep_1 (env_316, ENOTTY_0 (*0x19:w32*))) handle _ => L_5
  block L_831 (notty_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_832
  block L_832 (env_317: unit)
    call L_833 (fromRep_1 (env_317, ENXIO_0 (*0x6:w32*))) handle _ => L_5
  block L_833 (nxio_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_834
  block L_834 (env_318: unit)
    call L_835 (fromRep_1 (env_318, EOPNOTSUPP_0 (*0x5F:w32*))) handle _ => L_5
  block L_835 (opnotsupp_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_836
  block L_836 (env_319: unit)
    call L_837 (fromRep_1 (env_319, EOVERFLOW_0 (*0x4B:w32*))) handle _ => L_5
  block L_837 (overflow_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_838
  block L_838 (env_320: unit)
    call L_839 (fromRep_1 (env_320, EPERM_0 (*0x1:w32*))) handle _ => L_5
  block L_839 (perm_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_840
  block L_840 (env_321: unit)
    call L_841 (fromRep_1 (env_321, EPIPE_0 (*0x20:w32*))) handle _ => L_5
  block L_841 (pipe_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_842
  block L_842 (env_322: unit)
    call L_843 (fromRep_1 (env_322, EPROTO_0 (*0x47:w32*))) handle _ => L_5
  block L_843 (proto_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_844
  block L_844 (env_323: unit)
    call L_845 (fromRep_1 (env_323, EPROTONOSUPPORT_0 (*0x5D:w32*))) handle _ => L_5
  block L_845 (protonosupport_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_846
  block L_846 (env_324: unit)
    call L_847 (fromRep_1 (env_324, EPROTOTYPE_0 (*0x5B:w32*))) handle _ => L_5
  block L_847 (prototype_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_848
  block L_848 (env_325: unit)
    call L_849 (fromRep_1 (env_325, ERANGE_0 (*0x22:w32*))) handle _ => L_5
  block L_849 (range_2: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_850
  block L_850 (env_326: unit)
    call L_851 (fromRep_1 (env_326, EROFS_0 (*0x1E:w32*))) handle _ => L_5
  block L_851 (rofs_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_852
  block L_852 (env_327: unit)
    call L_853 (fromRep_1 (env_327, ESPIPE_0 (*0x1D:w32*))) handle _ => L_5
  block L_853 (spipe_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_854
  block L_854 (env_328: unit)
    call L_855 (fromRep_1 (env_328, ESRCH_0 (*0x3:w32*))) handle _ => L_5
  block L_855 (srch_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_856
  block L_856 (env_329: unit)
    call L_857 (fromRep_1 (env_329, ESTALE_0 (*0x74:w32*))) handle _ => L_5
  block L_857 (stale_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_858
  block L_858 (env_330: unit)
    call L_859 (fromRep_1 (env_330, ETIME_0 (*0x3E:w32*))) handle _ => L_5
  block L_859 (time_1: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_860
  block L_860 (env_331: unit)
    call L_861 (fromRep_1 (env_331, ETIMEDOUT_0 (*0x6E:w32*))) handle _ => L_5
  block L_861 (timedout_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_862
  block L_862 (env_332: unit)
    call L_863 (fromRep_1 (env_332, E2BIG_0 (*0x7:w32*))) handle _ => L_5
  block L_863 (toobig_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_864
  block L_864 (env_333: unit)
    call L_865 (fromRep_1 (env_333, ETXTBSY_0 (*0x1A:w32*))) handle _ => L_5
  block L_865 (txtbsy_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_866
  block L_866 (env_334: unit)
    call L_867 (fromRep_1 (env_334, EWOULDBLOCK_0 (*0xB:w32*))) handle _ => L_5
  block L_867 (wouldblock_0: word32)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_868
  block L_868 (env_335: unit)
    call L_869 (fromRep_1 (env_335, EXDEV_0 (*0x12:w32*))) handle _ => L_5
  block L_869 (xdev_0: word32)
    val x_1881: (word32, (word8) vector) tuple = (acces_0, x_813 (*"acces"*))
    val x_1880: (word32, (word8) vector) tuple =
      (addrinuse_0, x_814 (*"addrinuse"*))
    val x_1879: (word32, (word8) vector) tuple =
      (addrnotavail_0, x_815 (*"addrnotavail"*))
    val x_1878: (word32, (word8) vector) tuple =
      (afnosupport_0, x_816 (*"afnosupport"*))
    val x_1877: (word32, (word8) vector) tuple = (again_0, x_817 (*"again"*))
    val x_1876: (word32, (word8) vector) tuple =
      (already_0, x_818 (*"already"*))
    val x_1875: (word32, (word8) vector) tuple = (badf_0, x_819 (*"badf"*))
    val x_1874: (word32, (word8) vector) tuple = (badmsg_0, x_820 (*"badmsg"*))
    val x_1873: (word32, (word8) vector) tuple = (busy_0, x_821 (*"busy"*))
    val x_1872: (word32, (word8) vector) tuple =
      (canceled_0, x_822 (*"canceled"*))
    val x_1871: (word32, (word8) vector) tuple = (child_0, x_823 (*"child"*))
    val x_1870: (word32, (word8) vector) tuple =
      (connaborted_0, x_824 (*"connaborted"*))
    val x_1869: (word32, (word8) vector) tuple =
      (connrefused_0, x_825 (*"connrefused"*))
    val x_1868: (word32, (word8) vector) tuple =
      (connreset_0, x_826 (*"connreset"*))
    val x_1867: (word32, (word8) vector) tuple = (deadlk_0, x_827 (*"deadlk"*))
    val x_1866: (word32, (word8) vector) tuple =
      (destaddrreq_0, x_828 (*"destaddrreq"*))
    val x_1865: (word32, (word8) vector) tuple = (dom_0, x_829 (*"dom"*))
    val x_1864: (word32, (word8) vector) tuple = (dquot_0, x_830 (*"dquot"*))
    val x_1863: (word32, (word8) vector) tuple = (exist_0, x_831 (*"exist"*))
    val x_1862: (word32, (word8) vector) tuple = (fault_0, x_832 (*"fault"*))
    val x_1861: (word32, (word8) vector) tuple = (fbig_0, x_833 (*"fbig"*))
    val x_1860: (word32, (word8) vector) tuple =
      (hostunreach_0, x_834 (*"hostunreach"*))
    val x_1859: (word32, (word8) vector) tuple = (idrm_0, x_835 (*"idrm"*))
    val x_1858: (word32, (word8) vector) tuple = (ilseq_0, x_836 (*"ilseq"*))
    val x_1857: (word32, (word8) vector) tuple =
      (inprogress_0, x_837 (*"inprogress"*))
    val x_1856: (word32, (word8) vector) tuple = (intr_0, x_838 (*"intr"*))
    val x_1855: (word32, (word8) vector) tuple = (inval_0, x_839 (*"inval"*))
    val x_1854: (word32, (word8) vector) tuple = (io_0, x_840 (*"io"*))
    val x_1853: (word32, (word8) vector) tuple = (isconn_0, x_841 (*"isconn"*))
    val x_1852: (word32, (word8) vector) tuple = (isdir_0, x_842 (*"isdir"*))
    val x_1851: (word32, (word8) vector) tuple = (loop_11, x_843 (*"loop"*))
    val x_1850: (word32, (word8) vector) tuple = (mfile_0, x_844 (*"mfile"*))
    val x_1849: (word32, (word8) vector) tuple = (mlink_0, x_845 (*"mlink"*))
    val x_1848: (word32, (word8) vector) tuple =
      (msgsize_0, x_846 (*"msgsize"*))
    val x_1847: (word32, (word8) vector) tuple =
      (multihop_0, x_847 (*"multihop"*))
    val x_1846: (word32, (word8) vector) tuple =
      (nametoolong_0, x_848 (*"nametoolong"*))
    val x_1845: (word32, (word8) vector) tuple =
      (netdown_0, x_849 (*"netdown"*))
    val x_1844: (word32, (word8) vector) tuple =
      (netreset_0, x_850 (*"netreset"*))
    val x_1843: (word32, (word8) vector) tuple =
      (netunreach_0, x_851 (*"netunreach"*))
    val x_1842: (word32, (word8) vector) tuple = (nfile_0, x_852 (*"nfile"*))
    val x_1841: (word32, (word8) vector) tuple = (nobufs_0, x_853 (*"nobufs"*))
    val x_1840: (word32, (word8) vector) tuple = (nodata_0, x_854 (*"nodata"*))
    val x_1839: (word32, (word8) vector) tuple = (nodev_0, x_855 (*"nodev"*))
    val x_1838: (word32, (word8) vector) tuple = (noent_0, x_856 (*"noent"*))
    val x_1837: (word32, (word8) vector) tuple = (noexec_0, x_857 (*"noexec"*))
    val x_1836: (word32, (word8) vector) tuple = (nolck_0, x_858 (*"nolck"*))
    val x_1835: (word32, (word8) vector) tuple = (nolink_0, x_859 (*"nolink"*))
    val x_1834: (word32, (word8) vector) tuple = (nomem_0, x_860 (*"nomem"*))
    val x_1833: (word32, (word8) vector) tuple = (nomsg_0, x_861 (*"nomsg"*))
    val x_1832: (word32, (word8) vector) tuple =
      (noprotoopt_0, x_862 (*"noprotoopt"*))
    val x_1831: (word32, (word8) vector) tuple = (nospc_0, x_863 (*"nospc"*))
    val x_1830: (word32, (word8) vector) tuple = (nosr_0, x_864 (*"nosr"*))
    val x_1829: (word32, (word8) vector) tuple = (nostr_0, x_865 (*"nostr"*))
    val x_1828: (word32, (word8) vector) tuple = (nosys_0, x_866 (*"nosys"*))
    val x_1827: (word32, (word8) vector) tuple =
      (notconn_0, x_867 (*"notconn"*))
    val x_1826: (word32, (word8) vector) tuple = (notdir_0, x_868 (*"notdir"*))
    val x_1825: (word32, (word8) vector) tuple =
      (notempty_0, x_869 (*"notempty"*))
    val x_1824: (word32, (word8) vector) tuple =
      (notsock_0, x_870 (*"notsock"*))
    val x_1823: (word32, (word8) vector) tuple = (notsup_0, x_871 (*"notsup"*))
    val x_1822: (word32, (word8) vector) tuple = (notty_0, x_872 (*"notty"*))
    val x_1821: (word32, (word8) vector) tuple = (nxio_0, x_873 (*"nxio"*))
    val x_1820: (word32, (word8) vector) tuple =
      (opnotsupp_0, x_874 (*"opnotsupp"*))
    val x_1819: (word32, (word8) vector) tuple =
      (overflow_0, x_875 (*"overflow"*))
    val x_1818: (word32, (word8) vector) tuple = (perm_0, x_876 (*"perm"*))
    val x_1817: (word32, (word8) vector) tuple = (pipe_0, x_877 (*"pipe"*))
    val x_1816: (word32, (word8) vector) tuple = (proto_0, x_878 (*"proto"*))
    val x_1815: (word32, (word8) vector) tuple =
      (protonosupport_0, x_879 (*"protonosupport"*))
    val x_1814: (word32, (word8) vector) tuple =
      (prototype_0, x_880 (*"prototype"*))
    val x_1813: (word32, (word8) vector) tuple = (range_2, x_881 (*"range"*))
    val x_1812: (word32, (word8) vector) tuple = (rofs_0, x_882 (*"rofs"*))
    val x_1811: (word32, (word8) vector) tuple = (spipe_0, x_883 (*"spipe"*))
    val x_1810: (word32, (word8) vector) tuple = (srch_0, x_884 (*"srch"*))
    val x_1809: (word32, (word8) vector) tuple = (stale_0, x_885 (*"stale"*))
    val x_1808: (word32, (word8) vector) tuple = (time_1, x_886 (*"time"*))
    val x_1807: (word32, (word8) vector) tuple =
      (timedout_0, x_887 (*"timedout"*))
    val x_1806: (word32, (word8) vector) tuple = (toobig_0, x_888 (*"toobig"*))
    val x_1805: (word32, (word8) vector) tuple = (txtbsy_0, x_889 (*"txtbsy"*))
    val x_1804: (word32, (word8) vector) tuple =
      (wouldblock_0, x_890 (*"wouldblock"*))
    val x_1803: (word32, (word8) vector) tuple = (xdev_0, x_891 (*"xdev"*))
    val x_1802: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1803, x_892 (*con nil_5*))
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_870
  block L_870 (env_336: unit)
    call L_871 (::?_1 (env_336, x_1802)) handle _ => L_5
  block L_871 (x_1882: list_3)
    val x_1883: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1804, x_1882)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_872
  block L_872 (env_337: unit)
    call L_873 (::?_1 (env_337, x_1883)) handle _ => L_5
  block L_873 (x_1884: list_3)
    val x_1885: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1805, x_1884)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_874
  block L_874 (env_338: unit)
    call L_875 (::?_1 (env_338, x_1885)) handle _ => L_5
  block L_875 (x_1886: list_3)
    val x_1887: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1806, x_1886)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_876
  block L_876 (env_339: unit)
    call L_877 (::?_1 (env_339, x_1887)) handle _ => L_5
  block L_877 (x_1888: list_3)
    val x_1889: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1807, x_1888)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_878
  block L_878 (env_340: unit)
    call L_879 (::?_1 (env_340, x_1889)) handle _ => L_5
  block L_879 (x_1890: list_3)
    val x_1891: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1808, x_1890)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_880
  block L_880 (env_341: unit)
    call L_881 (::?_1 (env_341, x_1891)) handle _ => L_5
  block L_881 (x_1892: list_3)
    val x_1893: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1809, x_1892)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_882
  block L_882 (env_342: unit)
    call L_883 (::?_1 (env_342, x_1893)) handle _ => L_5
  block L_883 (x_1894: list_3)
    val x_1895: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1810, x_1894)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_884
  block L_884 (env_343: unit)
    call L_885 (::?_1 (env_343, x_1895)) handle _ => L_5
  block L_885 (x_1896: list_3)
    val x_1897: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1811, x_1896)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_886
  block L_886 (env_344: unit)
    call L_887 (::?_1 (env_344, x_1897)) handle _ => L_5
  block L_887 (x_1898: list_3)
    val x_1899: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1812, x_1898)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_888
  block L_888 (env_345: unit)
    call L_889 (::?_1 (env_345, x_1899)) handle _ => L_5
  block L_889 (x_1900: list_3)
    val x_1901: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1813, x_1900)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_890
  block L_890 (env_346: unit)
    call L_891 (::?_1 (env_346, x_1901)) handle _ => L_5
  block L_891 (x_1902: list_3)
    val x_1903: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1814, x_1902)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_892
  block L_892 (env_347: unit)
    call L_893 (::?_1 (env_347, x_1903)) handle _ => L_5
  block L_893 (x_1904: list_3)
    val x_1905: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1815, x_1904)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_894
  block L_894 (env_348: unit)
    call L_895 (::?_1 (env_348, x_1905)) handle _ => L_5
  block L_895 (x_1906: list_3)
    val x_1907: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1816, x_1906)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_896
  block L_896 (env_349: unit)
    call L_897 (::?_1 (env_349, x_1907)) handle _ => L_5
  block L_897 (x_1908: list_3)
    val x_1909: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1817, x_1908)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_898
  block L_898 (env_350: unit)
    call L_899 (::?_1 (env_350, x_1909)) handle _ => L_5
  block L_899 (x_1910: list_3)
    val x_1911: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1818, x_1910)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_900
  block L_900 (env_351: unit)
    call L_901 (::?_1 (env_351, x_1911)) handle _ => L_5
  block L_901 (x_1912: list_3)
    val x_1913: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1819, x_1912)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_902
  block L_902 (env_352: unit)
    call L_903 (::?_1 (env_352, x_1913)) handle _ => L_5
  block L_903 (x_1914: list_3)
    val x_1915: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1820, x_1914)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_904
  block L_904 (env_353: unit)
    call L_905 (::?_1 (env_353, x_1915)) handle _ => L_5
  block L_905 (x_1916: list_3)
    val x_1917: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1821, x_1916)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_906
  block L_906 (env_354: unit)
    call L_907 (::?_1 (env_354, x_1917)) handle _ => L_5
  block L_907 (x_1918: list_3)
    val x_1919: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1822, x_1918)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_908
  block L_908 (env_355: unit)
    call L_909 (::?_1 (env_355, x_1919)) handle _ => L_5
  block L_909 (x_1920: list_3)
    val x_1921: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1823, x_1920)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_910
  block L_910 (env_356: unit)
    call L_911 (::?_1 (env_356, x_1921)) handle _ => L_5
  block L_911 (x_1922: list_3)
    val x_1923: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1824, x_1922)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_912
  block L_912 (env_357: unit)
    call L_913 (::?_1 (env_357, x_1923)) handle _ => L_5
  block L_913 (x_1924: list_3)
    val x_1925: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1825, x_1924)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_914
  block L_914 (env_358: unit)
    call L_915 (::?_1 (env_358, x_1925)) handle _ => L_5
  block L_915 (x_1926: list_3)
    val x_1927: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1826, x_1926)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_916
  block L_916 (env_359: unit)
    call L_917 (::?_1 (env_359, x_1927)) handle _ => L_5
  block L_917 (x_1928: list_3)
    val x_1929: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1827, x_1928)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_918
  block L_918 (env_360: unit)
    call L_919 (::?_1 (env_360, x_1929)) handle _ => L_5
  block L_919 (x_1930: list_3)
    val x_1931: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1828, x_1930)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_920
  block L_920 (env_361: unit)
    call L_921 (::?_1 (env_361, x_1931)) handle _ => L_5
  block L_921 (x_1932: list_3)
    val x_1933: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1829, x_1932)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_922
  block L_922 (env_362: unit)
    call L_923 (::?_1 (env_362, x_1933)) handle _ => L_5
  block L_923 (x_1934: list_3)
    val x_1935: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1830, x_1934)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_924
  block L_924 (env_363: unit)
    call L_925 (::?_1 (env_363, x_1935)) handle _ => L_5
  block L_925 (x_1936: list_3)
    val x_1937: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1831, x_1936)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_926
  block L_926 (env_364: unit)
    call L_927 (::?_1 (env_364, x_1937)) handle _ => L_5
  block L_927 (x_1938: list_3)
    val x_1939: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1832, x_1938)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_928
  block L_928 (env_365: unit)
    call L_929 (::?_1 (env_365, x_1939)) handle _ => L_5
  block L_929 (x_1940: list_3)
    val x_1941: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1833, x_1940)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_930
  block L_930 (env_366: unit)
    call L_931 (::?_1 (env_366, x_1941)) handle _ => L_5
  block L_931 (x_1942: list_3)
    val x_1943: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1834, x_1942)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_932
  block L_932 (env_367: unit)
    call L_933 (::?_1 (env_367, x_1943)) handle _ => L_5
  block L_933 (x_1944: list_3)
    val x_1945: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1835, x_1944)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_934
  block L_934 (env_368: unit)
    call L_935 (::?_1 (env_368, x_1945)) handle _ => L_5
  block L_935 (x_1946: list_3)
    val x_1947: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1836, x_1946)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_936
  block L_936 (env_369: unit)
    call L_937 (::?_1 (env_369, x_1947)) handle _ => L_5
  block L_937 (x_1948: list_3)
    val x_1949: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1837, x_1948)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_938
  block L_938 (env_370: unit)
    call L_939 (::?_1 (env_370, x_1949)) handle _ => L_5
  block L_939 (x_1950: list_3)
    val x_1951: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1838, x_1950)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_940
  block L_940 (env_371: unit)
    call L_941 (::?_1 (env_371, x_1951)) handle _ => L_5
  block L_941 (x_1952: list_3)
    val x_1953: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1839, x_1952)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_942
  block L_942 (env_372: unit)
    call L_943 (::?_1 (env_372, x_1953)) handle _ => L_5
  block L_943 (x_1954: list_3)
    val x_1955: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1840, x_1954)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_944
  block L_944 (env_373: unit)
    call L_945 (::?_1 (env_373, x_1955)) handle _ => L_5
  block L_945 (x_1956: list_3)
    val x_1957: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1841, x_1956)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_946
  block L_946 (env_374: unit)
    call L_947 (::?_1 (env_374, x_1957)) handle _ => L_5
  block L_947 (x_1958: list_3)
    val x_1959: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1842, x_1958)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_948
  block L_948 (env_375: unit)
    call L_949 (::?_1 (env_375, x_1959)) handle _ => L_5
  block L_949 (x_1960: list_3)
    val x_1961: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1843, x_1960)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_950
  block L_950 (env_376: unit)
    call L_951 (::?_1 (env_376, x_1961)) handle _ => L_5
  block L_951 (x_1962: list_3)
    val x_1963: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1844, x_1962)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_952
  block L_952 (env_377: unit)
    call L_953 (::?_1 (env_377, x_1963)) handle _ => L_5
  block L_953 (x_1964: list_3)
    val x_1965: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1845, x_1964)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_954
  block L_954 (env_378: unit)
    call L_955 (::?_1 (env_378, x_1965)) handle _ => L_5
  block L_955 (x_1966: list_3)
    val x_1967: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1846, x_1966)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_956
  block L_956 (env_379: unit)
    call L_957 (::?_1 (env_379, x_1967)) handle _ => L_5
  block L_957 (x_1968: list_3)
    val x_1969: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1847, x_1968)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_958
  block L_958 (env_380: unit)
    call L_959 (::?_1 (env_380, x_1969)) handle _ => L_5
  block L_959 (x_1970: list_3)
    val x_1971: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1848, x_1970)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_960
  block L_960 (env_381: unit)
    call L_961 (::?_1 (env_381, x_1971)) handle _ => L_5
  block L_961 (x_1972: list_3)
    val x_1973: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1849, x_1972)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_962
  block L_962 (env_382: unit)
    call L_963 (::?_1 (env_382, x_1973)) handle _ => L_5
  block L_963 (x_1974: list_3)
    val x_1975: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1850, x_1974)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_964
  block L_964 (env_383: unit)
    call L_965 (::?_1 (env_383, x_1975)) handle _ => L_5
  block L_965 (x_1976: list_3)
    val x_1977: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1851, x_1976)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_966
  block L_966 (env_384: unit)
    call L_967 (::?_1 (env_384, x_1977)) handle _ => L_5
  block L_967 (x_1978: list_3)
    val x_1979: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1852, x_1978)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_968
  block L_968 (env_385: unit)
    call L_969 (::?_1 (env_385, x_1979)) handle _ => L_5
  block L_969 (x_1980: list_3)
    val x_1981: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1853, x_1980)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_970
  block L_970 (env_386: unit)
    call L_971 (::?_1 (env_386, x_1981)) handle _ => L_5
  block L_971 (x_1982: list_3)
    val x_1983: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1854, x_1982)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_972
  block L_972 (env_387: unit)
    call L_973 (::?_1 (env_387, x_1983)) handle _ => L_5
  block L_973 (x_1984: list_3)
    val x_1985: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1855, x_1984)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_974
  block L_974 (env_388: unit)
    call L_975 (::?_1 (env_388, x_1985)) handle _ => L_5
  block L_975 (x_1986: list_3)
    val x_1987: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1856, x_1986)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_976
  block L_976 (env_389: unit)
    call L_977 (::?_1 (env_389, x_1987)) handle _ => L_5
  block L_977 (x_1988: list_3)
    val x_1989: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1857, x_1988)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_978
  block L_978 (env_390: unit)
    call L_979 (::?_1 (env_390, x_1989)) handle _ => L_5
  block L_979 (x_1990: list_3)
    val x_1991: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1858, x_1990)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_980
  block L_980 (env_391: unit)
    call L_981 (::?_1 (env_391, x_1991)) handle _ => L_5
  block L_981 (x_1992: list_3)
    val x_1993: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1859, x_1992)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_982
  block L_982 (env_392: unit)
    call L_983 (::?_1 (env_392, x_1993)) handle _ => L_5
  block L_983 (x_1994: list_3)
    val x_1995: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1860, x_1994)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_984
  block L_984 (env_393: unit)
    call L_985 (::?_1 (env_393, x_1995)) handle _ => L_5
  block L_985 (x_1996: list_3)
    val x_1997: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1861, x_1996)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_986
  block L_986 (env_394: unit)
    call L_987 (::?_1 (env_394, x_1997)) handle _ => L_5
  block L_987 (x_1998: list_3)
    val x_1999: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1862, x_1998)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_988
  block L_988 (env_395: unit)
    call L_989 (::?_1 (env_395, x_1999)) handle _ => L_5
  block L_989 (x_2000: list_3)
    val x_2001: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1863, x_2000)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_990
  block L_990 (env_396: unit)
    call L_991 (::?_1 (env_396, x_2001)) handle _ => L_5
  block L_991 (x_2002: list_3)
    val x_2003: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1864, x_2002)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_992
  block L_992 (env_397: unit)
    call L_993 (::?_1 (env_397, x_2003)) handle _ => L_5
  block L_993 (x_2004: list_3)
    val x_2005: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1865, x_2004)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_994
  block L_994 (env_398: unit)
    call L_995 (::?_1 (env_398, x_2005)) handle _ => L_5
  block L_995 (x_2006: list_3)
    val x_2007: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1866, x_2006)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_996
  block L_996 (env_399: unit)
    call L_997 (::?_1 (env_399, x_2007)) handle _ => L_5
  block L_997 (x_2008: list_3)
    val x_2009: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1867, x_2008)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_998
  block L_998 (env_400: unit)
    call L_999 (::?_1 (env_400, x_2009)) handle _ => L_5
  block L_999 (x_2010: list_3)
    val x_2011: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1868, x_2010)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1000
  block L_1000 (env_401: unit)
    call L_1001 (::?_1 (env_401, x_2011)) handle _ => L_5
  block L_1001 (x_2012: list_3)
    val x_2013: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1869, x_2012)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1002
  block L_1002 (env_402: unit)
    call L_1003 (::?_1 (env_402, x_2013)) handle _ => L_5
  block L_1003 (x_2014: list_3)
    val x_2015: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1870, x_2014)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1004
  block L_1004 (env_403: unit)
    call L_1005 (::?_1 (env_403, x_2015)) handle _ => L_5
  block L_1005 (x_2016: list_3)
    val x_2017: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1871, x_2016)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1006
  block L_1006 (env_404: unit)
    call L_1007 (::?_1 (env_404, x_2017)) handle _ => L_5
  block L_1007 (x_2018: list_3)
    val x_2019: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1872, x_2018)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1008
  block L_1008 (env_405: unit)
    call L_1009 (::?_1 (env_405, x_2019)) handle _ => L_5
  block L_1009 (x_2020: list_3)
    val x_2021: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1873, x_2020)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1010
  block L_1010 (env_406: unit)
    call L_1011 (::?_1 (env_406, x_2021)) handle _ => L_5
  block L_1011 (x_2022: list_3)
    val x_2023: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1874, x_2022)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1012
  block L_1012 (env_407: unit)
    call L_1013 (::?_1 (env_407, x_2023)) handle _ => L_5
  block L_1013 (x_2024: list_3)
    val x_2025: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1875, x_2024)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1014
  block L_1014 (env_408: unit)
    call L_1015 (::?_1 (env_408, x_2025)) handle _ => L_5
  block L_1015 (x_2026: list_3)
    val x_2027: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1876, x_2026)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1016
  block L_1016 (env_409: unit)
    call L_1017 (::?_1 (env_409, x_2027)) handle _ => L_5
  block L_1017 (x_2028: list_3)
    val x_2029: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1877, x_2028)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1018
  block L_1018 (env_410: unit)
    call L_1019 (::?_1 (env_410, x_2029)) handle _ => L_5
  block L_1019 (x_2030: list_3)
    val x_2031: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1878, x_2030)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1020
  block L_1020 (env_411: unit)
    call L_1021 (::?_1 (env_411, x_2031)) handle _ => L_5
  block L_1021 (x_2032: list_3)
    val x_2033: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1879, x_2032)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1022
  block L_1022 (env_412: unit)
    call L_1023 (::?_1 (env_412, x_2033)) handle _ => L_5
  block L_1023 (x_2034: list_3)
    val x_2035: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1880, x_2034)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1024
  block L_1024 (env_413: unit)
    call L_1025 (::?_1 (env_413, x_2035)) handle _ => L_5
  block L_1025 (x_2036: list_3)
    val x_2037: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1881, x_2036)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1026
  block L_1026 (env_414: unit)
    call L_1027 (::?_1 (env_414, x_2037)) handle _ => L_5
  block L_1027 (errorNames_0: list_3)
    val x_2038: (lambdas_31, list_3) tuple = (concat_0, errorNames_0)
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1028
  block L_1028 (env_415: unit)
    call L_1029 (x_1797 (env_415, messagers_0)) handle _ => L_5
  block L_1029 (x_2039: list_0)
    val x_2042: lambdas_0 = con xEnv_249 (x_2038)
    val x_2041: (lambdas_0, list_0) tuple = (x_2042, x_2039)
    val x_2040: list_0 = con ::_3 (x_2041)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_2040)
    val tuple_84: (cpointer, lambdas_485) tuple = (null_0, arrayAlloc_0)
    val errorMsg_0: lambdas_223 = con errorMsgEnv_0 (tuple_84)
    val raiseSys_1: lambdas_45 = con raiseSysEnv_0 (errorMsg_0)
    val raiseSys_0: lambdas_54 = con raiseSysEnv_1 (errorMsg_0)
    val blocker_0: (lambdas_46) ref =
      prim Ref_ref[lambdas_46] (x_922 (*con xEnv_53 (x_921)*))
    val restartFlag_0: (bool) ref = prim Ref_ref[bool] (x_923 (*con true*))
    val tuple_83: (lambdas_223, word32) tuple = (errorMsg_0, inval_0)
    val setRoundingMode_0: lambdas_99 = con setRoundingModeEnv_0 (tuple_83)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1030
  block L_1030 (env_416: unit)
    call L_1031 (sextdFromInt32ToInt32_1 (env_416, realSize_0 (*0x20:w32*))) handle _ => L_5
  block L_1031 (realSize_2: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1032
  block L_1032 (env_417: unit)
    call L_1033 (sextdFromInt32ToInt32_1 (env_417, exponentBias_0 (*0x7F:w32*))) handle _ => L_5
  block L_1033 (exponentBias_2: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1034
  block L_1034 (env_418: unit)
    call L_1035 (sextdFromInt32ToInt32_1 (env_418, precision_4 (*0x18:w32*))) handle _ => L_5
  block L_1035 (precision_6: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1036
  block L_1036 (env_419: unit)
    call L_1037 (sextdFromInt32ToWord32_1 (env_419, realSize_2)) handle _ => L_5
  block L_1037 (x_2043: word32)
    val x_2044: (word32, word32) tuple = (x_2043, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1038
  block L_1038 (env_420: unit)
    call L_1039 (-_3 (env_420, x_2044)) handle _ => L_5
  block L_1039 (exponentSignificandBits_0: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1040
  block L_1040 (env_421: unit)
    call L_1041 (sextdFromInt32ToWord32_1 (env_421, precision_6)) handle _ => L_5
  block L_1041 (x_2045: word32)
    val x_2046: (word32, word32) tuple = (x_2045, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1042
  block L_1042 (env_422: unit)
    call L_1043 (-_3 (env_422, x_2046)) handle _ => L_5
  block L_1043 (significandBits_0: word32)
    val x_2047: (word32, word32) tuple =
      (exponentSignificandBits_0, significandBits_0)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1044
  block L_1044 (env_423: unit)
    call L_1045 (-_3 (env_423, x_2047)) handle _ => L_5
  block L_1045 (exponentBits_0: word32)
    val x_2048: (lambdas_114, word32) tuple = (<<_6, zero_3)
    call L_1046 (mkMask_0 (x_2048, one_2)) handle _ => L_5
  block L_1046 (x_2049: word32)
    val x_2050: (word32, word32) tuple = (x_2049, exponentSignificandBits_0)
    call L_1047 (<<_8 (tuple_79, x_2050)) handle _ => L_5
  block L_1047 (signMask_0: word32)
    call L_1048 (mkMask_0 (x_2048, exponentBits_0)) handle _ => L_5
  block L_1048 (x_2051: word32)
    val x_2052: (word32, word32) tuple = (x_2051, significandBits_0)
    call L_1049 (<<_8 (tuple_79, x_2052)) handle _ => L_5
  block L_1049 (exponentMask_0: word32)
    call L_1050 (mkMask_0 (x_2048, significandBits_0)) handle _ => L_5
  block L_1050 (significandMask_0: word32)
    val x_2053: (word32, word32, word32) tuple =
      (zero_3, significandMask_0, exponentMask_0)
    val class_0: lambdas_169 = con classEnv_1 (x_2053)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1051
  block L_1051 (env_424: unit)
    call L_1052 (x_2054 (env_424, x_1478)) handle _ => L_5
  block L_1052 (x_2055: bool)
    case x_2055 of
      true => L_1054 | false => L_1053
  block L_1053 ()
    val x_2057: lambdas_220 = con xEnv_209 (setRoundingMode_0)
    val x_2056: (lambdas_220, lambdas_354) tuple =
      (x_2057, toReal32Unsafe_0 (*con toReal ... _222)*))
    goto L_1055 (x_2056)
  block L_1054 ()
    val x_2059: lambdas_219 = #0 (x_1479)
    val x_2058: lambdas_354 = #1 (x_1479)
    case x_2059 of
      xEnv_55 => L_1056
  block L_1056 (x_2060: unit)
    val x_2062: lambdas_220 = con xEnv_210 (x_2060)
    val x_2061: (lambdas_220, lambdas_354) tuple = (x_2062, x_2058)
    goto L_1055 (x_2061)
  block L_1055 (x_2063: (lambdas_220, lambdas_354) tuple)
    case castFromWord_0 (*con castFr ... _251)*) of
      castFromWordEnv_0 => L_1057
  block L_1057 (env_425: unit)
    call L_1058 (castFromWord_2 (env_425, zero_3)) handle _ => L_5
  block L_1058 (zero_7: real32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1059
  block L_1059 (env_426: unit)
    call L_1060 (sextdFromInt32ToWord32_1 (env_426, exponentBias_2)) handle _ => L_5
  block L_1060 (x_2064: word32)
    val x_2065: (word32, word32) tuple = (x_2064, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1061
  block L_1061 (env_427: unit)
    call L_1062 (-_3 (env_427, x_2065)) handle _ => L_5
  block L_1062 (x_2066: word32)
    val x_2067: (word32, word32) tuple = (x_2066, significandBits_0)
    call L_1063 (<<_8 (tuple_79, x_2067)) handle _ => L_5
  block L_1063 (x_2068: word32)
    case castFromWord_0 (*con castFr ... _251)*) of
      castFromWordEnv_0 => L_1064
  block L_1064 (env_428: unit)
    call L_1065 (castFromWord_2 (env_428, x_2068)) handle _ => L_5
  block L_1065 (half_0: real32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1066
  block L_1066 (env_429: unit)
    call L_1067 (sextdFromInt32ToWord32_1 (env_429, exponentBias_2)) handle _ => L_5
  block L_1067 (x_2069: word32)
    val x_2070: (word32, word32) tuple = (x_2069, significandBits_0)
    call L_1068 (<<_8 (tuple_79, x_2070)) handle _ => L_5
  block L_1068 (x_2071: word32)
    case castFromWord_0 (*con castFr ... _251)*) of
      castFromWordEnv_0 => L_1069
  block L_1069 (env_430: unit)
    call L_1070 (castFromWord_2 (env_430, x_2071)) handle _ => L_5
  block L_1070 (one_6: real32)
    val x_2073: (lambdas_162, lambdas_161, word8) tuple =
      (<<_0, >>_0, maxInt'_0)
    val x_2072: (word32, word32) tuple = (precision_6, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1071
  block L_1071 (env_431: unit)
    call L_1072 (<_5 (env_431, x_2072)) handle _ => L_5
  block L_1072 (x_2074: bool)
    case x_2074 of
      true => L_1074 | false => L_1073
  block L_1073 ()
    call L_1075 (x_2075 (x_2073, x_949 (*0x0:w32*))) handle _ => L_5
  block L_1075 (maxInt'_4: word8)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1076
  block L_1076 (env_432: unit)
    call L_1077 (fromInt8Unsafe_2 (env_432, maxInt'_4)) handle _ => L_5
  block L_1077 (maxInt_0: real32)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1078
  block L_1078 (env_433: unit)
    call L_1079 (fromInt8Unsafe_2 (env_433, minInt'_0)) handle _ => L_5
  block L_1079 (minInt_0: real32)
    val x_2077:
      (real32, real32, lambdas_99, real32, word8, real32, word8) tuple =
      (minInt_0,
       maxInt_0,
       setRoundingMode_0,
       one_6,
       maxInt'_4,
       half_0,
       minInt'_0)
    val x_2076: lambdas_215 = con xEnv_204 (x_2077)
    goto L_1080 (x_2076)
  block L_1074 ()
    val x_2078: (word32, word32) tuple = (precision'_0, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1081
  block L_1081 (env_434: unit)
    call L_1082 (x_1785 (env_434, x_2078)) handle _ => L_5
  block L_1082 (x_2079: word32)
    val x_2080: (word32, word32) tuple = (x_2079, x_946 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1083
  block L_1083 (env_435: unit)
    call L_1084 (x_1785 (env_435, x_2080)) handle _ => L_5
  block L_1084 (trim_0: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1085
  block L_1085 (env_436: unit)
    call L_1086 (sextdFromInt32ToWord32_1 (env_436, trim_0)) handle _ => L_5
  block L_1086 (x_2081: word32)
    call L_1087 (x_2075 (x_2073, x_2081)) handle _ => L_5
  block L_1087 (maxInt'_5: word8)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1088
  block L_1088 (env_437: unit)
    call L_1089 (fromInt8Unsafe_2 (env_437, maxInt'_5)) handle _ => L_5
  block L_1089 (maxInt_1: real32)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1090
  block L_1090 (env_438: unit)
    call L_1091 (fromInt8Unsafe_2 (env_438, minInt'_0)) handle _ => L_5
  block L_1091 (minInt_1: real32)
    val x_2083: (real32, real32, lambdas_99) tuple =
      (minInt_1, maxInt_1, setRoundingMode_0)
    val x_2082: lambdas_215 = con xEnv_205 (x_2083)
    goto L_1080 (x_2082)
  block L_1080 (x_2084: lambdas_215)
    val x_2086: (lambdas_154, lambdas_153, word16) tuple =
      (<<_1, >>_1, maxInt'_1)
    val x_2085: (word32, word32) tuple = (precision_6, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1092
  block L_1092 (env_439: unit)
    call L_1093 (<_5 (env_439, x_2085)) handle _ => L_5
  block L_1093 (x_2087: bool)
    case x_2087 of
      true => L_1095 | false => L_1094
  block L_1094 ()
    call L_1096 (x_2088 (x_2086, x_955 (*0x0:w32*))) handle _ => L_5
  block L_1096 (maxInt'_6: word16)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1097
  block L_1097 (env_440: unit)
    call L_1098 (fromInt16Unsafe_2 (env_440, maxInt'_6)) handle _ => L_5
  block L_1098 (maxInt_2: real32)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1099
  block L_1099 (env_441: unit)
    call L_1100 (fromInt16Unsafe_2 (env_441, minInt'_1)) handle _ => L_5
  block L_1100 (minInt_2: real32)
    val x_2090:
      (real32, real32, lambdas_99, real32, word16, real32, word16) tuple =
      (minInt_2,
       maxInt_2,
       setRoundingMode_0,
       one_6,
       maxInt'_6,
       half_0,
       minInt'_1)
    val x_2089: lambdas_209 = con xEnv_197 (x_2090)
    goto L_1101 (x_2089)
  block L_1095 ()
    val x_2091: (word32, word32) tuple = (precision'_1, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1102
  block L_1102 (env_442: unit)
    call L_1103 (x_1785 (env_442, x_2091)) handle _ => L_5
  block L_1103 (x_2092: word32)
    val x_2093: (word32, word32) tuple = (x_2092, x_952 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1104
  block L_1104 (env_443: unit)
    call L_1105 (x_1785 (env_443, x_2093)) handle _ => L_5
  block L_1105 (trim_1: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1106
  block L_1106 (env_444: unit)
    call L_1107 (sextdFromInt32ToWord32_1 (env_444, trim_1)) handle _ => L_5
  block L_1107 (x_2094: word32)
    call L_1108 (x_2088 (x_2086, x_2094)) handle _ => L_5
  block L_1108 (maxInt'_7: word16)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1109
  block L_1109 (env_445: unit)
    call L_1110 (fromInt16Unsafe_2 (env_445, maxInt'_7)) handle _ => L_5
  block L_1110 (maxInt_3: real32)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1111
  block L_1111 (env_446: unit)
    call L_1112 (fromInt16Unsafe_2 (env_446, minInt'_1)) handle _ => L_5
  block L_1112 (minInt_3: real32)
    val x_2096: (real32, real32, lambdas_99) tuple =
      (minInt_3, maxInt_3, setRoundingMode_0)
    val x_2095: lambdas_209 = con xEnv_198 (x_2096)
    goto L_1101 (x_2095)
  block L_1101 (x_2097: lambdas_209)
    val x_2099: (lambdas_146, lambdas_145, word32) tuple =
      (<<_2, >>_2, maxInt'_2)
    val x_2098: (word32, word32) tuple = (precision_6, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1113
  block L_1113 (env_447: unit)
    call L_1114 (<_5 (env_447, x_2098)) handle _ => L_5
  block L_1114 (x_2100: bool)
    case x_2100 of
      true => L_1116 | false => L_1115
  block L_1115 ()
    call L_1117 (x_2101 (x_2099, x_961 (*0x0:w32*))) handle _ => L_5
  block L_1117 (maxInt'_8: word32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1118
  block L_1118 (env_448: unit)
    call L_1119 (fromInt32Unsafe_2 (env_448, maxInt'_8)) handle _ => L_5
  block L_1119 (maxInt_4: real32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1120
  block L_1120 (env_449: unit)
    call L_1121 (fromInt32Unsafe_2 (env_449, minInt'_2)) handle _ => L_5
  block L_1121 (minInt_4: real32)
    val x_2103:
      (real32, real32, lambdas_99, real32, word32, real32, word32) tuple =
      (minInt_4,
       maxInt_4,
       setRoundingMode_0,
       one_6,
       maxInt'_8,
       half_0,
       minInt'_2)
    val x_2102: lambdas_203 = con xEnv_190 (x_2103)
    goto L_1122 (x_2102)
  block L_1116 ()
    val x_2104: (word32, word32) tuple = (precision'_2, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1123
  block L_1123 (env_450: unit)
    call L_1124 (x_1785 (env_450, x_2104)) handle _ => L_5
  block L_1124 (x_2105: word32)
    val x_2106: (word32, word32) tuple = (x_2105, x_958 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1125
  block L_1125 (env_451: unit)
    call L_1126 (x_1785 (env_451, x_2106)) handle _ => L_5
  block L_1126 (trim_2: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1127
  block L_1127 (env_452: unit)
    call L_1128 (sextdFromInt32ToWord32_1 (env_452, trim_2)) handle _ => L_5
  block L_1128 (x_2107: word32)
    call L_1129 (x_2101 (x_2099, x_2107)) handle _ => L_5
  block L_1129 (maxInt'_9: word32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1130
  block L_1130 (env_453: unit)
    call L_1131 (fromInt32Unsafe_2 (env_453, maxInt'_9)) handle _ => L_5
  block L_1131 (maxInt_5: real32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1132
  block L_1132 (env_454: unit)
    call L_1133 (fromInt32Unsafe_2 (env_454, minInt'_2)) handle _ => L_5
  block L_1133 (minInt_5: real32)
    val x_2109: (real32, real32, lambdas_99) tuple =
      (minInt_5, maxInt_5, setRoundingMode_0)
    val x_2108: lambdas_203 = con xEnv_191 (x_2109)
    goto L_1122 (x_2108)
  block L_1122 (x_2110: lambdas_203)
    val x_2112: (lambdas_138, lambdas_137, word64) tuple =
      (<<_3, >>_3, maxInt'_3)
    val x_2111: (word32, word32) tuple = (precision_6, precision'_3)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1134
  block L_1134 (env_455: unit)
    call L_1135 (<_5 (env_455, x_2111)) handle _ => L_5
  block L_1135 (x_2113: bool)
    case x_2113 of
      true => L_1137 | false => L_1136
  block L_1136 ()
    call L_1138 (x_2114 (x_2112, x_967 (*0x0:w32*))) handle _ => L_5
  block L_1138 (maxInt'_10: word64)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1139
  block L_1139 (env_456: unit)
    call L_1140 (fromInt64Unsafe_2 (env_456, maxInt'_10)) handle _ => L_5
  block L_1140 (maxInt_6: real32)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1141
  block L_1141 (env_457: unit)
    call L_1142 (fromInt64Unsafe_2 (env_457, minInt'_3)) handle _ => L_5
  block L_1142 (minInt_6: real32)
    val x_2116:
      (real32, real32, lambdas_99, real32, word64, real32, word64) tuple =
      (minInt_6,
       maxInt_6,
       setRoundingMode_0,
       one_6,
       maxInt'_10,
       half_0,
       minInt'_3)
    val x_2115: lambdas_197 = con xEnv_183 (x_2116)
    goto L_1143 (x_2115)
  block L_1137 ()
    val x_2117: (word32, word32) tuple = (precision'_3, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1144
  block L_1144 (env_458: unit)
    call L_1145 (x_1785 (env_458, x_2117)) handle _ => L_5
  block L_1145 (x_2118: word32)
    val x_2119: (word32, word32) tuple = (x_2118, x_964 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1146
  block L_1146 (env_459: unit)
    call L_1147 (x_1785 (env_459, x_2119)) handle _ => L_5
  block L_1147 (trim_3: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1148
  block L_1148 (env_460: unit)
    call L_1149 (sextdFromInt32ToWord32_1 (env_460, trim_3)) handle _ => L_5
  block L_1149 (x_2120: word32)
    call L_1150 (x_2114 (x_2112, x_2120)) handle _ => L_5
  block L_1150 (maxInt'_11: word64)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1151
  block L_1151 (env_461: unit)
    call L_1152 (fromInt64Unsafe_2 (env_461, maxInt'_11)) handle _ => L_5
  block L_1152 (maxInt_7: real32)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1153
  block L_1153 (env_462: unit)
    call L_1154 (fromInt64Unsafe_2 (env_462, minInt'_3)) handle _ => L_5
  block L_1154 (minInt_7: real32)
    val x_2122: (real32, real32, lambdas_99) tuple =
      (minInt_7, maxInt_7, setRoundingMode_0)
    val x_2121: lambdas_197 = con xEnv_184 (x_2122)
    goto L_1143 (x_2121)
  block L_1143 (x_2123: lambdas_197)
    val x_2125: (lambdas_130, lambdas_129, word8) tuple =
      (<<_4, >>_4, maxWord'_0)
    val x_2124: (word32, word32) tuple = (precision_6, wordSize_0)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1155
  block L_1155 (env_463: unit)
    call L_1156 (<=_4 (env_463, x_2124)) handle _ => L_5
  block L_1156 (x_2126: bool)
    case x_2126 of
      true => L_1158 | false => L_1157
  block L_1157 ()
    call L_1159 (x_2127 (x_2125, x_972 (*0x0:w32*))) handle _ => L_5
  block L_1159 (maxWord'_4: word8)
    case fromWord8Unsafe_0 (*con fromWo ... _214)*) of
      fromWord8UnsafeEnv_0 => L_1160
  block L_1160 (env_464: unit)
    call L_1161 (fromWord8Unsafe_2 (env_464, maxWord'_4)) handle _ => L_5
  block L_1161 (maxWord_0: real32)
    val x_2129:
      (lambdas_169, real32, real32, lambdas_99, real32, word8, real32) tuple =
      (class_0, zero_7, maxWord_0, setRoundingMode_0, one_6, maxWord'_4, half_0)
    val x_2128: lambdas_191 = con xEnv_176 (x_2129)
    goto L_1162 (x_2128)
  block L_1158 ()
    val x_2130: (word32, word32) tuple = (wordSize_0, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1163
  block L_1163 (env_465: unit)
    call L_1164 (x_1785 (env_465, x_2130)) handle _ => L_5
  block L_1164 (trim_4: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1165
  block L_1165 (env_466: unit)
    call L_1166 (sextdFromInt32ToWord32_1 (env_466, trim_4)) handle _ => L_5
  block L_1166 (x_2131: word32)
    call L_1167 (x_2127 (x_2125, x_2131)) handle _ => L_5
  block L_1167 (maxWord'_5: word8)
    case fromWord8Unsafe_0 (*con fromWo ... _214)*) of
      fromWord8UnsafeEnv_0 => L_1168
  block L_1168 (env_467: unit)
    call L_1169 (fromWord8Unsafe_2 (env_467, maxWord'_5)) handle _ => L_5
  block L_1169 (maxWord_1: real32)
    val x_2133:
      (lambdas_169, real32, real32, lambdas_99, real32, real32) tuple =
      (class_0, zero_7, maxWord_1, setRoundingMode_0, one_6, half_0)
    val x_2132: lambdas_191 = con xEnv_177 (x_2133)
    goto L_1162 (x_2132)
  block L_1162 (x_2134: lambdas_191)
    val x_2136: (lambdas_122, lambdas_121, word16) tuple =
      (<<_5, >>_5, maxWord'_1)
    val x_2135: (word32, word32) tuple = (precision_6, wordSize_1)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1170
  block L_1170 (env_468: unit)
    call L_1171 (<=_4 (env_468, x_2135)) handle _ => L_5
  block L_1171 (x_2137: bool)
    case x_2137 of
      true => L_1173 | false => L_1172
  block L_1172 ()
    call L_1174 (x_2138 (x_2136, x_977 (*0x0:w32*))) handle _ => L_5
  block L_1174 (maxWord'_6: word16)
    case fromWord16Unsafe_0 (*con fromWo ... _215)*) of
      fromWord16UnsafeEnv_0 => L_1175
  block L_1175 (env_469: unit)
    call L_1176 (fromWord16Unsafe_2 (env_469, maxWord'_6)) handle _ => L_5
  block L_1176 (maxWord_2: real32)
    val x_2140:
      (lambdas_169, real32, real32, lambdas_99, real32, word16, real32) tuple =
      (class_0, zero_7, maxWord_2, setRoundingMode_0, one_6, maxWord'_6, half_0)
    val x_2139: lambdas_185 = con xEnv_169 (x_2140)
    goto L_1177 (x_2139)
  block L_1173 ()
    val x_2141: (word32, word32) tuple = (wordSize_1, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1178
  block L_1178 (env_470: unit)
    call L_1179 (x_1785 (env_470, x_2141)) handle _ => L_5
  block L_1179 (trim_5: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1180
  block L_1180 (env_471: unit)
    call L_1181 (sextdFromInt32ToWord32_1 (env_471, trim_5)) handle _ => L_5
  block L_1181 (x_2142: word32)
    call L_1182 (x_2138 (x_2136, x_2142)) handle _ => L_5
  block L_1182 (maxWord'_7: word16)
    case fromWord16Unsafe_0 (*con fromWo ... _215)*) of
      fromWord16UnsafeEnv_0 => L_1183
  block L_1183 (env_472: unit)
    call L_1184 (fromWord16Unsafe_2 (env_472, maxWord'_7)) handle _ => L_5
  block L_1184 (maxWord_3: real32)
    val x_2144:
      (lambdas_169, real32, real32, lambdas_99, real32, real32) tuple =
      (class_0, zero_7, maxWord_3, setRoundingMode_0, one_6, half_0)
    val x_2143: lambdas_185 = con xEnv_170 (x_2144)
    goto L_1177 (x_2143)
  block L_1177 (x_2145: lambdas_185)
    val x_2147: (lambdas_114, lambdas_113, word32) tuple =
      (<<_6, >>_6, maxWord'_2)
    val x_2146: (word32, word32) tuple = (precision_6, wordSize_2)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1185
  block L_1185 (env_473: unit)
    call L_1186 (<=_4 (env_473, x_2146)) handle _ => L_5
  block L_1186 (x_2148: bool)
    case x_2148 of
      true => L_1188 | false => L_1187
  block L_1187 ()
    call L_1189 (x_2149 (x_2147, x_982 (*0x0:w32*))) handle _ => L_5
  block L_1189 (maxWord'_8: word32)
    case fromWord32Unsafe_0 (*con fromWo ... _216)*) of
      fromWord32UnsafeEnv_0 => L_1190
  block L_1190 (env_474: unit)
    call L_1191 (fromWord32Unsafe_2 (env_474, maxWord'_8)) handle _ => L_5
  block L_1191 (maxWord_4: real32)
    val x_2151:
      (lambdas_169, real32, real32, lambdas_99, real32, word32, real32, word32) tuple =
      (class_0,
       zero_7,
       maxWord_4,
       setRoundingMode_0,
       one_6,
       maxWord'_8,
       half_0,
       zero_3)
    val x_2150: lambdas_179 = con xEnv_162 (x_2151)
    goto L_1192 (x_2150)
  block L_1188 ()
    val x_2152: (word32, word32) tuple = (wordSize_2, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1193
  block L_1193 (env_475: unit)
    call L_1194 (x_1785 (env_475, x_2152)) handle _ => L_5
  block L_1194 (trim_6: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1195
  block L_1195 (env_476: unit)
    call L_1196 (sextdFromInt32ToWord32_1 (env_476, trim_6)) handle _ => L_5
  block L_1196 (x_2153: word32)
    call L_1197 (x_2149 (x_2147, x_2153)) handle _ => L_5
  block L_1197 (maxWord'_9: word32)
    case fromWord32Unsafe_0 (*con fromWo ... _216)*) of
      fromWord32UnsafeEnv_0 => L_1198
  block L_1198 (env_477: unit)
    call L_1199 (fromWord32Unsafe_2 (env_477, maxWord'_9)) handle _ => L_5
  block L_1199 (maxWord_5: real32)
    val x_2155:
      (lambdas_169, real32, real32, lambdas_99, real32, word32, real32) tuple =
      (class_0, zero_7, maxWord_5, setRoundingMode_0, one_6, zero_3, half_0)
    val x_2154: lambdas_179 = con xEnv_163 (x_2155)
    goto L_1192 (x_2154)
  block L_1192 (x_2156: lambdas_179)
    val x_2158: (lambdas_106, lambdas_105, word64) tuple =
      (<<_7, >>_7, maxWord'_3)
    val x_2157: (word32, word32) tuple = (precision_6, wordSize_3)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1200
  block L_1200 (env_478: unit)
    call L_1201 (<=_4 (env_478, x_2157)) handle _ => L_5
  block L_1201 (x_2159: bool)
    case x_2159 of
      true => L_1203 | false => L_1202
  block L_1202 ()
    call L_1204 (x_2160 (x_2158, x_987 (*0x0:w32*))) handle _ => L_5
  block L_1204 (maxWord'_10: word64)
    case fromWord64Unsafe_0 (*con fromWo ... _217)*) of
      fromWord64UnsafeEnv_0 => L_1205
  block L_1205 (env_479: unit)
    call L_1206 (fromWord64Unsafe_2 (env_479, maxWord'_10)) handle _ => L_5
  block L_1206 (maxWord_6: real32)
    val x_2162:
      (lambdas_169, real32, real32, lambdas_99, real32, word64, real32, word64) tuple =
      (class_0,
       zero_7,
       maxWord_6,
       setRoundingMode_0,
       one_6,
       maxWord'_10,
       half_0,
       zero_5)
    val x_2161: lambdas_173 = con xEnv_155 (x_2162)
    goto L_1207 (x_2161)
  block L_1203 ()
    val x_2163: (word32, word32) tuple = (wordSize_3, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1208
  block L_1208 (env_480: unit)
    call L_1209 (x_1785 (env_480, x_2163)) handle _ => L_5
  block L_1209 (trim_7: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1210
  block L_1210 (env_481: unit)
    call L_1211 (sextdFromInt32ToWord32_1 (env_481, trim_7)) handle _ => L_5
  block L_1211 (x_2164: word32)
    call L_1212 (x_2160 (x_2158, x_2164)) handle _ => L_5
  block L_1212 (maxWord'_11: word64)
    case fromWord64Unsafe_0 (*con fromWo ... _217)*) of
      fromWord64UnsafeEnv_0 => L_1213
  block L_1213 (env_482: unit)
    call L_1214 (fromWord64Unsafe_2 (env_482, maxWord'_11)) handle _ => L_5
  block L_1214 (maxWord_7: real32)
    val x_2166:
      (lambdas_169, real32, real32, lambdas_99, real32, word64, real32) tuple =
      (class_0, zero_7, maxWord_7, setRoundingMode_0, one_6, zero_5, half_0)
    val x_2165: lambdas_173 = con xEnv_156 (x_2166)
    goto L_1207 (x_2165)
  block L_1207 (x_2167: lambdas_173)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1215
  block L_1215 (env_483: unit)
    call L_1216 (sextdFromInt32ToInt32_1 (env_483, realSize_1 (*0x40:w32*))) handle _ => L_5
  block L_1216 (realSize_3: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1217
  block L_1217 (env_484: unit)
    call L_1218 (sextdFromInt32ToInt32_1 (env_484, exponentBias_1 (*0x3FF:w32*))) handle _ => L_5
  block L_1218 (exponentBias_3: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1219
  block L_1219 (env_485: unit)
    call L_1220 (sextdFromInt32ToInt32_1 (env_485, precision_5 (*0x35:w32*))) handle _ => L_5
  block L_1220 (precision_7: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1221
  block L_1221 (env_486: unit)
    call L_1222 (sextdFromInt32ToWord32_1 (env_486, realSize_3)) handle _ => L_5
  block L_1222 (x_2168: word32)
    val x_2169: (word32, word32) tuple = (x_2168, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1223
  block L_1223 (env_487: unit)
    call L_1224 (-_3 (env_487, x_2169)) handle _ => L_5
  block L_1224 (exponentSignificandBits_1: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1225
  block L_1225 (env_488: unit)
    call L_1226 (sextdFromInt32ToWord32_1 (env_488, precision_7)) handle _ => L_5
  block L_1226 (x_2170: word32)
    val x_2171: (word32, word32) tuple = (x_2170, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1227
  block L_1227 (env_489: unit)
    call L_1228 (-_3 (env_489, x_2171)) handle _ => L_5
  block L_1228 (significandBits_1: word32)
    val x_2172: (word32, word32) tuple =
      (exponentSignificandBits_1, significandBits_1)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1229
  block L_1229 (env_490: unit)
    call L_1230 (-_3 (env_490, x_2172)) handle _ => L_5
  block L_1230 (exponentBits_1: word32)
    val x_2173: (lambdas_106, word64) tuple = (<<_7, zero_5)
    call L_1231 (mkMask_1 (x_2173, one_2)) handle _ => L_5
  block L_1231 (x_2174: word64)
    val x_2175: (word64, word32) tuple = (x_2174, exponentSignificandBits_1)
    call L_1232 (<<_9 (tuple_81, x_2175)) handle _ => L_5
  block L_1232 (signMask_1: word64)
    call L_1233 (mkMask_1 (x_2173, exponentBits_1)) handle _ => L_5
  block L_1233 (x_2176: word64)
    val x_2177: (word64, word32) tuple = (x_2176, significandBits_1)
    call L_1234 (<<_9 (tuple_81, x_2177)) handle _ => L_5
  block L_1234 (exponentMask_1: word64)
    call L_1235 (mkMask_1 (x_2173, significandBits_1)) handle _ => L_5
  block L_1235 (significandMask_1: word64)
    val x_2178: (word64, word64, word64) tuple =
      (zero_5, significandMask_1, exponentMask_1)
    val class_1: lambdas_98 = con classEnv_0 (x_2178)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1236
  block L_1236 (env_491: unit)
    call L_1237 (x_2054 (env_491, x_1480)) handle _ => L_5
  block L_1237 (x_2179: bool)
    case x_2179 of
      true => L_1239 | false => L_1238
  block L_1238 ()
    val x_2181: lambdas_166 = con xEnv_149 (setRoundingMode_0)
    val x_2180: (lambdas_166, lambdas_328) tuple =
      (x_2181, toReal32Unsafe_1 (*con toReal ... _246)*))
    goto L_1240 (x_2180)
  block L_1239 ()
    val x_2183: lambdas_165 = #0 (x_1481)
    val x_2182: lambdas_328 = #1 (x_1481)
    case x_2183 of
      xEnv_56 => L_1241
  block L_1241 (x_2184: unit)
    val x_2186: lambdas_166 = con xEnv_150 (x_2184)
    val x_2185: (lambdas_166, lambdas_328) tuple = (x_2186, x_2182)
    goto L_1240 (x_2185)
  block L_1240 (x_2187: (lambdas_166, lambdas_328) tuple)
    case castFromWord_1 (*con castFr ... _252)*) of
      castFromWordEnv_1 => L_1242
  block L_1242 (env_492: unit)
    call L_1243 (castFromWord_3 (env_492, zero_5)) handle _ => L_5
  block L_1243 (zero_8: real64)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_1244
  block L_1244 (env_493: unit)
    call L_1245 (sextdFromInt32ToWord64_1 (env_493, exponentBias_3)) handle _ => L_5
  block L_1245 (x_2188: word64)
    val x_2190: word64 = prim Word64_sub (x_2188, one_4)
    val x_2189: (word64, word32) tuple = (x_2190, significandBits_1)
    call L_1246 (<<_9 (tuple_81, x_2189)) handle _ => L_5
  block L_1246 (x_2191: word64)
    case castFromWord_1 (*con castFr ... _252)*) of
      castFromWordEnv_1 => L_1247
  block L_1247 (env_494: unit)
    call L_1248 (castFromWord_3 (env_494, x_2191)) handle _ => L_5
  block L_1248 (half_1: real64)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_1249
  block L_1249 (env_495: unit)
    call L_1250 (sextdFromInt32ToWord64_1 (env_495, exponentBias_3)) handle _ => L_5
  block L_1250 (x_2192: word64)
    val x_2193: (word64, word32) tuple = (x_2192, significandBits_1)
    call L_1251 (<<_9 (tuple_81, x_2193)) handle _ => L_5
  block L_1251 (x_2194: word64)
    case castFromWord_1 (*con castFr ... _252)*) of
      castFromWordEnv_1 => L_1252
  block L_1252 (env_496: unit)
    call L_1253 (castFromWord_3 (env_496, x_2194)) handle _ => L_5
  block L_1253 (one_7: real64)
    val x_2196: (lambdas_162, lambdas_161, word8) tuple =
      (<<_0, >>_0, maxInt'_0)
    val x_2195: (word32, word32) tuple = (precision_7, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1254
  block L_1254 (env_497: unit)
    call L_1255 (<_5 (env_497, x_2195)) handle _ => L_5
  block L_1255 (x_2197: bool)
    case x_2197 of
      true => L_1257 | false => L_1256
  block L_1256 ()
    call L_1258 (x_2198 (x_2196, x_1001 (*0x0:w32*))) handle _ => L_5
  block L_1258 (maxInt'_12: word8)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1259
  block L_1259 (env_498: unit)
    call L_1260 (fromInt8Unsafe_3 (env_498, maxInt'_12)) handle _ => L_5
  block L_1260 (maxInt_8: real64)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1261
  block L_1261 (env_499: unit)
    call L_1262 (fromInt8Unsafe_3 (env_499, minInt'_0)) handle _ => L_5
  block L_1262 (minInt_8: real64)
    val x_2200:
      (real64, real64, lambdas_99, real64, word8, real64, word8) tuple =
      (minInt_8,
       maxInt_8,
       setRoundingMode_0,
       one_7,
       maxInt'_12,
       half_1,
       minInt'_0)
    val x_2199: lambdas_159 = con xEnv_144 (x_2200)
    goto L_1263 (x_2199)
  block L_1257 ()
    val x_2201: (word32, word32) tuple = (precision'_0, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1264
  block L_1264 (env_500: unit)
    call L_1265 (x_1785 (env_500, x_2201)) handle _ => L_5
  block L_1265 (x_2202: word32)
    val x_2203: (word32, word32) tuple = (x_2202, x_998 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1266
  block L_1266 (env_501: unit)
    call L_1267 (x_1785 (env_501, x_2203)) handle _ => L_5
  block L_1267 (trim_8: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1268
  block L_1268 (env_502: unit)
    call L_1269 (sextdFromInt32ToWord32_1 (env_502, trim_8)) handle _ => L_5
  block L_1269 (x_2204: word32)
    call L_1270 (x_2198 (x_2196, x_2204)) handle _ => L_5
  block L_1270 (maxInt'_13: word8)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1271
  block L_1271 (env_503: unit)
    call L_1272 (fromInt8Unsafe_3 (env_503, maxInt'_13)) handle _ => L_5
  block L_1272 (maxInt_9: real64)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1273
  block L_1273 (env_504: unit)
    call L_1274 (fromInt8Unsafe_3 (env_504, minInt'_0)) handle _ => L_5
  block L_1274 (minInt_9: real64)
    val x_2206: (real64, real64, lambdas_99) tuple =
      (minInt_9, maxInt_9, setRoundingMode_0)
    val x_2205: lambdas_159 = con xEnv_145 (x_2206)
    goto L_1263 (x_2205)
  block L_1263 (x_2207: lambdas_159)
    val x_2209: (lambdas_154, lambdas_153, word16) tuple =
      (<<_1, >>_1, maxInt'_1)
    val x_2208: (word32, word32) tuple = (precision_7, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1275
  block L_1275 (env_505: unit)
    call L_1276 (<_5 (env_505, x_2208)) handle _ => L_5
  block L_1276 (x_2210: bool)
    case x_2210 of
      true => L_1278 | false => L_1277
  block L_1277 ()
    call L_1279 (x_2211 (x_2209, x_1007 (*0x0:w32*))) handle _ => L_5
  block L_1279 (maxInt'_14: word16)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1280
  block L_1280 (env_506: unit)
    call L_1281 (fromInt16Unsafe_3 (env_506, maxInt'_14)) handle _ => L_5
  block L_1281 (maxInt_10: real64)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1282
  block L_1282 (env_507: unit)
    call L_1283 (fromInt16Unsafe_3 (env_507, minInt'_1)) handle _ => L_5
  block L_1283 (minInt_10: real64)
    val x_2213:
      (real64, real64, lambdas_99, real64, word16, real64, word16) tuple =
      (minInt_10,
       maxInt_10,
       setRoundingMode_0,
       one_7,
       maxInt'_14,
       half_1,
       minInt'_1)
    val x_2212: lambdas_151 = con xEnv_137 (x_2213)
    goto L_1284 (x_2212)
  block L_1278 ()
    val x_2214: (word32, word32) tuple = (precision'_1, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1285
  block L_1285 (env_508: unit)
    call L_1286 (x_1785 (env_508, x_2214)) handle _ => L_5
  block L_1286 (x_2215: word32)
    val x_2216: (word32, word32) tuple = (x_2215, x_1004 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1287
  block L_1287 (env_509: unit)
    call L_1288 (x_1785 (env_509, x_2216)) handle _ => L_5
  block L_1288 (trim_9: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1289
  block L_1289 (env_510: unit)
    call L_1290 (sextdFromInt32ToWord32_1 (env_510, trim_9)) handle _ => L_5
  block L_1290 (x_2217: word32)
    call L_1291 (x_2211 (x_2209, x_2217)) handle _ => L_5
  block L_1291 (maxInt'_15: word16)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1292
  block L_1292 (env_511: unit)
    call L_1293 (fromInt16Unsafe_3 (env_511, maxInt'_15)) handle _ => L_5
  block L_1293 (maxInt_11: real64)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1294
  block L_1294 (env_512: unit)
    call L_1295 (fromInt16Unsafe_3 (env_512, minInt'_1)) handle _ => L_5
  block L_1295 (minInt_11: real64)
    val x_2219: (real64, real64, lambdas_99) tuple =
      (minInt_11, maxInt_11, setRoundingMode_0)
    val x_2218: lambdas_151 = con xEnv_138 (x_2219)
    goto L_1284 (x_2218)
  block L_1284 (x_2220: lambdas_151)
    val x_2222: (lambdas_146, lambdas_145, word32) tuple =
      (<<_2, >>_2, maxInt'_2)
    val x_2221: (word32, word32) tuple = (precision_7, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1296
  block L_1296 (env_513: unit)
    call L_1297 (<_5 (env_513, x_2221)) handle _ => L_5
  block L_1297 (x_2223: bool)
    case x_2223 of
      true => L_1299 | false => L_1298
  block L_1298 ()
    call L_1300 (x_2224 (x_2222, x_1013 (*0x0:w32*))) handle _ => L_5
  block L_1300 (maxInt'_16: word32)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1301
  block L_1301 (env_514: unit)
    call L_1302 (fromInt32Unsafe_3 (env_514, maxInt'_16)) handle _ => L_5
  block L_1302 (maxInt_12: real64)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1303
  block L_1303 (env_515: unit)
    call L_1304 (fromInt32Unsafe_3 (env_515, minInt'_2)) handle _ => L_5
  block L_1304 (minInt_12: real64)
    val x_2226:
      (real64, real64, lambdas_99, real64, word32, real64, word32) tuple =
      (minInt_12,
       maxInt_12,
       setRoundingMode_0,
       one_7,
       maxInt'_16,
       half_1,
       minInt'_2)
    val x_2225: lambdas_143 = con xEnv_130 (x_2226)
    goto L_1305 (x_2225)
  block L_1299 ()
    val x_2227: (word32, word32) tuple = (precision'_2, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1306
  block L_1306 (env_516: unit)
    call L_1307 (x_1785 (env_516, x_2227)) handle _ => L_5
  block L_1307 (x_2228: word32)
    val x_2229: (word32, word32) tuple = (x_2228, x_1010 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1308
  block L_1308 (env_517: unit)
    call L_1309 (x_1785 (env_517, x_2229)) handle _ => L_5
  block L_1309 (trim_10: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1310
  block L_1310 (env_518: unit)
    call L_1311 (sextdFromInt32ToWord32_1 (env_518, trim_10)) handle _ => L_5
  block L_1311 (x_2230: word32)
    call L_1312 (x_2224 (x_2222, x_2230)) handle _ => L_5
  block L_1312 (maxInt'_17: word32)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1313
  block L_1313 (env_519: unit)
    call L_1314 (fromInt32Unsafe_3 (env_519, maxInt'_17)) handle _ => L_5
  block L_1314 (maxInt_13: real64)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1315
  block L_1315 (env_520: unit)
    call L_1316 (fromInt32Unsafe_3 (env_520, minInt'_2)) handle _ => L_5
  block L_1316 (minInt_13: real64)
    val x_2232: (real64, real64, lambdas_99) tuple =
      (minInt_13, maxInt_13, setRoundingMode_0)
    val x_2231: lambdas_143 = con xEnv_131 (x_2232)
    goto L_1305 (x_2231)
  block L_1305 (x_2233: lambdas_143)
    val x_2235: (lambdas_138, lambdas_137, word64) tuple =
      (<<_3, >>_3, maxInt'_3)
    val x_2234: (word32, word32) tuple = (precision_7, precision'_3)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1317
  block L_1317 (env_521: unit)
    call L_1318 (<_5 (env_521, x_2234)) handle _ => L_5
  block L_1318 (x_2236: bool)
    case x_2236 of
      true => L_1320 | false => L_1319
  block L_1319 ()
    call L_1321 (x_2237 (x_2235, x_1019 (*0x0:w32*))) handle _ => L_5
  block L_1321 (maxInt'_18: word64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1322
  block L_1322 (env_522: unit)
    call L_1323 (fromInt64Unsafe_3 (env_522, maxInt'_18)) handle _ => L_5
  block L_1323 (maxInt_14: real64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1324
  block L_1324 (env_523: unit)
    call L_1325 (fromInt64Unsafe_3 (env_523, minInt'_3)) handle _ => L_5
  block L_1325 (minInt_14: real64)
    val x_2239:
      (real64, real64, lambdas_99, real64, word64, real64, word64) tuple =
      (minInt_14,
       maxInt_14,
       setRoundingMode_0,
       one_7,
       maxInt'_18,
       half_1,
       minInt'_3)
    val x_2238: lambdas_135 = con xEnv_123 (x_2239)
    goto L_1326 (x_2238)
  block L_1320 ()
    val x_2240: (word32, word32) tuple = (precision'_3, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1327
  block L_1327 (env_524: unit)
    call L_1328 (x_1785 (env_524, x_2240)) handle _ => L_5
  block L_1328 (x_2241: word32)
    val x_2242: (word32, word32) tuple = (x_2241, x_1016 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1329
  block L_1329 (env_525: unit)
    call L_1330 (x_1785 (env_525, x_2242)) handle _ => L_5
  block L_1330 (trim_11: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1331
  block L_1331 (env_526: unit)
    call L_1332 (sextdFromInt32ToWord32_1 (env_526, trim_11)) handle _ => L_5
  block L_1332 (x_2243: word32)
    call L_1333 (x_2237 (x_2235, x_2243)) handle _ => L_5
  block L_1333 (maxInt'_19: word64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1334
  block L_1334 (env_527: unit)
    call L_1335 (fromInt64Unsafe_3 (env_527, maxInt'_19)) handle _ => L_5
  block L_1335 (maxInt_15: real64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1336
  block L_1336 (env_528: unit)
    call L_1337 (fromInt64Unsafe_3 (env_528, minInt'_3)) handle _ => L_5
  block L_1337 (minInt_15: real64)
    val x_2245: (real64, real64, lambdas_99) tuple =
      (minInt_15, maxInt_15, setRoundingMode_0)
    val x_2244: lambdas_135 = con xEnv_124 (x_2245)
    goto L_1326 (x_2244)
  block L_1326 (x_2246: lambdas_135)
    val x_2248: (lambdas_130, lambdas_129, word8) tuple =
      (<<_4, >>_4, maxWord'_0)
    val x_2247: (word32, word32) tuple = (precision_7, wordSize_0)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1338
  block L_1338 (env_529: unit)
    call L_1339 (<=_4 (env_529, x_2247)) handle _ => L_5
  block L_1339 (x_2249: bool)
    case x_2249 of
      true => L_1341 | false => L_1340
  block L_1340 ()
    call L_1342 (x_2250 (x_2248, x_1024 (*0x0:w32*))) handle _ => L_5
  block L_1342 (maxWord'_12: word8)
    case fromWord8Unsafe_1 (*con fromWo ... _238)*) of
      fromWord8UnsafeEnv_1 => L_1343
  block L_1343 (env_530: unit)
    call L_1344 (fromWord8Unsafe_3 (env_530, maxWord'_12)) handle _ => L_5
  block L_1344 (maxWord_8: real64)
    val x_2252:
      (lambdas_98, real64, real64, lambdas_99, real64, word8, real64) tuple =
      (class_1, zero_8, maxWord_8, setRoundingMode_0, one_7, maxWord'_12, half_1)
    val x_2251: lambdas_127 = con xEnv_116 (x_2252)
    goto L_1345 (x_2251)
  block L_1341 ()
    val x_2253: (word32, word32) tuple = (wordSize_0, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1346
  block L_1346 (env_531: unit)
    call L_1347 (x_1785 (env_531, x_2253)) handle _ => L_5
  block L_1347 (trim_12: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1348
  block L_1348 (env_532: unit)
    call L_1349 (sextdFromInt32ToWord32_1 (env_532, trim_12)) handle _ => L_5
  block L_1349 (x_2254: word32)
    call L_1350 (x_2250 (x_2248, x_2254)) handle _ => L_5
  block L_1350 (maxWord'_13: word8)
    case fromWord8Unsafe_1 (*con fromWo ... _238)*) of
      fromWord8UnsafeEnv_1 => L_1351
  block L_1351 (env_533: unit)
    call L_1352 (fromWord8Unsafe_3 (env_533, maxWord'_13)) handle _ => L_5
  block L_1352 (maxWord_9: real64)
    val x_2256: (lambdas_98, real64, real64, lambdas_99, real64, real64) tuple =
      (class_1, zero_8, maxWord_9, setRoundingMode_0, one_7, half_1)
    val x_2255: lambdas_127 = con xEnv_117 (x_2256)
    goto L_1345 (x_2255)
  block L_1345 (x_2257: lambdas_127)
    val x_2259: (lambdas_122, lambdas_121, word16) tuple =
      (<<_5, >>_5, maxWord'_1)
    val x_2258: (word32, word32) tuple = (precision_7, wordSize_1)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1353
  block L_1353 (env_534: unit)
    call L_1354 (<=_4 (env_534, x_2258)) handle _ => L_5
  block L_1354 (x_2260: bool)
    case x_2260 of
      true => L_1356 | false => L_1355
  block L_1355 ()
    call L_1357 (x_2261 (x_2259, x_1029 (*0x0:w32*))) handle _ => L_5
  block L_1357 (maxWord'_14: word16)
    case fromWord16Unsafe_1 (*con fromWo ... _239)*) of
      fromWord16UnsafeEnv_1 => L_1358
  block L_1358 (env_535: unit)
    call L_1359 (fromWord16Unsafe_3 (env_535, maxWord'_14)) handle _ => L_5
  block L_1359 (maxWord_10: real64)
    val x_2263:
      (lambdas_98, real64, real64, lambdas_99, real64, word16, real64) tuple =
      (class_1,
       zero_8,
       maxWord_10,
       setRoundingMode_0,
       one_7,
       maxWord'_14,
       half_1)
    val x_2262: lambdas_119 = con xEnv_109 (x_2263)
    goto L_1360 (x_2262)
  block L_1356 ()
    val x_2264: (word32, word32) tuple = (wordSize_1, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1361
  block L_1361 (env_536: unit)
    call L_1362 (x_1785 (env_536, x_2264)) handle _ => L_5
  block L_1362 (trim_13: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1363
  block L_1363 (env_537: unit)
    call L_1364 (sextdFromInt32ToWord32_1 (env_537, trim_13)) handle _ => L_5
  block L_1364 (x_2265: word32)
    call L_1365 (x_2261 (x_2259, x_2265)) handle _ => L_5
  block L_1365 (maxWord'_15: word16)
    case fromWord16Unsafe_1 (*con fromWo ... _239)*) of
      fromWord16UnsafeEnv_1 => L_1366
  block L_1366 (env_538: unit)
    call L_1367 (fromWord16Unsafe_3 (env_538, maxWord'_15)) handle _ => L_5
  block L_1367 (maxWord_11: real64)
    val x_2267: (lambdas_98, real64, real64, lambdas_99, real64, real64) tuple =
      (class_1, zero_8, maxWord_11, setRoundingMode_0, one_7, half_1)
    val x_2266: lambdas_119 = con xEnv_110 (x_2267)
    goto L_1360 (x_2266)
  block L_1360 (x_2268: lambdas_119)
    val x_2270: (lambdas_114, lambdas_113, word32) tuple =
      (<<_6, >>_6, maxWord'_2)
    val x_2269: (word32, word32) tuple = (precision_7, wordSize_2)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1368
  block L_1368 (env_539: unit)
    call L_1369 (<=_4 (env_539, x_2269)) handle _ => L_5
  block L_1369 (x_2271: bool)
    case x_2271 of
      true => L_1371 | false => L_1370
  block L_1370 ()
    call L_1372 (x_2272 (x_2270, x_1034 (*0x0:w32*))) handle _ => L_5
  block L_1372 (maxWord'_16: word32)
    case fromWord32Unsafe_1 (*con fromWo ... _240)*) of
      fromWord32UnsafeEnv_1 => L_1373
  block L_1373 (env_540: unit)
    call L_1374 (fromWord32Unsafe_3 (env_540, maxWord'_16)) handle _ => L_5
  block L_1374 (maxWord_12: real64)
    val x_2274:
      (lambdas_98, real64, real64, lambdas_99, real64, word32, real64, word32) tuple =
      (class_1,
       zero_8,
       maxWord_12,
       setRoundingMode_0,
       one_7,
       maxWord'_16,
       half_1,
       zero_3)
    val x_2273: lambdas_111 = con xEnv_102 (x_2274)
    goto L_1375 (x_2273)
  block L_1371 ()
    val x_2275: (word32, word32) tuple = (wordSize_2, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1376
  block L_1376 (env_541: unit)
    call L_1377 (x_1785 (env_541, x_2275)) handle _ => L_5
  block L_1377 (trim_14: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1378
  block L_1378 (env_542: unit)
    call L_1379 (sextdFromInt32ToWord32_1 (env_542, trim_14)) handle _ => L_5
  block L_1379 (x_2276: word32)
    call L_1380 (x_2272 (x_2270, x_2276)) handle _ => L_5
  block L_1380 (maxWord'_17: word32)
    case fromWord32Unsafe_1 (*con fromWo ... _240)*) of
      fromWord32UnsafeEnv_1 => L_1381
  block L_1381 (env_543: unit)
    call L_1382 (fromWord32Unsafe_3 (env_543, maxWord'_17)) handle _ => L_5
  block L_1382 (maxWord_13: real64)
    val x_2278:
      (lambdas_98, real64, real64, lambdas_99, real64, word32, real64) tuple =
      (class_1, zero_8, maxWord_13, setRoundingMode_0, one_7, zero_3, half_1)
    val x_2277: lambdas_111 = con xEnv_103 (x_2278)
    goto L_1375 (x_2277)
  block L_1375 (x_2279: lambdas_111)
    val x_2281: (lambdas_106, lambdas_105, word64) tuple =
      (<<_7, >>_7, maxWord'_3)
    val x_2280: (word32, word32) tuple = (precision_7, wordSize_3)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1383
  block L_1383 (env_544: unit)
    call L_1384 (<=_4 (env_544, x_2280)) handle _ => L_5
  block L_1384 (x_2282: bool)
    case x_2282 of
      true => L_1386 | false => L_1385
  block L_1385 ()
    call L_1387 (x_2283 (x_2281, x_1039 (*0x0:w32*))) handle _ => L_5
  block L_1387 (maxWord'_18: word64)
    case fromWord64Unsafe_1 (*con fromWo ... _241)*) of
      fromWord64UnsafeEnv_1 => L_1388
  block L_1388 (env_545: unit)
    call L_1389 (fromWord64Unsafe_3 (env_545, maxWord'_18)) handle _ => L_5
  block L_1389 (maxWord_14: real64)
    val x_2285:
      (lambdas_98, real64, real64, lambdas_99, real64, word64, real64, word64) tuple =
      (class_1,
       zero_8,
       maxWord_14,
       setRoundingMode_0,
       one_7,
       maxWord'_18,
       half_1,
       zero_5)
    val x_2284: lambdas_103 = con xEnv_95 (x_2285)
    goto L_1390 (x_2284)
  block L_1386 ()
    val x_2286: (word32, word32) tuple = (wordSize_3, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1391
  block L_1391 (env_546: unit)
    call L_1392 (x_1785 (env_546, x_2286)) handle _ => L_5
  block L_1392 (trim_15: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1393
  block L_1393 (env_547: unit)
    call L_1394 (sextdFromInt32ToWord32_1 (env_547, trim_15)) handle _ => L_5
  block L_1394 (x_2287: word32)
    call L_1395 (x_2283 (x_2281, x_2287)) handle _ => L_5
  block L_1395 (maxWord'_19: word64)
    case fromWord64Unsafe_1 (*con fromWo ... _241)*) of
      fromWord64UnsafeEnv_1 => L_1396
  block L_1396 (env_548: unit)
    call L_1397 (fromWord64Unsafe_3 (env_548, maxWord'_19)) handle _ => L_5
  block L_1397 (maxWord_15: real64)
    val x_2289:
      (lambdas_98, real64, real64, lambdas_99, real64, word64, real64) tuple =
      (class_1, zero_8, maxWord_15, setRoundingMode_0, one_7, zero_5, half_1)
    val x_2288: lambdas_103 = con xEnv_96 (x_2289)
    goto L_1390 (x_2288)
  block L_1390 (x_2290: lambdas_103)
    case areSmall_0 (*con areSma ... e_25)*) of
      areSmallEnv_0 => L_1398
  block L_1398 (env_549: unit)
    call L_1399 (areSmall_1 (env_549, x_1482)) handle _ => L_5
  block L_1399 (x_2291: bool)
    case x_2291 of
      true => L_1401 | false => L_1400
  block L_1400 ()
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_1402
  block L_1402 (env_550: unit)
    call L_1403 (numLimbs_1 (env_550, ticksPerSecond_0 (*1000000000:ii*))) handle _ => L_5
  block L_1403 (nlimbs_0: word64)
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_1404
  block L_1404 (env_551: unit)
    call L_1405 (numLimbs_1 (env_551, x_1042 (*1:ii*))) handle _ => L_5
  block L_1405 (dlimbs_0: word64)
    val x_2292: (word64, word64) tuple = (nlimbs_0, dlimbs_0)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_1406
  block L_1406 (env_552: unit)
    call L_1407 (<_7 (env_552, x_2292)) handle _ => L_5
  block L_1407 (x_2293: bool)
    case x_2293 of
      true => L_1409 | false => L_1408
  block L_1408 ()
    val x_2294: (word64, word64) tuple = (nlimbs_0, dlimbs_0)
    case x_170 (*con xEnv_24 (x_169)*) of
      xEnv_24 => L_1410
  block L_1410 (env_553: unit)
    call L_1411 (x_2295 (env_553, x_2294)) handle _ => L_5
  block L_1411 (x_2296: word64)
    val x_2297: (word64, word64) tuple = (x_2296, x_1045 (*0x2:w64*))
    call L_1412 (reserve_1 (tuple_60, x_2297)) handle _ => L_5
  block L_1412 (x_2298: word64)
    goto L_1413 (x_1046 (*1000000000:ii*))
  block L_1409 ()
    goto L_1413 (zero_0 (*0:ii*))
  block L_1401 ()
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_1414
  block L_1414 (env_554: unit)
    call L_1415 (dropTagCoerce_1 (env_554, ticksPerSecond_0 (*1000000000:ii*))) handle _ => L_5
  block L_1415 (numw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_1416
  block L_1416 (env_555: unit)
    call L_1417 (zextdFromWord64ToInt64_1 (env_555, numw_0)) handle _ => L_5
  block L_1417 (numi_0: word64)
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_1418
  block L_1418 (env_556: unit)
    call L_1419 (dropTagCoerce_1 (env_556, x_1042 (*1:ii*))) handle _ => L_5
  block L_1419 (denw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_1420
  block L_1420 (env_557: unit)
    call L_1421 (zextdFromWord64ToInt64_1 (env_557, denw_0)) handle _ => L_5
  block L_1421 (deni_0: word64)
    val x_2299: (word64, word64) tuple = (numw_0, badObjptrWord_0)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_1422
  block L_1422 (env_558: unit)
    call L_1423 (x_2300 (env_558, x_2299)) handle _ => L_5
  block L_1423 (x_2301: bool)
    case x_2301 of
      true => L_1425 | false => L_1424
  block L_1424 ()
    goto L_1426 (x_1044 (*con false*))
  block L_1425 ()
    val x_2302: (word64, word64) tuple =
      (deni_0, x_1043 (*0xFFFFFFFF ... F:w64*))
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_1427
  block L_1427 (env_559: unit)
    call L_1426 (x_2300 (env_559, x_2302)) handle _ => L_5
  block L_1426 (x_2303: bool)
    case x_2303 of
      true => L_1429 | false => L_1428
  block L_1428 ()
    val x_2304: (word64, word64) tuple = (numi_0, deni_0)
    call L_1430 (quot_3 (tuple_58, x_2304)) handle _ => L_5
  block L_1430 (ansi_0: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_1431
  block L_1431 (env_560: unit)
    call L_1432 (zextdFromInt64ToWord64_1 (env_560, ansi_0)) handle _ => L_5
  block L_1432 (answ_0: word64)
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_1433
  block L_1433 (env_561: unit)
    call L_1434 (addTag_1 (env_561, answ_0)) handle _ => L_5
  block L_1434 (ans_4: word64)
    case fromWord_1 (*con fromWo ... _200)*) of
      fromWordEnv_1 => L_1435
  block L_1435 (env_562: unit)
    call L_1413 (fromWord_3 (env_562, ans_4)) handle _ => L_5
  block L_1429 ()
    goto L_1413 (negBadIntInf_0)
  block L_1413 (x_2305: intInf)
    val x_2306: (lambdas_31, lambdas_32) tuple = (concat_0, exnMessage_0)
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1436
  block L_1436 (env_563: unit)
    call L_1437 (x_1797 (env_563, messagers_0)) handle _ => L_5
  block L_1437 (x_2307: list_0)
    val x_2312: lambdas_0 = con xEnv_247 (x_2306)
    val x_2311: (lambdas_0, list_0) tuple = (x_2312, x_2307)
    val x_2310: list_0 = con ::_3 (x_2311)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_2310)
    val x_2309: (lambdas_493, intInf, lambdas_492) tuple =
      (reserve_0, x_2305, sextdFromInt64_0)
    val x_2308: lambdas_92 = con xEnv_242 (x_2309)
    case zextdFromWord64ToInt32_0 (*con zextdF ... _121)*) of
      zextdFromWord64ToInt32Env_0 => L_1438
  block L_1438 (env_564: unit)
    call L_1439 (zextdFromWord64ToInt32_1 (env_564, x_1070 (*0x0:w64*))) handle _ => L_5
  block L_1439 (empty_0: word32)
    val x_2315: lambdas_487 = con xEnv_240 (empty_0)
    val x_2314: (lambdas_223, lambdas_92) tuple = (errorMsg_0, x_2308)
    val x_2313: lambdas_66 = con xEnv_241 (x_2314)
    val tuple_85: (word32, (bool) ref, (lambdas_46) ref, lambdas_45) tuple =
      (intr_0, restartFlag_0, blocker_0, raiseSys_1)
    val setfl_0: lambdas_488 = con setflEnv_0 (tuple_85)
    val lseek_0: lambdas_64 = con lseekEnv_0 (raiseSys_0)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1440
  block L_1440 (env_565: unit)
    call L_1441 (sextdFromInt32ToInt64_1 (env_565, x_1132 (*0x0:w32*))) handle _ => L_5
  block L_1441 (pos0_0: word64)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1442
  block L_1442 (env_566: unit)
    call L_1443 (sextdFromInt32ToInt32_1 (env_566, bufSize_0 (*0x1000:w32*))) handle _ => L_5
  block L_1443 (chunkSize_0: word32)
    val openOutstreams_0: (list_5) ref =
      prim Ref_ref[list_5] (x_1145 (*con nil_9*))
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1444
  block L_1444 (env_567: unit)
    call L_1445 (x_2316 (env_567, atExit_0)) handle _ => L_5
  block L_1445 (x_2317: list_2)
    val x_2320: lambdas_3 = con xEnv_244 (openOutstreams_0)
    val x_2319: (lambdas_3, list_2) tuple = (x_2320, x_2317)
    val x_2318: list_2 = con ::_5 (x_2319)
    val _: unit = prim Ref_assign[list_2] (atExit_0, x_2318)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_1446
  block L_1446 (env_568: unit)
    call L_1447 (toRep_2 (env_568, x_1069 (*0x1:w32*))) handle _ => L_5
  block L_1447 (x_2321: word32)
    val x_2323: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_ProcEnv_isatty} (x_2321)
    val x_2322: (word32, word32) tuple = (x_2323, zero_4)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_1448
  block L_1448 (env_569: unit)
    call L_1449 (x_1497 (env_569, x_2322)) handle _ => L_5
  block L_1449 (x_2324: bool)
    case x_2324 of
      true => L_1451 | false => L_1450
  block L_1450 ()
    goto L_1452 (x_1158 (*con BLOCK_BUF_0*))
  block L_1451 ()
    goto L_1452 (x_1157 (*con LINE_BUF_0*))
  block L_1452 (x_2325: buffer_mode_0)
    val closed_0: (bool) ref = prim Ref_ref[bool] (x_1160 (*con false*))
    call L_1453 (x_2326 (x_2314, x_1069 (*0x1:w32*))) handle _ => L_5
  block L_1453 (x_2327: stat_0)
    case x_2327 of
      T_2 => L_1454
  block L_1454 (x_2328:
                  (time_0,
                   time_0,
                   word64,
                   word32,
                   word64,
                   word32,
                   time_0,
                   word32,
                   word64,
                   word32) tuple)
    val #_0: word32 = #5 (x_2328)
    val x_2330: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Word32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_ST_isReg} (#_0)
    val x_2329: (word32, word32) tuple = (x_2330, zero_4)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_1455
  block L_1455 (env_570: unit)
    call L_1456 (x_1497 (env_570, x_2329)) handle _ => L_5
  block L_1456 (x_2331: bool)
    case x_2331 of
      true => L_1458 | false => L_1457
  block L_1457 ()
    val x_2333: (word64) ref = prim Ref_ref[word64] (pos0_0)
    val x_2332: (t_12, t_12, (word64) ref, t_18, t_12) tuple =
      (x_1168 (*con NONE_9*),
       x_1166 (*con NONE_9*),
       x_2333,
       x_1167 (*con NONE_10*),
       x_1169 (*con NONE_9*))
    goto L_1459 (x_2332)
  block L_1458 ()
    val pos_0: (word64) ref = prim Ref_ref[word64] (pos0_0)
    val tuple_88: ((bool) ref, lambdas_64, (word64) ref) tuple =
      (closed_0, lseek_0, pos_0)
    val setPos_0: lambdas_7 = con setPosEnv_0 (tuple_88)
    val tuple_87: ((bool) ref, lambdas_66) tuple = (closed_0, x_2313)
    val tuple_86: (word64, lambdas_64, (word64) ref) tuple =
      (pos0_0, lseek_0, pos_0)
    call L_1460 (verifyPos_0 (tuple_86, x_1165 (*()*))) handle _ => L_5
  block L_1460 (x_2334: word64)
    val x_2342: lambdas_4 = con getPosEnv_1 (pos_0)
    val x_2338: t_12 = con SOME_9 (x_2342)
    val x_2337: t_18 = con SOME_14 (setPos_0)
    val x_2341: lambdas_4 = con endPosEnv_1 (tuple_87)
    val x_2339: t_12 = con SOME_9 (x_2341)
    val x_2340: lambdas_4 = con verifyPosEnv_1 (tuple_86)
    val x_2336: t_12 = con SOME_9 (x_2340)
    val x_2335: (t_12, t_12, (word64) ref, t_18, t_12) tuple =
      (x_2339, x_2338, pos_0, x_2337, x_2336)
    goto L_1459 (x_2335)
  block L_1459 (x_2343: (t_12, t_12, (word64) ref, t_18, t_12) tuple)
    val verifyPos_1: t_12 = #4 (x_2343)
    val setPos_1: t_18 = #3 (x_2343)
    val pos_1: (word64) ref = #2 (x_2343)
    val getPos_0: t_12 = #1 (x_2343)
    val endPos_0: t_12 = #0 (x_2343)
    val incPos_0: lambdas_490 = con incPosEnv_0 (pos_1)
    val blocking_0: (bool) ref = prim Ref_ref[bool] (x_1159 (*con true*))
    call L_1461 (x_2344 (empty_0, x_1172 (*con ::_2 (x_1171)*))) handle _ => L_5
  block L_1461 (appendFlgs_0: word32)
    val tuple_90:
      (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple =
      (intr_0, restartFlag_0, blocker_0, raiseSys_0, incPos_0)
    val putV_0: lambdas_489 = con putVEnv_0 (tuple_90)
    val tuple_89:
      (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple =
      (intr_0, restartFlag_0, blocker_0, raiseSys_0, incPos_0)
    val putA_0: lambdas_491 = con putAEnv_0 (tuple_89)
    val x_2345:
      (lambdas_45, (lambdas_46) ref, (bool) ref, word32, (bool) ref) tuple =
      (raiseSys_1, blocker_0, restartFlag_0, intr_0, closed_0)
    val close_0: lambdas_10 = con closeEnv_0 (x_2345)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_1462
  block L_1462 (env_571: unit)
    call L_1463 (toRep_2 (env_571, x_1069 (*0x1:w32*))) handle _ => L_5
  block L_1463 (x_2346: word32)
    val x_2354: t_0 = con SOME_0 (x_2346)
    val x_2368:
      (lambdas_491, lambdas_488, lambdas_487, word32, (bool) ref, (bool) ref) tuple =
      (putA_0, setfl_0, x_2315, appendFlgs_0, blocking_0, closed_0)
    val x_2356: lambdas_5 = con xEnv_239 (x_2368)
    val x_2364: t_14 = con SOME_10 (x_2356)
    val x_2367:
      (word32,
       lambdas_491,
       lambdas_488,
       lambdas_487,
       word32,
       (bool) ref,
       (bool) ref) tuple =
      (again_0, putA_0, setfl_0, x_2315, appendFlgs_0, blocking_0, closed_0)
    val x_2355: lambdas_6 = con xEnv_238 (x_2367)
    val x_2363: t_15 = con SOME_11 (x_2355)
    val x_2366:
      (lambdas_489, lambdas_488, lambdas_487, word32, (bool) ref, (bool) ref) tuple =
      (putV_0, setfl_0, x_2315, appendFlgs_0, blocking_0, closed_0)
    val x_2358: lambdas_8 = con xEnv_237 (x_2366)
    val x_2362: t_20 = con SOME_15 (x_2358)
    val x_2365:
      (word32,
       lambdas_489,
       lambdas_488,
       lambdas_487,
       word32,
       (bool) ref,
       (bool) ref) tuple =
      (again_0, putV_0, setfl_0, x_2315, appendFlgs_0, blocking_0, closed_0)
    val x_2357: lambdas_9 = con xEnv_236 (x_2365)
    val x_2361: t_21 = con SOME_16 (x_2357)
    val x_2360:
      (t_10,
       t_11,
       word32,
       lambdas_10,
       t_12,
       t_12,
       t_0,
       (word8) vector,
       t_18,
       t_12,
       t_14,
       t_15,
       t_20,
       t_21) tuple =
      (x_1292 (*con NONE_11*),
       x_1293 (*con NONE_12*),
       chunkSize_0,
       close_0,
       endPos_0,
       getPos_0,
       x_2354,
       x_1156 (*"<stdout>"*),
       setPos_1,
       verifyPos_1,
       x_2364,
       x_2363,
       x_2362,
       x_2361)
    val x_2359: writer_0 = con WR_0 (x_2360)
    val x_2351: t_20 = con SOME_15 (x_2358)
    val x_2350: t_21 = con SOME_16 (x_2357)
    val x_2353: t_14 = con SOME_10 (x_2356)
    val x_2352: t_15 = con SOME_11 (x_2355)
    val x_2349:
      (t_10,
       t_11,
       word32,
       lambdas_10,
       t_12,
       t_12,
       t_0,
       (word8) vector,
       t_18,
       t_12,
       t_14,
       t_15,
       t_20,
       t_21) tuple =
      (x_1292 (*con NONE_11*),
       x_1293 (*con NONE_12*),
       chunkSize_0,
       close_0,
       endPos_0,
       getPos_0,
       x_2354,
       x_1156 (*"<stdout>"*),
       setPos_1,
       verifyPos_1,
       x_2353,
       x_2352,
       x_2351,
       x_2350)
    val x_2348: writer_0 = con WR_0 (x_2349)
    val x_2347: (state_0) ref = prim Ref_ref[state_0] (x_1316 (*con Active_1*))
    case x_2325 of
      NO_BUF_1 => L_1466 | BLOCK_BUF_0 => L_1465 | LINE_BUF_0 => L_1464
  block L_1464 ()
    val x_2369: (word32, word8) tuple = (chunkSize_0, someElem_0 (*0x0:w8*))
    call L_1467 (new_3 (arrayAlloc_0, x_2369)) handle _ => L_5
  block L_1467 (x_2370: (word8) array)
    val x_2373: ((word8) array, (word32) ref) tuple = (x_2370, x_1486)
    val x_2372: buf_0 = con Buf_0 (x_2373)
    val x_2371: bufferMode_0 = con LINE_BUF_1 (x_2372)
    goto L_1468 (x_2371)
  block L_1465 ()
    val x_2374: (word32, word8) tuple = (chunkSize_0, someElem_0 (*0x0:w8*))
    call L_1469 (new_3 (arrayAlloc_0, x_2374)) handle _ => L_5
  block L_1469 (x_2375: (word8) array)
    val x_2378: ((word8) array, (word32) ref) tuple = (x_2375, x_1485)
    val x_2377: buf_0 = con Buf_0 (x_2378)
    val x_2376: bufferMode_0 = con BLOCK_BUF_1 (x_2377)
    goto L_1468 (x_2376)
  block L_1466 ()
    goto L_1468 (x_1317 (*con NO_BUF_0*))
  block L_1468 (x_2379: bufferMode_0)
    val x_2383: (bufferMode_0) ref = prim Ref_ref[bufferMode_0] (x_2379)
    val x_2382: (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple =
      (x_2348, x_2383, x_2347, x_2359)
    val x_2381: outstream_0 = con Out_0 (x_2382)
    val x_2380: (outstream_0, bool) tuple = (x_2381, x_1155 (*con false*))
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_1470
  block L_1470 (env_572: unit)
    call L_1471 (x_2384 (env_572, openOutstreams_0)) handle _ => L_5
  block L_1471 (x_2385: list_5)
    val x_2389: ((outstream_0, bool) tuple, list_5) tuple = (x_2380, x_2385)
    val x_2388: list_5 = con ::_7 (x_2389)
    val _: unit = prim Ref_assign[list_5] (openOutstreams_0, x_2388)
    val x_2387: (outstream_0) ref = prim Ref_ref[outstream_0] (x_2381)
    val x_2386: t_22 = con T_5 (x_2387)
    case x_1321 (*con xEnv_72 (x_1320)*) of
      xEnv_72 => L_1472
  block L_1472 (env_573: unit)
    call L_1473 (x_2390 (env_573, x_1322 (*0x1:w32*))) handle _ => L_5
  block L_1473 (failure_0: word32)
    case x_1321 (*con xEnv_72 (x_1320)*) of
      xEnv_72 => L_1474
  block L_1474 (env_574: unit)
    call L_1475 (x_2390 (env_574, x_1323 (*0x0:w32*))) handle _ => L_5
  block L_1475 (success_0: word32)
    val exiting_0: (bool) ref = prim Ref_ref[bool] (x_1324 (*con false*))
    val tuple_93: ((bool) ref, (list_2) ref, lambdas_483, lambdas_31) tuple =
      (exiting_0, atExit_0, x_1631, concat_0)
    val exit_0: lambdas_30 = con exitEnv_0 (tuple_93)
    val tuple_92: (lambdas_30, word32, word32) tuple =
      (exit_0, success_0, failure_0)
    val tuple_91: (lambdas_32, lambdas_31, lambdas_30, word32) tuple =
      (exnMessage_0, concat_0, exit_0, failure_0)
    val all_0: (list_6) ref = prim Ref_ref[list_6] (x_1362 (*con nil_11*))
    case make_0 (*con makeEn ... e_54)*) of
      makeEnv_0 => L_1476
  block L_1476 (env_575: unit)
    call L_1477 (make_1 (env_575, null_0)) handle _ => L_5
  block L_1477 (x_2391: t_23)
    val r_0: (t_23) ref = prim Ref_ref[t_23] (x_2391)
    val current_0: lambdas_26 = con currentEnv_0 (r_0)
    val tuple_94: (lambdas_26, (t_23) ref) tuple = (current_0, r_0)
    val init_0: lambdas_23 = con initEnv_0 (tuple_94)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1478
  block L_1478 (env_576: unit)
    call L_1479 (not_1 (env_576, isOn_0 (*con false*))) handle _ => L_5
  block L_1479 (x_2392: bool)
    case x_2392 of
      true => L_1481 | false => L_1480
  block L_1480 ()
    val x_2393: ((list_6) ref, lambdas_27, (word8) vector, lambdas_26) tuple =
      (all_0, append_0, x_1796, current_0)
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1482
  block L_1482 (env_577: unit)
    call L_1483 (x_2316 (env_577, atExit_0)) handle _ => L_5
  block L_1483 (x_2394: list_2)
    val x_2398: lambdas_3 = con xEnv_245 (x_2393)
    val x_2397: (lambdas_3, list_2) tuple = (x_2398, x_2394)
    val x_2396: list_2 = con ::_5 (x_2397)
    val _: unit = prim Ref_assign[list_2] (atExit_0, x_2396)
    val x_2395: (lambdas_23, (list_6) ref) tuple = (init_0, all_0)
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1484
  block L_1484 (env_578: unit)
    call L_1485 (x_2316 (env_578, atLoadWorld_0)) handle _ => L_5
  block L_1485 (x_2399: list_2)
    val x_2402: lambdas_3 = con xEnv_243 (x_2395)
    val x_2401: (lambdas_3, list_2) tuple = (x_2402, x_2399)
    val x_2400: list_2 = con ::_5 (x_2401)
    val _: unit = prim Ref_assign[list_2] (atLoadWorld_0, x_2400)
    call L_1486 (init_1 (tuple_94, x_1393 (*()*))) handle _ => L_5
  block L_1481 ()
    goto L_1486 (x_1375 (*()*))
  block L_1486 (x_2403: unit)
    val x_2405: lambdas_482 = con defaultTopLevelHandlerEnv_1 (tuple_91)
    val _: unit = prim Ref_assign[lambdas_482] (x_1488, x_2405)
    val x_2404: lambdas_480 = con defaultTopLevelSuffixEnv_1 (tuple_92)
    val _: unit = prim Ref_assign[lambdas_480] (x_1491, x_2404)
    case factorial_0 (*con factor ... e_56)*) of
      factorialEnv_0 => L_1487
  block L_1487 (env_579: unit)
    call L_1488 (factorial_1 (env_579, x_1396 (*0x5:w32*))) handle _ => L_5
  block L_1488 (x_2406: word32)
    call L_1489 (x_2407 (x_1632, x_2406)) handle _ => L_5
  block L_1489 (x_2408: (word8) vector)
    val x_2409: ((word8) vector, (word8) vector) tuple =
      (x_2408, x_1397 (*"\n"*))
    call L_1490 (append_1 (tuple_62, x_2409)) handle _ => L_5
  block L_1490 (x_2410: (word8) vector)
    case get_0 (*con getEnv ... e_51)*) of
      getEnv_0 => L_1491
  block L_1491 (env_580: unit)
    call L_1492 (get_1 (env_580, x_2386)) handle _ => L_5
  block L_1492 (x_2411: outstream_0)
    case x_2411 of
      Out_0 => L_1493
  block L_1493 (x_2412:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_2415: (state_0) ref = #2 (x_2412)
    val x_2414: (bufferMode_0) ref = #1 (x_2412)
    val x_2413: writer_0 = #0 (x_2412)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1494
  block L_1494 (env_581: unit)
    call L_1495 (x_2416 (env_581, x_2415)) handle _ => L_5
  block L_1495 (x_2417: state_0)
    case terminated_0 (*con termin ... e_44)*) of
      terminatedEnv_0 => L_1496
  block L_1496 (env_582: unit)
    call L_1497 (terminated_1 (env_582, x_2417)) handle _ => L_5
  block L_1497 (x_2418: bool)
    case x_2418 of
      true => L_1499 | false => L_1498
  block L_1498 ()
    val tuple_95: ((word8) vector, writer_0) tuple = (x_2410, x_2413)
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_1500
  block L_1500 (env_583: unit)
    call L_1501 (x_2419 (env_583, x_2414)) handle _ => L_1502
  block L_1501 (x_2420: bufferMode_0)
    case x_2420 of
      NO_BUF_0 => L_1505 | BLOCK_BUF_1 => L_1504 | LINE_BUF_1 => L_1503
  block L_1503 (x_2421: buf_0)
    case x_2421 of
      Buf_0 => L_1506
  block L_1506 (x_2422: ((word8) array, (word32) ref) tuple)
    val x_2424: (word32) ref = #1 (x_2422)
    val x_2423: (word8) array = #0 (x_2422)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1507
  block L_1507 (env_584: unit)
    call L_1508 (x_2425 (env_584, x_2424)) handle _ => L_1502
  block L_1508 (curSize_0: word32)
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_1509
  block L_1509 (env_585: unit)
    call L_1510 (x_2426 (env_585, x_2410)) handle _ => L_1511
  block L_1510 (x_2427: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_1512
  block L_1512 (env_586: unit)
    call L_1513 (x_2428 (env_586, x_2427)) handle _ => L_1511
  block L_1511 (x_2429: exn)
    case x_2429 of
      Overflow_0 => L_1514 | _ => L_1515
  block L_1515 ()
    call L_1513 (x_2430 (x_2429, x_1423 (*()*))) handle _ => L_1502
  block L_1514 (x_2431: (unit) ref)
    val x_2432: bool = prim MLton_equal[(unit) ref] (x_2431, x_62)
    case x_2432 of
      true => L_1517 | false => L_1516
  block L_1516 ()
    call L_1513 (x_2430 (x_2429, x_1427 (*()*))) handle _ => L_1502
  block L_1517 ()
    goto L_1502 (x_1426 (*con Fail_0 (x_1425)*))
  block L_1513 (x_2433: word32)
    val x_2434: (word32, word32) tuple = (curSize_0, x_2433)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1518
  block L_1518 (env_587: unit)
    call L_1519 (x_1626 (env_587, x_2434)) handle _ => L_1502
  block L_1519 (newSize_0: word32)
    case length_1 (*con length ... e_32)*) of
      lengthEnv_1 => L_1520
  block L_1520 (env_588: unit)
    call L_1521 (length_2 (env_588, x_2423)) handle _ => L_1502
  block L_1521 (x_2435: word32)
    val x_2436: (word32, word32) tuple = (newSize_0, x_2435)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_1522
  block L_1522 (env_589: unit)
    call L_1523 (>=_6 (env_589, x_2436)) handle _ => L_1502
  block L_1523 (x_2437: bool)
    case x_2437 of
      true => L_1525 | false => L_1524
  block L_1524 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1526
  block L_1526 (env_590: unit)
    call L_1527 (full_2 (env_590, x_2410)) handle _ => L_1502
  block L_1527 (x_2438: t_19)
    case x_2438 of
      T_4 => L_1528
  block L_1528 (x_2439: (word64, (word8) vector, word64) tuple)
    val x_2443: word64 = #2 (x_2439)
    val x_2442: (word8) vector = #1 (x_2439)
    val x_2441: word64 = #0 (x_2439)
    val x_2440: (word64, word64) tuple = (x_2441, x_1429 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1529
  block L_1529 (env_591: unit)
    call L_1530 (-!_2 (env_591, x_2440)) handle _ => L_1502
  block L_1530 (len_0: word64)
    val x_2444: (word64, word64) tuple = (x_2443, len_0)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1531
  block L_1531 (env_592: unit)
    call L_1532 (+!_2 (env_592, x_2444)) handle _ => L_1502
  block L_1532 (max_0: word64)
    val tuple_96: (word64, word64, (word8) vector) tuple =
      (max_0, x_2443, x_2442)
    call L_1533 (loop_12 (tuple_96, x_2443)) handle _ => L_1502
  block L_1533 (x_2445: t_34)
    case x_2445 of
      NONE_13 => L_1535 | SOME_24 => L_1534
  block L_1534 (x_2446: (word64, word8) tuple)
    goto L_1536 (x_1434 (*con true*))
  block L_1535 ()
    goto L_1536 (x_1433 (*con false*))
  block L_1525 ()
    goto L_1536 (x_1428 (*con true*))
  block L_1536 (x_2447: bool)
    case x_2447 of
      true => L_1538 | false => L_1537
  block L_1537 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1539
  block L_1539 (env_593: unit)
    call L_1540 (full_2 (env_593, x_2410)) handle _ => L_1502
  block L_1540 (x_2448: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1541
  block L_1541 (env_594: unit)
    call L_1542 (sextdFromInt32ToInt64_1 (env_594, curSize_0)) handle _ => L_1543
  block L_1542 (x_2449: word64)
    case x_2448 of
      T_4 => L_1544
  block L_1544 (x_2450: (word64, (word8) vector, word64) tuple)
    val x_2453: word64 = #2 (x_2450)
    val x_2452: (word8) vector = #1 (x_2450)
    val x_2451: word64 = #0 (x_2450)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1545
  block L_1545 (env_595: unit)
    call L_1546 (x_2454 (env_595, x_2423)) handle _ => L_1543
  block L_1546 (x_2455: word64)
    val x_2456: (word64, word64) tuple = (x_2449, x_2455)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1547
  block L_1547 (env_596: unit)
    call L_1548 (>_5 (env_596, x_2456)) handle _ => L_1543
  block L_1548 (x_2457: bool)
    case x_2457 of
      true => L_1550 | false => L_1549
  block L_1549 ()
    val x_2458: (word64, word64) tuple = (x_2449, x_2451)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1551
  block L_1551 (env_597: unit)
    call L_1552 (+!_2 (env_597, x_2458)) handle _ => L_1543
  block L_1552 (x_2459: word64)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1553
  block L_1553 (env_598: unit)
    call L_1554 (x_2454 (env_598, x_2423)) handle _ => L_1543
  block L_1554 (x_2460: word64)
    val x_2461: (word64, word64) tuple = (x_2459, x_2460)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1555
  block L_1555 (env_599: unit)
    call L_1556 (>_5 (env_599, x_2461)) handle _ => L_1543
  block L_1550 ()
    goto L_1556 (x_1436 (*con true*))
  block L_1556 (x_2462: bool)
    case x_2462 of
      true => L_1558 | false => L_1557
  block L_1557 ()
    val x_2463: (word64, word64) tuple = (x_2451, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_1559
  block L_1559 (env_600: unit)
    call L_1560 (<_7 (env_600, x_2463)) handle _ => L_1543
  block L_1560 (x_2464: bool)
    case x_2464 of
      true => L_1562 | false => L_1561
  block L_1561 ()
    val x_2465: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (x_2423, x_2449, x_2452, x_2453, x_2451)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_1563
  block L_1563 (env_601: unit)
    call L_1564 (x_2466 (env_601, x_2465)) handle _ => L_1543
  block L_1562 ()
    val x_2467: (word64, word64) tuple = (x_2451, x_1437 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1565
  block L_1565 (env_602: unit)
    call L_1566 (-!_2 (env_602, x_2467)) handle _ => L_1543
  block L_1566 (len_1: word64)
    val tuple_97:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_1, x_2449, x_2453, x_2452, x_2423)
    call L_1564 (loop_13 (tuple_97, x_1440 (*0x0:w64*))) handle _ => L_1543
  block L_1558 ()
    goto L_1543 (x_69 (*con Subscr ... x_68)*))
  block L_1543 (x_2468: exn)
    case x_2468 of
      Overflow_0 => L_1567 | _ => L_1568
  block L_1568 ()
    call L_1564 (x_2469 (x_2468, x_1441 (*()*))) handle _ => L_1502
  block L_1567 (x_2470: (unit) ref)
    val x_2471: bool = prim MLton_equal[(unit) ref] (x_2470, x_62)
    case x_2471 of
      true => L_1570 | false => L_1569
  block L_1569 ()
    call L_1564 (x_2469 (x_2468, x_1442 (*()*))) handle _ => L_1502
  block L_1564 (x_2472: unit)
    val x_2473: ((word32) ref, word32) tuple = (x_2424, newSize_0)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_1571
  block L_1571 (env_603: unit)
    call L_1572 (x_2474 (env_603, x_2473)) handle _ => L_1502
  block L_1570 ()
    goto L_1502 (x_69 (*con Subscr ... x_68)*))
  block L_1538 ()
    val x_2475: (writer_0, buf_0) tuple = (x_2413, x_2421)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_1573
  block L_1573 (env_604: unit)
    call L_1574 (flushBuf_1 (env_604, x_2475)) handle _ => L_1502
  block L_1574 (x_2476: unit)
    call L_1572 (put_0 (tuple_95, x_1435 (*()*))) handle _ => L_1502
  block L_1504 (x_2477: buf_0)
    case x_2477 of
      Buf_0 => L_1575
  block L_1575 (x_2478: ((word8) array, (word32) ref) tuple)
    val x_2480: (word32) ref = #1 (x_2478)
    val x_2479: (word8) array = #0 (x_2478)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1576
  block L_1576 (env_605: unit)
    call L_1577 (x_2425 (env_605, x_2480)) handle _ => L_1502
  block L_1577 (curSize_1: word32)
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_1578
  block L_1578 (env_606: unit)
    call L_1579 (x_2426 (env_606, x_2410)) handle _ => L_1580
  block L_1579 (x_2481: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_1581
  block L_1581 (env_607: unit)
    call L_1582 (x_2428 (env_607, x_2481)) handle _ => L_1580
  block L_1580 (x_2482: exn)
    case x_2482 of
      Overflow_0 => L_1583 | _ => L_1584
  block L_1584 ()
    call L_1582 (x_2483 (x_2482, x_1408 (*()*))) handle _ => L_1502
  block L_1583 (x_2484: (unit) ref)
    val x_2485: bool = prim MLton_equal[(unit) ref] (x_2484, x_62)
    case x_2485 of
      true => L_1586 | false => L_1585
  block L_1585 ()
    call L_1582 (x_2483 (x_2482, x_1412 (*()*))) handle _ => L_1502
  block L_1586 ()
    goto L_1502 (x_1411 (*con Fail_0 (x_1410)*))
  block L_1582 (x_2486: word32)
    val x_2487: (word32, word32) tuple = (curSize_1, x_2486)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1587
  block L_1587 (env_608: unit)
    call L_1588 (x_1626 (env_608, x_2487)) handle _ => L_1502
  block L_1588 (newSize_1: word32)
    case length_1 (*con length ... e_32)*) of
      lengthEnv_1 => L_1589
  block L_1589 (env_609: unit)
    call L_1590 (length_2 (env_609, x_2479)) handle _ => L_1502
  block L_1590 (x_2488: word32)
    val x_2489: (word32, word32) tuple = (newSize_1, x_2488)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_1591
  block L_1591 (env_610: unit)
    call L_1592 (>=_6 (env_610, x_2489)) handle _ => L_1502
  block L_1592 (x_2490: bool)
    case x_2490 of
      true => L_1594 | false => L_1593
  block L_1593 ()
    goto L_1595 (x_1414 (*con false*))
  block L_1594 ()
    goto L_1595 (x_1413 (*con true*))
  block L_1595 (x_2491: bool)
    case x_2491 of
      true => L_1597 | false => L_1596
  block L_1596 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1598
  block L_1598 (env_611: unit)
    call L_1599 (full_2 (env_611, x_2410)) handle _ => L_1502
  block L_1599 (x_2492: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1600
  block L_1600 (env_612: unit)
    call L_1601 (sextdFromInt32ToInt64_1 (env_612, curSize_1)) handle _ => L_1602
  block L_1601 (x_2493: word64)
    case x_2492 of
      T_4 => L_1603
  block L_1603 (x_2494: (word64, (word8) vector, word64) tuple)
    val x_2497: word64 = #2 (x_2494)
    val x_2496: (word8) vector = #1 (x_2494)
    val x_2495: word64 = #0 (x_2494)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1604
  block L_1604 (env_613: unit)
    call L_1605 (x_2454 (env_613, x_2479)) handle _ => L_1602
  block L_1605 (x_2498: word64)
    val x_2499: (word64, word64) tuple = (x_2493, x_2498)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1606
  block L_1606 (env_614: unit)
    call L_1607 (>_5 (env_614, x_2499)) handle _ => L_1602
  block L_1607 (x_2500: bool)
    case x_2500 of
      true => L_1609 | false => L_1608
  block L_1608 ()
    val x_2501: (word64, word64) tuple = (x_2493, x_2495)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1610
  block L_1610 (env_615: unit)
    call L_1611 (+!_2 (env_615, x_2501)) handle _ => L_1602
  block L_1611 (x_2502: word64)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1612
  block L_1612 (env_616: unit)
    call L_1613 (x_2454 (env_616, x_2479)) handle _ => L_1602
  block L_1613 (x_2503: word64)
    val x_2504: (word64, word64) tuple = (x_2502, x_2503)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1614
  block L_1614 (env_617: unit)
    call L_1615 (>_5 (env_617, x_2504)) handle _ => L_1602
  block L_1609 ()
    goto L_1615 (x_1416 (*con true*))
  block L_1615 (x_2505: bool)
    case x_2505 of
      true => L_1617 | false => L_1616
  block L_1616 ()
    val x_2506: (word64, word64) tuple = (x_2495, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_1618
  block L_1618 (env_618: unit)
    call L_1619 (<_7 (env_618, x_2506)) handle _ => L_1602
  block L_1619 (x_2507: bool)
    case x_2507 of
      true => L_1621 | false => L_1620
  block L_1620 ()
    val x_2508: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (x_2479, x_2493, x_2496, x_2497, x_2495)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_1622
  block L_1622 (env_619: unit)
    call L_1623 (x_2466 (env_619, x_2508)) handle _ => L_1602
  block L_1621 ()
    val x_2509: (word64, word64) tuple = (x_2495, x_1417 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1624
  block L_1624 (env_620: unit)
    call L_1625 (-!_2 (env_620, x_2509)) handle _ => L_1602
  block L_1625 (len_2: word64)
    val tuple_98:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_2, x_2493, x_2497, x_2496, x_2479)
    call L_1623 (loop_14 (tuple_98, x_1420 (*0x0:w64*))) handle _ => L_1602
  block L_1617 ()
    goto L_1602 (x_69 (*con Subscr ... x_68)*))
  block L_1602 (x_2510: exn)
    case x_2510 of
      Overflow_0 => L_1626 | _ => L_1627
  block L_1627 ()
    call L_1623 (x_2511 (x_2510, x_1421 (*()*))) handle _ => L_1502
  block L_1626 (x_2512: (unit) ref)
    val x_2513: bool = prim MLton_equal[(unit) ref] (x_2512, x_62)
    case x_2513 of
      true => L_1629 | false => L_1628
  block L_1628 ()
    call L_1623 (x_2511 (x_2510, x_1422 (*()*))) handle _ => L_1502
  block L_1623 (x_2514: unit)
    val x_2515: ((word32) ref, word32) tuple = (x_2480, newSize_1)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_1630
  block L_1630 (env_621: unit)
    call L_1572 (x_2474 (env_621, x_2515)) handle _ => L_1502
  block L_1629 ()
    goto L_1502 (x_69 (*con Subscr ... x_68)*))
  block L_1597 ()
    val x_2516: (writer_0, buf_0) tuple = (x_2413, x_2477)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_1631
  block L_1631 (env_622: unit)
    call L_1632 (flushBuf_1 (env_622, x_2516)) handle _ => L_1502
  block L_1632 (x_2517: unit)
    call L_1572 (put_0 (tuple_95, x_1415 (*()*))) handle _ => L_1502
  block L_1505 ()
    call L_1572 (put_0 (tuple_95, x_1407 (*()*))) handle _ => L_1502
  block L_1502 (x_2518: exn)
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_1633
  block L_1633 (env_623: unit)
    call L_1634 (outstreamName_1 (env_623, x_2411)) handle _ => L_5
  block L_1634 (x_2519: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_1635
  block L_1635 (env_624: unit)
    call L_1636 (liftExn_1 (env_624, x_2519)) handle _ => L_5
  block L_1636 (x_2520: lambdas_79)
    case x_2520 of
      xEnv_86 => L_1637
  block L_1637 (env_625: (word8) vector)
    call L_1638 (x_2521 (env_625, x_1443 (*"output"*))) handle _ => L_5
  block L_1638 (x_2522: lambdas_78)
    case x_2522 of
      xEnv_85 => L_1639
  block L_1639 (env_626: ((word8) vector, (word8) vector) tuple)
    call L_1572 (x_2523 (env_626, x_2518)) handle _ => L_5
  block L_1499 ()
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_1640
  block L_1640 (env_627: unit)
    call L_1641 (outstreamName_1 (env_627, x_2411)) handle _ => L_5
  block L_1641 (x_2524: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_1642
  block L_1642 (env_628: unit)
    call L_1643 (liftExn_1 (env_628, x_2524)) handle _ => L_5
  block L_1643 (x_2525: lambdas_79)
    case x_2525 of
      xEnv_86 => L_1644
  block L_1644 (env_629: (word8) vector)
    call L_1645 (x_2521 (env_629, x_1398 (*"output"*))) handle _ => L_5
  block L_1645 (x_2526: lambdas_78)
    case x_2526 of
      xEnv_85 => L_1646
  block L_1646 (env_630: ((word8) vector, (word8) vector) tuple)
    call L_1572 (x_2523 (env_630, x_1052 (*con Closed ... 1051)*))) handle _ => L_5
  block L_1572 (x_2527: unit)
    case get_0 (*con getEnv ... e_51)*) of
      getEnv_0 => L_1647
  block L_1647 (env_631: unit)
    call L_1648 (get_1 (env_631, x_2386)) handle _ => L_5
  block L_1648 (x_2528: outstream_0)
    case flushOut_0 (*con flushO ... e_48)*) of
      flushOutEnv_0 => L_1649
  block L_1649 (env_632: unit)
    call L_1650 (flushOut_1 (env_632, x_2528)) handle _ => L_5
  block L_1650 (x_2529: unit)
    val x_2530: lambdas_480 = prim Ref_deref[lambdas_480] (x_1491)
    case x_2530 of
      xEnv_231 => L_1653
    | xEnv_230 => L_1652
    | defaultTopLevelSuffixEnv_1 => L_1651
  block L_1651 (env_633: (lambdas_30, word32, word32) tuple)
    call L_1654 (defaultTopLevelSuffix_0 (env_633, x_1444 (*()*))) handle _ => L_5
  block L_1652 (env_634: unit)
    call L_1654 (x_2531 (env_634, x_1444 (*()*))) handle _ => L_5
  block L_1653 (env_635: unit)
    call L_1654 (x_2532 (env_635, x_1444 (*()*))) handle _ => L_5
  block L_699 ()
    goto L_5 (x_383 (*con Chr_0 (x_382)*))
  block L_279 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_272 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_259 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_250 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_241 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_113 ()
    goto L_5 (x_313 (*con Fail8_0 (x_312)*))
  block L_83 ()
    goto L_5 (x_297 (*con Fail8_0 (x_296)*))
  block L_57 ()
    goto L_5 (x_283 (*con Fail8_0 (x_282)*))
  block L_31 ()
    goto L_5 (x_269 (*con Fail8_0 (x_268)*))
  block L_5 (x_2533: exn)
    val x_2534: lambdas_482 = prim Ref_deref[lambdas_482] (x_1488)
    case x_2534 of
      xEnv_233 => L_1657
    | xEnv_232 => L_1656
    | defaultTopLevelHandlerEnv_1 => L_1655
  block L_1655 (env_636: (lambdas_32, lambdas_31, lambdas_30, word32) tuple)
    call L_1654 (defaultTopLevelHandler_0 (env_636, x_2533)) handle _ => L_1658
  block L_1656 (env_637: unit)
    call L_1654 (x_2535 (env_637, x_2533)) handle _ => L_1658
  block L_1657 (env_638: unit)
    call L_1654 (x_2536 (env_638, x_2533)) handle _ => L_1658
  block L_1658 (x_2537: exn)
    val _: unit = prim MLton_bug (x_1445 (*"toplevel  ... lled"*))
    bug
  block L_1654 (x_2538: unit)
    return (x_2538)
fun x_2469 (env_639: exn, unit_0: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1659 ()
  block L_1659 ()
    raise (env_639)
fun loop_13 (env_640:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_2539: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_1660 ()
  block L_1660 ()
    val len_3: word64 = #0 (env_640)
    val x_2544: word64 = #1 (env_640)
    val x_2543: word64 = #2 (env_640)
    val x_2542: (word8) vector = #3 (env_640)
    val x_2541: (word8) array = #4 (env_640)
    val x_2540: (word64, word64) tuple = (x_2539, len_3)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_1661
  block L_1661 (env_641: unit)
    call L_1662 (>_6 (env_641, x_2540)) handle _ => raise
  block L_1662 (x_2545: bool)
    case x_2545 of
      true => L_1664 | false => L_1663
  block L_1663 ()
    val x_2546: (word64, word64) tuple = (x_2544, x_2539)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1665
  block L_1665 (env_642: unit)
    call L_1666 (+!_2 (env_642, x_2546)) handle _ => raise
  block L_1666 (x_2547: word64)
    val x_2548: (word64, word64) tuple = (x_2543, x_2539)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1667
  block L_1667 (env_643: unit)
    call L_1668 (+!_2 (env_643, x_2548)) handle _ => raise
  block L_1668 (x_2549: word64)
    val x_2550: ((word8) vector, word64) tuple = (x_2542, x_2549)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1669
  block L_1669 (env_644: unit)
    call L_1670 (x_2551 (env_644, x_2550)) handle _ => raise
  block L_1670 (x_2552: word8)
    val x_2553: ((word8) array, word64, word8) tuple = (x_2541, x_2547, x_2552)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_1671
  block L_1671 (env_645: unit)
    call L_1672 (x_2554 (env_645, x_2553)) handle _ => raise
  block L_1672 (x_2555: unit)
    val x_2556: (word64, word64) tuple = (x_2539, x_1439 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1673
  block L_1673 (env_646: unit)
    call L_1674 (+!_2 (env_646, x_2556)) handle _ => raise
  block L_1674 (x_2557: word64)
    call tail loop_13 (env_640, x_2557)
  block L_1664 ()
    return (x_1438 (*()*))
fun loop_12 (env_647: (word64, word64, (word8) vector) tuple, x_2558: word64):
  {returns = Some (t_34), raises = Some (exn)} =
L_1675 ()
  block L_1675 ()
    val max_1: word64 = #0 (env_647)
    val x_2561: word64 = #1 (env_647)
    val x_2560: (word8) vector = #2 (env_647)
    val x_2559: (word64, word64) tuple = (x_2558, max_1)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_1676
  block L_1676 (env_648: unit)
    call L_1677 (>_6 (env_648, x_2559)) handle _ => raise
  block L_1677 (x_2562: bool)
    case x_2562 of
      true => L_1679 | false => L_1678
  block L_1678 ()
    val x_2563: (word64, word64) tuple = (x_2558, x_2561)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1680
  block L_1680 (env_649: unit)
    call L_1681 (-!_2 (env_649, x_2563)) handle _ => raise
  block L_1681 (x_2564: word64)
    val x_2565: ((word8) vector, word64) tuple = (x_2560, x_2558)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1682
  block L_1682 (env_650: unit)
    call L_1683 (x_2551 (env_650, x_2565)) handle _ => raise
  block L_1683 (x_2566: word8)
    val z_0: (word64, word8) tuple = (x_2564, x_2566)
    val x_2567: (word8, word8) tuple = (x_2566, x_1431 (*0xA:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_1684
  block L_1684 (env_651: unit)
    call L_1685 (x_2568 (env_651, x_2567)) handle _ => raise
  block L_1685 (x_2569: bool)
    case x_2569 of
      true => L_1687 | false => L_1686
  block L_1686 ()
    val x_2570: (word64, word64) tuple = (x_2558, x_1432 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1688
  block L_1688 (env_652: unit)
    call L_1689 (+!_2 (env_652, x_2570)) handle _ => raise
  block L_1689 (x_2571: word64)
    call tail loop_12 (env_647, x_2571)
  block L_1687 ()
    val x_2572: t_34 = con SOME_24 (z_0)
    return (x_2572)
  block L_1679 ()
    return (x_1430 (*con NONE_13*))
fun x_2430 (env_653: exn, unit_1: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_1690 ()
  block L_1690 ()
    raise (env_653)
fun x_2511 (env_654: exn, unit_2: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1691 ()
  block L_1691 ()
    raise (env_654)
fun loop_14 (env_655:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_2573: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_1692 ()
  block L_1692 ()
    val len_4: word64 = #0 (env_655)
    val x_2578: word64 = #1 (env_655)
    val x_2577: word64 = #2 (env_655)
    val x_2576: (word8) vector = #3 (env_655)
    val x_2575: (word8) array = #4 (env_655)
    val x_2574: (word64, word64) tuple = (x_2573, len_4)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_1693
  block L_1693 (env_656: unit)
    call L_1694 (>_6 (env_656, x_2574)) handle _ => raise
  block L_1694 (x_2579: bool)
    case x_2579 of
      true => L_1696 | false => L_1695
  block L_1695 ()
    val x_2580: (word64, word64) tuple = (x_2578, x_2573)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1697
  block L_1697 (env_657: unit)
    call L_1698 (+!_2 (env_657, x_2580)) handle _ => raise
  block L_1698 (x_2581: word64)
    val x_2582: (word64, word64) tuple = (x_2577, x_2573)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1699
  block L_1699 (env_658: unit)
    call L_1700 (+!_2 (env_658, x_2582)) handle _ => raise
  block L_1700 (x_2583: word64)
    val x_2584: ((word8) vector, word64) tuple = (x_2576, x_2583)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1701
  block L_1701 (env_659: unit)
    call L_1702 (x_2551 (env_659, x_2584)) handle _ => raise
  block L_1702 (x_2585: word8)
    val x_2586: ((word8) array, word64, word8) tuple = (x_2575, x_2581, x_2585)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_1703
  block L_1703 (env_660: unit)
    call L_1704 (x_2554 (env_660, x_2586)) handle _ => raise
  block L_1704 (x_2587: unit)
    val x_2588: (word64, word64) tuple = (x_2573, x_1419 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1705
  block L_1705 (env_661: unit)
    call L_1706 (+!_2 (env_661, x_2588)) handle _ => raise
  block L_1706 (x_2589: word64)
    call tail loop_14 (env_655, x_2589)
  block L_1696 ()
    return (x_1418 (*()*))
fun x_2483 (env_662: exn, unit_3: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_1707 ()
  block L_1707 ()
    raise (env_662)
fun put_0 (env_663: ((word8) vector, writer_0) tuple, x_2590: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1708 ()
  block L_1708 ()
    val x_2592: (word8) vector = #0 (env_663)
    val x_2591: writer_0 = #1 (env_663)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1709
  block L_1709 (env_664: unit)
    call L_1710 (full_2 (env_664, x_2592)) handle _ => raise
  block L_1710 (x_2593: t_19)
    case x_2591 of
      WR_0 => L_1711
  block L_1711 (x_2594:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_1: t_20 = #12 (x_2594)
    case #_1 of
      NONE_19 => L_1713 | SOME_15 => L_1712
  block L_1712 (x_2595: lambdas_8)
    case base_1 (*con baseEn ... e_30)*) of
      baseEnv_1 => L_1714
  block L_1714 (env_665: unit)
    call L_1715 (base_3 (env_665, x_2593)) handle _ => raise
  block L_1715 (x_2596: ((word8) vector, word32, word32) tuple)
    val sz_0: word32 = #2 (x_2596)
    val i_0: word32 = #1 (x_2596)
    val b_6: (word8) vector = #0 (x_2596)
    val x_2597: (word32, word32) tuple = (i_0, sz_0)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1716
  block L_1716 (env_666: unit)
    call L_1717 (x_1626 (env_666, x_2597)) handle _ => raise
  block L_1717 (max_2: word32)
    val tuple_99: (word32, (word8) vector, lambdas_8) tuple =
      (max_2, b_6, x_2595)
    call tail loop_15 (tuple_99, i_0)
  block L_1713 ()
    raise (x_1049 (*con Blocki ... 1048)*))
fun loop_15 (env_667: (word32, (word8) vector, lambdas_8) tuple, x_2598: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1718 ()
  block L_1718 ()
    val max_3: word32 = #0 (env_667)
    val b_7: (word8) vector = #1 (env_667)
    val x_2600: lambdas_8 = #2 (env_667)
    val x_2599: (word32, word32) tuple = (x_2598, max_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1719
  block L_1719 (env_668: unit)
    call L_1720 (x_2054 (env_668, x_2599)) handle _ => raise
  block L_1720 (x_2601: bool)
    case x_2601 of
      true => L_1722 | false => L_1721
  block L_1721 ()
    val x_2602: (word32, word32) tuple = (max_3, x_2598)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1723
  block L_1723 (env_669: unit)
    call L_1724 (x_1785 (env_669, x_2602)) handle _ => raise
  block L_1724 (x_2603: word32)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1725
  block L_1725 (env_670: unit)
    call L_1726 (full_2 (env_670, b_7)) handle _ => raise
  block L_1726 (x_2604: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1727
  block L_1727 (env_671: unit)
    call L_1728 (sextdFromInt32ToInt64_1 (env_671, x_2598)) handle _ => L_1729
  block L_1728 (x_2605: word64)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1730
  block L_1730 (env_672: unit)
    call L_1731 (sextdFromInt32ToInt64_1 (env_672, x_2603)) handle _ => L_1729
  block L_1731 (x_2606: word64)
    case x_2604 of
      T_4 => L_1732
  block L_1732 (x_2607: (word64, (word8) vector, word64) tuple)
    val x_2611: word64 = #2 (x_2607)
    val x_2610: (word8) vector = #1 (x_2607)
    val x_2609: word64 = #0 (x_2607)
    val x_2608: (word64, word64) tuple = (x_2605, x_2609)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1733
  block L_1733 (env_673: unit)
    call L_1734 (>_5 (env_673, x_2608)) handle _ => L_1729
  block L_1734 (x_2612: bool)
    case x_2612 of
      true => L_1736 | false => L_1735
  block L_1735 ()
    val x_2613: (word64, word64) tuple = (x_2609, x_2605)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1737
  block L_1737 (env_674: unit)
    call L_1738 (-!_2 (env_674, x_2613)) handle _ => L_1729
  block L_1738 (x_2614: word64)
    val x_2615: (word64, word64) tuple = (x_2606, x_2614)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1739
  block L_1739 (env_675: unit)
    call L_1740 (>_5 (env_675, x_2615)) handle _ => L_1729
  block L_1736 ()
    goto L_1740 (x_1400 (*con true*))
  block L_1740 (x_2616: bool)
    case x_2616 of
      true => L_1742 | false => L_1741
  block L_1741 ()
    val x_2617: (word64, word64) tuple = (x_2611, x_2605)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1743
  block L_1743 (env_676: unit)
    call L_1744 (+!_2 (env_676, x_2617)) handle _ => L_1729
  block L_1744 (x_2618: word64)
    val x_2620: (word64, (word8) vector, word64) tuple =
      (x_2606, x_2610, x_2618)
    val x_2619: t_19 = con T_4 (x_2620)
    goto L_1745 (x_2619)
  block L_1742 ()
    goto L_1729 (x_69 (*con Subscr ... x_68)*))
  block L_1729 (x_2621: exn)
    case x_2621 of
      Overflow_0 => L_1746 | _ => L_1747
  block L_1747 ()
    call L_1745 (x_2622 (x_2621, x_1401 (*()*))) handle _ => raise
  block L_1746 (x_2623: (unit) ref)
    val x_2624: bool = prim MLton_equal[(unit) ref] (x_2623, x_62)
    case x_2624 of
      true => L_1749 | false => L_1748
  block L_1748 ()
    call L_1745 (x_2622 (x_2621, x_1402 (*()*))) handle _ => raise
  block L_1745 (x_2625: t_19)
    case x_2600 of
      xEnv_237 => L_1750
  block L_1750 (env_677:
                  (lambdas_489,
                   lambdas_488,
                   lambdas_487,
                   word32,
                   (bool) ref,
                   (bool) ref) tuple)
    call L_1751 (x_2626 (env_677, x_2625)) handle _ => raise
  block L_1751 (j_0: word32)
    val x_2627: (word32, word32) tuple = (j_0, x_1403 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1752
  block L_1752 (env_678: unit)
    call L_1753 (x_2054 (env_678, x_2627)) handle _ => raise
  block L_1753 (x_2628: bool)
    case x_2628 of
      true => L_1755 | false => L_1754
  block L_1754 ()
    val x_2629: (word32, word32) tuple = (x_2598, j_0)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1756
  block L_1756 (env_679: unit)
    call L_1757 (x_1626 (env_679, x_2629)) handle _ => raise
  block L_1757 (x_2630: word32)
    call tail loop_15 (env_667, x_2630)
  block L_1755 ()
    raise (x_1406 (*con Fail_0 (x_1405)*))
  block L_1749 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_1722 ()
    return (x_1399 (*()*))
fun x_2622 (env_680: exn, unit_4: unit):
  {returns = Some (t_19), raises = Some (exn)} =
L_1758 ()
  block L_1758 ()
    raise (env_680)
fun factorial_1 (env_681: unit, x_2631: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_1759 ()
  block L_1759 ()
    case32 x_2631 of
      0x0:w32 => L_1760 | _ => L_1761
  block L_1761 ()
    val x_2632: (word32, word32) tuple = (x_2631, x_1394 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1762
  block L_1762 (env_682: unit)
    call L_1763 (x_1785 (env_682, x_2632)) handle _ => raise
  block L_1763 (x_2633: word32)
    case factorial_0 (*con factor ... e_56)*) of
      factorialEnv_0 => L_1764
  block L_1764 (env_683: unit)
    call L_1765 (factorial_1 (env_683, x_2633)) handle _ => raise
  block L_1765 (x_2634: word32)
    val x_2636: word32 = prim WordS32_mul (x_2631, x_2634)
    val x_2635: bool = prim WordS32_mulCheckP (x_2631, x_2634)
    case x_2635 of
      true => L_1767 | false => L_1766
  block L_1766 ()
    return (x_2636)
  block L_1767 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1760 ()
    return (x_1395 (*0x1:w32*))
fun x_2637 (env_684: (lambdas_23, (list_6) ref) tuple, x_2638: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1768 ()
  block L_1768 ()
    val init_2: lambdas_23 = #0 (env_684)
    val all_1: (list_6) ref = #1 (env_684)
    val _: unit = prim Ref_assign[list_6] (all_1, x_1391 (*con nil_11*))
    case init_2 of
      initEnv_0 => L_1769
  block L_1769 (env_685: (lambdas_26, (t_23) ref) tuple)
    call tail init_1 (env_685, x_1392 (*()*))
fun x_2639 (env_686:
              ((list_6) ref, lambdas_27, (word8) vector, lambdas_26) tuple,
            x_2640: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1770 ()
  block L_1770 ()
    val all_2: (list_6) ref = #0 (env_686)
    val append_2: lambdas_27 = #1 (env_686)
    val x_2641: (word8) vector = #2 (env_686)
    val current_1: lambdas_26 = #3 (env_686)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1771
  block L_1771 (env_687: unit)
    call L_1772 (gcState_1 (env_687, x_1376 (*()*))) handle _ => raise
  block L_1772 (x_2642: cpointer)
    val _: unit =
      prim CFunction {args = (cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileDone} (x_2642)
    case current_1 of
      currentEnv_0 => L_1773
  block L_1773 (env_688: (t_23) ref)
    call L_1774 (current_2 (env_688, x_1377 (*()*))) handle _ => raise
  block L_1774 (x_2643: t_23)
    case x_2643 of
      T_6 => L_1775
  block L_1775 (x_2644: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2646: cpointer = #2 (x_2644)
    val x_2645: (bool) ref = #1 (x_2644)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1776
  block L_1776 (env_689: unit)
    call L_1777 (not_1 (env_689, isOn_0 (*con false*))) handle _ => raise
  block L_1777 (x_2647: bool)
    case x_2647 of
      true => L_1779 | false => L_1778
  block L_1778 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1780
  block L_1780 (env_690: unit)
    call L_1781 (x_2648 (env_690, x_2645)) handle _ => raise
  block L_1781 (x_2649: bool)
    case x_2649 of
      true => L_1783 | false => L_1782
  block L_1782 ()
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1784
  block L_1784 (env_691: unit)
    call L_1785 (gcState_1 (env_691, x_1383 (*()*))) handle _ => raise
  block L_1785 (x_2650: cpointer)
    val x_2651: ((word8) vector, (word8) vector) tuple =
      (x_1378 (*"mlmon.out"*), x_2641)
    case append_2 of
      appendEnv_0 => L_1786
  block L_1786 (env_692: (lambdas_495, lambdas_494) tuple)
    call L_1787 (append_1 (env_692, x_2651)) handle _ => raise
  block L_1787 (x_2652: (word8) vector)
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_1788
  block L_1788 (env_693: unit)
    call L_1789 (x_2426 (env_693, x_2652)) handle _ => raise
  block L_1789 (x_2653: word64)
    val x_2654: (word64, word64) tuple = (x_2653, x_1385 (*0x1:w64*))
    case x_170 (*con xEnv_24 (x_169)*) of
      xEnv_24 => L_1790
  block L_1790 (env_694: unit)
    call L_1791 (x_2295 (env_694, x_2654)) handle _ => raise
  block L_1791 (x_2655: word64)
    val x_2656: ((word8) vector, word64) tuple = (x_2652, x_2655)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1792
  block L_1792 (env_695: unit)
    call L_1793 (x_2551 (env_695, x_2656)) handle _ => raise
  block L_1793 (x_2657: word8)
    val x_2658: (word8, word8) tuple = (x_1384 (*0x0:w8*), x_2657)
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_1794
  block L_1794 (env_696: unit)
    call L_1795 (x_2568 (env_696, x_2658)) handle _ => raise
  block L_1795 (x_2659: bool)
    case x_2659 of
      true => L_1797 | false => L_1796
  block L_1796 ()
    raise (x_1388 (*con Fail8_0 (x_1387)*))
  block L_1797 ()
    val x_2660: unit =
      prim CFunction {args = (cpointer, cpointer, (word8) vector),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer, Objptr),
                                   res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileWrite} (x_2650, x_2646, x_2652)
    goto L_1798 (x_2660)
  block L_1783 ()
    raise (x_1382 (*con Fail_0 (x_1381)*))
  block L_1779 ()
    goto L_1798 (x_1379 (*()*))
  block L_1798 (x_2661: unit)
    val x_2663: list_6 = prim Ref_deref[list_6] (all_2)
    val x_2662: (list_6, unit) tuple = (x_2663, x_1389 (*()*))
    case loop_4 (*con loopEn ... e_55)*) of
      loopEnv_4 => L_1799
  block L_1799 (env_697: unit)
    call tail loop_16 (env_697, x_2662)
fun loop_16 (env_698: unit, x_2664: (list_6, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_1800 ()
  block L_1800 ()
    val b_8: unit = #1 (x_2664)
    val l_0: list_6 = #0 (x_2664)
    case l_0 of
      nil_11 => L_1802 | ::_8 => L_1801
  block L_1801 (x_2665: (t_23, list_6) tuple)
    val x_2667: list_6 = #1 (x_2665)
    val x_2666: t_23 = #0 (x_2665)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1803
  block L_1803 (env_699: unit)
    call L_1804 (gcState_1 (env_699, x_1390 (*()*))) handle _ => raise
  block L_1804 (x_2668: cpointer)
    case x_2666 of
      T_6 => L_1805
  block L_1805 (x_2669: ((bool) ref, (bool) ref, cpointer) tuple)
    val #_2: cpointer = #2 (x_2669)
    val x_2671: unit =
      prim CFunction {args = (cpointer, cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileFree} (x_2668, #_2)
    val x_2670: (list_6, unit) tuple = (x_2667, x_2671)
    case loop_4 (*con loopEn ... e_55)*) of
      loopEnv_4 => L_1806
  block L_1806 (env_700: unit)
    call tail loop_16 (env_700, x_2670)
  block L_1802 ()
    return (b_8)
fun init_1 (env_701: (lambdas_26, (t_23) ref) tuple, x_2672: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1807 ()
  block L_1807 ()
    val current_3: lambdas_26 = #0 (env_701)
    val r_1: (t_23) ref = #1 (env_701)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1808
  block L_1808 (env_702: unit)
    call L_1809 (gcState_1 (env_702, x_1365 (*()*))) handle _ => raise
  block L_1809 (x_2673: cpointer)
    val x_2674: cpointer =
      prim CFunction {args = (cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer), res = Some CPointer},
                      return = cpointer,
                      symbolScope = private,
                      target = GC_getProfileCurrent} (x_2673)
    case make_0 (*con makeEn ... e_54)*) of
      makeEnv_0 => L_1810
  block L_1810 (env_703: unit)
    call L_1811 (make_1 (env_703, x_2674)) handle _ => raise
  block L_1811 (x_2675: t_23)
    case x_2675 of
      T_6 => L_1812
  block L_1812 (x_2676: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2679: cpointer = #2 (x_2676)
    val x_2678: (bool) ref = #1 (x_2676)
    val x_2677: (bool) ref = #0 (x_2676)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1813
  block L_1813 (env_704: unit)
    call L_1814 (not_1 (env_704, isOn_0 (*con false*))) handle _ => raise
  block L_1814 (x_2680: bool)
    case x_2680 of
      true => L_1816 | false => L_1815
  block L_1815 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1817
  block L_1817 (env_705: unit)
    call L_1818 (x_2648 (env_705, x_2678)) handle _ => raise
  block L_1818 (x_2681: bool)
    case x_2681 of
      true => L_1820 | false => L_1819
  block L_1819 ()
    case current_3 of
      currentEnv_0 => L_1821
  block L_1821 (env_706: (t_23) ref)
    call L_1822 (current_2 (env_706, x_1370 (*()*))) handle _ => raise
  block L_1822 (x_2682: t_23)
    case x_2682 of
      T_6 => L_1823
  block L_1823 (x_2683: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2685: (bool) ref = #0 (x_2683)
    val x_2684: ((bool) ref, bool) tuple = (x_2685, x_1371 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1824
  block L_1824 (env_707: unit)
    call L_1825 (x_2686 (env_707, x_2684)) handle _ => raise
  block L_1825 (x_2687: unit)
    val x_2688: ((bool) ref, bool) tuple = (x_2677, x_1372 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1826
  block L_1826 (env_708: unit)
    call L_1827 (x_2686 (env_708, x_2688)) handle _ => raise
  block L_1827 (x_2689: unit)
    val _: unit = prim Ref_assign[t_23] (r_1, x_2675)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1828
  block L_1828 (env_709: unit)
    call L_1829 (gcState_1 (env_709, x_1373 (*()*))) handle _ => raise
  block L_1829 (x_2690: cpointer)
    val _: unit =
      prim CFunction {args = (cpointer, cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_setProfileCurrent} (x_2690, x_2679)
    return (x_1374 (*()*))
  block L_1820 ()
    raise (x_1369 (*con Fail_0 (x_1368)*))
  block L_1816 ()
    return (x_1366 (*()*))
fun current_2 (env_710: (t_23) ref, x_2691: unit):
  {returns = Some (t_23), raises = Some (exn)} =
L_1830 ()
  block L_1830 ()
    val x_2692: t_23 = prim Ref_deref[t_23] (env_710)
    return (x_2692)
fun make_1 (env_711: unit, x_2693: cpointer):
  {returns = Some (t_23), raises = Some (exn)} =
L_1831 ()
  block L_1831 ()
    val x_2697: (bool) ref = prim Ref_ref[bool] (x_1363 (*con false*))
    val x_2696: (bool) ref = prim Ref_ref[bool] (x_1364 (*con false*))
    val x_2695: ((bool) ref, (bool) ref, cpointer) tuple =
      (x_2697, x_2696, x_2693)
    val x_2694: t_23 = con T_6 (x_2695)
    return (x_2694)
fun defaultTopLevelHandler_0 (env_712:
                                (lambdas_32, lambdas_31, lambdas_30, word32) tuple,
                              x_2698: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_1832 ()
  block L_1832 ()
    val exnMessage_1: lambdas_32 = #0 (env_712)
    val concat_1: lambdas_31 = #1 (env_712)
    val exit_1: lambdas_30 = #2 (env_712)
    val failure_1: word32 = #3 (env_712)
    case exnMessage_1 of
      exnMessageEnv_0 => L_1833
  block L_1833 (env_713: (list_0) ref)
    call L_1834 (exnMessage_2 (env_713, x_2698)) handle _ => L_1835
  block L_1834 (x_2699: (word8) vector)
    val x_2703: ((word8) vector, list_7) tuple =
      (x_2699, x_1355 (*con ::_1 (x_1354)*))
    val x_2702: list_7 = con ::_1 (x_2703)
    val x_2701: ((word8) vector, list_7) tuple =
      (x_1356 (*"unhandled ... on: "*), x_2702)
    val x_2700: list_7 = con ::_1 (x_2701)
    case concat_1 of
      concatEnv_0 => L_1836
  block L_1836 (env_714: (lambdas_494, lambdas_485, lambdas_495) tuple)
    call L_1837 (concat_2 (env_714, x_2700)) handle _ => L_1835
  block L_1837 (x_2704: (word8) vector)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1838
  block L_1838 (env_715: unit)
    call L_1839 (print_1 (env_715, x_2704)) handle _ => L_1835
  block L_1839 (x_2705: unit)
    case exit_1 of
      exitEnv_0 => L_1840
  block L_1840 (env_716:
                  ((bool) ref, (list_2) ref, lambdas_483, lambdas_31) tuple)
    call L_1841 (exit_2 (env_716, failure_1)) handle _ => L_1835
  block L_1841 (x_2706: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1842
  block L_1842 (env_717: unit)
    call L_1843 (print_1 (env_717, x_1357 (*"Top-level ... d.\n"*))) handle _ => L_1835
  block L_1843 (x_2707: unit)
    case exit_1 of
      exitEnv_0 => L_1844
  block L_1844 (env_718:
                  ((bool) ref, (list_2) ref, lambdas_483, lambdas_31) tuple)
    call L_1845 (exit_2 (env_718, failure_1)) handle _ => L_1835
  block L_1835 (x_2708: exn)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1846
  block L_1846 (env_719: unit)
    call L_1847 (print_1 (env_719, x_1358 (*"Top-level ... n.\n"*))) handle _ => raise
  block L_1847 (x_2709: unit)
    case halt_0 (*con haltEn ... e_52)*) of
      haltEnv_0 => L_1848
  block L_1848 (env_720: unit)
    call L_1849 (halt_1 (env_720, failure_1)) handle _ => raise
  block L_1849 (x_2710: unit)
    raise (x_1361 (*con Fail_0 (x_1360)*))
  block L_1845 (x_2711: unit)
    return (x_2711)
fun defaultTopLevelSuffix_0 (env_721: (lambdas_30, word32, word32) tuple,
                             x_2712: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1850 ()
  block L_1850 ()
    val exit_3: lambdas_30 = #0 (env_721)
    val success_1: word32 = #1 (env_721)
    val failure_2: word32 = #2 (env_721)
    case exit_3 of
      exitEnv_0 => L_1851
  block L_1851 (env_722:
                  ((bool) ref, (list_2) ref, lambdas_483, lambdas_31) tuple)
    call L_1852 (exit_2 (env_722, success_1)) handle _ => L_1853
  block L_1852 (x_2713: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1854
  block L_1854 (env_723: unit)
    call L_1855 (print_1 (env_723, x_1347 (*"Top-level ... d.\n"*))) handle _ => L_1853
  block L_1855 (x_2714: unit)
    case exit_3 of
      exitEnv_0 => L_1856
  block L_1856 (env_724:
                  ((bool) ref, (list_2) ref, lambdas_483, lambdas_31) tuple)
    call L_1857 (exit_2 (env_724, failure_2)) handle _ => L_1853
  block L_1853 (x_2715: exn)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1858
  block L_1858 (env_725: unit)
    call L_1859 (print_1 (env_725, x_1348 (*"Top-level ... n.\n"*))) handle _ => raise
  block L_1859 (x_2716: unit)
    case halt_0 (*con haltEn ... e_52)*) of
      haltEnv_0 => L_1860
  block L_1860 (env_726: unit)
    call L_1861 (halt_1 (env_726, failure_2)) handle _ => raise
  block L_1861 (x_2717: unit)
    raise (x_1351 (*con Fail_0 (x_1350)*))
  block L_1857 (x_2718: unit)
    return (x_2718)
fun exit_2 (env_727: ((bool) ref, (list_2) ref, lambdas_483, lambdas_31) tuple,
            x_2719: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1862 ()
  block L_1862 ()
    val exiting_1: (bool) ref = #0 (env_727)
    val atExit_1: (list_2) ref = #1 (env_727)
    val x_2720: lambdas_483 = #2 (env_727)
    val concat_3: lambdas_31 = #3 (env_727)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1863
  block L_1863 (env_728: unit)
    call L_1864 (x_2648 (env_728, exiting_1)) handle _ => raise
  block L_1864 (x_2721: bool)
    case x_2721 of
      true => L_1866 | false => L_1865
  block L_1865 ()
    val x_2722: ((bool) ref, bool) tuple = (exiting_1, x_1329 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1867
  block L_1867 (env_729: unit)
    call L_1868 (x_2686 (env_729, x_2722)) handle _ => raise
  block L_1868 (x_2723: unit)
    case toRep_0 (*con toRepE ... _809)*) of
      toRepEnv_0 => L_1869
  block L_1869 (env_730: unit)
    call L_1870 (toRep_3 (env_730, x_2719)) handle _ => raise
  block L_1870 (x_2724: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1871
  block L_1871 (env_731: unit)
    call L_1872 (sextdFromInt32ToInt32_1 (env_731, x_2724)) handle _ => raise
  block L_1872 (x_2725: word32)
    val x_2726: (word32, word32) tuple = (x_1330 (*0x0:w32*), x_2725)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1873
  block L_1873 (env_732: unit)
    call L_1874 (<=_4 (env_732, x_2726)) handle _ => raise
  block L_1874 (x_2727: bool)
    case x_2727 of
      true => L_1876 | false => L_1875
  block L_1875 ()
    goto L_1877 (x_1332 (*con false*))
  block L_1876 ()
    val x_2728: (word32, word32) tuple = (x_2725, x_1331 (*0x100:w32*))
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1878
  block L_1878 (env_733: unit)
    call L_1877 (<_5 (env_733, x_2728)) handle _ => raise
  block L_1877 (x_2729: bool)
    case x_2729 of
      true => L_1880 | false => L_1879
  block L_1879 ()
    case x_2720 of
      xEnv_234 => L_1881
  block L_1881 (env_734:
                  (word32,
                   lambdas_250,
                   word32,
                   word32,
                   word32,
                   (word8) array,
                   lambdas_484,
                   (bool) ref) tuple)
    call L_1882 (x_2407 (env_734, x_2725)) handle _ => raise
  block L_1882 (x_2730: (word8) vector)
    val x_2734: ((word8) vector, list_7) tuple =
      (x_2730, x_1345 (*con ::_1 (x_1344)*))
    val x_2733: list_7 = con ::_1 (x_2734)
    val x_2732: ((word8) vector, list_7) tuple =
      (x_1346 (*"MLton.Exit.exit("*), x_2733)
    val x_2731: list_7 = con ::_1 (x_2732)
    case concat_3 of
      concatEnv_0 => L_1883
  block L_1883 (env_735: (lambdas_494, lambdas_485, lambdas_495) tuple)
    call L_1884 (concat_2 (env_735, x_2731)) handle _ => raise
  block L_1884 (x_2735: (word8) vector)
    val x_2737: ((unit) ref, (word8) vector) tuple = (x_1456, x_2735)
    val x_2736: exn = con Fail_0 (x_2737)
    raise (x_2736)
  block L_1880 ()
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1885
  block L_1885 (env_736: unit)
    call L_1886 (x_2316 (env_736, atExit_1)) handle _ => raise
  block L_1886 (x_2738: list_2)
    val x_2739: (list_2, unit) tuple = (x_2738, x_1333 (*()*))
    case loop_3 (*con loopEn ... e_53)*) of
      loopEnv_3 => L_1887
  block L_1887 (env_737: unit)
    call L_1888 (loop_17 (env_737, x_2739)) handle _ => raise
  block L_1888 (x_2740: unit)
    case halt_0 (*con haltEn ... e_52)*) of
      haltEnv_0 => L_1889
  block L_1889 (env_738: unit)
    call L_1890 (halt_1 (env_738, x_2719)) handle _ => raise
  block L_1890 (x_2741: unit)
    raise (x_1338 (*con Fail_0 (x_1337)*))
  block L_1866 ()
    raise (x_1328 (*con Fail_0 (x_1327)*))
fun loop_17 (env_739: unit, x_2742: (list_2, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_1891 ()
  block L_1891 ()
    val b_9: unit = #1 (x_2742)
    val l_1: list_2 = #0 (x_2742)
    case l_1 of
      nil_4 => L_1893 | ::_5 => L_1892
  block L_1892 (x_2743: (lambdas_3, list_2) tuple)
    val x_2745: list_2 = #1 (x_2743)
    val x_2744: lambdas_3 = #0 (x_2743)
    case x_2744 of
      xEnv_245 => L_1896 | xEnv_244 => L_1895 | xEnv_243 => L_1894
  block L_1894 (env_740: (lambdas_23, (list_6) ref) tuple)
    call L_1897 (x_2637 (env_740, x_1334 (*()*))) handle _ => L_1898
  block L_1895 (env_741: (list_5) ref)
    call L_1897 (x_2746 (env_741, x_1334 (*()*))) handle _ => L_1898
  block L_1896 (env_742:
                  ((list_6) ref, lambdas_27, (word8) vector, lambdas_26) tuple)
    call L_1897 (x_2639 (env_742, x_1334 (*()*))) handle _ => L_1898
  block L_1898 (x_2747: exn)
    goto L_1897 (x_1335 (*()*))
  block L_1897 (x_2748: unit)
    val x_2749: (list_2, unit) tuple = (x_2745, x_2748)
    case loop_3 (*con loopEn ... e_53)*) of
      loopEnv_3 => L_1899
  block L_1899 (env_743: unit)
    call tail loop_17 (env_743, x_2749)
  block L_1893 ()
    return (b_9)
fun halt_1 (env_744: unit, x_2750: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1900 ()
  block L_1900 ()
    case toRep_0 (*con toRepE ... _809)*) of
      toRepEnv_0 => L_1901
  block L_1901 (env_745: unit)
    call L_1902 (toRep_3 (env_745, x_2750)) handle _ => raise
  block L_1902 (x_2751: word32)
    val _: unit = prim MLton_halt (x_2751)
    case bug_0 (*con bugEnv_0 (x_189)*) of
      bugEnv_0 => L_1903
  block L_1903 (env_746: unit)
    call tail bug_1 (env_746, x_1325 (*"MLton.Exit.halt"*))
fun x_2390 (env_747: unit, x_2752: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_1904 ()
  block L_1904 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1905
  block L_1905 (env_748: unit)
    call tail sextdFromInt32ToInt32_1 (env_748, x_2752)
fun x_2753 (env_749:
              (word32,
               lambdas_489,
               lambdas_488,
               lambdas_487,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2754: t_19):
  {returns = Some (t_0), raises = Some (exn)} =
L_1906 ()
  block L_1906 ()
    val again_1: word32 = #0 (env_749)
    val putV_1: lambdas_489 = #1 (env_749)
    val setfl_1: lambdas_488 = #2 (env_749)
    val x_2755: lambdas_487 = #3 (env_749)
    val appendFlgs_1: word32 = #4 (env_749)
    val blocking_1: (bool) ref = #5 (env_749)
    val closed_1: (bool) ref = #6 (env_749)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1907
  block L_1907 (env_750: unit)
    call L_1908 (x_2648 (env_750, closed_1)) handle _ => L_1909
  block L_1908 (x_2756: bool)
    case x_2756 of
      true => L_1911 | false => L_1910
  block L_1910 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1912
  block L_1912 (env_751: unit)
    call L_1913 (x_2648 (env_751, blocking_1)) handle _ => L_1909
  block L_1913 (x_2757: bool)
    case x_2757 of
      true => L_1915 | false => L_1914
  block L_1914 ()
    val x_2758: ((bool) ref, bool) tuple = (blocking_1, x_1309 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1916
  block L_1916 (env_752: unit)
    call L_1917 (x_2686 (env_752, x_2758)) handle _ => L_1909
  block L_1917 (x_2759: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1918
  block L_1918 (env_753: unit)
    call L_1919 (x_2648 (env_753, blocking_1)) handle _ => L_1909
  block L_1919 (x_2760: bool)
    case x_2760 of
      true => L_1921 | false => L_1920
  block L_1920 ()
    val x_2764: (word32, list_4) tuple = (appendFlgs_1, x_1312 (*con nil_10*))
    val x_2763: list_4 = con ::_2 (x_2764)
    val x_2762: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2763)
    val x_2761: list_4 = con ::_2 (x_2762)
    case x_2755 of
      xEnv_240 => L_1922
  block L_1922 (env_754: word32)
    call L_1923 (x_2344 (env_754, x_2761)) handle _ => L_1909
  block L_1921 ()
    goto L_1923 (appendFlgs_1)
  block L_1923 (x_2765: word32)
    val x_2766: (word32, word32) tuple = (x_1069 (*0x1:w32*), x_2765)
    case setfl_1 of
      setflEnv_0 => L_1924
  block L_1924 (env_755:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_45) tuple)
    call L_1925 (setfl_2 (env_755, x_2766)) handle _ => L_1909
  block L_1915 ()
    goto L_1925 (x_1311 (*()*))
  block L_1925 (x_2767: unit)
    val x_2768: (word32, t_19) tuple = (x_1069 (*0x1:w32*), x_2754)
    case putV_1 of
      putVEnv_0 => L_1926
  block L_1926 (env_756:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple)
    call L_1927 (putV_2 (env_756, x_2768)) handle _ => L_1909
  block L_1927 (x_2769: word32)
    val x_2770: t_0 = con SOME_0 (x_2769)
    return (x_2770)
  block L_1911 ()
    goto L_1909 (x_1052 (*con Closed ... 1051)*))
  block L_1909 (x_2771: exn)
    case x_2771 of
      SysErr_0 => L_1928 | _ => L_1929
  block L_1929 ()
    call tail x_2772 (x_2771, x_1313 (*()*))
  block L_1928 (x_2773: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_2776: ((word8) vector, t_0) tuple = #1 (x_2773)
    val x_2775: (unit) ref = #0 (x_2773)
    val x_2774: bool = prim MLton_equal[(unit) ref] (x_2775, x_1476)
    case x_2774 of
      true => L_1931 | false => L_1930
  block L_1930 ()
    call tail x_2772 (x_2771, x_1315 (*()*))
  block L_1931 ()
    val x_2779: t_0 = #1 (x_2776)
    val x_2778: t_0 = con SOME_0 (again_1)
    val x_2777: (t_0, t_0) tuple = (x_2779, x_2778)
    case x_93 (*con xEnv_13 (x_92)*) of
      xEnv_13 => L_1932
  block L_1932 (env_757: unit)
    call L_1933 (x_2780 (env_757, x_2777)) handle _ => raise
  block L_1933 (x_2781: bool)
    case x_2781 of
      true => L_1935 | false => L_1934
  block L_1934 ()
    raise (x_2771)
  block L_1935 ()
    return (x_1314 (*con NONE_1*))
fun x_2772 (env_758: exn, unit_5: unit):
  {returns = Some (t_0), raises = Some (exn)} =
L_1936 ()
  block L_1936 ()
    raise (env_758)
fun x_2626 (env_759:
              (lambdas_489,
               lambdas_488,
               lambdas_487,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2782: t_19):
  {returns = Some (word32), raises = Some (exn)} =
L_1937 ()
  block L_1937 ()
    val putV_3: lambdas_489 = #0 (env_759)
    val setfl_3: lambdas_488 = #1 (env_759)
    val x_2783: lambdas_487 = #2 (env_759)
    val appendFlgs_2: word32 = #3 (env_759)
    val blocking_2: (bool) ref = #4 (env_759)
    val closed_2: (bool) ref = #5 (env_759)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1938
  block L_1938 (env_760: unit)
    call L_1939 (x_2648 (env_760, closed_2)) handle _ => raise
  block L_1939 (x_2784: bool)
    case x_2784 of
      true => L_1941 | false => L_1940
  block L_1940 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1942
  block L_1942 (env_761: unit)
    call L_1943 (x_2648 (env_761, blocking_2)) handle _ => raise
  block L_1943 (x_2785: bool)
    case x_2785 of
      true => L_1945 | false => L_1944
  block L_1944 ()
    val x_2786: ((bool) ref, bool) tuple = (blocking_2, x_1305 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1946
  block L_1946 (env_762: unit)
    call L_1947 (x_2686 (env_762, x_2786)) handle _ => raise
  block L_1947 (x_2787: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1948
  block L_1948 (env_763: unit)
    call L_1949 (x_2648 (env_763, blocking_2)) handle _ => raise
  block L_1949 (x_2788: bool)
    case x_2788 of
      true => L_1951 | false => L_1950
  block L_1950 ()
    val x_2792: (word32, list_4) tuple = (appendFlgs_2, x_1308 (*con nil_10*))
    val x_2791: list_4 = con ::_2 (x_2792)
    val x_2790: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2791)
    val x_2789: list_4 = con ::_2 (x_2790)
    case x_2783 of
      xEnv_240 => L_1952
  block L_1952 (env_764: word32)
    call L_1953 (x_2344 (env_764, x_2789)) handle _ => raise
  block L_1951 ()
    goto L_1953 (appendFlgs_2)
  block L_1953 (x_2793: word32)
    val x_2794: (word32, word32) tuple = (x_1069 (*0x1:w32*), x_2793)
    case setfl_3 of
      setflEnv_0 => L_1954
  block L_1954 (env_765:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_45) tuple)
    call L_1955 (setfl_2 (env_765, x_2794)) handle _ => raise
  block L_1945 ()
    goto L_1955 (x_1307 (*()*))
  block L_1955 (x_2795: unit)
    val x_2796: (word32, t_19) tuple = (x_1069 (*0x1:w32*), x_2782)
    case putV_3 of
      putVEnv_0 => L_1956
  block L_1956 (env_766:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple)
    call tail putV_2 (env_766, x_2796)
  block L_1941 ()
    raise (x_1052 (*con Closed ... 1051)*))
fun x_2797 (env_767:
              (word32,
               lambdas_491,
               lambdas_488,
               lambdas_487,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2798: t_13):
  {returns = Some (t_0), raises = Some (exn)} =
L_1957 ()
  block L_1957 ()
    val again_2: word32 = #0 (env_767)
    val putA_1: lambdas_491 = #1 (env_767)
    val setfl_4: lambdas_488 = #2 (env_767)
    val x_2799: lambdas_487 = #3 (env_767)
    val appendFlgs_3: word32 = #4 (env_767)
    val blocking_3: (bool) ref = #5 (env_767)
    val closed_3: (bool) ref = #6 (env_767)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1958
  block L_1958 (env_768: unit)
    call L_1959 (x_2648 (env_768, closed_3)) handle _ => L_1960
  block L_1959 (x_2800: bool)
    case x_2800 of
      true => L_1962 | false => L_1961
  block L_1961 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1963
  block L_1963 (env_769: unit)
    call L_1964 (x_2648 (env_769, blocking_3)) handle _ => L_1960
  block L_1964 (x_2801: bool)
    case x_2801 of
      true => L_1966 | false => L_1965
  block L_1965 ()
    val x_2802: ((bool) ref, bool) tuple = (blocking_3, x_1298 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1967
  block L_1967 (env_770: unit)
    call L_1968 (x_2686 (env_770, x_2802)) handle _ => L_1960
  block L_1968 (x_2803: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1969
  block L_1969 (env_771: unit)
    call L_1970 (x_2648 (env_771, blocking_3)) handle _ => L_1960
  block L_1970 (x_2804: bool)
    case x_2804 of
      true => L_1972 | false => L_1971
  block L_1971 ()
    val x_2808: (word32, list_4) tuple = (appendFlgs_3, x_1301 (*con nil_10*))
    val x_2807: list_4 = con ::_2 (x_2808)
    val x_2806: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2807)
    val x_2805: list_4 = con ::_2 (x_2806)
    case x_2799 of
      xEnv_240 => L_1973
  block L_1973 (env_772: word32)
    call L_1974 (x_2344 (env_772, x_2805)) handle _ => L_1960
  block L_1972 ()
    goto L_1974 (appendFlgs_3)
  block L_1974 (x_2809: word32)
    val x_2810: (word32, word32) tuple = (x_1069 (*0x1:w32*), x_2809)
    case setfl_4 of
      setflEnv_0 => L_1975
  block L_1975 (env_773:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_45) tuple)
    call L_1976 (setfl_2 (env_773, x_2810)) handle _ => L_1960
  block L_1966 ()
    goto L_1976 (x_1300 (*()*))
  block L_1976 (x_2811: unit)
    val x_2812: (word32, t_13) tuple = (x_1069 (*0x1:w32*), x_2798)
    case putA_1 of
      putAEnv_0 => L_1977
  block L_1977 (env_774:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple)
    call L_1978 (putA_2 (env_774, x_2812)) handle _ => L_1960
  block L_1978 (x_2813: word32)
    val x_2814: t_0 = con SOME_0 (x_2813)
    return (x_2814)
  block L_1962 ()
    goto L_1960 (x_1052 (*con Closed ... 1051)*))
  block L_1960 (x_2815: exn)
    case x_2815 of
      SysErr_0 => L_1979 | _ => L_1980
  block L_1980 ()
    call tail x_2816 (x_2815, x_1302 (*()*))
  block L_1979 (x_2817: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_2820: ((word8) vector, t_0) tuple = #1 (x_2817)
    val x_2819: (unit) ref = #0 (x_2817)
    val x_2818: bool = prim MLton_equal[(unit) ref] (x_2819, x_1476)
    case x_2818 of
      true => L_1982 | false => L_1981
  block L_1981 ()
    call tail x_2816 (x_2815, x_1304 (*()*))
  block L_1982 ()
    val x_2823: t_0 = #1 (x_2820)
    val x_2822: t_0 = con SOME_0 (again_2)
    val x_2821: (t_0, t_0) tuple = (x_2823, x_2822)
    case x_93 (*con xEnv_13 (x_92)*) of
      xEnv_13 => L_1983
  block L_1983 (env_775: unit)
    call L_1984 (x_2780 (env_775, x_2821)) handle _ => raise
  block L_1984 (x_2824: bool)
    case x_2824 of
      true => L_1986 | false => L_1985
  block L_1985 ()
    raise (x_2815)
  block L_1986 ()
    return (x_1303 (*con NONE_1*))
fun x_2816 (env_776: exn, unit_6: unit):
  {returns = Some (t_0), raises = Some (exn)} =
L_1987 ()
  block L_1987 ()
    raise (env_776)
fun x_2825 (env_777:
              (lambdas_491,
               lambdas_488,
               lambdas_487,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2826: t_13):
  {returns = Some (word32), raises = Some (exn)} =
L_1988 ()
  block L_1988 ()
    val putA_3: lambdas_491 = #0 (env_777)
    val setfl_5: lambdas_488 = #1 (env_777)
    val x_2827: lambdas_487 = #2 (env_777)
    val appendFlgs_4: word32 = #3 (env_777)
    val blocking_4: (bool) ref = #4 (env_777)
    val closed_4: (bool) ref = #5 (env_777)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1989
  block L_1989 (env_778: unit)
    call L_1990 (x_2648 (env_778, closed_4)) handle _ => raise
  block L_1990 (x_2828: bool)
    case x_2828 of
      true => L_1992 | false => L_1991
  block L_1991 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1993
  block L_1993 (env_779: unit)
    call L_1994 (x_2648 (env_779, blocking_4)) handle _ => raise
  block L_1994 (x_2829: bool)
    case x_2829 of
      true => L_1996 | false => L_1995
  block L_1995 ()
    val x_2830: ((bool) ref, bool) tuple = (blocking_4, x_1294 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1997
  block L_1997 (env_780: unit)
    call L_1998 (x_2686 (env_780, x_2830)) handle _ => raise
  block L_1998 (x_2831: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1999
  block L_1999 (env_781: unit)
    call L_2000 (x_2648 (env_781, blocking_4)) handle _ => raise
  block L_2000 (x_2832: bool)
    case x_2832 of
      true => L_2002 | false => L_2001
  block L_2001 ()
    val x_2836: (word32, list_4) tuple = (appendFlgs_4, x_1297 (*con nil_10*))
    val x_2835: list_4 = con ::_2 (x_2836)
    val x_2834: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2835)
    val x_2833: list_4 = con ::_2 (x_2834)
    case x_2827 of
      xEnv_240 => L_2003
  block L_2003 (env_782: word32)
    call L_2004 (x_2344 (env_782, x_2833)) handle _ => raise
  block L_2002 ()
    goto L_2004 (appendFlgs_4)
  block L_2004 (x_2837: word32)
    val x_2838: (word32, word32) tuple = (x_1069 (*0x1:w32*), x_2837)
    case setfl_5 of
      setflEnv_0 => L_2005
  block L_2005 (env_783:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_45) tuple)
    call L_2006 (setfl_2 (env_783, x_2838)) handle _ => raise
  block L_1996 ()
    goto L_2006 (x_1296 (*()*))
  block L_2006 (x_2839: unit)
    val x_2840: (word32, t_13) tuple = (x_1069 (*0x1:w32*), x_2826)
    case putA_3 of
      putAEnv_0 => L_2007
  block L_2007 (env_784:
                  (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple)
    call tail putA_2 (env_784, x_2840)
  block L_1992 ()
    raise (x_1052 (*con Closed ... 1051)*))
fun close_1 (env_785:
               (lambdas_45, (lambdas_46) ref, (bool) ref, word32, (bool) ref) tuple,
             x_2841: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_2008 ()
  block L_2008 ()
    val raiseSys_2: lambdas_45 = #0 (env_785)
    val blocker_1: (lambdas_46) ref = #1 (env_785)
    val restartFlag_1: (bool) ref = #2 (env_785)
    val intr_1: word32 = #3 (env_785)
    val closed_5: (bool) ref = #4 (env_785)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2009
  block L_2009 (env_786: unit)
    call L_2010 (x_2648 (env_786, closed_5)) handle _ => raise
  block L_2010 (x_2842: bool)
    case x_2842 of
      true => L_2012 | false => L_2011
  block L_2011 ()
    val x_2843: ((bool) ref, bool) tuple = (closed_5, x_1250 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_2013
  block L_2013 (env_787: unit)
    call L_2014 (x_2686 (env_787, x_2843)) handle _ => raise
  block L_2014 (x_2844: unit)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2015
  block L_2015 (env_788: unit)
    call L_2016 (sextdFromInt32ToInt32_1 (env_788, x_1253 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2016 (x_2845: word32)
    val tuple_100:
      (word32, (bool) ref, word32, (lambdas_46) ref, lambdas_45) tuple =
      (intr_1, restartFlag_1, x_2845, blocker_1, raiseSys_2)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2017
  block L_2017 (env_789: unit)
    call L_2018 (atomicBegin_1 (env_789, x_1282 (*()*))) handle _ => raise
  block L_2018 (x_2846: unit)
    case x_1252 (*con xEnv_68 (x_1251)*) of
      xEnv_68 => L_2019
  block L_2019 (env_790: unit)
    call L_2020 (x_2847 (env_790, x_1283 (*()*))) handle _ => L_2021
  block L_2021 (x_2848: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2022
  block L_2022 (env_791: unit)
    call L_2023 (atomicEnd_1 (env_791, x_1287 (*()*))) handle _ => raise
  block L_2023 (x_2849: unit)
    raise (x_2848)
  block L_2020 (return_0: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2024
  block L_2024 (env_792: unit)
    call L_2025 (x_2850 (env_792, return_0)) handle _ => raise
  block L_2025 (return_1: word32)
    val x_2851: (word32, word32) tuple = (x_2845, return_1)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2026
  block L_2026 (env_793: unit)
    call L_2027 (x_2054 (env_793, x_2851)) handle _ => raise
  block L_2027 (x_2852: bool)
    case x_2852 of
      true => L_2029 | false => L_2028
  block L_2028 ()
    case x_1285 (*con xEnv_71 (x_1284)*) of
      xEnv_71 => L_2030
  block L_2030 (env_794: unit)
    call L_2031 (x_2853 (env_794, return_1)) handle _ => L_2032
  block L_2032 (x_2854: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2033
  block L_2033 (env_795: unit)
    call L_2034 (atomicEnd_1 (env_795, x_1290 (*()*))) handle _ => raise
  block L_2034 (x_2855: unit)
    raise (x_2854)
  block L_2031 (x_2856: word32)
    goto L_2035 (x_2856)
  block L_2035 (x_2857: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2036
  block L_2036 (env_796: unit)
    call L_2037 (atomicEnd_1 (env_796, x_1289 (*()*))) handle _ => raise
  block L_2037 (x_2858: unit)
    return (x_1291 (*()*))
  block L_2029 ()
    val x_2859: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2038
  block L_2038 (env_797: unit)
    call L_2039 (fromRep_1 (env_797, x_2859)) handle _ => raise
  block L_2039 (e_0: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2040
  block L_2040 (env_798: unit)
    call L_2041 (atomicEnd_1 (env_798, x_1288 (*()*))) handle _ => raise
  block L_2041 (x_2860: unit)
    val x_2861: (word32, list_10) tuple = (e_0, x_1286 (*con nil_7*))
    call L_2042 (errUnblocked_0 (tuple_100, x_2861)) handle _ => raise
  block L_2042 (x_2862: word32)
    return (x_1291 (*()*))
  block L_2012 ()
    return (x_1249 (*()*))
fun x_2853 (env_799: unit, x_2863: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2043 ()
  block L_2043 ()
    return (x_2863)
fun errUnblocked_0 (env_800:
                      (word32, (bool) ref, word32, (lambdas_46) ref, lambdas_45) tuple,
                    x_2864: (word32, list_10) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2044 ()
  block L_2044 ()
    val intr_2: word32 = #0 (env_800)
    val restartFlag_2: (bool) ref = #1 (env_800)
    val x_2865: word32 = #2 (env_800)
    val blocker_2: (lambdas_46) ref = #3 (env_800)
    val raiseSys_3: lambdas_45 = #4 (env_800)
    val handlers_0: list_10 = #1 (x_2864)
    val errno_0: word32 = #0 (x_2864)
    call L_2045 (loop_18 (errno_0, handlers_0)) handle _ => raise
  block L_2045 (x_2866: t_26)
    case x_2866 of
      NONE_7 => L_2047 | SOME_19 => L_2046
  block L_2046 (x_2867: (word32, lambdas_2) tuple)
    bug
  block L_2047 ()
    val x_2868: (word32, word32) tuple = (errno_0, intr_2)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2048
  block L_2048 (env_801: unit)
    call L_2049 (x_2054 (env_801, x_2868)) handle _ => raise
  block L_2049 (x_2869: bool)
    case x_2869 of
      true => L_2051 | false => L_2050
  block L_2050 ()
    goto L_2052 (x_1255 (*con false*))
  block L_2051 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2053
  block L_2053 (env_802: unit)
    call L_2052 (x_2648 (env_802, restartFlag_2)) handle _ => raise
  block L_2052 (x_2870: bool)
    case x_2870 of
      true => L_2055 | false => L_2054
  block L_2054 ()
    case raiseSys_3 of
      raiseSysEnv_0 => L_2056
  block L_2056 (env_803: lambdas_223)
    call tail raiseSys_4 (env_803, errno_0)
  block L_2055 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2057
  block L_2057 (env_804: unit)
    call L_2058 (atomicState_1 (env_804, x_1256 (*()*))) handle _ => raise
  block L_2058 (x_2871: word32)
    val x_2872: (word32, word32) tuple = (x_2871, x_1257 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2059
  block L_2059 (env_805: unit)
    call L_2060 (x_2054 (env_805, x_2872)) handle _ => raise
  block L_2060 (x_2873: bool)
    case x_2873 of
      true => L_2062 | false => L_2061
  block L_2061 ()
    val x_2874: lambdas_46 = prim Ref_deref[lambdas_46] (blocker_2)
    case x_2874 of
      xEnv_53 => L_2063
  block L_2063 (env_806: unit)
    call L_2064 (x_2875 (env_806, x_1267 (*()*))) handle _ => raise
  block L_2064 (finish_0: lambdas_224)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2065
  block L_2065 (env_807: unit)
    call L_2066 (atomicBegin_1 (env_807, x_1268 (*()*))) handle _ => L_2067
  block L_2066 (x_2876: unit)
    case x_1252 (*con xEnv_68 (x_1251)*) of
      xEnv_68 => L_2068
  block L_2068 (env_808: unit)
    call L_2069 (x_2847 (env_808, x_1269 (*()*))) handle _ => L_2070
  block L_2070 (x_2877: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2071
  block L_2071 (env_809: unit)
    call L_2072 (atomicEnd_1 (env_809, x_1273 (*()*))) handle _ => L_2067
  block L_2072 (x_2878: unit)
    goto L_2067 (x_2877)
  block L_2069 (return_2: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2073
  block L_2073 (env_810: unit)
    call L_2074 (x_2850 (env_810, return_2)) handle _ => L_2067
  block L_2074 (return_3: word32)
    val x_2879: (word32, word32) tuple = (x_2865, return_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2075
  block L_2075 (env_811: unit)
    call L_2076 (x_2054 (env_811, x_2879)) handle _ => L_2067
  block L_2076 (x_2880: bool)
    case x_2880 of
      true => L_2078 | false => L_2077
  block L_2077 ()
    case x_1271 (*con xEnv_70 (x_1270)*) of
      xEnv_70 => L_2079
  block L_2079 (env_812: unit)
    call L_2080 (x_2881 (env_812, return_3)) handle _ => L_2081
  block L_2081 (x_2882: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2082
  block L_2082 (env_813: unit)
    call L_2083 (atomicEnd_1 (env_813, x_1278 (*()*))) handle _ => L_2067
  block L_2083 (x_2883: unit)
    goto L_2067 (x_2882)
  block L_2080 (x_2884: word32)
    goto L_2084 (x_2884)
  block L_2084 (x_2885: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2085
  block L_2085 (env_814: unit)
    call L_2086 (atomicEnd_1 (env_814, x_1277 (*()*))) handle _ => L_2067
  block L_2086 (x_2886: unit)
    goto L_2087 (x_2885)
  block L_2078 ()
    val x_2887: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2088
  block L_2088 (env_815: unit)
    call L_2089 (fromRep_1 (env_815, x_2887)) handle _ => L_2067
  block L_2089 (e_1: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2090
  block L_2090 (env_816: unit)
    call L_2091 (atomicEnd_1 (env_816, x_1274 (*()*))) handle _ => L_2067
  block L_2091 (x_2888: unit)
    call L_2092 (loop_19 (e_1, x_1272 (*con nil_7*))) handle _ => L_2067
  block L_2092 (x_2889: t_26)
    case x_2889 of
      NONE_7 => L_2094 | SOME_19 => L_2093
  block L_2093 (x_2890: (word32, lambdas_2) tuple)
    bug
  block L_2094 ()
    case raiseSys_3 of
      raiseSysEnv_0 => L_2095
  block L_2095 (env_817: lambdas_223)
    call L_2087 (raiseSys_4 (env_817, e_1)) handle _ => L_2067
  block L_2067 (x_2891: exn)
    case finish_0 of
      xEnv_52 => L_2096
  block L_2096 (env_818: unit)
    call L_2097 (x_2892 (env_818, x_1280 (*()*))) handle _ => raise
  block L_2097 (x_2893: unit)
    raise (x_2891)
  block L_2087 (x_2894: word32)
    goto L_2098 (x_2894)
  block L_2098 (x_2895: word32)
    case finish_0 of
      xEnv_52 => L_2099
  block L_2099 (env_819: unit)
    call L_2100 (x_2892 (env_819, x_1279 (*()*))) handle _ => raise
  block L_2100 (x_2896: unit)
    return (x_2895)
  block L_2062 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2101
  block L_2101 (env_820: unit)
    call L_2102 (atomicBegin_1 (env_820, x_1258 (*()*))) handle _ => raise
  block L_2102 (x_2897: unit)
    case x_1252 (*con xEnv_68 (x_1251)*) of
      xEnv_68 => L_2103
  block L_2103 (env_821: unit)
    call L_2104 (x_2847 (env_821, x_1259 (*()*))) handle _ => L_2105
  block L_2105 (x_2898: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2106
  block L_2106 (env_822: unit)
    call L_2107 (atomicEnd_1 (env_822, x_1263 (*()*))) handle _ => raise
  block L_2107 (x_2899: unit)
    raise (x_2898)
  block L_2104 (return_4: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2108
  block L_2108 (env_823: unit)
    call L_2109 (x_2850 (env_823, return_4)) handle _ => raise
  block L_2109 (return_5: word32)
    val x_2900: (word32, word32) tuple = (x_2865, return_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2110
  block L_2110 (env_824: unit)
    call L_2111 (x_2054 (env_824, x_2900)) handle _ => raise
  block L_2111 (x_2901: bool)
    case x_2901 of
      true => L_2113 | false => L_2112
  block L_2112 ()
    case x_1261 (*con xEnv_69 (x_1260)*) of
      xEnv_69 => L_2114
  block L_2114 (env_825: unit)
    call L_2115 (x_2902 (env_825, return_5)) handle _ => L_2116
  block L_2116 (x_2903: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2117
  block L_2117 (env_826: unit)
    call L_2118 (atomicEnd_1 (env_826, x_1266 (*()*))) handle _ => raise
  block L_2118 (x_2904: unit)
    raise (x_2903)
  block L_2115 (x_2905: word32)
    goto L_2119 (x_2905)
  block L_2119 (x_2906: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2120
  block L_2120 (env_827: unit)
    call L_2121 (atomicEnd_1 (env_827, x_1265 (*()*))) handle _ => raise
  block L_2121 (x_2907: unit)
    return (x_2906)
  block L_2113 ()
    val x_2908: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2122
  block L_2122 (env_828: unit)
    call L_2123 (fromRep_1 (env_828, x_2908)) handle _ => raise
  block L_2123 (e_2: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2124
  block L_2124 (env_829: unit)
    call L_2125 (atomicEnd_1 (env_829, x_1264 (*()*))) handle _ => raise
  block L_2125 (x_2909: unit)
    val x_2910: (word32, list_10) tuple = (e_2, x_1262 (*con nil_7*))
    call tail errUnblocked_0 (env_800, x_2910)
fun loop_19 (env_830: word32, x_2911: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2126 ()
  block L_2126 ()
    case x_2911 of
      nil_7 => L_2128 | ::_11 => L_2127
  block L_2127 (x_2912: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_2915: list_10 = #1 (x_2912)
    val x_2914: (word32, lambdas_2) tuple = #0 (x_2912)
    val e'_0: word32 = #0 (x_2914)
    val x_2913: (word32, word32) tuple = (env_830, e'_0)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2129
  block L_2129 (env_831: unit)
    call L_2130 (x_2054 (env_831, x_2913)) handle _ => raise
  block L_2130 (x_2916: bool)
    case x_2916 of
      true => L_2132 | false => L_2131
  block L_2131 ()
    call tail loop_19 (env_830, x_2915)
  block L_2132 ()
    val x_2917: t_26 = con SOME_19 (x_2914)
    return (x_2917)
  block L_2128 ()
    return (x_1275 (*con NONE_7*))
fun x_2881 (env_832: unit, x_2918: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2133 ()
  block L_2133 ()
    return (x_2918)
fun x_2902 (env_833: unit, x_2919: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2134 ()
  block L_2134 ()
    return (x_2919)
fun loop_18 (env_834: word32, x_2920: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2135 ()
  block L_2135 ()
    case x_2920 of
      nil_7 => L_2137 | ::_11 => L_2136
  block L_2136 (x_2921: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_2924: list_10 = #1 (x_2921)
    val x_2923: (word32, lambdas_2) tuple = #0 (x_2921)
    val e'_1: word32 = #0 (x_2923)
    val x_2922: (word32, word32) tuple = (env_834, e'_1)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2138
  block L_2138 (env_835: unit)
    call L_2139 (x_2054 (env_835, x_2922)) handle _ => raise
  block L_2139 (x_2925: bool)
    case x_2925 of
      true => L_2141 | false => L_2140
  block L_2140 ()
    call tail loop_18 (env_834, x_2924)
  block L_2141 ()
    val x_2926: t_26 = con SOME_19 (x_2923)
    return (x_2926)
  block L_2137 ()
    return (x_1254 (*con NONE_7*))
fun x_2847 (env_836: unit, x_2927: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_2142 ()
  block L_2142 ()
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_2143
  block L_2143 (env_837: unit)
    call L_2144 (toRep_2 (env_837, x_1069 (*0x1:w32*))) handle _ => raise
  block L_2144 (x_2928: word32)
    val x_2929: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_IO_close} (x_2928)
    return (x_2929)
fun putA_2 (env_838:
              (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple,
            x_2930: (word32, t_13) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2145 ()
  block L_2145 ()
    val intr_3: word32 = #0 (env_838)
    val restartFlag_3: (bool) ref = #1 (env_838)
    val blocker_3: (lambdas_46) ref = #2 (env_838)
    val raiseSys_5: lambdas_54 = #3 (env_838)
    val incPos_1: lambdas_490 = #4 (env_838)
    val sl_0: t_13 = #1 (x_2930)
    val fd_0: word32 = #0 (x_2930)
    case base_2 (*con baseEn ... e_34)*) of
      baseEnv_2 => L_2146
  block L_2146 (env_839: unit)
    call L_2147 (base_4 (env_839, sl_0)) handle _ => raise
  block L_2147 (x_2931: ((word8) array, word32, word32) tuple)
    val sz_1: word32 = #2 (x_2931)
    val i_1: word32 = #1 (x_2931)
    val buf_1: (word8) array = #0 (x_2931)
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_2148
  block L_2148 (env_840: unit)
    call L_2149 (sextdFromInt64ToInt64_1 (env_840,
                                          x_1211 (*0xFFFFFFFF ... F:w64*))) handle _ => raise
  block L_2149 (x_2932: word64)
    val x_2934: ((word8) array, word32, word32, word32) tuple =
      (buf_1, sz_1, i_1, fd_0)
    val x_2933: lambdas_55 = con xEnv_82 (x_2934)
    val tuple_101:
      (word32, (bool) ref, lambdas_55, word64, (lambdas_46) ref, lambdas_54) tuple =
      (intr_3, restartFlag_3, x_2933, x_2932, blocker_3, raiseSys_5)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2150
  block L_2150 (env_841: unit)
    call L_2151 (atomicBegin_1 (env_841, x_1240 (*()*))) handle _ => raise
  block L_2151 (x_2935: unit)
    call L_2152 (x_2936 (x_2934, x_1241 (*()*))) handle _ => L_2153
  block L_2153 (x_2937: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2154
  block L_2154 (env_842: unit)
    call L_2155 (atomicEnd_1 (env_842, x_1245 (*()*))) handle _ => raise
  block L_2155 (x_2938: unit)
    raise (x_2937)
  block L_2152 (return_6: word64)
    val x_2939: (word64, word64) tuple = (x_2932, return_6)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2156
  block L_2156 (env_843: unit)
    call L_2157 (x_2300 (env_843, x_2939)) handle _ => raise
  block L_2157 (x_2940: bool)
    case x_2940 of
      true => L_2159 | false => L_2158
  block L_2158 ()
    case x_1243 (*con xEnv_67 (x_1242)*) of
      xEnv_67 => L_2160
  block L_2160 (env_844: unit)
    call L_2161 (x_2941 (env_844, return_6)) handle _ => L_2162
  block L_2162 (x_2942: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2163
  block L_2163 (env_845: unit)
    call L_2164 (atomicEnd_1 (env_845, x_1248 (*()*))) handle _ => raise
  block L_2164 (x_2943: unit)
    raise (x_2942)
  block L_2161 (x_2944: word64)
    goto L_2165 (x_2944)
  block L_2165 (x_2945: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2166
  block L_2166 (env_846: unit)
    call L_2167 (atomicEnd_1 (env_846, x_1247 (*()*))) handle _ => raise
  block L_2167 (x_2946: unit)
    goto L_2168 (x_2945)
  block L_2159 ()
    val x_2947: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2169
  block L_2169 (env_847: unit)
    call L_2170 (fromRep_1 (env_847, x_2947)) handle _ => raise
  block L_2170 (e_3: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2171
  block L_2171 (env_848: unit)
    call L_2172 (atomicEnd_1 (env_848, x_1246 (*()*))) handle _ => raise
  block L_2172 (x_2948: unit)
    val x_2949: (word32, list_9) tuple = (e_3, x_1244 (*con nil_8*))
    call L_2168 (errUnblocked_1 (tuple_101, x_2949)) handle _ => raise
  block L_2168 (x_2950: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_2173
  block L_2173 (env_849: unit)
    call L_2174 (x_2428 (env_849, x_2950)) handle _ => raise
  block L_2174 (bytesWrote_0: word32)
    case incPos_1 of
      incPosEnv_0 => L_2175
  block L_2175 (env_850: (word64) ref)
    call tail incPos_2 (env_850, bytesWrote_0)
fun x_2941 (env_851: unit, x_2951: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2176 ()
  block L_2176 ()
    return (x_2951)
fun errUnblocked_1 (env_852:
                      (word32,
                       (bool) ref,
                       lambdas_55,
                       word64,
                       (lambdas_46) ref,
                       lambdas_54) tuple,
                    x_2952: (word32, list_9) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_2177 ()
  block L_2177 ()
    val intr_4: word32 = #0 (env_852)
    val restartFlag_4: (bool) ref = #1 (env_852)
    val x_2954: lambdas_55 = #2 (env_852)
    val x_2953: word64 = #3 (env_852)
    val blocker_4: (lambdas_46) ref = #4 (env_852)
    val raiseSys_6: lambdas_54 = #5 (env_852)
    val handlers_1: list_9 = #1 (x_2952)
    val errno_1: word32 = #0 (x_2952)
    call L_2178 (loop_20 (errno_1, handlers_1)) handle _ => raise
  block L_2178 (x_2955: t_25)
    case x_2955 of
      NONE_8 => L_2180 | SOME_18 => L_2179
  block L_2179 (x_2956: (word32, lambdas_2) tuple)
    bug
  block L_2180 ()
    val x_2957: (word32, word32) tuple = (errno_1, intr_4)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2181
  block L_2181 (env_853: unit)
    call L_2182 (x_2054 (env_853, x_2957)) handle _ => raise
  block L_2182 (x_2958: bool)
    case x_2958 of
      true => L_2184 | false => L_2183
  block L_2183 ()
    goto L_2185 (x_1213 (*con false*))
  block L_2184 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2186
  block L_2186 (env_854: unit)
    call L_2185 (x_2648 (env_854, restartFlag_4)) handle _ => raise
  block L_2185 (x_2959: bool)
    case x_2959 of
      true => L_2188 | false => L_2187
  block L_2187 ()
    case raiseSys_6 of
      raiseSysEnv_1 => L_2189
  block L_2189 (env_855: lambdas_223)
    call tail raiseSys_7 (env_855, errno_1)
  block L_2188 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2190
  block L_2190 (env_856: unit)
    call L_2191 (atomicState_1 (env_856, x_1214 (*()*))) handle _ => raise
  block L_2191 (x_2960: word32)
    val x_2961: (word32, word32) tuple = (x_2960, x_1215 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2192
  block L_2192 (env_857: unit)
    call L_2193 (x_2054 (env_857, x_2961)) handle _ => raise
  block L_2193 (x_2962: bool)
    case x_2962 of
      true => L_2195 | false => L_2194
  block L_2194 ()
    val x_2963: lambdas_46 = prim Ref_deref[lambdas_46] (blocker_4)
    case x_2963 of
      xEnv_53 => L_2196
  block L_2196 (env_858: unit)
    call L_2197 (x_2875 (env_858, x_1225 (*()*))) handle _ => raise
  block L_2197 (finish_1: lambdas_224)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2198
  block L_2198 (env_859: unit)
    call L_2199 (atomicBegin_1 (env_859, x_1226 (*()*))) handle _ => L_2200
  block L_2199 (x_2964: unit)
    case x_2954 of
      xEnv_82 => L_2201
  block L_2201 (env_860: ((word8) array, word32, word32, word32) tuple)
    call L_2202 (x_2936 (env_860, x_1227 (*()*))) handle _ => L_2203
  block L_2203 (x_2965: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2204
  block L_2204 (env_861: unit)
    call L_2205 (atomicEnd_1 (env_861, x_1231 (*()*))) handle _ => L_2200
  block L_2205 (x_2966: unit)
    goto L_2200 (x_2965)
  block L_2202 (return_7: word64)
    val x_2967: (word64, word64) tuple = (x_2953, return_7)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2206
  block L_2206 (env_862: unit)
    call L_2207 (x_2300 (env_862, x_2967)) handle _ => L_2200
  block L_2207 (x_2968: bool)
    case x_2968 of
      true => L_2209 | false => L_2208
  block L_2208 ()
    case x_1229 (*con xEnv_66 (x_1228)*) of
      xEnv_66 => L_2210
  block L_2210 (env_863: unit)
    call L_2211 (x_2969 (env_863, return_7)) handle _ => L_2212
  block L_2212 (x_2970: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2213
  block L_2213 (env_864: unit)
    call L_2214 (atomicEnd_1 (env_864, x_1236 (*()*))) handle _ => L_2200
  block L_2214 (x_2971: unit)
    goto L_2200 (x_2970)
  block L_2211 (x_2972: word64)
    goto L_2215 (x_2972)
  block L_2215 (x_2973: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2216
  block L_2216 (env_865: unit)
    call L_2217 (atomicEnd_1 (env_865, x_1235 (*()*))) handle _ => L_2200
  block L_2217 (x_2974: unit)
    goto L_2218 (x_2973)
  block L_2209 ()
    val x_2975: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2219
  block L_2219 (env_866: unit)
    call L_2220 (fromRep_1 (env_866, x_2975)) handle _ => L_2200
  block L_2220 (e_4: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2221
  block L_2221 (env_867: unit)
    call L_2222 (atomicEnd_1 (env_867, x_1232 (*()*))) handle _ => L_2200
  block L_2222 (x_2976: unit)
    call L_2223 (loop_21 (e_4, x_1230 (*con nil_8*))) handle _ => L_2200
  block L_2223 (x_2977: t_25)
    case x_2977 of
      NONE_8 => L_2225 | SOME_18 => L_2224
  block L_2224 (x_2978: (word32, lambdas_2) tuple)
    bug
  block L_2225 ()
    case raiseSys_6 of
      raiseSysEnv_1 => L_2226
  block L_2226 (env_868: lambdas_223)
    call L_2218 (raiseSys_7 (env_868, e_4)) handle _ => L_2200
  block L_2200 (x_2979: exn)
    case finish_1 of
      xEnv_52 => L_2227
  block L_2227 (env_869: unit)
    call L_2228 (x_2892 (env_869, x_1238 (*()*))) handle _ => raise
  block L_2228 (x_2980: unit)
    raise (x_2979)
  block L_2218 (x_2981: word64)
    goto L_2229 (x_2981)
  block L_2229 (x_2982: word64)
    case finish_1 of
      xEnv_52 => L_2230
  block L_2230 (env_870: unit)
    call L_2231 (x_2892 (env_870, x_1237 (*()*))) handle _ => raise
  block L_2231 (x_2983: unit)
    return (x_2982)
  block L_2195 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2232
  block L_2232 (env_871: unit)
    call L_2233 (atomicBegin_1 (env_871, x_1216 (*()*))) handle _ => raise
  block L_2233 (x_2984: unit)
    case x_2954 of
      xEnv_82 => L_2234
  block L_2234 (env_872: ((word8) array, word32, word32, word32) tuple)
    call L_2235 (x_2936 (env_872, x_1217 (*()*))) handle _ => L_2236
  block L_2236 (x_2985: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2237
  block L_2237 (env_873: unit)
    call L_2238 (atomicEnd_1 (env_873, x_1221 (*()*))) handle _ => raise
  block L_2238 (x_2986: unit)
    raise (x_2985)
  block L_2235 (return_8: word64)
    val x_2987: (word64, word64) tuple = (x_2953, return_8)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2239
  block L_2239 (env_874: unit)
    call L_2240 (x_2300 (env_874, x_2987)) handle _ => raise
  block L_2240 (x_2988: bool)
    case x_2988 of
      true => L_2242 | false => L_2241
  block L_2241 ()
    case x_1219 (*con xEnv_65 (x_1218)*) of
      xEnv_65 => L_2243
  block L_2243 (env_875: unit)
    call L_2244 (x_2989 (env_875, return_8)) handle _ => L_2245
  block L_2245 (x_2990: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2246
  block L_2246 (env_876: unit)
    call L_2247 (atomicEnd_1 (env_876, x_1224 (*()*))) handle _ => raise
  block L_2247 (x_2991: unit)
    raise (x_2990)
  block L_2244 (x_2992: word64)
    goto L_2248 (x_2992)
  block L_2248 (x_2993: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2249
  block L_2249 (env_877: unit)
    call L_2250 (atomicEnd_1 (env_877, x_1223 (*()*))) handle _ => raise
  block L_2250 (x_2994: unit)
    return (x_2993)
  block L_2242 ()
    val x_2995: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2251
  block L_2251 (env_878: unit)
    call L_2252 (fromRep_1 (env_878, x_2995)) handle _ => raise
  block L_2252 (e_5: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2253
  block L_2253 (env_879: unit)
    call L_2254 (atomicEnd_1 (env_879, x_1222 (*()*))) handle _ => raise
  block L_2254 (x_2996: unit)
    val x_2997: (word32, list_9) tuple = (e_5, x_1220 (*con nil_8*))
    call tail errUnblocked_1 (env_852, x_2997)
fun loop_21 (env_880: word32, x_2998: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2255 ()
  block L_2255 ()
    case x_2998 of
      nil_8 => L_2257 | ::_10 => L_2256
  block L_2256 (x_2999: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3002: list_9 = #1 (x_2999)
    val x_3001: (word32, lambdas_2) tuple = #0 (x_2999)
    val e'_2: word32 = #0 (x_3001)
    val x_3000: (word32, word32) tuple = (env_880, e'_2)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2258
  block L_2258 (env_881: unit)
    call L_2259 (x_2054 (env_881, x_3000)) handle _ => raise
  block L_2259 (x_3003: bool)
    case x_3003 of
      true => L_2261 | false => L_2260
  block L_2260 ()
    call tail loop_21 (env_880, x_3002)
  block L_2261 ()
    val x_3004: t_25 = con SOME_18 (x_3001)
    return (x_3004)
  block L_2257 ()
    return (x_1233 (*con NONE_8*))
fun x_2969 (env_882: unit, x_3005: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2262 ()
  block L_2262 ()
    return (x_3005)
fun x_2989 (env_883: unit, x_3006: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2263 ()
  block L_2263 ()
    return (x_3006)
fun loop_20 (env_884: word32, x_3007: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2264 ()
  block L_2264 ()
    case x_3007 of
      nil_8 => L_2266 | ::_10 => L_2265
  block L_2265 (x_3008: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3011: list_9 = #1 (x_3008)
    val x_3010: (word32, lambdas_2) tuple = #0 (x_3008)
    val e'_3: word32 = #0 (x_3010)
    val x_3009: (word32, word32) tuple = (env_884, e'_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2267
  block L_2267 (env_885: unit)
    call L_2268 (x_2054 (env_885, x_3009)) handle _ => raise
  block L_2268 (x_3012: bool)
    case x_3012 of
      true => L_2270 | false => L_2269
  block L_2269 ()
    call tail loop_20 (env_884, x_3011)
  block L_2270 ()
    val x_3013: t_25 = con SOME_18 (x_3010)
    return (x_3013)
  block L_2266 ()
    return (x_1212 (*con NONE_8*))
fun x_2936 (env_886: ((word8) array, word32, word32, word32) tuple, x_3014: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2271 ()
  block L_2271 ()
    val buf_2: (word8) array = #0 (env_886)
    val sz_2: word32 = #1 (env_886)
    val i_2: word32 = #2 (env_886)
    val fd_1: word32 = #3 (env_886)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_2272
  block L_2272 (env_887: unit)
    call L_2273 (toRep_2 (env_887, fd_1)) handle _ => raise
  block L_2273 (x_3015: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2274
  block L_2274 (env_888: unit)
    call L_2275 (sextdFromInt32ToInt32_1 (env_888, i_2)) handle _ => raise
  block L_2275 (x_3016: word32)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_2276
  block L_2276 (env_889: unit)
    call L_2277 (sextdFromInt32ToWord64_1 (env_889, sz_2)) handle _ => raise
  block L_2277 (x_3017: word64)
    val x_3018: word64 =
      prim CFunction {args = (word32, (word8) array, word32, word64),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Objptr, Int32, Word64),
                                   res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_IO_writeChar8Arr} (x_3015,
                                                        buf_2,
                                                        x_3016,
                                                        x_3017)
    return (x_3018)
fun putV_2 (env_890:
              (word32, (bool) ref, (lambdas_46) ref, lambdas_54, lambdas_490) tuple,
            x_3019: (word32, t_19) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2278 ()
  block L_2278 ()
    val intr_5: word32 = #0 (env_890)
    val restartFlag_5: (bool) ref = #1 (env_890)
    val blocker_5: (lambdas_46) ref = #2 (env_890)
    val raiseSys_8: lambdas_54 = #3 (env_890)
    val incPos_3: lambdas_490 = #4 (env_890)
    val sl_1: t_19 = #1 (x_3019)
    val fd_2: word32 = #0 (x_3019)
    case base_1 (*con baseEn ... e_30)*) of
      baseEnv_1 => L_2279
  block L_2279 (env_891: unit)
    call L_2280 (base_3 (env_891, sl_1)) handle _ => raise
  block L_2280 (x_3020: ((word8) vector, word32, word32) tuple)
    val sz_3: word32 = #2 (x_3020)
    val i_3: word32 = #1 (x_3020)
    val buf_3: (word8) vector = #0 (x_3020)
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_2281
  block L_2281 (env_892: unit)
    call L_2282 (sextdFromInt64ToInt64_1 (env_892,
                                          x_1173 (*0xFFFFFFFF ... F:w64*))) handle _ => raise
  block L_2282 (x_3021: word64)
    val x_3023: ((word8) vector, word32, word32, word32) tuple =
      (buf_3, sz_3, i_3, fd_2)
    val x_3022: lambdas_62 = con xEnv_83 (x_3023)
    val tuple_102:
      (word32, (bool) ref, lambdas_62, word64, (lambdas_46) ref, lambdas_54) tuple =
      (intr_5, restartFlag_5, x_3022, x_3021, blocker_5, raiseSys_8)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2283
  block L_2283 (env_893: unit)
    call L_2284 (atomicBegin_1 (env_893, x_1202 (*()*))) handle _ => raise
  block L_2284 (x_3024: unit)
    call L_2285 (x_3025 (x_3023, x_1203 (*()*))) handle _ => L_2286
  block L_2286 (x_3026: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2287
  block L_2287 (env_894: unit)
    call L_2288 (atomicEnd_1 (env_894, x_1207 (*()*))) handle _ => raise
  block L_2288 (x_3027: unit)
    raise (x_3026)
  block L_2285 (return_9: word64)
    val x_3028: (word64, word64) tuple = (x_3021, return_9)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2289
  block L_2289 (env_895: unit)
    call L_2290 (x_2300 (env_895, x_3028)) handle _ => raise
  block L_2290 (x_3029: bool)
    case x_3029 of
      true => L_2292 | false => L_2291
  block L_2291 ()
    case x_1205 (*con xEnv_64 (x_1204)*) of
      xEnv_64 => L_2293
  block L_2293 (env_896: unit)
    call L_2294 (x_3030 (env_896, return_9)) handle _ => L_2295
  block L_2295 (x_3031: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2296
  block L_2296 (env_897: unit)
    call L_2297 (atomicEnd_1 (env_897, x_1210 (*()*))) handle _ => raise
  block L_2297 (x_3032: unit)
    raise (x_3031)
  block L_2294 (x_3033: word64)
    goto L_2298 (x_3033)
  block L_2298 (x_3034: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2299
  block L_2299 (env_898: unit)
    call L_2300 (atomicEnd_1 (env_898, x_1209 (*()*))) handle _ => raise
  block L_2300 (x_3035: unit)
    goto L_2301 (x_3034)
  block L_2292 ()
    val x_3036: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2302
  block L_2302 (env_899: unit)
    call L_2303 (fromRep_1 (env_899, x_3036)) handle _ => raise
  block L_2303 (e_6: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2304
  block L_2304 (env_900: unit)
    call L_2305 (atomicEnd_1 (env_900, x_1208 (*()*))) handle _ => raise
  block L_2305 (x_3037: unit)
    val x_3038: (word32, list_9) tuple = (e_6, x_1206 (*con nil_8*))
    call L_2301 (errUnblocked_2 (tuple_102, x_3038)) handle _ => raise
  block L_2301 (x_3039: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_2306
  block L_2306 (env_901: unit)
    call L_2307 (x_2428 (env_901, x_3039)) handle _ => raise
  block L_2307 (bytesWrote_1: word32)
    case incPos_3 of
      incPosEnv_0 => L_2308
  block L_2308 (env_902: (word64) ref)
    call tail incPos_2 (env_902, bytesWrote_1)
fun x_3030 (env_903: unit, x_3040: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2309 ()
  block L_2309 ()
    return (x_3040)
fun errUnblocked_2 (env_904:
                      (word32,
                       (bool) ref,
                       lambdas_62,
                       word64,
                       (lambdas_46) ref,
                       lambdas_54) tuple,
                    x_3041: (word32, list_9) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_2310 ()
  block L_2310 ()
    val intr_6: word32 = #0 (env_904)
    val restartFlag_6: (bool) ref = #1 (env_904)
    val x_3043: lambdas_62 = #2 (env_904)
    val x_3042: word64 = #3 (env_904)
    val blocker_6: (lambdas_46) ref = #4 (env_904)
    val raiseSys_9: lambdas_54 = #5 (env_904)
    val handlers_2: list_9 = #1 (x_3041)
    val errno_2: word32 = #0 (x_3041)
    call L_2311 (loop_22 (errno_2, handlers_2)) handle _ => raise
  block L_2311 (x_3044: t_25)
    case x_3044 of
      NONE_8 => L_2313 | SOME_18 => L_2312
  block L_2312 (x_3045: (word32, lambdas_2) tuple)
    bug
  block L_2313 ()
    val x_3046: (word32, word32) tuple = (errno_2, intr_6)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2314
  block L_2314 (env_905: unit)
    call L_2315 (x_2054 (env_905, x_3046)) handle _ => raise
  block L_2315 (x_3047: bool)
    case x_3047 of
      true => L_2317 | false => L_2316
  block L_2316 ()
    goto L_2318 (x_1175 (*con false*))
  block L_2317 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2319
  block L_2319 (env_906: unit)
    call L_2318 (x_2648 (env_906, restartFlag_6)) handle _ => raise
  block L_2318 (x_3048: bool)
    case x_3048 of
      true => L_2321 | false => L_2320
  block L_2320 ()
    case raiseSys_9 of
      raiseSysEnv_1 => L_2322
  block L_2322 (env_907: lambdas_223)
    call tail raiseSys_7 (env_907, errno_2)
  block L_2321 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2323
  block L_2323 (env_908: unit)
    call L_2324 (atomicState_1 (env_908, x_1176 (*()*))) handle _ => raise
  block L_2324 (x_3049: word32)
    val x_3050: (word32, word32) tuple = (x_3049, x_1177 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2325
  block L_2325 (env_909: unit)
    call L_2326 (x_2054 (env_909, x_3050)) handle _ => raise
  block L_2326 (x_3051: bool)
    case x_3051 of
      true => L_2328 | false => L_2327
  block L_2327 ()
    val x_3052: lambdas_46 = prim Ref_deref[lambdas_46] (blocker_6)
    case x_3052 of
      xEnv_53 => L_2329
  block L_2329 (env_910: unit)
    call L_2330 (x_2875 (env_910, x_1187 (*()*))) handle _ => raise
  block L_2330 (finish_2: lambdas_224)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2331
  block L_2331 (env_911: unit)
    call L_2332 (atomicBegin_1 (env_911, x_1188 (*()*))) handle _ => L_2333
  block L_2332 (x_3053: unit)
    case x_3043 of
      xEnv_83 => L_2334
  block L_2334 (env_912: ((word8) vector, word32, word32, word32) tuple)
    call L_2335 (x_3025 (env_912, x_1189 (*()*))) handle _ => L_2336
  block L_2336 (x_3054: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2337
  block L_2337 (env_913: unit)
    call L_2338 (atomicEnd_1 (env_913, x_1193 (*()*))) handle _ => L_2333
  block L_2338 (x_3055: unit)
    goto L_2333 (x_3054)
  block L_2335 (return_10: word64)
    val x_3056: (word64, word64) tuple = (x_3042, return_10)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2339
  block L_2339 (env_914: unit)
    call L_2340 (x_2300 (env_914, x_3056)) handle _ => L_2333
  block L_2340 (x_3057: bool)
    case x_3057 of
      true => L_2342 | false => L_2341
  block L_2341 ()
    case x_1191 (*con xEnv_63 (x_1190)*) of
      xEnv_63 => L_2343
  block L_2343 (env_915: unit)
    call L_2344 (x_3058 (env_915, return_10)) handle _ => L_2345
  block L_2345 (x_3059: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2346
  block L_2346 (env_916: unit)
    call L_2347 (atomicEnd_1 (env_916, x_1198 (*()*))) handle _ => L_2333
  block L_2347 (x_3060: unit)
    goto L_2333 (x_3059)
  block L_2344 (x_3061: word64)
    goto L_2348 (x_3061)
  block L_2348 (x_3062: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2349
  block L_2349 (env_917: unit)
    call L_2350 (atomicEnd_1 (env_917, x_1197 (*()*))) handle _ => L_2333
  block L_2350 (x_3063: unit)
    goto L_2351 (x_3062)
  block L_2342 ()
    val x_3064: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2352
  block L_2352 (env_918: unit)
    call L_2353 (fromRep_1 (env_918, x_3064)) handle _ => L_2333
  block L_2353 (e_7: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2354
  block L_2354 (env_919: unit)
    call L_2355 (atomicEnd_1 (env_919, x_1194 (*()*))) handle _ => L_2333
  block L_2355 (x_3065: unit)
    call L_2356 (loop_23 (e_7, x_1192 (*con nil_8*))) handle _ => L_2333
  block L_2356 (x_3066: t_25)
    case x_3066 of
      NONE_8 => L_2358 | SOME_18 => L_2357
  block L_2357 (x_3067: (word32, lambdas_2) tuple)
    bug
  block L_2358 ()
    case raiseSys_9 of
      raiseSysEnv_1 => L_2359
  block L_2359 (env_920: lambdas_223)
    call L_2351 (raiseSys_7 (env_920, e_7)) handle _ => L_2333
  block L_2333 (x_3068: exn)
    case finish_2 of
      xEnv_52 => L_2360
  block L_2360 (env_921: unit)
    call L_2361 (x_2892 (env_921, x_1200 (*()*))) handle _ => raise
  block L_2361 (x_3069: unit)
    raise (x_3068)
  block L_2351 (x_3070: word64)
    goto L_2362 (x_3070)
  block L_2362 (x_3071: word64)
    case finish_2 of
      xEnv_52 => L_2363
  block L_2363 (env_922: unit)
    call L_2364 (x_2892 (env_922, x_1199 (*()*))) handle _ => raise
  block L_2364 (x_3072: unit)
    return (x_3071)
  block L_2328 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2365
  block L_2365 (env_923: unit)
    call L_2366 (atomicBegin_1 (env_923, x_1178 (*()*))) handle _ => raise
  block L_2366 (x_3073: unit)
    case x_3043 of
      xEnv_83 => L_2367
  block L_2367 (env_924: ((word8) vector, word32, word32, word32) tuple)
    call L_2368 (x_3025 (env_924, x_1179 (*()*))) handle _ => L_2369
  block L_2369 (x_3074: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2370
  block L_2370 (env_925: unit)
    call L_2371 (atomicEnd_1 (env_925, x_1183 (*()*))) handle _ => raise
  block L_2371 (x_3075: unit)
    raise (x_3074)
  block L_2368 (return_11: word64)
    val x_3076: (word64, word64) tuple = (x_3042, return_11)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2372
  block L_2372 (env_926: unit)
    call L_2373 (x_2300 (env_926, x_3076)) handle _ => raise
  block L_2373 (x_3077: bool)
    case x_3077 of
      true => L_2375 | false => L_2374
  block L_2374 ()
    case x_1181 (*con xEnv_62 (x_1180)*) of
      xEnv_62 => L_2376
  block L_2376 (env_927: unit)
    call L_2377 (x_3078 (env_927, return_11)) handle _ => L_2378
  block L_2378 (x_3079: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2379
  block L_2379 (env_928: unit)
    call L_2380 (atomicEnd_1 (env_928, x_1186 (*()*))) handle _ => raise
  block L_2380 (x_3080: unit)
    raise (x_3079)
  block L_2377 (x_3081: word64)
    goto L_2381 (x_3081)
  block L_2381 (x_3082: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2382
  block L_2382 (env_929: unit)
    call L_2383 (atomicEnd_1 (env_929, x_1185 (*()*))) handle _ => raise
  block L_2383 (x_3083: unit)
    return (x_3082)
  block L_2375 ()
    val x_3084: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2384
  block L_2384 (env_930: unit)
    call L_2385 (fromRep_1 (env_930, x_3084)) handle _ => raise
  block L_2385 (e_8: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2386
  block L_2386 (env_931: unit)
    call L_2387 (atomicEnd_1 (env_931, x_1184 (*()*))) handle _ => raise
  block L_2387 (x_3085: unit)
    val x_3086: (word32, list_9) tuple = (e_8, x_1182 (*con nil_8*))
    call tail errUnblocked_2 (env_904, x_3086)
fun loop_23 (env_932: word32, x_3087: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2388 ()
  block L_2388 ()
    case x_3087 of
      nil_8 => L_2390 | ::_10 => L_2389
  block L_2389 (x_3088: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3091: list_9 = #1 (x_3088)
    val x_3090: (word32, lambdas_2) tuple = #0 (x_3088)
    val e'_4: word32 = #0 (x_3090)
    val x_3089: (word32, word32) tuple = (env_932, e'_4)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2391
  block L_2391 (env_933: unit)
    call L_2392 (x_2054 (env_933, x_3089)) handle _ => raise
  block L_2392 (x_3092: bool)
    case x_3092 of
      true => L_2394 | false => L_2393
  block L_2393 ()
    call tail loop_23 (env_932, x_3091)
  block L_2394 ()
    val x_3093: t_25 = con SOME_18 (x_3090)
    return (x_3093)
  block L_2390 ()
    return (x_1195 (*con NONE_8*))
fun x_3058 (env_934: unit, x_3094: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2395 ()
  block L_2395 ()
    return (x_3094)
fun x_3078 (env_935: unit, x_3095: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2396 ()
  block L_2396 ()
    return (x_3095)
fun loop_22 (env_936: word32, x_3096: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2397 ()
  block L_2397 ()
    case x_3096 of
      nil_8 => L_2399 | ::_10 => L_2398
  block L_2398 (x_3097: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3100: list_9 = #1 (x_3097)
    val x_3099: (word32, lambdas_2) tuple = #0 (x_3097)
    val e'_5: word32 = #0 (x_3099)
    val x_3098: (word32, word32) tuple = (env_936, e'_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2400
  block L_2400 (env_937: unit)
    call L_2401 (x_2054 (env_937, x_3098)) handle _ => raise
  block L_2401 (x_3101: bool)
    case x_3101 of
      true => L_2403 | false => L_2402
  block L_2402 ()
    call tail loop_22 (env_936, x_3100)
  block L_2403 ()
    val x_3102: t_25 = con SOME_18 (x_3099)
    return (x_3102)
  block L_2399 ()
    return (x_1174 (*con NONE_8*))
fun x_3025 (env_938: ((word8) vector, word32, word32, word32) tuple,
            x_3103: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2404 ()
  block L_2404 ()
    val buf_4: (word8) vector = #0 (env_938)
    val sz_4: word32 = #1 (env_938)
    val i_4: word32 = #2 (env_938)
    val fd_3: word32 = #3 (env_938)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_2405
  block L_2405 (env_939: unit)
    call L_2406 (toRep_2 (env_939, fd_3)) handle _ => raise
  block L_2406 (x_3104: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2407
  block L_2407 (env_940: unit)
    call L_2408 (sextdFromInt32ToInt32_1 (env_940, i_4)) handle _ => raise
  block L_2408 (x_3105: word32)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_2409
  block L_2409 (env_941: unit)
    call L_2410 (sextdFromInt32ToWord64_1 (env_941, sz_4)) handle _ => raise
  block L_2410 (x_3106: word64)
    val x_3107: word64 =
      prim CFunction {args = (word32, (word8) vector, word32, word64),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Objptr, Int32, Word64),
                                   res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_IO_writeChar8Vec} (x_3104,
                                                        buf_4,
                                                        x_3105,
                                                        x_3106)
    return (x_3107)
fun incPos_2 (env_942: (word64) ref, x_3108: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2411 ()
  block L_2411 ()
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2412
  block L_2412 (env_943: unit)
    call L_2413 (x_3109 (env_943, env_942)) handle _ => raise
  block L_2413 (x_3110: word64)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_2414
  block L_2414 (env_944: unit)
    call L_2415 (sextdFromInt32ToInt64_1 (env_944, x_3108)) handle _ => raise
  block L_2415 (x_3111: word64)
    val x_3112: (word64, word64) tuple = (x_3110, x_3111)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_2416
  block L_2416 (env_945: unit)
    call L_2417 (x_3113 (env_945, x_3112)) handle _ => raise
  block L_2417 (x_3114: word64)
    val x_3115: ((word64) ref, word64) tuple = (env_942, x_3114)
    case x_89 (*con xEnv_11 (x_88)*) of
      xEnv_11 => L_2418
  block L_2418 (env_946: unit)
    call L_2419 (x_3116 (env_946, x_3115)) handle _ => raise
  block L_2419 (x_3117: unit)
    return (x_3108)
fun verifyPos_0 (env_947: (word64, lambdas_64, (word64) ref) tuple, x_3118: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2420 ()
  block L_2420 ()
    val pos0_1: word64 = #0 (env_947)
    val lseek_1: lambdas_64 = #1 (env_947)
    val pos_2: (word64) ref = #2 (env_947)
    val x_3119: (word32, word64, whence_0) tuple =
      (x_1069 (*0x1:w32*), pos0_1, x_1164 (*con SEEK_CUR_1*))
    case lseek_1 of
      lseekEnv_0 => L_2421
  block L_2421 (env_948: lambdas_54)
    call L_2422 (lseek_2 (env_948, x_3119)) handle _ => raise
  block L_2422 (curPos_0: word64)
    val x_3120: ((word64) ref, word64) tuple = (pos_2, curPos_0)
    case x_89 (*con xEnv_11 (x_88)*) of
      xEnv_11 => L_2423
  block L_2423 (env_949: unit)
    call L_2424 (x_3116 (env_949, x_3120)) handle _ => raise
  block L_2424 (x_3121: unit)
    return (curPos_0)
fun endPos_1 (env_950: ((bool) ref, lambdas_66) tuple, x_3122: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2425 ()
  block L_2425 ()
    val closed_6: (bool) ref = #0 (env_950)
    val x_3123: lambdas_66 = #1 (env_950)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2426
  block L_2426 (env_951: unit)
    call L_2427 (x_2648 (env_951, closed_6)) handle _ => raise
  block L_2427 (x_3124: bool)
    case x_3124 of
      true => L_2429 | false => L_2428
  block L_2428 ()
    case x_3123 of
      xEnv_241 => L_2430
  block L_2430 (env_952: (lambdas_223, lambdas_92) tuple)
    call L_2431 (x_2326 (env_952, x_1069 (*0x1:w32*))) handle _ => raise
  block L_2431 (x_3125: stat_0)
    case x_3125 of
      T_2 => L_2432
  block L_2432 (x_3126:
                  (time_0,
                   time_0,
                   word64,
                   word32,
                   word64,
                   word32,
                   time_0,
                   word32,
                   word64,
                   word32) tuple)
    val #_3: word64 = #8 (x_3126)
    return (#_3)
  block L_2429 ()
    raise (x_1052 (*con Closed ... 1051)*))
fun setPos_2 (env_953: ((bool) ref, lambdas_64, (word64) ref) tuple,
              x_3127: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_2433 ()
  block L_2433 ()
    val closed_7: (bool) ref = #0 (env_953)
    val lseek_3: lambdas_64 = #1 (env_953)
    val pos_3: (word64) ref = #2 (env_953)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2434
  block L_2434 (env_954: unit)
    call L_2435 (x_2648 (env_954, closed_7)) handle _ => raise
  block L_2435 (x_3128: bool)
    case x_3128 of
      true => L_2437 | false => L_2436
  block L_2436 ()
    val x_3129: (word32, word64, whence_0) tuple =
      (x_1069 (*0x1:w32*), x_3127, x_1162 (*con SEEK_SET_1*))
    case lseek_3 of
      lseekEnv_0 => L_2438
  block L_2438 (env_955: lambdas_54)
    call L_2439 (lseek_2 (env_955, x_3129)) handle _ => raise
  block L_2439 (x_3130: word64)
    val x_3131: ((word64) ref, word64) tuple = (pos_3, x_3130)
    case x_89 (*con xEnv_11 (x_88)*) of
      xEnv_11 => L_2440
  block L_2440 (env_956: unit)
    call tail x_3116 (env_956, x_3131)
  block L_2437 ()
    raise (x_1052 (*con Closed ... 1051)*))
fun getPos_1 (env_957: (word64) ref, x_3132: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2441 ()
  block L_2441 ()
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2442
  block L_2442 (env_958: unit)
    call tail x_3109 (env_958, env_957)
fun get_1 (env_959: unit, x_3133: t_22):
  {returns = Some (outstream_0), raises = Some (exn)} =
L_2443 ()
  block L_2443 ()
    case x_3133 of
      T_5 => L_2444
  block L_2444 (x_3134: (outstream_0) ref)
    val x_3135: outstream_0 = prim Ref_deref[outstream_0] (x_3134)
    return (x_3135)
fun x_2746 (env_960: (list_5) ref, x_3136: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_2445 ()
  block L_2445 ()
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_2446
  block L_2446 (env_961: unit)
    call L_2447 (x_2384 (env_961, env_960)) handle _ => raise
  block L_2447 (x_3137: list_5)
    val x_3138: (list_5, unit) tuple = (x_3137, x_1146 (*()*))
    case loop_2 (*con loopEn ... e_49)*) of
      loopEnv_2 => L_2448
  block L_2448 (env_962: unit)
    call tail loop_24 (env_962, x_3138)
fun loop_24 (env_963: unit, x_3139: (list_5, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_2449 ()
  block L_2449 ()
    val b_10: unit = #1 (x_3139)
    val l_2: list_5 = #0 (x_3139)
    case l_2 of
      nil_9 => L_2451 | ::_7 => L_2450
  block L_2450 (x_3140: ((outstream_0, bool) tuple, list_5) tuple)
    val x_3144: list_5 = #1 (x_3140)
    val x_3142: (outstream_0, bool) tuple = #0 (x_3140)
    val x_3143: bool = #1 (x_3142)
    val x_3141: outstream_0 = #0 (x_3142)
    case x_3143 of
      true => L_2453 | false => L_2452
  block L_2452 ()
    case flushOut_0 (*con flushO ... e_48)*) of
      flushOutEnv_0 => L_2454
  block L_2454 (env_964: unit)
    call L_2455 (flushOut_1 (env_964, x_3141)) handle _ => raise
  block L_2453 ()
    case x_3141 of
      Out_0 => L_2456
  block L_2456 (x_3145:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_3146: (state_0) ref = #2 (x_3145)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_2457
  block L_2457 (env_965: unit)
    call L_2458 (x_2416 (env_965, x_3146)) handle _ => raise
  block L_2458 (x_3147: state_0)
    case x_3147 of
      Closed_1 => L_2459 | _ => L_2460
  block L_2460 ()
    goto L_2461 (x_1147 (*con false*))
  block L_2459 ()
    goto L_2461 (x_1148 (*con true*))
  block L_2461 (x_3148: bool)
    case x_3148 of
      true => L_2463 | false => L_2462
  block L_2462 ()
    case flushOut_0 (*con flushO ... e_48)*) of
      flushOutEnv_0 => L_2464
  block L_2464 (env_966: unit)
    call L_2465 (flushOut_1 (env_966, x_3141)) handle _ => L_2466
  block L_2465 (x_3149: unit)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_2467
  block L_2467 (env_967: unit)
    call L_2468 (x_2416 (env_967, x_3146)) handle _ => L_2466
  block L_2468 (x_3150: state_0)
    case terminated_0 (*con termin ... e_44)*) of
      terminatedEnv_0 => L_2469
  block L_2469 (env_968: unit)
    call L_2470 (terminated_1 (env_968, x_3150)) handle _ => L_2466
  block L_2470 (x_3151: bool)
    case x_3151 of
      true => L_2472 | false => L_2471
  block L_2471 ()
    case outstreamWriter_0 (*con outstr ... e_45)*) of
      outstreamWriterEnv_0 => L_2473
  block L_2473 (env_969: unit)
    call L_2474 (outstreamWriter_1 (env_969, x_3141)) handle _ => L_2466
  block L_2474 (x_3152: writer_0)
    case x_3152 of
      WR_0 => L_2475
  block L_2475 (x_3153:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_4: lambdas_10 = #3 (x_3153)
    case #_4 of
      closeEnv_0 => L_2476
  block L_2476 (env_970:
                  (lambdas_45, (lambdas_46) ref, (bool) ref, word32, (bool) ref) tuple)
    call L_2477 (close_1 (env_970, x_1151 (*()*))) handle _ => L_2466
  block L_2472 ()
    goto L_2477 (x_1150 (*()*))
  block L_2477 (x_3154: unit)
    val _: unit = prim Ref_assign[state_0] (x_3146, x_1152 (*con Closed_1*))
    case x_3141 of
      Out_0 => L_2478
  block L_2478 (x_3155:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_3156: (bufferMode_0) ref = #1 (x_3155)
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_2479
  block L_2479 (env_971: unit)
    call L_2480 (x_2419 (env_971, x_3156)) handle _ => L_2466
  block L_2480 (x_3157: bufferMode_0)
    case x_3157 of
      BLOCK_BUF_1 => L_2483 | NO_BUF_0 => L_2482 | LINE_BUF_1 => L_2481
  block L_2481 (x_3158: buf_0)
    case doit_0 (*con doitEn ... e_50)*) of
      doitEnv_0 => L_2484
  block L_2484 (env_972: unit)
    call L_2455 (doit_1 (env_972, x_3158)) handle _ => L_2466
  block L_2482 ()
    goto L_2455 (x_1153 (*()*))
  block L_2483 (x_3159: buf_0)
    case doit_0 (*con doitEn ... e_50)*) of
      doitEnv_0 => L_2485
  block L_2485 (env_973: unit)
    call L_2455 (doit_1 (env_973, x_3159)) handle _ => L_2466
  block L_2466 (x_3160: exn)
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_2486
  block L_2486 (env_974: unit)
    call L_2487 (outstreamName_1 (env_974, x_3141)) handle _ => raise
  block L_2487 (x_3161: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_2488
  block L_2488 (env_975: unit)
    call L_2489 (liftExn_1 (env_975, x_3161)) handle _ => raise
  block L_2489 (x_3162: lambdas_79)
    case x_3162 of
      xEnv_86 => L_2490
  block L_2490 (env_976: (word8) vector)
    call L_2491 (x_2521 (env_976, x_1154 (*"closeOut"*))) handle _ => raise
  block L_2491 (x_3163: lambdas_78)
    case x_3163 of
      xEnv_85 => L_2492
  block L_2492 (env_977: ((word8) vector, (word8) vector) tuple)
    call L_2455 (x_2523 (env_977, x_3160)) handle _ => raise
  block L_2463 ()
    goto L_2455 (x_1149 (*()*))
  block L_2455 (x_3164: unit)
    val x_3165: (list_5, unit) tuple = (x_3144, x_3164)
    case loop_2 (*con loopEn ... e_49)*) of
      loopEnv_2 => L_2493
  block L_2493 (env_978: unit)
    call tail loop_24 (env_978, x_3165)
  block L_2451 ()
    return (b_10)
fun doit_1 (env_979: unit, x_3166: buf_0):
  {returns = Some (unit), raises = Some (exn)} =
L_2494 ()
  block L_2494 ()
    case x_3166 of
      Buf_0 => L_2495
  block L_2495 (x_3167: ((word8) array, (word32) ref) tuple)
    val x_3169: (word32) ref = #1 (x_3167)
    val x_3168: (word8) array = #0 (x_3167)
    case length_1 (*con length ... e_32)*) of
      lengthEnv_1 => L_2496
  block L_2496 (env_980: unit)
    call L_2497 (length_2 (env_980, x_3168)) handle _ => raise
  block L_2497 (x_3170: word32)
    val x_3171: ((word32) ref, word32) tuple = (x_3169, x_3170)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_2498
  block L_2498 (env_981: unit)
    call tail x_2474 (env_981, x_3171)
fun flushOut_1 (env_982: unit, x_3172: outstream_0):
  {returns = Some (unit), raises = Some (exn)} =
L_2499 ()
  block L_2499 ()
    case x_3172 of
      Out_0 => L_2500
  block L_2500 (x_3173:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_3176: (state_0) ref = #2 (x_3173)
    val x_3175: (bufferMode_0) ref = #1 (x_3173)
    val x_3174: writer_0 = #0 (x_3173)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_2501
  block L_2501 (env_983: unit)
    call L_2502 (x_2416 (env_983, x_3176)) handle _ => raise
  block L_2502 (x_3177: state_0)
    case terminated_0 (*con termin ... e_44)*) of
      terminatedEnv_0 => L_2503
  block L_2503 (env_984: unit)
    call L_2504 (terminated_1 (env_984, x_3177)) handle _ => raise
  block L_2504 (x_3178: bool)
    case x_3178 of
      true => L_2506 | false => L_2505
  block L_2505 ()
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_2507
  block L_2507 (env_985: unit)
    call L_2508 (x_2419 (env_985, x_3175)) handle _ => raise
  block L_2508 (x_3179: bufferMode_0)
    case x_3179 of
      NO_BUF_0 => L_2511 | BLOCK_BUF_1 => L_2510 | LINE_BUF_1 => L_2509
  block L_2509 (x_3180: buf_0)
    val x_3181: (writer_0, buf_0) tuple = (x_3174, x_3180)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_2512
  block L_2512 (env_986: unit)
    call tail flushBuf_1 (env_986, x_3181)
  block L_2510 (x_3182: buf_0)
    val x_3183: (writer_0, buf_0) tuple = (x_3174, x_3182)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_2513
  block L_2513 (env_987: unit)
    call L_2514 (flushBuf_1 (env_987, x_3183)) handle _ => L_2515
  block L_2515 (x_3184: exn)
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_2516
  block L_2516 (env_988: unit)
    call L_2517 (outstreamName_1 (env_988, x_3172)) handle _ => raise
  block L_2517 (x_3185: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_2518
  block L_2518 (env_989: unit)
    call L_2519 (liftExn_1 (env_989, x_3185)) handle _ => raise
  block L_2519 (x_3186: lambdas_79)
    case x_3186 of
      xEnv_86 => L_2520
  block L_2520 (env_990: (word8) vector)
    call L_2521 (x_2521 (env_990, x_1144 (*"flushOut"*))) handle _ => raise
  block L_2521 (x_3187: lambdas_78)
    case x_3187 of
      xEnv_85 => L_2522
  block L_2522 (env_991: ((word8) vector, (word8) vector) tuple)
    call tail x_2523 (env_991, x_3184)
  block L_2514 (x_3188: unit)
    return (x_3188)
  block L_2511 ()
    return (x_1143 (*()*))
  block L_2506 ()
    return (x_1142 (*()*))
fun flushBuf_1 (env_992: unit, x_3189: (writer_0, buf_0) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_2523 ()
  block L_2523 ()
    val x_3191: buf_0 = #1 (x_3189)
    val x_3190: writer_0 = #0 (x_3189)
    case x_3191 of
      Buf_0 => L_2524
  block L_2524 (x_3192: ((word8) array, (word32) ref) tuple)
    val x_3194: (word32) ref = #1 (x_3192)
    val x_3193: (word8) array = #0 (x_3192)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_2525
  block L_2525 (env_993: unit)
    call L_2526 (x_2425 (env_993, x_3194)) handle _ => raise
  block L_2526 (size'_0: word32)
    val x_3195: ((word32) ref, word32) tuple = (x_3194, x_1135 (*0x0:w32*))
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_2527
  block L_2527 (env_994: unit)
    call L_2528 (x_2474 (env_994, x_3195)) handle _ => raise
  block L_2528 (x_3196: unit)
    val x_3198: t_0 = con SOME_0 (size'_0)
    val x_3197: ((word8) array, word32, t_0) tuple =
      (x_3193, x_1136 (*0x0:w32*), x_3198)
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_2529
  block L_2529 (env_995: unit)
    call L_2530 (slice_1 (env_995, x_3197)) handle _ => raise
  block L_2530 (x_3199: t_13)
    case x_3190 of
      WR_0 => L_2531
  block L_2531 (x_3200:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_5: t_14 = #10 (x_3200)
    case #_5 of
      NONE_17 => L_2533 | SOME_10 => L_2532
  block L_2532 (x_3201: lambdas_5)
    case base_2 (*con baseEn ... e_34)*) of
      baseEnv_2 => L_2534
  block L_2534 (env_996: unit)
    call L_2535 (base_4 (env_996, x_3199)) handle _ => raise
  block L_2535 (x_3202: ((word8) array, word32, word32) tuple)
    val sz_5: word32 = #2 (x_3202)
    val i_5: word32 = #1 (x_3202)
    val b_11: (word8) array = #0 (x_3202)
    val x_3203: (word32, word32) tuple = (i_5, sz_5)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_2536
  block L_2536 (env_997: unit)
    call L_2537 (x_1626 (env_997, x_3203)) handle _ => raise
  block L_2537 (max_4: word32)
    val tuple_103: (word32, (word8) array, lambdas_5) tuple =
      (max_4, b_11, x_3201)
    call tail loop_25 (tuple_103, i_5)
  block L_2533 ()
    raise (x_1049 (*con Blocki ... 1048)*))
fun loop_25 (env_998: (word32, (word8) array, lambdas_5) tuple, x_3204: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_2538 ()
  block L_2538 ()
    val max_5: word32 = #0 (env_998)
    val b_12: (word8) array = #1 (env_998)
    val x_3206: lambdas_5 = #2 (env_998)
    val x_3205: (word32, word32) tuple = (x_3204, max_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2539
  block L_2539 (env_999: unit)
    call L_2540 (x_2054 (env_999, x_3205)) handle _ => raise
  block L_2540 (x_3207: bool)
    case x_3207 of
      true => L_2542 | false => L_2541
  block L_2541 ()
    val x_3208: (word32, word32) tuple = (max_5, x_3204)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_2543
  block L_2543 (env_1000: unit)
    call L_2544 (x_1785 (env_1000, x_3208)) handle _ => raise
  block L_2544 (x_3209: word32)
    val x_3211: t_0 = con SOME_0 (x_3209)
    val x_3210: ((word8) array, word32, t_0) tuple = (b_12, x_3204, x_3211)
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_2545
  block L_2545 (env_1001: unit)
    call L_2546 (slice_1 (env_1001, x_3210)) handle _ => raise
  block L_2546 (x_3212: t_13)
    case x_3206 of
      xEnv_239 => L_2547
  block L_2547 (env_1002:
                  (lambdas_491,
                   lambdas_488,
                   lambdas_487,
                   word32,
                   (bool) ref,
                   (bool) ref) tuple)
    call L_2548 (x_2825 (env_1002, x_3212)) handle _ => raise
  block L_2548 (j_1: word32)
    val x_3213: (word32, word32) tuple = (j_1, x_1138 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2549
  block L_2549 (env_1003: unit)
    call L_2550 (x_2054 (env_1003, x_3213)) handle _ => raise
  block L_2550 (x_3214: bool)
    case x_3214 of
      true => L_2552 | false => L_2551
  block L_2551 ()
    val x_3215: (word32, word32) tuple = (x_3204, j_1)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_2553
  block L_2553 (env_1004: unit)
    call L_2554 (x_1626 (env_1004, x_3215)) handle _ => raise
  block L_2554 (x_3216: word32)
    call tail loop_25 (env_998, x_3216)
  block L_2552 ()
    raise (x_1141 (*con Fail_0 (x_1140)*))
  block L_2542 ()
    return (x_1137 (*()*))
fun outstreamName_1 (env_1005: unit, x_3217: outstream_0):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_2555 ()
  block L_2555 ()
    case outstreamWriter_0 (*con outstr ... e_45)*) of
      outstreamWriterEnv_0 => L_2556
  block L_2556 (env_1006: unit)
    call L_2557 (outstreamWriter_1 (env_1006, x_3217)) handle _ => raise
  block L_2557 (x_3218: writer_0)
    case x_3218 of
      WR_0 => L_2558
  block L_2558 (x_3219:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_6: (word8) vector = #7 (x_3219)
    return (#_6)
fun outstreamWriter_1 (env_1007: unit, x_3220: outstream_0):
  {returns = Some (writer_0), raises = Some (exn)} =
L_2559 ()
  block L_2559 ()
    case x_3220 of
      Out_0 => L_2560
  block L_2560 (x_3221:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val #_7: writer_0 = #3 (x_3221)
    return (#_7)
fun terminated_1 (env_1008: unit, x_3222: state_0):
  {returns = Some (bool), raises = Some (exn)} =
L_2561 ()
  block L_2561 ()
    case x_3222 of
      Active_1 => L_2562 | _ => L_2563
  block L_2563 ()
    goto L_2564 (x_1133 (*con false*))
  block L_2562 ()
    goto L_2564 (x_1134 (*con true*))
  block L_2564 (x_3223: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_2565
  block L_2565 (env_1009: unit)
    call tail not_1 (env_1009, x_3223)
fun liftExn_1 (env_1010: unit, x_3224: (word8) vector):
  {returns = Some (lambdas_79), raises = Some (exn)} =
L_2566 ()
  block L_2566 ()
    val x_3225: lambdas_79 = con xEnv_86 (x_3224)
    return (x_3225)
fun x_2521 (env_1011: (word8) vector, x_3226: (word8) vector):
  {returns = Some (lambdas_78), raises = Some (exn)} =
L_2567 ()
  block L_2567 ()
    val x_3228: ((word8) vector, (word8) vector) tuple = (env_1011, x_3226)
    val x_3227: lambdas_78 = con xEnv_85 (x_3228)
    return (x_3227)
fun x_2523 (env_1012: ((word8) vector, (word8) vector) tuple, x_3229: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_2568 ()
  block L_2568 ()
    val x_3233: (word8) vector = #0 (env_1012)
    val x_3234: (word8) vector = #1 (env_1012)
    val x_3232: (exn, (word8) vector, (word8) vector) tuple =
      (x_3229, x_3234, x_3233)
    val x_3231:
      ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple =
      (x_1483, x_3232)
    val x_3230: exn = con Io_0 (x_3231)
    raise (x_3230)
fun lseek_2 (env_1013: lambdas_54, x_3235: (word32, word64, whence_0) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_2569 ()
  block L_2569 ()
    val w_0: whence_0 = #2 (x_3235)
    val n_0: word64 = #1 (x_3235)
    val fd_4: word32 = #0 (x_3235)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_2570
  block L_2570 (env_1014: unit)
    call L_2571 (sextdFromInt32ToInt64_1 (env_1014, x_1121 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2571 (x_3236: word64)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2572
  block L_2572 (env_1015: unit)
    call L_2573 (atomicBegin_1 (env_1015, x_1122 (*()*))) handle _ => raise
  block L_2573 (x_3237: unit)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_2574
  block L_2574 (env_1016: unit)
    call L_2575 (toRep_2 (env_1016, fd_4)) handle _ => L_2576
  block L_2576 (x_3238: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2577
  block L_2577 (env_1017: unit)
    call L_2578 (atomicEnd_1 (env_1017, x_1126 (*()*))) handle _ => raise
  block L_2578 (x_3239: unit)
    raise (x_3238)
  block L_2575 (x_3240: word32)
    case w_0 of
      SEEK_SET_1 => L_2581 | SEEK_END_1 => L_2580 | SEEK_CUR_1 => L_2579
  block L_2579 ()
    goto L_2582 (SEEK_CUR_0 (*0x1:w32*))
  block L_2580 ()
    goto L_2582 (SEEK_END_0 (*0x2:w32*))
  block L_2581 ()
    goto L_2582 (SEEK_SET_0 (*0x0:w32*))
  block L_2582 (x_3241: word32)
    val x_3243: word64 =
      prim CFunction {args = (word32, word64, word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Int64, Int32),
                                   res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_IO_lseek} (x_3240, n_0, x_3241)
    val x_3242: (word64, word64) tuple = (x_3236, x_3243)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2583
  block L_2583 (env_1018: unit)
    call L_2584 (x_2300 (env_1018, x_3242)) handle _ => raise
  block L_2584 (x_3244: bool)
    case x_3244 of
      true => L_2586 | false => L_2585
  block L_2585 ()
    case x_1124 (*con xEnv_61 (x_1123)*) of
      xEnv_61 => L_2587
  block L_2587 (env_1019: unit)
    call L_2588 (x_3245 (env_1019, x_3243)) handle _ => L_2589
  block L_2589 (x_3246: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2590
  block L_2590 (env_1020: unit)
    call L_2591 (atomicEnd_1 (env_1020, x_1131 (*()*))) handle _ => raise
  block L_2591 (x_3247: unit)
    raise (x_3246)
  block L_2588 (x_3248: word64)
    goto L_2592 (x_3248)
  block L_2592 (x_3249: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2593
  block L_2593 (env_1021: unit)
    call L_2594 (atomicEnd_1 (env_1021, x_1130 (*()*))) handle _ => raise
  block L_2594 (x_3250: unit)
    return (x_3249)
  block L_2586 ()
    val x_3251: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2595
  block L_2595 (env_1022: unit)
    call L_2596 (fromRep_1 (env_1022, x_3251)) handle _ => raise
  block L_2596 (e_9: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2597
  block L_2597 (env_1023: unit)
    call L_2598 (atomicEnd_1 (env_1023, x_1127 (*()*))) handle _ => raise
  block L_2598 (x_3252: unit)
    call L_2599 (loop_26 (e_9, x_1125 (*con nil_8*))) handle _ => raise
  block L_2599 (x_3253: t_25)
    case x_3253 of
      NONE_8 => L_2601 | SOME_18 => L_2600
  block L_2600 (x_3254: (word32, lambdas_2) tuple)
    bug
  block L_2601 ()
    case env_1013 of
      raiseSysEnv_1 => L_2602
  block L_2602 (env_1024: lambdas_223)
    call tail raiseSys_7 (env_1024, e_9)
fun loop_26 (env_1025: word32, x_3255: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2603 ()
  block L_2603 ()
    case x_3255 of
      nil_8 => L_2605 | ::_10 => L_2604
  block L_2604 (x_3256: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3259: list_9 = #1 (x_3256)
    val x_3258: (word32, lambdas_2) tuple = #0 (x_3256)
    val e'_6: word32 = #0 (x_3258)
    val x_3257: (word32, word32) tuple = (env_1025, e'_6)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2606
  block L_2606 (env_1026: unit)
    call L_2607 (x_2054 (env_1026, x_3257)) handle _ => raise
  block L_2607 (x_3260: bool)
    case x_3260 of
      true => L_2609 | false => L_2608
  block L_2608 ()
    call tail loop_26 (env_1025, x_3259)
  block L_2609 ()
    val x_3261: t_25 = con SOME_18 (x_3258)
    return (x_3261)
  block L_2605 ()
    return (x_1128 (*con NONE_8*))
fun x_3245 (env_1027: unit, x_3262: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2610 ()
  block L_2610 ()
    return (x_3262)
fun setfl_2 (env_1028: (word32, (bool) ref, (lambdas_46) ref, lambdas_45) tuple,
             x_3263: (word32, word32) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_2611 ()
  block L_2611 ()
    val intr_7: word32 = #0 (env_1028)
    val restartFlag_7: (bool) ref = #1 (env_1028)
    val blocker_7: (lambdas_46) ref = #2 (env_1028)
    val raiseSys_10: lambdas_45 = #3 (env_1028)
    val flags_0: word32 = #1 (x_3263)
    val fd_5: word32 = #0 (x_3263)
    val x_3265: (word32, word32) tuple = (flags_0, fd_5)
    val x_3264: lambdas_89 = con xEnv_87 (x_3265)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2612
  block L_2612 (env_1029: unit)
    call L_2613 (sextdFromInt32ToInt32_1 (env_1029, x_1082 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2613 (x_3266: word32)
    val tuple_104:
      (word32, (bool) ref, lambdas_89, word32, (lambdas_46) ref, lambdas_45) tuple =
      (intr_7, restartFlag_7, x_3264, x_3266, blocker_7, raiseSys_10)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2614
  block L_2614 (env_1030: unit)
    call L_2615 (atomicBegin_1 (env_1030, x_1111 (*()*))) handle _ => raise
  block L_2615 (x_3267: unit)
    call L_2616 (x_3268 (x_3265, x_1112 (*()*))) handle _ => L_2617
  block L_2617 (x_3269: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2618
  block L_2618 (env_1031: unit)
    call L_2619 (atomicEnd_1 (env_1031, x_1116 (*()*))) handle _ => raise
  block L_2619 (x_3270: unit)
    raise (x_3269)
  block L_2616 (return_12: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2620
  block L_2620 (env_1032: unit)
    call L_2621 (x_2850 (env_1032, return_12)) handle _ => raise
  block L_2621 (return_13: word32)
    val x_3271: (word32, word32) tuple = (x_3266, return_13)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2622
  block L_2622 (env_1033: unit)
    call L_2623 (x_2054 (env_1033, x_3271)) handle _ => raise
  block L_2623 (x_3272: bool)
    case x_3272 of
      true => L_2625 | false => L_2624
  block L_2624 ()
    case x_1114 (*con xEnv_60 (x_1113)*) of
      xEnv_60 => L_2626
  block L_2626 (env_1034: unit)
    call L_2627 (x_3273 (env_1034, return_13)) handle _ => L_2628
  block L_2628 (x_3274: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2629
  block L_2629 (env_1035: unit)
    call L_2630 (atomicEnd_1 (env_1035, x_1119 (*()*))) handle _ => raise
  block L_2630 (x_3275: unit)
    raise (x_3274)
  block L_2627 (x_3276: word32)
    goto L_2631 (x_3276)
  block L_2631 (x_3277: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2632
  block L_2632 (env_1036: unit)
    call L_2633 (atomicEnd_1 (env_1036, x_1118 (*()*))) handle _ => raise
  block L_2633 (x_3278: unit)
    return (x_1120 (*()*))
  block L_2625 ()
    val x_3279: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2634
  block L_2634 (env_1037: unit)
    call L_2635 (fromRep_1 (env_1037, x_3279)) handle _ => raise
  block L_2635 (e_10: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2636
  block L_2636 (env_1038: unit)
    call L_2637 (atomicEnd_1 (env_1038, x_1117 (*()*))) handle _ => raise
  block L_2637 (x_3280: unit)
    val x_3281: (word32, list_10) tuple = (e_10, x_1115 (*con nil_7*))
    call L_2638 (errUnblocked_3 (tuple_104, x_3281)) handle _ => raise
  block L_2638 (x_3282: word32)
    return (x_1120 (*()*))
fun x_3273 (env_1039: unit, x_3283: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2639 ()
  block L_2639 ()
    return (x_3283)
fun errUnblocked_3 (env_1040:
                      (word32,
                       (bool) ref,
                       lambdas_89,
                       word32,
                       (lambdas_46) ref,
                       lambdas_45) tuple,
                    x_3284: (word32, list_10) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2640 ()
  block L_2640 ()
    val intr_8: word32 = #0 (env_1040)
    val restartFlag_8: (bool) ref = #1 (env_1040)
    val x_3286: lambdas_89 = #2 (env_1040)
    val x_3285: word32 = #3 (env_1040)
    val blocker_8: (lambdas_46) ref = #4 (env_1040)
    val raiseSys_11: lambdas_45 = #5 (env_1040)
    val handlers_3: list_10 = #1 (x_3284)
    val errno_3: word32 = #0 (x_3284)
    call L_2641 (loop_27 (errno_3, handlers_3)) handle _ => raise
  block L_2641 (x_3287: t_26)
    case x_3287 of
      NONE_7 => L_2643 | SOME_19 => L_2642
  block L_2642 (x_3288: (word32, lambdas_2) tuple)
    bug
  block L_2643 ()
    val x_3289: (word32, word32) tuple = (errno_3, intr_8)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2644
  block L_2644 (env_1041: unit)
    call L_2645 (x_2054 (env_1041, x_3289)) handle _ => raise
  block L_2645 (x_3290: bool)
    case x_3290 of
      true => L_2647 | false => L_2646
  block L_2646 ()
    goto L_2648 (x_1084 (*con false*))
  block L_2647 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2649
  block L_2649 (env_1042: unit)
    call L_2648 (x_2648 (env_1042, restartFlag_8)) handle _ => raise
  block L_2648 (x_3291: bool)
    case x_3291 of
      true => L_2651 | false => L_2650
  block L_2650 ()
    case raiseSys_11 of
      raiseSysEnv_0 => L_2652
  block L_2652 (env_1043: lambdas_223)
    call tail raiseSys_4 (env_1043, errno_3)
  block L_2651 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2653
  block L_2653 (env_1044: unit)
    call L_2654 (atomicState_1 (env_1044, x_1085 (*()*))) handle _ => raise
  block L_2654 (x_3292: word32)
    val x_3293: (word32, word32) tuple = (x_3292, x_1086 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2655
  block L_2655 (env_1045: unit)
    call L_2656 (x_2054 (env_1045, x_3293)) handle _ => raise
  block L_2656 (x_3294: bool)
    case x_3294 of
      true => L_2658 | false => L_2657
  block L_2657 ()
    val x_3295: lambdas_46 = prim Ref_deref[lambdas_46] (blocker_8)
    case x_3295 of
      xEnv_53 => L_2659
  block L_2659 (env_1046: unit)
    call L_2660 (x_2875 (env_1046, x_1096 (*()*))) handle _ => raise
  block L_2660 (finish_3: lambdas_224)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2661
  block L_2661 (env_1047: unit)
    call L_2662 (atomicBegin_1 (env_1047, x_1097 (*()*))) handle _ => L_2663
  block L_2662 (x_3296: unit)
    case x_3286 of
      xEnv_87 => L_2664
  block L_2664 (env_1048: (word32, word32) tuple)
    call L_2665 (x_3268 (env_1048, x_1098 (*()*))) handle _ => L_2666
  block L_2666 (x_3297: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2667
  block L_2667 (env_1049: unit)
    call L_2668 (atomicEnd_1 (env_1049, x_1102 (*()*))) handle _ => L_2663
  block L_2668 (x_3298: unit)
    goto L_2663 (x_3297)
  block L_2665 (return_14: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2669
  block L_2669 (env_1050: unit)
    call L_2670 (x_2850 (env_1050, return_14)) handle _ => L_2663
  block L_2670 (return_15: word32)
    val x_3299: (word32, word32) tuple = (x_3285, return_15)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2671
  block L_2671 (env_1051: unit)
    call L_2672 (x_2054 (env_1051, x_3299)) handle _ => L_2663
  block L_2672 (x_3300: bool)
    case x_3300 of
      true => L_2674 | false => L_2673
  block L_2673 ()
    case x_1100 (*con xEnv_59 (x_1099)*) of
      xEnv_59 => L_2675
  block L_2675 (env_1052: unit)
    call L_2676 (x_3301 (env_1052, return_15)) handle _ => L_2677
  block L_2677 (x_3302: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2678
  block L_2678 (env_1053: unit)
    call L_2679 (atomicEnd_1 (env_1053, x_1107 (*()*))) handle _ => L_2663
  block L_2679 (x_3303: unit)
    goto L_2663 (x_3302)
  block L_2676 (x_3304: word32)
    goto L_2680 (x_3304)
  block L_2680 (x_3305: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2681
  block L_2681 (env_1054: unit)
    call L_2682 (atomicEnd_1 (env_1054, x_1106 (*()*))) handle _ => L_2663
  block L_2682 (x_3306: unit)
    goto L_2683 (x_3305)
  block L_2674 ()
    val x_3307: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2684
  block L_2684 (env_1055: unit)
    call L_2685 (fromRep_1 (env_1055, x_3307)) handle _ => L_2663
  block L_2685 (e_11: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2686
  block L_2686 (env_1056: unit)
    call L_2687 (atomicEnd_1 (env_1056, x_1103 (*()*))) handle _ => L_2663
  block L_2687 (x_3308: unit)
    call L_2688 (loop_28 (e_11, x_1101 (*con nil_7*))) handle _ => L_2663
  block L_2688 (x_3309: t_26)
    case x_3309 of
      NONE_7 => L_2690 | SOME_19 => L_2689
  block L_2689 (x_3310: (word32, lambdas_2) tuple)
    bug
  block L_2690 ()
    case raiseSys_11 of
      raiseSysEnv_0 => L_2691
  block L_2691 (env_1057: lambdas_223)
    call L_2683 (raiseSys_4 (env_1057, e_11)) handle _ => L_2663
  block L_2663 (x_3311: exn)
    case finish_3 of
      xEnv_52 => L_2692
  block L_2692 (env_1058: unit)
    call L_2693 (x_2892 (env_1058, x_1109 (*()*))) handle _ => raise
  block L_2693 (x_3312: unit)
    raise (x_3311)
  block L_2683 (x_3313: word32)
    goto L_2694 (x_3313)
  block L_2694 (x_3314: word32)
    case finish_3 of
      xEnv_52 => L_2695
  block L_2695 (env_1059: unit)
    call L_2696 (x_2892 (env_1059, x_1108 (*()*))) handle _ => raise
  block L_2696 (x_3315: unit)
    return (x_3314)
  block L_2658 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2697
  block L_2697 (env_1060: unit)
    call L_2698 (atomicBegin_1 (env_1060, x_1087 (*()*))) handle _ => raise
  block L_2698 (x_3316: unit)
    case x_3286 of
      xEnv_87 => L_2699
  block L_2699 (env_1061: (word32, word32) tuple)
    call L_2700 (x_3268 (env_1061, x_1088 (*()*))) handle _ => L_2701
  block L_2701 (x_3317: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2702
  block L_2702 (env_1062: unit)
    call L_2703 (atomicEnd_1 (env_1062, x_1092 (*()*))) handle _ => raise
  block L_2703 (x_3318: unit)
    raise (x_3317)
  block L_2700 (return_16: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2704
  block L_2704 (env_1063: unit)
    call L_2705 (x_2850 (env_1063, return_16)) handle _ => raise
  block L_2705 (return_17: word32)
    val x_3319: (word32, word32) tuple = (x_3285, return_17)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2706
  block L_2706 (env_1064: unit)
    call L_2707 (x_2054 (env_1064, x_3319)) handle _ => raise
  block L_2707 (x_3320: bool)
    case x_3320 of
      true => L_2709 | false => L_2708
  block L_2708 ()
    case x_1090 (*con xEnv_58 (x_1089)*) of
      xEnv_58 => L_2710
  block L_2710 (env_1065: unit)
    call L_2711 (x_3321 (env_1065, return_17)) handle _ => L_2712
  block L_2712 (x_3322: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2713
  block L_2713 (env_1066: unit)
    call L_2714 (atomicEnd_1 (env_1066, x_1095 (*()*))) handle _ => raise
  block L_2714 (x_3323: unit)
    raise (x_3322)
  block L_2711 (x_3324: word32)
    goto L_2715 (x_3324)
  block L_2715 (x_3325: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2716
  block L_2716 (env_1067: unit)
    call L_2717 (atomicEnd_1 (env_1067, x_1094 (*()*))) handle _ => raise
  block L_2717 (x_3326: unit)
    return (x_3325)
  block L_2709 ()
    val x_3327: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2718
  block L_2718 (env_1068: unit)
    call L_2719 (fromRep_1 (env_1068, x_3327)) handle _ => raise
  block L_2719 (e_12: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2720
  block L_2720 (env_1069: unit)
    call L_2721 (atomicEnd_1 (env_1069, x_1093 (*()*))) handle _ => raise
  block L_2721 (x_3328: unit)
    val x_3329: (word32, list_10) tuple = (e_12, x_1091 (*con nil_7*))
    call tail errUnblocked_3 (env_1040, x_3329)
fun loop_28 (env_1070: word32, x_3330: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2722 ()
  block L_2722 ()
    case x_3330 of
      nil_7 => L_2724 | ::_11 => L_2723
  block L_2723 (x_3331: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_3334: list_10 = #1 (x_3331)
    val x_3333: (word32, lambdas_2) tuple = #0 (x_3331)
    val e'_7: word32 = #0 (x_3333)
    val x_3332: (word32, word32) tuple = (env_1070, e'_7)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2725
  block L_2725 (env_1071: unit)
    call L_2726 (x_2054 (env_1071, x_3332)) handle _ => raise
  block L_2726 (x_3335: bool)
    case x_3335 of
      true => L_2728 | false => L_2727
  block L_2727 ()
    call tail loop_28 (env_1070, x_3334)
  block L_2728 ()
    val x_3336: t_26 = con SOME_19 (x_3333)
    return (x_3336)
  block L_2724 ()
    return (x_1104 (*con NONE_7*))
fun x_3301 (env_1072: unit, x_3337: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2729 ()
  block L_2729 ()
    return (x_3337)
fun x_3321 (env_1073: unit, x_3338: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2730 ()
  block L_2730 ()
    return (x_3338)
fun loop_27 (env_1074: word32, x_3339: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2731 ()
  block L_2731 ()
    case x_3339 of
      nil_7 => L_2733 | ::_11 => L_2732
  block L_2732 (x_3340: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_3343: list_10 = #1 (x_3340)
    val x_3342: (word32, lambdas_2) tuple = #0 (x_3340)
    val e'_8: word32 = #0 (x_3342)
    val x_3341: (word32, word32) tuple = (env_1074, e'_8)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2734
  block L_2734 (env_1075: unit)
    call L_2735 (x_2054 (env_1075, x_3341)) handle _ => raise
  block L_2735 (x_3344: bool)
    case x_3344 of
      true => L_2737 | false => L_2736
  block L_2736 ()
    call tail loop_27 (env_1074, x_3343)
  block L_2737 ()
    val x_3345: t_26 = con SOME_19 (x_3342)
    return (x_3345)
  block L_2733 ()
    return (x_1083 (*con NONE_7*))
fun x_3268 (env_1076: (word32, word32) tuple, x_3346: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_2738 ()
  block L_2738 ()
    val flags_1: word32 = #0 (env_1076)
    val fd_6: word32 = #1 (env_1076)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_2739
  block L_2739 (env_1077: unit)
    call L_2740 (toRep_2 (env_1077, fd_6)) handle _ => raise
  block L_2740 (x_3347: word32)
    val x_3348: word32 =
      prim CFunction {args = (word32, word32, word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Int32, Int32),
                                   res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_IO_fcntl3} (x_3347,
                                                 F_SETFL_0 (*0x4:w32*),
                                                 flags_1)
    return (x_3348)
fun x_2326 (env_1078: (lambdas_223, lambdas_92) tuple, x_3349: word32):
  {returns = Some (stat_0), raises = Some (exn)} =
L_2741 ()
  block L_2741 ()
    val errorMsg_1: lambdas_223 = #0 (env_1078)
    val x_3350: lambdas_92 = #1 (env_1078)
    case toRep_1 (*con toRepE ... _810)*) of
      toRepEnv_1 => L_2742
  block L_2742 (env_1079: unit)
    call L_2743 (toRep_2 (env_1079, x_3349)) handle _ => raise
  block L_2743 (x_3351: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2744
  block L_2744 (env_1080: unit)
    call L_2745 (sextdFromInt32ToInt32_1 (env_1080, x_1071 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2745 (x_3352: word32)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2746
  block L_2746 (env_1081: unit)
    call L_2747 (atomicBegin_1 (env_1081, x_1072 (*()*))) handle _ => raise
  block L_2747 (x_3353: unit)
    val x_3354: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_fstat} (x_3351)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2748
  block L_2748 (env_1082: unit)
    call L_2749 (x_2850 (env_1082, x_3354)) handle _ => raise
  block L_2749 (return_18: word32)
    val x_3355: (word32, word32) tuple = (x_3352, return_18)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2750
  block L_2750 (env_1083: unit)
    call L_2751 (x_2054 (env_1083, x_3355)) handle _ => raise
  block L_2751 (x_3356: bool)
    case x_3356 of
      true => L_2753 | false => L_2752
  block L_2752 ()
    call L_2754 (x_3357 (x_3350, return_18)) handle _ => L_2755
  block L_2755 (x_3358: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2756
  block L_2756 (env_1084: unit)
    call L_2757 (atomicEnd_1 (env_1084, x_1081 (*()*))) handle _ => raise
  block L_2757 (x_3359: unit)
    raise (x_3358)
  block L_2754 (x_3360: stat_0)
    goto L_2758 (x_3360)
  block L_2758 (x_3361: stat_0)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2759
  block L_2759 (env_1085: unit)
    call L_2760 (atomicEnd_1 (env_1085, x_1080 (*()*))) handle _ => raise
  block L_2760 (x_3362: unit)
    return (x_3361)
  block L_2753 ()
    val x_3363: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_2761
  block L_2761 (env_1086: unit)
    call L_2762 (fromRep_1 (env_1086, x_3363)) handle _ => raise
  block L_2762 (e_13: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2763
  block L_2763 (env_1087: unit)
    call L_2764 (atomicEnd_1 (env_1087, x_1077 (*()*))) handle _ => raise
  block L_2764 (x_3364: unit)
    call L_2765 (loop_29 (e_13, x_1075 (*con nil_6*))) handle _ => raise
  block L_2765 (x_3365: t_24)
    case x_3365 of
      NONE_6 => L_2767 | SOME_17 => L_2766
  block L_2766 (x_3366: (word32, lambdas_2) tuple)
    bug
  block L_2767 ()
    case errorMsg_1 of
      errorMsgEnv_0 => L_2768
  block L_2768 (env_1088: (cpointer, lambdas_485) tuple)
    call L_2769 (errorMsg_2 (env_1088, e_13)) handle _ => raise
  block L_2769 (x_3367: (word8) vector)
    val x_3371: t_0 = con SOME_0 (e_13)
    val x_3370: ((word8) vector, t_0) tuple = (x_3367, x_3371)
    val x_3369: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1476, x_3370)
    val x_3368: exn = con SysErr_0 (x_3369)
    raise (x_3368)
fun loop_29 (env_1089: word32, x_3372: list_8):
  {returns = Some (t_24), raises = Some (exn)} =
L_2770 ()
  block L_2770 ()
    case x_3372 of
      nil_6 => L_2772 | ::_9 => L_2771
  block L_2771 (x_3373: ((word32, lambdas_2) tuple, list_8) tuple)
    val x_3376: list_8 = #1 (x_3373)
    val x_3375: (word32, lambdas_2) tuple = #0 (x_3373)
    val e'_9: word32 = #0 (x_3375)
    val x_3374: (word32, word32) tuple = (env_1089, e'_9)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2773
  block L_2773 (env_1090: unit)
    call L_2774 (x_2054 (env_1090, x_3374)) handle _ => raise
  block L_2774 (x_3377: bool)
    case x_3377 of
      true => L_2776 | false => L_2775
  block L_2775 ()
    call tail loop_29 (env_1089, x_3376)
  block L_2776 ()
    val x_3378: t_24 = con SOME_17 (x_3375)
    return (x_3378)
  block L_2772 ()
    return (x_1078 (*con NONE_6*))
fun x_3357 (env_1091: lambdas_92, x_3379: word32):
  {returns = Some (stat_0), raises = Some (exn)} =
L_2777 ()
  block L_2777 ()
    val x_3383: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getDev} ()
    val x_3382: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getINo} ()
    val x_3381: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getMode} ()
    val x_3380: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getNLink} ()
    case zextdFromWord64ToInt32_0 (*con zextdF ... _121)*) of
      zextdFromWord64ToInt32Env_0 => L_2778
  block L_2778 (env_1092: unit)
    call L_2779 (zextdFromWord64ToInt32_1 (env_1092, x_3380)) handle _ => raise
  block L_2779 (res_0: word32)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_2780
  block L_2780 (env_1093: unit)
    call L_2781 (zextdFromInt32ToWord64_1 (env_1093, res_0)) handle _ => raise
  block L_2781 (x_3384: word64)
    val x_3385: (word64, word64) tuple = (x_3380, x_3384)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2782
  block L_2782 (env_1094: unit)
    call L_2783 (x_2300 (env_1094, x_3385)) handle _ => raise
  block L_2783 (x_3386: bool)
    case x_3386 of
      true => L_2785 | false => L_2784
  block L_2784 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2785 ()
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_2786
  block L_2786 (env_1095: unit)
    call L_2787 (<=_4 (env_1095, x_1484)) handle _ => raise
  block L_2787 (x_3387: bool)
    case x_3387 of
      true => L_2789 | false => L_2788
  block L_2788 ()
    goto L_2790 (x_1074 (*con false*))
  block L_2789 ()
    val x_3388: (word32, word32) tuple = (res_0, x_1073 (*0x0:w32*))
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_2791
  block L_2791 (env_1096: unit)
    call L_2790 (<_5 (env_1096, x_3388)) handle _ => raise
  block L_2790 (x_3389: bool)
    case x_3389 of
      true => L_2793 | false => L_2792
  block L_2792 ()
    val x_3393: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getUId} ()
    val x_3392: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getGId} ()
    val x_3391: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getSize} ()
    val x_3390: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getATime} ()
    case env_1091 of
      xEnv_242 => L_2794
  block L_2794 (env_1097: (lambdas_493, intInf, lambdas_492) tuple)
    call L_2795 (x_3394 (env_1097, x_3390)) handle _ => raise
  block L_2795 (x_3395: time_0)
    val x_3396: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getMTime} ()
    case env_1091 of
      xEnv_242 => L_2796
  block L_2796 (env_1098: (lambdas_493, intInf, lambdas_492) tuple)
    call L_2797 (x_3394 (env_1098, x_3396)) handle _ => raise
  block L_2797 (x_3397: time_0)
    val x_3398: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getCTime} ()
    case env_1091 of
      xEnv_242 => L_2798
  block L_2798 (env_1099: (lambdas_493, intInf, lambdas_492) tuple)
    call L_2799 (x_3394 (env_1099, x_3398)) handle _ => raise
  block L_2799 (x_3399: time_0)
    val x_3401:
      (time_0,
       time_0,
       word64,
       word32,
       word64,
       word32,
       time_0,
       word32,
       word64,
       word32) tuple =
      (x_3395,
       x_3399,
       x_3383,
       x_3392,
       x_3382,
       x_3381,
       x_3397,
       res_0,
       x_3391,
       x_3393)
    val x_3400: stat_0 = con T_2 (x_3401)
    return (x_3400)
  block L_2793 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2344 (env_1100: word32, x_3402: list_4):
  {returns = Some (word32), raises = Some (exn)} =
L_2800 ()
  block L_2800 ()
    val x_3403: (list_4, word32) tuple = (x_3402, env_1100)
    case loop_1 (*con loopEn ... e_42)*) of
      loopEnv_1 => L_2801
  block L_2801 (env_1101: unit)
    call tail loop_30 (env_1101, x_3403)
fun loop_30 (env_1102: unit, x_3404: (list_4, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2802 ()
  block L_2802 ()
    val b_13: word32 = #1 (x_3404)
    val l_3: list_4 = #0 (x_3404)
    case l_3 of
      nil_10 => L_2804 | ::_2 => L_2803
  block L_2803 (x_3405: (word32, list_4) tuple)
    val x_3407: list_4 = #1 (x_3405)
    val x_3406: word32 = #0 (x_3405)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_2805
  block L_2805 (env_1103: unit)
    call L_2806 (idFromInt32ToWord32_1 (env_1103, x_3406)) handle _ => raise
  block L_2806 (x_3408: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_2807
  block L_2807 (env_1104: unit)
    call L_2808 (idFromInt32ToWord32_1 (env_1104, b_13)) handle _ => raise
  block L_2808 (x_3409: word32)
    val x_3410: word32 = prim Word32_orb (x_3408, x_3409)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_2809
  block L_2809 (env_1105: unit)
    call L_2810 (idFromWord32ToInt32_1 (env_1105, x_3410)) handle _ => raise
  block L_2810 (x_3411: word32)
    val x_3412: (list_4, word32) tuple = (x_3407, x_3411)
    case loop_1 (*con loopEn ... e_42)*) of
      loopEnv_1 => L_2811
  block L_2811 (env_1106: unit)
    call tail loop_30 (env_1106, x_3412)
  block L_2804 ()
    return (b_13)
fun x_3394 (env_1107: (lambdas_493, intInf, lambdas_492) tuple, x_3413: word64):
  {returns = Some (time_0), raises = Some (exn)} =
L_2812 ()
  block L_2812 ()
    val reserve_2: lambdas_493 = #0 (env_1107)
    val x_3414: intInf = #1 (env_1107)
    val sextdFromInt64_2: lambdas_492 = #2 (env_1107)
    case sextdFromInt64_2 of
      sextdFromInt64Env_0 => L_2813
  block L_2813 (env_1108: (word32, word64) tuple)
    call L_2814 (sextdFromInt64_1 (env_1108, x_3413)) handle _ => raise
  block L_2814 (x_3415: intInf)
    val x_3416: (intInf, intInf) tuple = (x_3415, x_3414)
    case areSmall_0 (*con areSma ... e_25)*) of
      areSmallEnv_0 => L_2815
  block L_2815 (env_1109: unit)
    call L_2816 (areSmall_1 (env_1109, x_3416)) handle _ => raise
  block L_2816 (x_3417: bool)
    case x_3417 of
      true => L_2818 | false => L_2817
  block L_2817 ()
    goto L_2819 (x_1068 (*con NONE_5*))
  block L_2818 ()
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_2820
  block L_2820 (env_1110: unit)
    call L_2821 (dropTagCoerce_1 (env_1110, x_3415)) handle _ => L_2822
  block L_2821 (lhsw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_2823
  block L_2823 (env_1111: unit)
    call L_2824 (zextdFromWord64ToInt64_1 (env_1111, lhsw_0)) handle _ => L_2822
  block L_2824 (lhsi_0: word64)
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_2825
  block L_2825 (env_1112: unit)
    call L_2826 (dropTagCoerce_1 (env_1112, x_3414)) handle _ => L_2822
  block L_2826 (rhsw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_2827
  block L_2827 (env_1113: unit)
    call L_2828 (zextdFromWord64ToInt64_1 (env_1113, rhsw_0)) handle _ => L_2822
  block L_2828 (rhsi_0: word64)
    val x_3419: word64 = prim WordS64_mul (lhsi_0, rhsi_0)
    val x_3418: bool = prim WordS64_mulCheckP (lhsi_0, rhsi_0)
    case x_3418 of
      true => L_2830 | false => L_2829
  block L_2829 ()
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_2831
  block L_2831 (env_1114: unit)
    call L_2832 (zextdFromInt64ToWord64_1 (env_1114, x_3419)) handle _ => L_2822
  block L_2832 (answ_1: word64)
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_2833
  block L_2833 (env_1115: unit)
    call L_2834 (addTag_1 (env_1115, answ_1)) handle _ => L_2822
  block L_2834 (ans_5: word64)
    val x_3420: word64 = prim Word64_xorb (ans_5, answ_1)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_2835
  block L_2835 (env_1116: unit)
    call L_2836 (zextdFromWord64ToInt64_1 (env_1116, x_3420)) handle _ => L_2822
  block L_2836 (x_3421: word64)
    val x_3422: (word64, word64) tuple = (x_3421, x_1063 (*0x0:w64*))
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_2837
  block L_2837 (env_1117: unit)
    call L_2838 (>=_7 (env_1117, x_3422)) handle _ => L_2822
  block L_2838 (x_3423: bool)
    case x_3423 of
      true => L_2840 | false => L_2839
  block L_2839 ()
    goto L_2819 (x_1064 (*con NONE_5*))
  block L_2840 ()
    case fromWord_1 (*con fromWo ... _200)*) of
      fromWordEnv_1 => L_2841
  block L_2841 (env_1118: unit)
    call L_2842 (fromWord_3 (env_1118, ans_5)) handle _ => L_2822
  block L_2842 (x_3424: intInf)
    goto L_2843 (x_3424)
  block L_2830 ()
    goto L_2822 (x_63 (*con Overfl ... x_62)*))
  block L_2822 (x_3425: exn)
    case x_3425 of
      Overflow_0 => L_2844 | _ => L_2845
  block L_2845 ()
    call L_2819 (x_3426 (x_3425, x_1065 (*()*))) handle _ => raise
  block L_2844 (x_3427: (unit) ref)
    val x_3428: bool = prim MLton_equal[(unit) ref] (x_3427, x_62)
    case x_3428 of
      true => L_2847 | false => L_2846
  block L_2846 ()
    call L_2819 (x_3426 (x_3425, x_1067 (*()*))) handle _ => raise
  block L_2847 ()
    goto L_2819 (x_1066 (*con NONE_5*))
  block L_2819 (x_3429: t_7)
    case x_3429 of
      NONE_5 => L_2848 | SOME_5 => L_2843
  block L_2848 ()
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_2849
  block L_2849 (env_1119: unit)
    call L_2850 (numLimbs_1 (env_1119, x_3415)) handle _ => raise
  block L_2850 (x_3430: word64)
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_2851
  block L_2851 (env_1120: unit)
    call L_2852 (numLimbs_1 (env_1120, x_3414)) handle _ => raise
  block L_2852 (x_3431: word64)
    val x_3432: (word64, word64) tuple = (x_3430, x_3431)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_2853
  block L_2853 (env_1121: unit)
    call L_2854 (x_3113 (env_1121, x_3432)) handle _ => raise
  block L_2854 (x_3433: word64)
    val x_3434: (word64, word64) tuple = (x_3433, x_371 (*0x0:w64*))
    case reserve_2 of
      reserveEnv_0 => L_2855
  block L_2855 (env_1122: (word64, word64) tuple)
    call L_2856 (reserve_1 (env_1122, x_3434)) handle _ => raise
  block L_2856 (x_3435: word64)
    val x_3436: intInf = prim IntInf_mul (x_3415, x_3414, x_3435)
    goto L_2843 (x_3436)
  block L_2843 (x_3437: intInf)
    val x_3438: time_0 = con T_1 (x_3437)
    return (x_3438)
fun x_3426 (env_1123: exn, unit_7: unit):
  {returns = Some (t_7), raises = Some (exn)} =
L_2857 ()
  block L_2857 ()
    raise (env_1123)
fun x_3439 (env_1124: (lambdas_31, lambdas_32) tuple, x_3440: exn):
  {returns = Some (t_2), raises = Some (exn)} =
L_2858 ()
  block L_2858 ()
    val concat_4: lambdas_31 = #0 (env_1124)
    val exnMessage_3: lambdas_32 = #1 (env_1124)
    case x_3440 of
      Io_0 => L_2859 | _ => L_2860
  block L_2860 ()
    case x_1056 (*con xEnv_57 (x_1055)*) of
      xEnv_57 => L_2861
  block L_2861 (env_1125: unit)
    call tail x_3441 (env_1125, x_1057 (*()*))
  block L_2859 (x_3442:
                  ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
    val x_3445: (exn, (word8) vector, (word8) vector) tuple = #1 (x_3442)
    val x_3444: (unit) ref = #0 (x_3442)
    val x_3443: bool = prim MLton_equal[(unit) ref] (x_3444, x_1483)
    case x_3443 of
      true => L_2863 | false => L_2862
  block L_2862 ()
    case x_1056 (*con xEnv_57 (x_1055)*) of
      xEnv_57 => L_2864
  block L_2864 (env_1126: unit)
    call tail x_3441 (env_1126, x_1062 (*()*))
  block L_2863 ()
    val x_3448: (word8) vector = #2 (x_3445)
    val x_3447: (word8) vector = #1 (x_3445)
    val x_3446: exn = #0 (x_3445)
    case exnMessage_3 of
      exnMessageEnv_0 => L_2865
  block L_2865 (env_1127: (list_0) ref)
    call L_2866 (exnMessage_2 (env_1127, x_3446)) handle _ => raise
  block L_2866 (x_3449: (word8) vector)
    val x_3461: ((word8) vector, list_7) tuple = (x_3449, x_1058 (*con nil_3*))
    val x_3460: list_7 = con ::_1 (x_3461)
    val x_3459: ((word8) vector, list_7) tuple =
      (x_1059 (*"\" failed with "*), x_3460)
    val x_3458: list_7 = con ::_1 (x_3459)
    val x_3457: ((word8) vector, list_7) tuple = (x_3448, x_3458)
    val x_3456: list_7 = con ::_1 (x_3457)
    val x_3455: ((word8) vector, list_7) tuple = (x_1060 (*" \""*), x_3456)
    val x_3454: list_7 = con ::_1 (x_3455)
    val x_3453: ((word8) vector, list_7) tuple = (x_3447, x_3454)
    val x_3452: list_7 = con ::_1 (x_3453)
    val x_3451: ((word8) vector, list_7) tuple = (x_1061 (*"Io: "*), x_3452)
    val x_3450: list_7 = con ::_1 (x_3451)
    case concat_4 of
      concatEnv_0 => L_2867
  block L_2867 (env_1128: (lambdas_494, lambdas_485, lambdas_495) tuple)
    call L_2868 (concat_2 (env_1128, x_3450)) handle _ => raise
  block L_2868 (x_3462: (word8) vector)
    val x_3463: t_2 = con SOME_1 (x_3462)
    return (x_3463)
fun x_3441 (env_1129: unit, unit_8: unit):
  {returns = Some (t_2), raises = Some (exn)} =
L_2869 ()
  block L_2869 ()
    return (x_1054 (*con NONE_3*))
fun x_3464 (env_1130:
              (lambdas_98,
               real64,
               real64,
               lambdas_99,
               real64,
               word64,
               real64,
               word64) tuple,
            x_3465: t_9):
  {returns = Some (lambdas_97), raises = Some (exn)} =
L_2870 ()
  block L_2870 ()
    val class_2: lambdas_98 = #0 (env_1130)
    val zero_9: real64 = #1 (env_1130)
    val maxWord_16: real64 = #2 (env_1130)
    val setRoundingMode_1: lambdas_99 = #3 (env_1130)
    val one_8: real64 = #4 (env_1130)
    val maxWord'_20: word64 = #5 (env_1130)
    val half_2: real64 = #6 (env_1130)
    val zero_10: word64 = #7 (env_1130)
    val x_3467:
      (word64,
       real64,
       word64,
       real64,
       lambdas_99,
       t_9,
       real64,
       real64,
       lambdas_98) tuple =
      (zero_10,
       half_2,
       maxWord'_20,
       one_8,
       setRoundingMode_1,
       x_3465,
       maxWord_16,
       zero_9,
       class_2)
    val x_3466: lambdas_97 = con xEnv_91 (x_3467)
    return (x_3466)
fun x_3468 (env_1131:
              (word64,
               real64,
               word64,
               real64,
               lambdas_99,
               t_9,
               real64,
               real64,
               lambdas_98) tuple,
            x_3469: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_2871 ()
  block L_2871 ()
    val zero_12: word64 = #0 (env_1131)
    val half_3: real64 = #1 (env_1131)
    val maxWord'_21: word64 = #2 (env_1131)
    val one_9: real64 = #3 (env_1131)
    val setRoundingMode_2: lambdas_99 = #4 (env_1131)
    val x_3470: t_9 = #5 (env_1131)
    val maxWord_17: real64 = #6 (env_1131)
    val zero_11: real64 = #7 (env_1131)
    val class_3: lambdas_98 = #8 (env_1131)
    case class_3 of
      classEnv_0 => L_2872
  block L_2872 (env_1132: (word64, word64, word64) tuple)
    call L_2873 (class_4 (env_1132, x_3469)) handle _ => raise
  block L_2873 (x_3471: float_class_0)
    case x_3471 of
      INF_0 => L_2875 | NAN_1 => L_2874 | _ => L_2876
  block L_2876 ()
    val x_3472: (real64, real64) tuple = (zero_11, x_3469)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2877
  block L_2877 (env_1133: unit)
    call L_2878 (<=_5 (env_1133, x_3472)) handle _ => raise
  block L_2878 (x_3473: bool)
    case x_3473 of
      true => L_2880 | false => L_2879
  block L_2879 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2881
  block L_2881 (env_1134: unit)
    call L_2882 (~_2 (env_1134, one_9)) handle _ => raise
  block L_2882 (x_3474: real64)
    val x_3475: (real64, real64) tuple = (x_3469, x_3474)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2883
  block L_2883 (env_1135: unit)
    call L_2884 (>_7 (env_1135, x_3475)) handle _ => raise
  block L_2884 (x_3476: bool)
    case x_3476 of
      true => L_2886 | false => L_2885
  block L_2885 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2886 ()
    case x_3470 of
      TO_NEGINF_0 => L_2890
    | TO_ZERO_0 => L_2889
    | TO_NEAREST_0 => L_2888
    | TO_POSINF_0 => L_2887
  block L_2887 ()
    return (zero_12)
  block L_2888 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2891
  block L_2891 (env_1136: unit)
    call L_2892 (~_2 (env_1136, half_3)) handle _ => raise
  block L_2892 (x_3477: real64)
    val x_3478: (real64, real64) tuple = (x_3469, x_3477)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_2893
  block L_2893 (env_1137: unit)
    call L_2894 (<_8 (env_1137, x_3478)) handle _ => raise
  block L_2894 (x_3479: bool)
    case x_3479 of
      true => L_2896 | false => L_2895
  block L_2895 ()
    return (zero_12)
  block L_2896 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2889 ()
    return (zero_12)
  block L_2890 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2880 ()
    val x_3480: (real64, real64) tuple = (x_3469, maxWord_17)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2897
  block L_2897 (env_1138: unit)
    call L_2898 (<=_5 (env_1138, x_3480)) handle _ => raise
  block L_2898 (x_3481: bool)
    case x_3481 of
      true => L_2900 | false => L_2899
  block L_2899 ()
    val x_3482: (real64, real64) tuple = (maxWord_17, one_9)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_2901
  block L_2901 (env_1139: unit)
    call L_2902 (+_3 (env_1139, x_3482)) handle _ => raise
  block L_2902 (x_3483: real64)
    val x_3484: (real64, real64) tuple = (x_3469, x_3483)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_2903
  block L_2903 (env_1140: unit)
    call L_2904 (<_8 (env_1140, x_3484)) handle _ => raise
  block L_2904 (x_3485: bool)
    case x_3485 of
      true => L_2906 | false => L_2905
  block L_2905 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2906 ()
    case x_3470 of
      TO_NEGINF_0 => L_2910
    | TO_ZERO_0 => L_2909
    | TO_NEAREST_0 => L_2908
    | TO_POSINF_0 => L_2907
  block L_2907 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2908 ()
    val x_3486: (real64, real64) tuple = (x_3469, maxWord_17)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_2911
  block L_2911 (env_1141: unit)
    call L_2912 (-_4 (env_1141, x_3486)) handle _ => raise
  block L_2912 (x_3487: real64)
    val x_3488: (real64, real64) tuple = (x_3487, half_3)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_2913
  block L_2913 (env_1142: unit)
    call L_2914 (>=_8 (env_1142, x_3488)) handle _ => raise
  block L_2914 (x_3489: bool)
    case x_3489 of
      true => L_2916 | false => L_2915
  block L_2915 ()
    return (maxWord'_21)
  block L_2916 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2909 ()
    return (maxWord'_21)
  block L_2910 ()
    return (maxWord'_21)
  block L_2900 ()
    case x_3470 of
      TO_POSINF_0 => L_2920
    | TO_NEAREST_0 => L_2919
    | TO_ZERO_0 => L_2918
    | TO_NEGINF_0 => L_2917
  block L_2917 ()
    val x_3490: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3469)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2921
  block L_2921 (env_1143: unit)
    call tail toWord64Unsafe_2 (env_1143, x_3490)
  block L_2918 ()
    val x_3491: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3469)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2922
  block L_2922 (env_1144: unit)
    call tail toWord64Unsafe_2 (env_1144, x_3491)
  block L_2919 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_2923
  block L_2923 (env_1145: unit)
    call L_2924 (x_3492 (env_1145, x_1041 (*()*))) handle _ => raise
  block L_2924 (m'_0: t_9)
    case setRoundingMode_2 of
      setRoundingModeEnv_0 => L_2925
  block L_2925 (env_1146: (lambdas_223, word32) tuple)
    call L_2926 (setRoundingMode_3 (env_1146, x_1040 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2926 (x_3493: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_2927
  block L_2927 (env_1147: unit)
    call L_2928 (round_2 (env_1147, x_3469)) handle _ => raise
  block L_2928 (x_3494: real64)
    case setRoundingMode_2 of
      setRoundingModeEnv_0 => L_2929
  block L_2929 (env_1148: (lambdas_223, word32) tuple)
    call L_2930 (setRoundingMode_3 (env_1148, m'_0)) handle _ => raise
  block L_2930 (x_3495: unit)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2931
  block L_2931 (env_1149: unit)
    call tail toWord64Unsafe_2 (env_1149, x_3494)
  block L_2920 ()
    val x_3496: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3469)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2932
  block L_2932 (env_1150: unit)
    call tail toWord64Unsafe_2 (env_1150, x_3496)
  block L_2874 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2875 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3497 (env_1151:
              (lambdas_98, real64, real64, lambdas_99, real64, word64, real64) tuple,
            x_3498: t_9):
  {returns = Some (lambdas_101), raises = Some (exn)} =
L_2933 ()
  block L_2933 ()
    val class_5: lambdas_98 = #0 (env_1151)
    val zero_13: real64 = #1 (env_1151)
    val maxWord_18: real64 = #2 (env_1151)
    val setRoundingMode_4: lambdas_99 = #3 (env_1151)
    val one_10: real64 = #4 (env_1151)
    val zero_14: word64 = #5 (env_1151)
    val half_4: real64 = #6 (env_1151)
    val x_3500:
      (real64, word64, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple =
      (half_4,
       zero_14,
       one_10,
       setRoundingMode_4,
       x_3498,
       maxWord_18,
       zero_13,
       class_5)
    val x_3499: lambdas_101 = con xEnv_93 (x_3500)
    return (x_3499)
fun x_3501 (env_1152:
              (real64,
               word64,
               real64,
               lambdas_99,
               t_9,
               real64,
               real64,
               lambdas_98) tuple,
            x_3502: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_2934 ()
  block L_2934 ()
    val half_5: real64 = #0 (env_1152)
    val zero_16: word64 = #1 (env_1152)
    val one_11: real64 = #2 (env_1152)
    val setRoundingMode_5: lambdas_99 = #3 (env_1152)
    val x_3503: t_9 = #4 (env_1152)
    val maxWord_19: real64 = #5 (env_1152)
    val zero_15: real64 = #6 (env_1152)
    val class_6: lambdas_98 = #7 (env_1152)
    case class_6 of
      classEnv_0 => L_2935
  block L_2935 (env_1153: (word64, word64, word64) tuple)
    call L_2936 (class_4 (env_1153, x_3502)) handle _ => raise
  block L_2936 (x_3504: float_class_0)
    case x_3504 of
      INF_0 => L_2938 | NAN_1 => L_2937 | _ => L_2939
  block L_2939 ()
    val x_3505: (real64, real64) tuple = (zero_15, x_3502)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2940
  block L_2940 (env_1154: unit)
    call L_2941 (<=_5 (env_1154, x_3505)) handle _ => raise
  block L_2941 (x_3506: bool)
    case x_3506 of
      true => L_2943 | false => L_2942
  block L_2942 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2944
  block L_2944 (env_1155: unit)
    call L_2945 (~_2 (env_1155, one_11)) handle _ => raise
  block L_2945 (x_3507: real64)
    val x_3508: (real64, real64) tuple = (x_3502, x_3507)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2946
  block L_2946 (env_1156: unit)
    call L_2947 (>_7 (env_1156, x_3508)) handle _ => raise
  block L_2947 (x_3509: bool)
    case x_3509 of
      true => L_2949 | false => L_2948
  block L_2948 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2949 ()
    case x_3503 of
      TO_NEGINF_0 => L_2953
    | TO_ZERO_0 => L_2952
    | TO_NEAREST_0 => L_2951
    | TO_POSINF_0 => L_2950
  block L_2950 ()
    return (zero_16)
  block L_2951 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2954
  block L_2954 (env_1157: unit)
    call L_2955 (~_2 (env_1157, half_5)) handle _ => raise
  block L_2955 (x_3510: real64)
    val x_3511: (real64, real64) tuple = (x_3502, x_3510)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_2956
  block L_2956 (env_1158: unit)
    call L_2957 (<_8 (env_1158, x_3511)) handle _ => raise
  block L_2957 (x_3512: bool)
    case x_3512 of
      true => L_2959 | false => L_2958
  block L_2958 ()
    return (zero_16)
  block L_2959 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2952 ()
    return (zero_16)
  block L_2953 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2943 ()
    val x_3513: (real64, real64) tuple = (x_3502, maxWord_19)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2960
  block L_2960 (env_1159: unit)
    call L_2961 (<=_5 (env_1159, x_3513)) handle _ => raise
  block L_2961 (x_3514: bool)
    case x_3514 of
      true => L_2963 | false => L_2962
  block L_2962 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2963 ()
    case x_3503 of
      TO_POSINF_0 => L_2967
    | TO_NEAREST_0 => L_2966
    | TO_ZERO_0 => L_2965
    | TO_NEGINF_0 => L_2964
  block L_2964 ()
    val x_3515: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3502)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2968
  block L_2968 (env_1160: unit)
    call tail toWord64Unsafe_2 (env_1160, x_3515)
  block L_2965 ()
    val x_3516: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3502)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2969
  block L_2969 (env_1161: unit)
    call tail toWord64Unsafe_2 (env_1161, x_3516)
  block L_2966 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_2970
  block L_2970 (env_1162: unit)
    call L_2971 (x_3492 (env_1162, x_1038 (*()*))) handle _ => raise
  block L_2971 (m'_1: t_9)
    case setRoundingMode_5 of
      setRoundingModeEnv_0 => L_2972
  block L_2972 (env_1163: (lambdas_223, word32) tuple)
    call L_2973 (setRoundingMode_3 (env_1163, x_1037 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2973 (x_3517: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_2974
  block L_2974 (env_1164: unit)
    call L_2975 (round_2 (env_1164, x_3502)) handle _ => raise
  block L_2975 (x_3518: real64)
    case setRoundingMode_5 of
      setRoundingModeEnv_0 => L_2976
  block L_2976 (env_1165: (lambdas_223, word32) tuple)
    call L_2977 (setRoundingMode_3 (env_1165, m'_1)) handle _ => raise
  block L_2977 (x_3519: unit)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2978
  block L_2978 (env_1166: unit)
    call tail toWord64Unsafe_2 (env_1166, x_3518)
  block L_2967 ()
    val x_3520: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3502)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_2979
  block L_2979 (env_1167: unit)
    call tail toWord64Unsafe_2 (env_1167, x_3520)
  block L_2937 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2938 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2283 (env_1168: (lambdas_106, lambdas_105, word64) tuple, x_3521: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_2980 ()
  block L_2980 ()
    val <<_10: lambdas_106 = #0 (env_1168)
    val >>_8: lambdas_105 = #1 (env_1168)
    val maxWord'_22: word64 = #2 (env_1168)
    val x_3522: (word64, word32) tuple = (maxWord'_22, x_3521)
    case >>_8 of
      >>Env_0 => L_2981
  block L_2981 (env_1169: (word32, word64) tuple)
    call L_2982 (>>_9 (env_1169, x_3522)) handle _ => raise
  block L_2982 (x_3523: word64)
    val x_3524: (word64, word32) tuple = (x_3523, x_3521)
    case <<_10 of
      <<Env_0 => L_2983
  block L_2983 (env_1170: (word32, word64) tuple)
    call tail <<_9 (env_1170, x_3524)
fun x_3525 (env_1171:
              (lambdas_98,
               real64,
               real64,
               lambdas_99,
               real64,
               word32,
               real64,
               word32) tuple,
            x_3526: t_9):
  {returns = Some (lambdas_107), raises = Some (exn)} =
L_2984 ()
  block L_2984 ()
    val class_7: lambdas_98 = #0 (env_1171)
    val zero_17: real64 = #1 (env_1171)
    val maxWord_20: real64 = #2 (env_1171)
    val setRoundingMode_6: lambdas_99 = #3 (env_1171)
    val one_12: real64 = #4 (env_1171)
    val maxWord'_23: word32 = #5 (env_1171)
    val half_6: real64 = #6 (env_1171)
    val zero_18: word32 = #7 (env_1171)
    val x_3528:
      (word32,
       real64,
       word32,
       real64,
       lambdas_99,
       t_9,
       real64,
       real64,
       lambdas_98) tuple =
      (zero_18,
       half_6,
       maxWord'_23,
       one_12,
       setRoundingMode_6,
       x_3526,
       maxWord_20,
       zero_17,
       class_7)
    val x_3527: lambdas_107 = con xEnv_98 (x_3528)
    return (x_3527)
fun x_3529 (env_1172:
              (word32,
               real64,
               word32,
               real64,
               lambdas_99,
               t_9,
               real64,
               real64,
               lambdas_98) tuple,
            x_3530: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_2985 ()
  block L_2985 ()
    val zero_20: word32 = #0 (env_1172)
    val half_7: real64 = #1 (env_1172)
    val maxWord'_24: word32 = #2 (env_1172)
    val one_13: real64 = #3 (env_1172)
    val setRoundingMode_7: lambdas_99 = #4 (env_1172)
    val x_3531: t_9 = #5 (env_1172)
    val maxWord_21: real64 = #6 (env_1172)
    val zero_19: real64 = #7 (env_1172)
    val class_8: lambdas_98 = #8 (env_1172)
    case class_8 of
      classEnv_0 => L_2986
  block L_2986 (env_1173: (word64, word64, word64) tuple)
    call L_2987 (class_4 (env_1173, x_3530)) handle _ => raise
  block L_2987 (x_3532: float_class_0)
    case x_3532 of
      INF_0 => L_2989 | NAN_1 => L_2988 | _ => L_2990
  block L_2990 ()
    val x_3533: (real64, real64) tuple = (zero_19, x_3530)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2991
  block L_2991 (env_1174: unit)
    call L_2992 (<=_5 (env_1174, x_3533)) handle _ => raise
  block L_2992 (x_3534: bool)
    case x_3534 of
      true => L_2994 | false => L_2993
  block L_2993 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2995
  block L_2995 (env_1175: unit)
    call L_2996 (~_2 (env_1175, one_13)) handle _ => raise
  block L_2996 (x_3535: real64)
    val x_3536: (real64, real64) tuple = (x_3530, x_3535)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2997
  block L_2997 (env_1176: unit)
    call L_2998 (>_7 (env_1176, x_3536)) handle _ => raise
  block L_2998 (x_3537: bool)
    case x_3537 of
      true => L_3000 | false => L_2999
  block L_2999 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3000 ()
    case x_3531 of
      TO_NEGINF_0 => L_3004
    | TO_ZERO_0 => L_3003
    | TO_NEAREST_0 => L_3002
    | TO_POSINF_0 => L_3001
  block L_3001 ()
    return (zero_20)
  block L_3002 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3005
  block L_3005 (env_1177: unit)
    call L_3006 (~_2 (env_1177, half_7)) handle _ => raise
  block L_3006 (x_3538: real64)
    val x_3539: (real64, real64) tuple = (x_3530, x_3538)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3007
  block L_3007 (env_1178: unit)
    call L_3008 (<_8 (env_1178, x_3539)) handle _ => raise
  block L_3008 (x_3540: bool)
    case x_3540 of
      true => L_3010 | false => L_3009
  block L_3009 ()
    return (zero_20)
  block L_3010 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3003 ()
    return (zero_20)
  block L_3004 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2994 ()
    val x_3541: (real64, real64) tuple = (x_3530, maxWord_21)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3011
  block L_3011 (env_1179: unit)
    call L_3012 (<=_5 (env_1179, x_3541)) handle _ => raise
  block L_3012 (x_3542: bool)
    case x_3542 of
      true => L_3014 | false => L_3013
  block L_3013 ()
    val x_3543: (real64, real64) tuple = (maxWord_21, one_13)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3015
  block L_3015 (env_1180: unit)
    call L_3016 (+_3 (env_1180, x_3543)) handle _ => raise
  block L_3016 (x_3544: real64)
    val x_3545: (real64, real64) tuple = (x_3530, x_3544)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3017
  block L_3017 (env_1181: unit)
    call L_3018 (<_8 (env_1181, x_3545)) handle _ => raise
  block L_3018 (x_3546: bool)
    case x_3546 of
      true => L_3020 | false => L_3019
  block L_3019 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3020 ()
    case x_3531 of
      TO_NEGINF_0 => L_3024
    | TO_ZERO_0 => L_3023
    | TO_NEAREST_0 => L_3022
    | TO_POSINF_0 => L_3021
  block L_3021 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3022 ()
    val x_3547: (real64, real64) tuple = (x_3530, maxWord_21)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3025
  block L_3025 (env_1182: unit)
    call L_3026 (-_4 (env_1182, x_3547)) handle _ => raise
  block L_3026 (x_3548: real64)
    val x_3549: (real64, real64) tuple = (x_3548, half_7)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3027
  block L_3027 (env_1183: unit)
    call L_3028 (>=_8 (env_1183, x_3549)) handle _ => raise
  block L_3028 (x_3550: bool)
    case x_3550 of
      true => L_3030 | false => L_3029
  block L_3029 ()
    return (maxWord'_24)
  block L_3030 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3023 ()
    return (maxWord'_24)
  block L_3024 ()
    return (maxWord'_24)
  block L_3014 ()
    case x_3531 of
      TO_POSINF_0 => L_3034
    | TO_NEAREST_0 => L_3033
    | TO_ZERO_0 => L_3032
    | TO_NEGINF_0 => L_3031
  block L_3031 ()
    val x_3551: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3530)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3035
  block L_3035 (env_1184: unit)
    call tail toWord32Unsafe_2 (env_1184, x_3551)
  block L_3032 ()
    val x_3552: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3530)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3036
  block L_3036 (env_1185: unit)
    call tail toWord32Unsafe_2 (env_1185, x_3552)
  block L_3033 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3037
  block L_3037 (env_1186: unit)
    call L_3038 (x_3492 (env_1186, x_1036 (*()*))) handle _ => raise
  block L_3038 (m'_2: t_9)
    case setRoundingMode_7 of
      setRoundingModeEnv_0 => L_3039
  block L_3039 (env_1187: (lambdas_223, word32) tuple)
    call L_3040 (setRoundingMode_3 (env_1187, x_1035 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3040 (x_3553: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3041
  block L_3041 (env_1188: unit)
    call L_3042 (round_2 (env_1188, x_3530)) handle _ => raise
  block L_3042 (x_3554: real64)
    case setRoundingMode_7 of
      setRoundingModeEnv_0 => L_3043
  block L_3043 (env_1189: (lambdas_223, word32) tuple)
    call L_3044 (setRoundingMode_3 (env_1189, m'_2)) handle _ => raise
  block L_3044 (x_3555: unit)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3045
  block L_3045 (env_1190: unit)
    call tail toWord32Unsafe_2 (env_1190, x_3554)
  block L_3034 ()
    val x_3556: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3530)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3046
  block L_3046 (env_1191: unit)
    call tail toWord32Unsafe_2 (env_1191, x_3556)
  block L_2988 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2989 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3557 (env_1192:
              (lambdas_98, real64, real64, lambdas_99, real64, word32, real64) tuple,
            x_3558: t_9):
  {returns = Some (lambdas_109), raises = Some (exn)} =
L_3047 ()
  block L_3047 ()
    val class_9: lambdas_98 = #0 (env_1192)
    val zero_21: real64 = #1 (env_1192)
    val maxWord_22: real64 = #2 (env_1192)
    val setRoundingMode_8: lambdas_99 = #3 (env_1192)
    val one_14: real64 = #4 (env_1192)
    val zero_22: word32 = #5 (env_1192)
    val half_8: real64 = #6 (env_1192)
    val x_3560:
      (real64, word32, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple =
      (half_8,
       zero_22,
       one_14,
       setRoundingMode_8,
       x_3558,
       maxWord_22,
       zero_21,
       class_9)
    val x_3559: lambdas_109 = con xEnv_100 (x_3560)
    return (x_3559)
fun x_3561 (env_1193:
              (real64,
               word32,
               real64,
               lambdas_99,
               t_9,
               real64,
               real64,
               lambdas_98) tuple,
            x_3562: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3048 ()
  block L_3048 ()
    val half_9: real64 = #0 (env_1193)
    val zero_24: word32 = #1 (env_1193)
    val one_15: real64 = #2 (env_1193)
    val setRoundingMode_9: lambdas_99 = #3 (env_1193)
    val x_3563: t_9 = #4 (env_1193)
    val maxWord_23: real64 = #5 (env_1193)
    val zero_23: real64 = #6 (env_1193)
    val class_10: lambdas_98 = #7 (env_1193)
    case class_10 of
      classEnv_0 => L_3049
  block L_3049 (env_1194: (word64, word64, word64) tuple)
    call L_3050 (class_4 (env_1194, x_3562)) handle _ => raise
  block L_3050 (x_3564: float_class_0)
    case x_3564 of
      INF_0 => L_3052 | NAN_1 => L_3051 | _ => L_3053
  block L_3053 ()
    val x_3565: (real64, real64) tuple = (zero_23, x_3562)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3054
  block L_3054 (env_1195: unit)
    call L_3055 (<=_5 (env_1195, x_3565)) handle _ => raise
  block L_3055 (x_3566: bool)
    case x_3566 of
      true => L_3057 | false => L_3056
  block L_3056 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3058
  block L_3058 (env_1196: unit)
    call L_3059 (~_2 (env_1196, one_15)) handle _ => raise
  block L_3059 (x_3567: real64)
    val x_3568: (real64, real64) tuple = (x_3562, x_3567)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3060
  block L_3060 (env_1197: unit)
    call L_3061 (>_7 (env_1197, x_3568)) handle _ => raise
  block L_3061 (x_3569: bool)
    case x_3569 of
      true => L_3063 | false => L_3062
  block L_3062 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3063 ()
    case x_3563 of
      TO_NEGINF_0 => L_3067
    | TO_ZERO_0 => L_3066
    | TO_NEAREST_0 => L_3065
    | TO_POSINF_0 => L_3064
  block L_3064 ()
    return (zero_24)
  block L_3065 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3068
  block L_3068 (env_1198: unit)
    call L_3069 (~_2 (env_1198, half_9)) handle _ => raise
  block L_3069 (x_3570: real64)
    val x_3571: (real64, real64) tuple = (x_3562, x_3570)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3070
  block L_3070 (env_1199: unit)
    call L_3071 (<_8 (env_1199, x_3571)) handle _ => raise
  block L_3071 (x_3572: bool)
    case x_3572 of
      true => L_3073 | false => L_3072
  block L_3072 ()
    return (zero_24)
  block L_3073 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3066 ()
    return (zero_24)
  block L_3067 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3057 ()
    val x_3573: (real64, real64) tuple = (x_3562, maxWord_23)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3074
  block L_3074 (env_1200: unit)
    call L_3075 (<=_5 (env_1200, x_3573)) handle _ => raise
  block L_3075 (x_3574: bool)
    case x_3574 of
      true => L_3077 | false => L_3076
  block L_3076 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3077 ()
    case x_3563 of
      TO_POSINF_0 => L_3081
    | TO_NEAREST_0 => L_3080
    | TO_ZERO_0 => L_3079
    | TO_NEGINF_0 => L_3078
  block L_3078 ()
    val x_3575: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3562)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3082
  block L_3082 (env_1201: unit)
    call tail toWord32Unsafe_2 (env_1201, x_3575)
  block L_3079 ()
    val x_3576: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3562)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3083
  block L_3083 (env_1202: unit)
    call tail toWord32Unsafe_2 (env_1202, x_3576)
  block L_3080 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3084
  block L_3084 (env_1203: unit)
    call L_3085 (x_3492 (env_1203, x_1033 (*()*))) handle _ => raise
  block L_3085 (m'_3: t_9)
    case setRoundingMode_9 of
      setRoundingModeEnv_0 => L_3086
  block L_3086 (env_1204: (lambdas_223, word32) tuple)
    call L_3087 (setRoundingMode_3 (env_1204, x_1032 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3087 (x_3577: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3088
  block L_3088 (env_1205: unit)
    call L_3089 (round_2 (env_1205, x_3562)) handle _ => raise
  block L_3089 (x_3578: real64)
    case setRoundingMode_9 of
      setRoundingModeEnv_0 => L_3090
  block L_3090 (env_1206: (lambdas_223, word32) tuple)
    call L_3091 (setRoundingMode_3 (env_1206, m'_3)) handle _ => raise
  block L_3091 (x_3579: unit)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3092
  block L_3092 (env_1207: unit)
    call tail toWord32Unsafe_2 (env_1207, x_3578)
  block L_3081 ()
    val x_3580: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3562)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3093
  block L_3093 (env_1208: unit)
    call tail toWord32Unsafe_2 (env_1208, x_3580)
  block L_3051 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3052 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2272 (env_1209: (lambdas_114, lambdas_113, word32) tuple, x_3581: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3094 ()
  block L_3094 ()
    val <<_11: lambdas_114 = #0 (env_1209)
    val >>_10: lambdas_113 = #1 (env_1209)
    val maxWord'_25: word32 = #2 (env_1209)
    val x_3582: (word32, word32) tuple = (maxWord'_25, x_3581)
    case >>_10 of
      >>Env_1 => L_3095
  block L_3095 (env_1210: (word32, word32) tuple)
    call L_3096 (>>_11 (env_1210, x_3582)) handle _ => raise
  block L_3096 (x_3583: word32)
    val x_3584: (word32, word32) tuple = (x_3583, x_3581)
    case <<_11 of
      <<Env_1 => L_3097
  block L_3097 (env_1211: (word32, word32) tuple)
    call tail <<_8 (env_1211, x_3584)
fun x_3585 (env_1212:
              (lambdas_98, real64, real64, lambdas_99, real64, word16, real64) tuple,
            x_3586: t_9):
  {returns = Some (lambdas_115), raises = Some (exn)} =
L_3098 ()
  block L_3098 ()
    val class_11: lambdas_98 = #0 (env_1212)
    val zero_25: real64 = #1 (env_1212)
    val maxWord_24: real64 = #2 (env_1212)
    val setRoundingMode_10: lambdas_99 = #3 (env_1212)
    val one_16: real64 = #4 (env_1212)
    val maxWord'_26: word16 = #5 (env_1212)
    val half_10: real64 = #6 (env_1212)
    val x_3588:
      (real64, word16, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple =
      (half_10,
       maxWord'_26,
       one_16,
       setRoundingMode_10,
       x_3586,
       maxWord_24,
       zero_25,
       class_11)
    val x_3587: lambdas_115 = con xEnv_105 (x_3588)
    return (x_3587)
fun x_3589 (env_1213:
              (real64,
               word16,
               real64,
               lambdas_99,
               t_9,
               real64,
               real64,
               lambdas_98) tuple,
            x_3590: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3099 ()
  block L_3099 ()
    val half_11: real64 = #0 (env_1213)
    val maxWord'_27: word16 = #1 (env_1213)
    val one_17: real64 = #2 (env_1213)
    val setRoundingMode_11: lambdas_99 = #3 (env_1213)
    val x_3591: t_9 = #4 (env_1213)
    val maxWord_25: real64 = #5 (env_1213)
    val zero_26: real64 = #6 (env_1213)
    val class_12: lambdas_98 = #7 (env_1213)
    case class_12 of
      classEnv_0 => L_3100
  block L_3100 (env_1214: (word64, word64, word64) tuple)
    call L_3101 (class_4 (env_1214, x_3590)) handle _ => raise
  block L_3101 (x_3592: float_class_0)
    case x_3592 of
      INF_0 => L_3103 | NAN_1 => L_3102 | _ => L_3104
  block L_3104 ()
    val x_3593: (real64, real64) tuple = (zero_26, x_3590)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3105
  block L_3105 (env_1215: unit)
    call L_3106 (<=_5 (env_1215, x_3593)) handle _ => raise
  block L_3106 (x_3594: bool)
    case x_3594 of
      true => L_3108 | false => L_3107
  block L_3107 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3109
  block L_3109 (env_1216: unit)
    call L_3110 (~_2 (env_1216, one_17)) handle _ => raise
  block L_3110 (x_3595: real64)
    val x_3596: (real64, real64) tuple = (x_3590, x_3595)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3111
  block L_3111 (env_1217: unit)
    call L_3112 (>_7 (env_1217, x_3596)) handle _ => raise
  block L_3112 (x_3597: bool)
    case x_3597 of
      true => L_3114 | false => L_3113
  block L_3113 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3114 ()
    case x_3591 of
      TO_NEGINF_0 => L_3118
    | TO_ZERO_0 => L_3117
    | TO_NEAREST_0 => L_3116
    | TO_POSINF_0 => L_3115
  block L_3115 ()
    return (x_285 (*0x0:w16*))
  block L_3116 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3119
  block L_3119 (env_1218: unit)
    call L_3120 (~_2 (env_1218, half_11)) handle _ => raise
  block L_3120 (x_3598: real64)
    val x_3599: (real64, real64) tuple = (x_3590, x_3598)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3121
  block L_3121 (env_1219: unit)
    call L_3122 (<_8 (env_1219, x_3599)) handle _ => raise
  block L_3122 (x_3600: bool)
    case x_3600 of
      true => L_3124 | false => L_3123
  block L_3123 ()
    return (x_285 (*0x0:w16*))
  block L_3124 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3117 ()
    return (x_285 (*0x0:w16*))
  block L_3118 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3108 ()
    val x_3601: (real64, real64) tuple = (x_3590, maxWord_25)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3125
  block L_3125 (env_1220: unit)
    call L_3126 (<=_5 (env_1220, x_3601)) handle _ => raise
  block L_3126 (x_3602: bool)
    case x_3602 of
      true => L_3128 | false => L_3127
  block L_3127 ()
    val x_3603: (real64, real64) tuple = (maxWord_25, one_17)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3129
  block L_3129 (env_1221: unit)
    call L_3130 (+_3 (env_1221, x_3603)) handle _ => raise
  block L_3130 (x_3604: real64)
    val x_3605: (real64, real64) tuple = (x_3590, x_3604)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3131
  block L_3131 (env_1222: unit)
    call L_3132 (<_8 (env_1222, x_3605)) handle _ => raise
  block L_3132 (x_3606: bool)
    case x_3606 of
      true => L_3134 | false => L_3133
  block L_3133 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3134 ()
    case x_3591 of
      TO_NEGINF_0 => L_3138
    | TO_ZERO_0 => L_3137
    | TO_NEAREST_0 => L_3136
    | TO_POSINF_0 => L_3135
  block L_3135 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3136 ()
    val x_3607: (real64, real64) tuple = (x_3590, maxWord_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3139
  block L_3139 (env_1223: unit)
    call L_3140 (-_4 (env_1223, x_3607)) handle _ => raise
  block L_3140 (x_3608: real64)
    val x_3609: (real64, real64) tuple = (x_3608, half_11)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3141
  block L_3141 (env_1224: unit)
    call L_3142 (>=_8 (env_1224, x_3609)) handle _ => raise
  block L_3142 (x_3610: bool)
    case x_3610 of
      true => L_3144 | false => L_3143
  block L_3143 ()
    return (maxWord'_27)
  block L_3144 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3137 ()
    return (maxWord'_27)
  block L_3138 ()
    return (maxWord'_27)
  block L_3128 ()
    case x_3591 of
      TO_POSINF_0 => L_3148
    | TO_NEAREST_0 => L_3147
    | TO_ZERO_0 => L_3146
    | TO_NEGINF_0 => L_3145
  block L_3145 ()
    val x_3611: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3590)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3149
  block L_3149 (env_1225: unit)
    call tail toWord16Unsafe_2 (env_1225, x_3611)
  block L_3146 ()
    val x_3612: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3590)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3150
  block L_3150 (env_1226: unit)
    call tail toWord16Unsafe_2 (env_1226, x_3612)
  block L_3147 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3151
  block L_3151 (env_1227: unit)
    call L_3152 (x_3492 (env_1227, x_1031 (*()*))) handle _ => raise
  block L_3152 (m'_4: t_9)
    case setRoundingMode_11 of
      setRoundingModeEnv_0 => L_3153
  block L_3153 (env_1228: (lambdas_223, word32) tuple)
    call L_3154 (setRoundingMode_3 (env_1228, x_1030 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3154 (x_3613: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3155
  block L_3155 (env_1229: unit)
    call L_3156 (round_2 (env_1229, x_3590)) handle _ => raise
  block L_3156 (x_3614: real64)
    case setRoundingMode_11 of
      setRoundingModeEnv_0 => L_3157
  block L_3157 (env_1230: (lambdas_223, word32) tuple)
    call L_3158 (setRoundingMode_3 (env_1230, m'_4)) handle _ => raise
  block L_3158 (x_3615: unit)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3159
  block L_3159 (env_1231: unit)
    call tail toWord16Unsafe_2 (env_1231, x_3614)
  block L_3148 ()
    val x_3616: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3590)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3160
  block L_3160 (env_1232: unit)
    call tail toWord16Unsafe_2 (env_1232, x_3616)
  block L_3102 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3103 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3617 (env_1233:
              (lambdas_98, real64, real64, lambdas_99, real64, real64) tuple,
            x_3618: t_9):
  {returns = Some (lambdas_117), raises = Some (exn)} =
L_3161 ()
  block L_3161 ()
    val class_13: lambdas_98 = #0 (env_1233)
    val zero_27: real64 = #1 (env_1233)
    val maxWord_26: real64 = #2 (env_1233)
    val setRoundingMode_12: lambdas_99 = #3 (env_1233)
    val one_18: real64 = #4 (env_1233)
    val half_12: real64 = #5 (env_1233)
    val x_3620:
      (real64, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple =
      (half_12,
       one_18,
       setRoundingMode_12,
       x_3618,
       maxWord_26,
       zero_27,
       class_13)
    val x_3619: lambdas_117 = con xEnv_107 (x_3620)
    return (x_3619)
fun x_3621 (env_1234:
              (real64, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple,
            x_3622: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3162 ()
  block L_3162 ()
    val half_13: real64 = #0 (env_1234)
    val one_19: real64 = #1 (env_1234)
    val setRoundingMode_13: lambdas_99 = #2 (env_1234)
    val x_3623: t_9 = #3 (env_1234)
    val maxWord_27: real64 = #4 (env_1234)
    val zero_28: real64 = #5 (env_1234)
    val class_14: lambdas_98 = #6 (env_1234)
    case class_14 of
      classEnv_0 => L_3163
  block L_3163 (env_1235: (word64, word64, word64) tuple)
    call L_3164 (class_4 (env_1235, x_3622)) handle _ => raise
  block L_3164 (x_3624: float_class_0)
    case x_3624 of
      INF_0 => L_3166 | NAN_1 => L_3165 | _ => L_3167
  block L_3167 ()
    val x_3625: (real64, real64) tuple = (zero_28, x_3622)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3168
  block L_3168 (env_1236: unit)
    call L_3169 (<=_5 (env_1236, x_3625)) handle _ => raise
  block L_3169 (x_3626: bool)
    case x_3626 of
      true => L_3171 | false => L_3170
  block L_3170 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3172
  block L_3172 (env_1237: unit)
    call L_3173 (~_2 (env_1237, one_19)) handle _ => raise
  block L_3173 (x_3627: real64)
    val x_3628: (real64, real64) tuple = (x_3622, x_3627)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3174
  block L_3174 (env_1238: unit)
    call L_3175 (>_7 (env_1238, x_3628)) handle _ => raise
  block L_3175 (x_3629: bool)
    case x_3629 of
      true => L_3177 | false => L_3176
  block L_3176 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3177 ()
    case x_3623 of
      TO_NEGINF_0 => L_3181
    | TO_ZERO_0 => L_3180
    | TO_NEAREST_0 => L_3179
    | TO_POSINF_0 => L_3178
  block L_3178 ()
    return (x_285 (*0x0:w16*))
  block L_3179 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3182
  block L_3182 (env_1239: unit)
    call L_3183 (~_2 (env_1239, half_13)) handle _ => raise
  block L_3183 (x_3630: real64)
    val x_3631: (real64, real64) tuple = (x_3622, x_3630)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3184
  block L_3184 (env_1240: unit)
    call L_3185 (<_8 (env_1240, x_3631)) handle _ => raise
  block L_3185 (x_3632: bool)
    case x_3632 of
      true => L_3187 | false => L_3186
  block L_3186 ()
    return (x_285 (*0x0:w16*))
  block L_3187 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3180 ()
    return (x_285 (*0x0:w16*))
  block L_3181 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3171 ()
    val x_3633: (real64, real64) tuple = (x_3622, maxWord_27)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3188
  block L_3188 (env_1241: unit)
    call L_3189 (<=_5 (env_1241, x_3633)) handle _ => raise
  block L_3189 (x_3634: bool)
    case x_3634 of
      true => L_3191 | false => L_3190
  block L_3190 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3191 ()
    case x_3623 of
      TO_POSINF_0 => L_3195
    | TO_NEAREST_0 => L_3194
    | TO_ZERO_0 => L_3193
    | TO_NEGINF_0 => L_3192
  block L_3192 ()
    val x_3635: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3622)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3196
  block L_3196 (env_1242: unit)
    call tail toWord16Unsafe_2 (env_1242, x_3635)
  block L_3193 ()
    val x_3636: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3622)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3197
  block L_3197 (env_1243: unit)
    call tail toWord16Unsafe_2 (env_1243, x_3636)
  block L_3194 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3198
  block L_3198 (env_1244: unit)
    call L_3199 (x_3492 (env_1244, x_1028 (*()*))) handle _ => raise
  block L_3199 (m'_5: t_9)
    case setRoundingMode_13 of
      setRoundingModeEnv_0 => L_3200
  block L_3200 (env_1245: (lambdas_223, word32) tuple)
    call L_3201 (setRoundingMode_3 (env_1245, x_1027 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3201 (x_3637: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3202
  block L_3202 (env_1246: unit)
    call L_3203 (round_2 (env_1246, x_3622)) handle _ => raise
  block L_3203 (x_3638: real64)
    case setRoundingMode_13 of
      setRoundingModeEnv_0 => L_3204
  block L_3204 (env_1247: (lambdas_223, word32) tuple)
    call L_3205 (setRoundingMode_3 (env_1247, m'_5)) handle _ => raise
  block L_3205 (x_3639: unit)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3206
  block L_3206 (env_1248: unit)
    call tail toWord16Unsafe_2 (env_1248, x_3638)
  block L_3195 ()
    val x_3640: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3622)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3207
  block L_3207 (env_1249: unit)
    call tail toWord16Unsafe_2 (env_1249, x_3640)
  block L_3165 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3166 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2261 (env_1250: (lambdas_122, lambdas_121, word16) tuple, x_3641: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_3208 ()
  block L_3208 ()
    val <<_12: lambdas_122 = #0 (env_1250)
    val >>_12: lambdas_121 = #1 (env_1250)
    val maxWord'_28: word16 = #2 (env_1250)
    val x_3642: (word16, word32) tuple = (maxWord'_28, x_3641)
    case >>_12 of
      >>Env_2 => L_3209
  block L_3209 (env_1251: word32)
    call L_3210 (>>_13 (env_1251, x_3642)) handle _ => raise
  block L_3210 (x_3643: word16)
    val x_3644: (word16, word32) tuple = (x_3643, x_3641)
    case <<_12 of
      <<Env_2 => L_3211
  block L_3211 (env_1252: word32)
    call tail <<_13 (env_1252, x_3644)
fun x_3645 (env_1253:
              (lambdas_98, real64, real64, lambdas_99, real64, word8, real64) tuple,
            x_3646: t_9):
  {returns = Some (lambdas_123), raises = Some (exn)} =
L_3212 ()
  block L_3212 ()
    val class_15: lambdas_98 = #0 (env_1253)
    val zero_29: real64 = #1 (env_1253)
    val maxWord_28: real64 = #2 (env_1253)
    val setRoundingMode_14: lambdas_99 = #3 (env_1253)
    val one_20: real64 = #4 (env_1253)
    val maxWord'_29: word8 = #5 (env_1253)
    val half_14: real64 = #6 (env_1253)
    val x_3648:
      (real64, word8, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple =
      (half_14,
       maxWord'_29,
       one_20,
       setRoundingMode_14,
       x_3646,
       maxWord_28,
       zero_29,
       class_15)
    val x_3647: lambdas_123 = con xEnv_112 (x_3648)
    return (x_3647)
fun x_3649 (env_1254:
              (real64,
               word8,
               real64,
               lambdas_99,
               t_9,
               real64,
               real64,
               lambdas_98) tuple,
            x_3650: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3213 ()
  block L_3213 ()
    val half_15: real64 = #0 (env_1254)
    val maxWord'_30: word8 = #1 (env_1254)
    val one_21: real64 = #2 (env_1254)
    val setRoundingMode_15: lambdas_99 = #3 (env_1254)
    val x_3651: t_9 = #4 (env_1254)
    val maxWord_29: real64 = #5 (env_1254)
    val zero_30: real64 = #6 (env_1254)
    val class_16: lambdas_98 = #7 (env_1254)
    case class_16 of
      classEnv_0 => L_3214
  block L_3214 (env_1255: (word64, word64, word64) tuple)
    call L_3215 (class_4 (env_1255, x_3650)) handle _ => raise
  block L_3215 (x_3652: float_class_0)
    case x_3652 of
      INF_0 => L_3217 | NAN_1 => L_3216 | _ => L_3218
  block L_3218 ()
    val x_3653: (real64, real64) tuple = (zero_30, x_3650)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3219
  block L_3219 (env_1256: unit)
    call L_3220 (<=_5 (env_1256, x_3653)) handle _ => raise
  block L_3220 (x_3654: bool)
    case x_3654 of
      true => L_3222 | false => L_3221
  block L_3221 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3223
  block L_3223 (env_1257: unit)
    call L_3224 (~_2 (env_1257, one_21)) handle _ => raise
  block L_3224 (x_3655: real64)
    val x_3656: (real64, real64) tuple = (x_3650, x_3655)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3225
  block L_3225 (env_1258: unit)
    call L_3226 (>_7 (env_1258, x_3656)) handle _ => raise
  block L_3226 (x_3657: bool)
    case x_3657 of
      true => L_3228 | false => L_3227
  block L_3227 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3228 ()
    case x_3651 of
      TO_NEGINF_0 => L_3232
    | TO_ZERO_0 => L_3231
    | TO_NEAREST_0 => L_3230
    | TO_POSINF_0 => L_3229
  block L_3229 ()
    return (x_271 (*0x0:w8*))
  block L_3230 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3233
  block L_3233 (env_1259: unit)
    call L_3234 (~_2 (env_1259, half_15)) handle _ => raise
  block L_3234 (x_3658: real64)
    val x_3659: (real64, real64) tuple = (x_3650, x_3658)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3235
  block L_3235 (env_1260: unit)
    call L_3236 (<_8 (env_1260, x_3659)) handle _ => raise
  block L_3236 (x_3660: bool)
    case x_3660 of
      true => L_3238 | false => L_3237
  block L_3237 ()
    return (x_271 (*0x0:w8*))
  block L_3238 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3231 ()
    return (x_271 (*0x0:w8*))
  block L_3232 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3222 ()
    val x_3661: (real64, real64) tuple = (x_3650, maxWord_29)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3239
  block L_3239 (env_1261: unit)
    call L_3240 (<=_5 (env_1261, x_3661)) handle _ => raise
  block L_3240 (x_3662: bool)
    case x_3662 of
      true => L_3242 | false => L_3241
  block L_3241 ()
    val x_3663: (real64, real64) tuple = (maxWord_29, one_21)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3243
  block L_3243 (env_1262: unit)
    call L_3244 (+_3 (env_1262, x_3663)) handle _ => raise
  block L_3244 (x_3664: real64)
    val x_3665: (real64, real64) tuple = (x_3650, x_3664)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3245
  block L_3245 (env_1263: unit)
    call L_3246 (<_8 (env_1263, x_3665)) handle _ => raise
  block L_3246 (x_3666: bool)
    case x_3666 of
      true => L_3248 | false => L_3247
  block L_3247 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3248 ()
    case x_3651 of
      TO_NEGINF_0 => L_3252
    | TO_ZERO_0 => L_3251
    | TO_NEAREST_0 => L_3250
    | TO_POSINF_0 => L_3249
  block L_3249 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3250 ()
    val x_3667: (real64, real64) tuple = (x_3650, maxWord_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3253
  block L_3253 (env_1264: unit)
    call L_3254 (-_4 (env_1264, x_3667)) handle _ => raise
  block L_3254 (x_3668: real64)
    val x_3669: (real64, real64) tuple = (x_3668, half_15)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3255
  block L_3255 (env_1265: unit)
    call L_3256 (>=_8 (env_1265, x_3669)) handle _ => raise
  block L_3256 (x_3670: bool)
    case x_3670 of
      true => L_3258 | false => L_3257
  block L_3257 ()
    return (maxWord'_30)
  block L_3258 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3251 ()
    return (maxWord'_30)
  block L_3252 ()
    return (maxWord'_30)
  block L_3242 ()
    case x_3651 of
      TO_POSINF_0 => L_3262
    | TO_NEAREST_0 => L_3261
    | TO_ZERO_0 => L_3260
    | TO_NEGINF_0 => L_3259
  block L_3259 ()
    val x_3671: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3650)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3263
  block L_3263 (env_1266: unit)
    call tail toWord8Unsafe_2 (env_1266, x_3671)
  block L_3260 ()
    val x_3672: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3650)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3264
  block L_3264 (env_1267: unit)
    call tail toWord8Unsafe_2 (env_1267, x_3672)
  block L_3261 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3265
  block L_3265 (env_1268: unit)
    call L_3266 (x_3492 (env_1268, x_1026 (*()*))) handle _ => raise
  block L_3266 (m'_6: t_9)
    case setRoundingMode_15 of
      setRoundingModeEnv_0 => L_3267
  block L_3267 (env_1269: (lambdas_223, word32) tuple)
    call L_3268 (setRoundingMode_3 (env_1269, x_1025 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3268 (x_3673: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3269
  block L_3269 (env_1270: unit)
    call L_3270 (round_2 (env_1270, x_3650)) handle _ => raise
  block L_3270 (x_3674: real64)
    case setRoundingMode_15 of
      setRoundingModeEnv_0 => L_3271
  block L_3271 (env_1271: (lambdas_223, word32) tuple)
    call L_3272 (setRoundingMode_3 (env_1271, m'_6)) handle _ => raise
  block L_3272 (x_3675: unit)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3273
  block L_3273 (env_1272: unit)
    call tail toWord8Unsafe_2 (env_1272, x_3674)
  block L_3262 ()
    val x_3676: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3650)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3274
  block L_3274 (env_1273: unit)
    call tail toWord8Unsafe_2 (env_1273, x_3676)
  block L_3216 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3217 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3677 (env_1274:
              (lambdas_98, real64, real64, lambdas_99, real64, real64) tuple,
            x_3678: t_9):
  {returns = Some (lambdas_125), raises = Some (exn)} =
L_3275 ()
  block L_3275 ()
    val class_17: lambdas_98 = #0 (env_1274)
    val zero_31: real64 = #1 (env_1274)
    val maxWord_30: real64 = #2 (env_1274)
    val setRoundingMode_16: lambdas_99 = #3 (env_1274)
    val one_22: real64 = #4 (env_1274)
    val half_16: real64 = #5 (env_1274)
    val x_3680:
      (real64, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple =
      (half_16,
       one_22,
       setRoundingMode_16,
       x_3678,
       maxWord_30,
       zero_31,
       class_17)
    val x_3679: lambdas_125 = con xEnv_114 (x_3680)
    return (x_3679)
fun x_3681 (env_1275:
              (real64, real64, lambdas_99, t_9, real64, real64, lambdas_98) tuple,
            x_3682: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3276 ()
  block L_3276 ()
    val half_17: real64 = #0 (env_1275)
    val one_23: real64 = #1 (env_1275)
    val setRoundingMode_17: lambdas_99 = #2 (env_1275)
    val x_3683: t_9 = #3 (env_1275)
    val maxWord_31: real64 = #4 (env_1275)
    val zero_32: real64 = #5 (env_1275)
    val class_18: lambdas_98 = #6 (env_1275)
    case class_18 of
      classEnv_0 => L_3277
  block L_3277 (env_1276: (word64, word64, word64) tuple)
    call L_3278 (class_4 (env_1276, x_3682)) handle _ => raise
  block L_3278 (x_3684: float_class_0)
    case x_3684 of
      INF_0 => L_3280 | NAN_1 => L_3279 | _ => L_3281
  block L_3281 ()
    val x_3685: (real64, real64) tuple = (zero_32, x_3682)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3282
  block L_3282 (env_1277: unit)
    call L_3283 (<=_5 (env_1277, x_3685)) handle _ => raise
  block L_3283 (x_3686: bool)
    case x_3686 of
      true => L_3285 | false => L_3284
  block L_3284 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3286
  block L_3286 (env_1278: unit)
    call L_3287 (~_2 (env_1278, one_23)) handle _ => raise
  block L_3287 (x_3687: real64)
    val x_3688: (real64, real64) tuple = (x_3682, x_3687)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3288
  block L_3288 (env_1279: unit)
    call L_3289 (>_7 (env_1279, x_3688)) handle _ => raise
  block L_3289 (x_3689: bool)
    case x_3689 of
      true => L_3291 | false => L_3290
  block L_3290 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3291 ()
    case x_3683 of
      TO_NEGINF_0 => L_3295
    | TO_ZERO_0 => L_3294
    | TO_NEAREST_0 => L_3293
    | TO_POSINF_0 => L_3292
  block L_3292 ()
    return (x_271 (*0x0:w8*))
  block L_3293 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3296
  block L_3296 (env_1280: unit)
    call L_3297 (~_2 (env_1280, half_17)) handle _ => raise
  block L_3297 (x_3690: real64)
    val x_3691: (real64, real64) tuple = (x_3682, x_3690)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3298
  block L_3298 (env_1281: unit)
    call L_3299 (<_8 (env_1281, x_3691)) handle _ => raise
  block L_3299 (x_3692: bool)
    case x_3692 of
      true => L_3301 | false => L_3300
  block L_3300 ()
    return (x_271 (*0x0:w8*))
  block L_3301 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3294 ()
    return (x_271 (*0x0:w8*))
  block L_3295 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3285 ()
    val x_3693: (real64, real64) tuple = (x_3682, maxWord_31)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3302
  block L_3302 (env_1282: unit)
    call L_3303 (<=_5 (env_1282, x_3693)) handle _ => raise
  block L_3303 (x_3694: bool)
    case x_3694 of
      true => L_3305 | false => L_3304
  block L_3304 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3305 ()
    case x_3683 of
      TO_POSINF_0 => L_3309
    | TO_NEAREST_0 => L_3308
    | TO_ZERO_0 => L_3307
    | TO_NEGINF_0 => L_3306
  block L_3306 ()
    val x_3695: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3682)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3310
  block L_3310 (env_1283: unit)
    call tail toWord8Unsafe_2 (env_1283, x_3695)
  block L_3307 ()
    val x_3696: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3682)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3311
  block L_3311 (env_1284: unit)
    call tail toWord8Unsafe_2 (env_1284, x_3696)
  block L_3308 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3312
  block L_3312 (env_1285: unit)
    call L_3313 (x_3492 (env_1285, x_1023 (*()*))) handle _ => raise
  block L_3313 (m'_7: t_9)
    case setRoundingMode_17 of
      setRoundingModeEnv_0 => L_3314
  block L_3314 (env_1286: (lambdas_223, word32) tuple)
    call L_3315 (setRoundingMode_3 (env_1286, x_1022 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3315 (x_3697: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3316
  block L_3316 (env_1287: unit)
    call L_3317 (round_2 (env_1287, x_3682)) handle _ => raise
  block L_3317 (x_3698: real64)
    case setRoundingMode_17 of
      setRoundingModeEnv_0 => L_3318
  block L_3318 (env_1288: (lambdas_223, word32) tuple)
    call L_3319 (setRoundingMode_3 (env_1288, m'_7)) handle _ => raise
  block L_3319 (x_3699: unit)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3320
  block L_3320 (env_1289: unit)
    call tail toWord8Unsafe_2 (env_1289, x_3698)
  block L_3309 ()
    val x_3700: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3682)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3321
  block L_3321 (env_1290: unit)
    call tail toWord8Unsafe_2 (env_1290, x_3700)
  block L_3279 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3280 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2250 (env_1291: (lambdas_130, lambdas_129, word8) tuple, x_3701: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3322 ()
  block L_3322 ()
    val <<_14: lambdas_130 = #0 (env_1291)
    val >>_14: lambdas_129 = #1 (env_1291)
    val maxWord'_31: word8 = #2 (env_1291)
    val x_3702: (word8, word32) tuple = (maxWord'_31, x_3701)
    case >>_14 of
      >>Env_3 => L_3323
  block L_3323 (env_1292: word32)
    call L_3324 (>>_15 (env_1292, x_3702)) handle _ => raise
  block L_3324 (x_3703: word8)
    val x_3704: (word8, word32) tuple = (x_3703, x_3701)
    case <<_14 of
      <<Env_3 => L_3325
  block L_3325 (env_1293: word32)
    call tail <<_15 (env_1293, x_3704)
fun x_3705 (env_1294:
              (real64, real64, lambdas_99, real64, word64, real64, word64) tuple,
            x_3706: t_9):
  {returns = Some (lambdas_131), raises = Some (exn)} =
L_3326 ()
  block L_3326 ()
    val minInt_16: real64 = #0 (env_1294)
    val maxInt_16: real64 = #1 (env_1294)
    val setRoundingMode_18: lambdas_99 = #2 (env_1294)
    val one_24: real64 = #3 (env_1294)
    val maxInt'_20: word64 = #4 (env_1294)
    val half_18: real64 = #5 (env_1294)
    val minInt'_4: word64 = #6 (env_1294)
    val x_3708:
      (word64, real64, word64, real64, lambdas_99, t_9, real64, real64) tuple =
      (minInt'_4,
       half_18,
       maxInt'_20,
       one_24,
       setRoundingMode_18,
       x_3706,
       maxInt_16,
       minInt_16)
    val x_3707: lambdas_131 = con xEnv_119 (x_3708)
    return (x_3707)
fun x_3709 (env_1295:
              (word64, real64, word64, real64, lambdas_99, t_9, real64, real64) tuple,
            x_3710: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_3327 ()
  block L_3327 ()
    val minInt'_5: word64 = #0 (env_1295)
    val half_19: real64 = #1 (env_1295)
    val maxInt'_21: word64 = #2 (env_1295)
    val one_25: real64 = #3 (env_1295)
    val setRoundingMode_19: lambdas_99 = #4 (env_1295)
    val x_3712: t_9 = #5 (env_1295)
    val maxInt_17: real64 = #6 (env_1295)
    val minInt_17: real64 = #7 (env_1295)
    val x_3711: (real64, real64) tuple = (minInt_17, x_3710)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3328
  block L_3328 (env_1296: unit)
    call L_3329 (<=_5 (env_1296, x_3711)) handle _ => raise
  block L_3329 (x_3713: bool)
    case x_3713 of
      true => L_3331 | false => L_3330
  block L_3330 ()
    val x_3714: (real64, real64) tuple = (x_3710, minInt_17)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3332
  block L_3332 (env_1297: unit)
    call L_3333 (<_8 (env_1297, x_3714)) handle _ => raise
  block L_3333 (x_3715: bool)
    case x_3715 of
      true => L_3335 | false => L_3334
  block L_3334 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3335 ()
    val x_3716: (real64, real64) tuple = (minInt_17, one_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3336
  block L_3336 (env_1298: unit)
    call L_3337 (-_4 (env_1298, x_3716)) handle _ => raise
  block L_3337 (x_3717: real64)
    val x_3718: (real64, real64) tuple = (x_3717, x_3710)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3338
  block L_3338 (env_1299: unit)
    call L_3339 (<_8 (env_1299, x_3718)) handle _ => raise
  block L_3339 (x_3719: bool)
    case x_3719 of
      true => L_3341 | false => L_3340
  block L_3340 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3341 ()
    case x_3712 of
      TO_NEGINF_0 => L_3345
    | TO_ZERO_0 => L_3344
    | TO_NEAREST_0 => L_3343
    | TO_POSINF_0 => L_3342
  block L_3342 ()
    return (minInt'_5)
  block L_3343 ()
    val x_3720: (real64, real64) tuple = (x_3710, minInt_17)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3346
  block L_3346 (env_1300: unit)
    call L_3347 (-_4 (env_1300, x_3720)) handle _ => raise
  block L_3347 (x_3721: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3348
  block L_3348 (env_1301: unit)
    call L_3349 (~_2 (env_1301, half_19)) handle _ => raise
  block L_3349 (x_3722: real64)
    val x_3723: (real64, real64) tuple = (x_3721, x_3722)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3350
  block L_3350 (env_1302: unit)
    call L_3351 (<_8 (env_1302, x_3723)) handle _ => raise
  block L_3351 (x_3724: bool)
    case x_3724 of
      true => L_3353 | false => L_3352
  block L_3352 ()
    return (minInt'_5)
  block L_3353 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3344 ()
    return (minInt'_5)
  block L_3345 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3331 ()
    val x_3725: (real64, real64) tuple = (x_3710, maxInt_17)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3354
  block L_3354 (env_1303: unit)
    call L_3355 (<=_5 (env_1303, x_3725)) handle _ => raise
  block L_3355 (x_3726: bool)
    case x_3726 of
      true => L_3357 | false => L_3356
  block L_3356 ()
    val x_3727: (real64, real64) tuple = (maxInt_17, one_25)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3358
  block L_3358 (env_1304: unit)
    call L_3359 (+_3 (env_1304, x_3727)) handle _ => raise
  block L_3359 (x_3728: real64)
    val x_3729: (real64, real64) tuple = (x_3710, x_3728)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3360
  block L_3360 (env_1305: unit)
    call L_3361 (<_8 (env_1305, x_3729)) handle _ => raise
  block L_3361 (x_3730: bool)
    case x_3730 of
      true => L_3363 | false => L_3362
  block L_3362 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3363 ()
    case x_3712 of
      TO_NEGINF_0 => L_3367
    | TO_ZERO_0 => L_3366
    | TO_NEAREST_0 => L_3365
    | TO_POSINF_0 => L_3364
  block L_3364 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3365 ()
    val x_3731: (real64, real64) tuple = (x_3710, maxInt_17)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3368
  block L_3368 (env_1306: unit)
    call L_3369 (-_4 (env_1306, x_3731)) handle _ => raise
  block L_3369 (x_3732: real64)
    val x_3733: (real64, real64) tuple = (x_3732, half_19)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3370
  block L_3370 (env_1307: unit)
    call L_3371 (>=_8 (env_1307, x_3733)) handle _ => raise
  block L_3371 (x_3734: bool)
    case x_3734 of
      true => L_3373 | false => L_3372
  block L_3372 ()
    return (maxInt'_21)
  block L_3373 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3366 ()
    return (maxInt'_21)
  block L_3367 ()
    return (maxInt'_21)
  block L_3357 ()
    case x_3712 of
      TO_POSINF_0 => L_3377
    | TO_NEAREST_0 => L_3376
    | TO_ZERO_0 => L_3375
    | TO_NEGINF_0 => L_3374
  block L_3374 ()
    val x_3735: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3710)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3378
  block L_3378 (env_1308: unit)
    call tail toInt64Unsafe_2 (env_1308, x_3735)
  block L_3375 ()
    val x_3736: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3710)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3379
  block L_3379 (env_1309: unit)
    call tail toInt64Unsafe_2 (env_1309, x_3736)
  block L_3376 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3380
  block L_3380 (env_1310: unit)
    call L_3381 (x_3492 (env_1310, x_1021 (*()*))) handle _ => raise
  block L_3381 (m'_8: t_9)
    case setRoundingMode_19 of
      setRoundingModeEnv_0 => L_3382
  block L_3382 (env_1311: (lambdas_223, word32) tuple)
    call L_3383 (setRoundingMode_3 (env_1311, x_1020 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3383 (x_3737: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3384
  block L_3384 (env_1312: unit)
    call L_3385 (round_2 (env_1312, x_3710)) handle _ => raise
  block L_3385 (x_3738: real64)
    case setRoundingMode_19 of
      setRoundingModeEnv_0 => L_3386
  block L_3386 (env_1313: (lambdas_223, word32) tuple)
    call L_3387 (setRoundingMode_3 (env_1313, m'_8)) handle _ => raise
  block L_3387 (x_3739: unit)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3388
  block L_3388 (env_1314: unit)
    call tail toInt64Unsafe_2 (env_1314, x_3738)
  block L_3377 ()
    val x_3740: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3710)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3389
  block L_3389 (env_1315: unit)
    call tail toInt64Unsafe_2 (env_1315, x_3740)
fun x_3741 (env_1316: (real64, real64, lambdas_99) tuple, x_3742: t_9):
  {returns = Some (lambdas_133), raises = Some (exn)} =
L_3390 ()
  block L_3390 ()
    val minInt_18: real64 = #0 (env_1316)
    val maxInt_18: real64 = #1 (env_1316)
    val setRoundingMode_20: lambdas_99 = #2 (env_1316)
    val x_3744: (lambdas_99, t_9, real64, real64) tuple =
      (setRoundingMode_20, x_3742, maxInt_18, minInt_18)
    val x_3743: lambdas_133 = con xEnv_121 (x_3744)
    return (x_3743)
fun x_3745 (env_1317: (lambdas_99, t_9, real64, real64) tuple, x_3746: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_3391 ()
  block L_3391 ()
    val setRoundingMode_21: lambdas_99 = #0 (env_1317)
    val x_3748: t_9 = #1 (env_1317)
    val maxInt_19: real64 = #2 (env_1317)
    val minInt_19: real64 = #3 (env_1317)
    val x_3747: (real64, real64) tuple = (minInt_19, x_3746)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3392
  block L_3392 (env_1318: unit)
    call L_3393 (<=_5 (env_1318, x_3747)) handle _ => raise
  block L_3393 (x_3749: bool)
    case x_3749 of
      true => L_3395 | false => L_3394
  block L_3394 ()
    val x_3750: (real64, real64) tuple = (x_3746, minInt_19)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3396
  block L_3396 (env_1319: unit)
    call L_3397 (<_8 (env_1319, x_3750)) handle _ => raise
  block L_3397 (x_3751: bool)
    case x_3751 of
      true => L_3399 | false => L_3398
  block L_3398 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3399 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3395 ()
    val x_3752: (real64, real64) tuple = (x_3746, maxInt_19)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3400
  block L_3400 (env_1320: unit)
    call L_3401 (<=_5 (env_1320, x_3752)) handle _ => raise
  block L_3401 (x_3753: bool)
    case x_3753 of
      true => L_3403 | false => L_3402
  block L_3402 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3403 ()
    case x_3748 of
      TO_POSINF_0 => L_3407
    | TO_NEAREST_0 => L_3406
    | TO_ZERO_0 => L_3405
    | TO_NEGINF_0 => L_3404
  block L_3404 ()
    val x_3754: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3746)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3408
  block L_3408 (env_1321: unit)
    call tail toInt64Unsafe_2 (env_1321, x_3754)
  block L_3405 ()
    val x_3755: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3746)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3409
  block L_3409 (env_1322: unit)
    call tail toInt64Unsafe_2 (env_1322, x_3755)
  block L_3406 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3410
  block L_3410 (env_1323: unit)
    call L_3411 (x_3492 (env_1323, x_1018 (*()*))) handle _ => raise
  block L_3411 (m'_9: t_9)
    case setRoundingMode_21 of
      setRoundingModeEnv_0 => L_3412
  block L_3412 (env_1324: (lambdas_223, word32) tuple)
    call L_3413 (setRoundingMode_3 (env_1324, x_1017 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3413 (x_3756: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3414
  block L_3414 (env_1325: unit)
    call L_3415 (round_2 (env_1325, x_3746)) handle _ => raise
  block L_3415 (x_3757: real64)
    case setRoundingMode_21 of
      setRoundingModeEnv_0 => L_3416
  block L_3416 (env_1326: (lambdas_223, word32) tuple)
    call L_3417 (setRoundingMode_3 (env_1326, m'_9)) handle _ => raise
  block L_3417 (x_3758: unit)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3418
  block L_3418 (env_1327: unit)
    call tail toInt64Unsafe_2 (env_1327, x_3757)
  block L_3407 ()
    val x_3759: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3746)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3419
  block L_3419 (env_1328: unit)
    call tail toInt64Unsafe_2 (env_1328, x_3759)
fun x_2237 (env_1329: (lambdas_138, lambdas_137, word64) tuple, x_3760: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3420 ()
  block L_3420 ()
    val <<_16: lambdas_138 = #0 (env_1329)
    val >>_16: lambdas_137 = #1 (env_1329)
    val maxInt'_22: word64 = #2 (env_1329)
    val x_3761: (word64, word32) tuple = (maxInt'_22, x_3760)
    case >>_16 of
      >>Env_4 => L_3421
  block L_3421 (env_1330: (word32, word64) tuple)
    call L_3422 (>>_17 (env_1330, x_3761)) handle _ => raise
  block L_3422 (x_3762: word64)
    val x_3763: (word64, word32) tuple = (x_3762, x_3760)
    case <<_16 of
      <<Env_4 => L_3423
  block L_3423 (env_1331: (word32, word64) tuple)
    call tail <<_17 (env_1331, x_3763)
fun x_3764 (env_1332:
              (real64, real64, lambdas_99, real64, word32, real64, word32) tuple,
            x_3765: t_9):
  {returns = Some (lambdas_139), raises = Some (exn)} =
L_3424 ()
  block L_3424 ()
    val minInt_20: real64 = #0 (env_1332)
    val maxInt_20: real64 = #1 (env_1332)
    val setRoundingMode_22: lambdas_99 = #2 (env_1332)
    val one_26: real64 = #3 (env_1332)
    val maxInt'_23: word32 = #4 (env_1332)
    val half_20: real64 = #5 (env_1332)
    val minInt'_6: word32 = #6 (env_1332)
    val x_3767:
      (word32, real64, word32, real64, lambdas_99, t_9, real64, real64) tuple =
      (minInt'_6,
       half_20,
       maxInt'_23,
       one_26,
       setRoundingMode_22,
       x_3765,
       maxInt_20,
       minInt_20)
    val x_3766: lambdas_139 = con xEnv_126 (x_3767)
    return (x_3766)
fun x_3768 (env_1333:
              (word32, real64, word32, real64, lambdas_99, t_9, real64, real64) tuple,
            x_3769: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3425 ()
  block L_3425 ()
    val minInt'_7: word32 = #0 (env_1333)
    val half_21: real64 = #1 (env_1333)
    val maxInt'_24: word32 = #2 (env_1333)
    val one_27: real64 = #3 (env_1333)
    val setRoundingMode_23: lambdas_99 = #4 (env_1333)
    val x_3771: t_9 = #5 (env_1333)
    val maxInt_21: real64 = #6 (env_1333)
    val minInt_21: real64 = #7 (env_1333)
    val x_3770: (real64, real64) tuple = (minInt_21, x_3769)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3426
  block L_3426 (env_1334: unit)
    call L_3427 (<=_5 (env_1334, x_3770)) handle _ => raise
  block L_3427 (x_3772: bool)
    case x_3772 of
      true => L_3429 | false => L_3428
  block L_3428 ()
    val x_3773: (real64, real64) tuple = (x_3769, minInt_21)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3430
  block L_3430 (env_1335: unit)
    call L_3431 (<_8 (env_1335, x_3773)) handle _ => raise
  block L_3431 (x_3774: bool)
    case x_3774 of
      true => L_3433 | false => L_3432
  block L_3432 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3433 ()
    val x_3775: (real64, real64) tuple = (minInt_21, one_27)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3434
  block L_3434 (env_1336: unit)
    call L_3435 (-_4 (env_1336, x_3775)) handle _ => raise
  block L_3435 (x_3776: real64)
    val x_3777: (real64, real64) tuple = (x_3776, x_3769)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3436
  block L_3436 (env_1337: unit)
    call L_3437 (<_8 (env_1337, x_3777)) handle _ => raise
  block L_3437 (x_3778: bool)
    case x_3778 of
      true => L_3439 | false => L_3438
  block L_3438 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3439 ()
    case x_3771 of
      TO_NEGINF_0 => L_3443
    | TO_ZERO_0 => L_3442
    | TO_NEAREST_0 => L_3441
    | TO_POSINF_0 => L_3440
  block L_3440 ()
    return (minInt'_7)
  block L_3441 ()
    val x_3779: (real64, real64) tuple = (x_3769, minInt_21)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3444
  block L_3444 (env_1338: unit)
    call L_3445 (-_4 (env_1338, x_3779)) handle _ => raise
  block L_3445 (x_3780: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3446
  block L_3446 (env_1339: unit)
    call L_3447 (~_2 (env_1339, half_21)) handle _ => raise
  block L_3447 (x_3781: real64)
    val x_3782: (real64, real64) tuple = (x_3780, x_3781)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3448
  block L_3448 (env_1340: unit)
    call L_3449 (<_8 (env_1340, x_3782)) handle _ => raise
  block L_3449 (x_3783: bool)
    case x_3783 of
      true => L_3451 | false => L_3450
  block L_3450 ()
    return (minInt'_7)
  block L_3451 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3442 ()
    return (minInt'_7)
  block L_3443 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3429 ()
    val x_3784: (real64, real64) tuple = (x_3769, maxInt_21)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3452
  block L_3452 (env_1341: unit)
    call L_3453 (<=_5 (env_1341, x_3784)) handle _ => raise
  block L_3453 (x_3785: bool)
    case x_3785 of
      true => L_3455 | false => L_3454
  block L_3454 ()
    val x_3786: (real64, real64) tuple = (maxInt_21, one_27)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3456
  block L_3456 (env_1342: unit)
    call L_3457 (+_3 (env_1342, x_3786)) handle _ => raise
  block L_3457 (x_3787: real64)
    val x_3788: (real64, real64) tuple = (x_3769, x_3787)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3458
  block L_3458 (env_1343: unit)
    call L_3459 (<_8 (env_1343, x_3788)) handle _ => raise
  block L_3459 (x_3789: bool)
    case x_3789 of
      true => L_3461 | false => L_3460
  block L_3460 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3461 ()
    case x_3771 of
      TO_NEGINF_0 => L_3465
    | TO_ZERO_0 => L_3464
    | TO_NEAREST_0 => L_3463
    | TO_POSINF_0 => L_3462
  block L_3462 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3463 ()
    val x_3790: (real64, real64) tuple = (x_3769, maxInt_21)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3466
  block L_3466 (env_1344: unit)
    call L_3467 (-_4 (env_1344, x_3790)) handle _ => raise
  block L_3467 (x_3791: real64)
    val x_3792: (real64, real64) tuple = (x_3791, half_21)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3468
  block L_3468 (env_1345: unit)
    call L_3469 (>=_8 (env_1345, x_3792)) handle _ => raise
  block L_3469 (x_3793: bool)
    case x_3793 of
      true => L_3471 | false => L_3470
  block L_3470 ()
    return (maxInt'_24)
  block L_3471 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3464 ()
    return (maxInt'_24)
  block L_3465 ()
    return (maxInt'_24)
  block L_3455 ()
    case x_3771 of
      TO_POSINF_0 => L_3475
    | TO_NEAREST_0 => L_3474
    | TO_ZERO_0 => L_3473
    | TO_NEGINF_0 => L_3472
  block L_3472 ()
    val x_3794: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3769)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3476
  block L_3476 (env_1346: unit)
    call tail toInt32Unsafe_2 (env_1346, x_3794)
  block L_3473 ()
    val x_3795: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3769)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3477
  block L_3477 (env_1347: unit)
    call tail toInt32Unsafe_2 (env_1347, x_3795)
  block L_3474 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3478
  block L_3478 (env_1348: unit)
    call L_3479 (x_3492 (env_1348, x_1015 (*()*))) handle _ => raise
  block L_3479 (m'_10: t_9)
    case setRoundingMode_23 of
      setRoundingModeEnv_0 => L_3480
  block L_3480 (env_1349: (lambdas_223, word32) tuple)
    call L_3481 (setRoundingMode_3 (env_1349, x_1014 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3481 (x_3796: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3482
  block L_3482 (env_1350: unit)
    call L_3483 (round_2 (env_1350, x_3769)) handle _ => raise
  block L_3483 (x_3797: real64)
    case setRoundingMode_23 of
      setRoundingModeEnv_0 => L_3484
  block L_3484 (env_1351: (lambdas_223, word32) tuple)
    call L_3485 (setRoundingMode_3 (env_1351, m'_10)) handle _ => raise
  block L_3485 (x_3798: unit)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3486
  block L_3486 (env_1352: unit)
    call tail toInt32Unsafe_2 (env_1352, x_3797)
  block L_3475 ()
    val x_3799: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3769)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3487
  block L_3487 (env_1353: unit)
    call tail toInt32Unsafe_2 (env_1353, x_3799)
fun x_3800 (env_1354: (real64, real64, lambdas_99) tuple, x_3801: t_9):
  {returns = Some (lambdas_141), raises = Some (exn)} =
L_3488 ()
  block L_3488 ()
    val minInt_22: real64 = #0 (env_1354)
    val maxInt_22: real64 = #1 (env_1354)
    val setRoundingMode_24: lambdas_99 = #2 (env_1354)
    val x_3803: (lambdas_99, t_9, real64, real64) tuple =
      (setRoundingMode_24, x_3801, maxInt_22, minInt_22)
    val x_3802: lambdas_141 = con xEnv_128 (x_3803)
    return (x_3802)
fun x_3804 (env_1355: (lambdas_99, t_9, real64, real64) tuple, x_3805: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3489 ()
  block L_3489 ()
    val setRoundingMode_25: lambdas_99 = #0 (env_1355)
    val x_3807: t_9 = #1 (env_1355)
    val maxInt_23: real64 = #2 (env_1355)
    val minInt_23: real64 = #3 (env_1355)
    val x_3806: (real64, real64) tuple = (minInt_23, x_3805)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3490
  block L_3490 (env_1356: unit)
    call L_3491 (<=_5 (env_1356, x_3806)) handle _ => raise
  block L_3491 (x_3808: bool)
    case x_3808 of
      true => L_3493 | false => L_3492
  block L_3492 ()
    val x_3809: (real64, real64) tuple = (x_3805, minInt_23)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3494
  block L_3494 (env_1357: unit)
    call L_3495 (<_8 (env_1357, x_3809)) handle _ => raise
  block L_3495 (x_3810: bool)
    case x_3810 of
      true => L_3497 | false => L_3496
  block L_3496 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3497 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3493 ()
    val x_3811: (real64, real64) tuple = (x_3805, maxInt_23)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3498
  block L_3498 (env_1358: unit)
    call L_3499 (<=_5 (env_1358, x_3811)) handle _ => raise
  block L_3499 (x_3812: bool)
    case x_3812 of
      true => L_3501 | false => L_3500
  block L_3500 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3501 ()
    case x_3807 of
      TO_POSINF_0 => L_3505
    | TO_NEAREST_0 => L_3504
    | TO_ZERO_0 => L_3503
    | TO_NEGINF_0 => L_3502
  block L_3502 ()
    val x_3813: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3805)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3506
  block L_3506 (env_1359: unit)
    call tail toInt32Unsafe_2 (env_1359, x_3813)
  block L_3503 ()
    val x_3814: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3805)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3507
  block L_3507 (env_1360: unit)
    call tail toInt32Unsafe_2 (env_1360, x_3814)
  block L_3504 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3508
  block L_3508 (env_1361: unit)
    call L_3509 (x_3492 (env_1361, x_1012 (*()*))) handle _ => raise
  block L_3509 (m'_11: t_9)
    case setRoundingMode_25 of
      setRoundingModeEnv_0 => L_3510
  block L_3510 (env_1362: (lambdas_223, word32) tuple)
    call L_3511 (setRoundingMode_3 (env_1362, x_1011 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3511 (x_3815: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3512
  block L_3512 (env_1363: unit)
    call L_3513 (round_2 (env_1363, x_3805)) handle _ => raise
  block L_3513 (x_3816: real64)
    case setRoundingMode_25 of
      setRoundingModeEnv_0 => L_3514
  block L_3514 (env_1364: (lambdas_223, word32) tuple)
    call L_3515 (setRoundingMode_3 (env_1364, m'_11)) handle _ => raise
  block L_3515 (x_3817: unit)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3516
  block L_3516 (env_1365: unit)
    call tail toInt32Unsafe_2 (env_1365, x_3816)
  block L_3505 ()
    val x_3818: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3805)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3517
  block L_3517 (env_1366: unit)
    call tail toInt32Unsafe_2 (env_1366, x_3818)
fun x_2224 (env_1367: (lambdas_146, lambdas_145, word32) tuple, x_3819: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3518 ()
  block L_3518 ()
    val <<_18: lambdas_146 = #0 (env_1367)
    val >>_18: lambdas_145 = #1 (env_1367)
    val maxInt'_25: word32 = #2 (env_1367)
    val x_3820: (word32, word32) tuple = (maxInt'_25, x_3819)
    case >>_18 of
      >>Env_5 => L_3519
  block L_3519 (env_1368: (word32, word32) tuple)
    call L_3520 (>>_19 (env_1368, x_3820)) handle _ => raise
  block L_3520 (x_3821: word32)
    val x_3822: (word32, word32) tuple = (x_3821, x_3819)
    case <<_18 of
      <<Env_5 => L_3521
  block L_3521 (env_1369: (word32, word32) tuple)
    call tail <<_19 (env_1369, x_3822)
fun x_3823 (env_1370:
              (real64, real64, lambdas_99, real64, word16, real64, word16) tuple,
            x_3824: t_9):
  {returns = Some (lambdas_147), raises = Some (exn)} =
L_3522 ()
  block L_3522 ()
    val minInt_24: real64 = #0 (env_1370)
    val maxInt_24: real64 = #1 (env_1370)
    val setRoundingMode_26: lambdas_99 = #2 (env_1370)
    val one_28: real64 = #3 (env_1370)
    val maxInt'_26: word16 = #4 (env_1370)
    val half_22: real64 = #5 (env_1370)
    val minInt'_8: word16 = #6 (env_1370)
    val x_3826:
      (word16, real64, word16, real64, lambdas_99, t_9, real64, real64) tuple =
      (minInt'_8,
       half_22,
       maxInt'_26,
       one_28,
       setRoundingMode_26,
       x_3824,
       maxInt_24,
       minInt_24)
    val x_3825: lambdas_147 = con xEnv_133 (x_3826)
    return (x_3825)
fun x_3827 (env_1371:
              (word16, real64, word16, real64, lambdas_99, t_9, real64, real64) tuple,
            x_3828: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3523 ()
  block L_3523 ()
    val minInt'_9: word16 = #0 (env_1371)
    val half_23: real64 = #1 (env_1371)
    val maxInt'_27: word16 = #2 (env_1371)
    val one_29: real64 = #3 (env_1371)
    val setRoundingMode_27: lambdas_99 = #4 (env_1371)
    val x_3830: t_9 = #5 (env_1371)
    val maxInt_25: real64 = #6 (env_1371)
    val minInt_25: real64 = #7 (env_1371)
    val x_3829: (real64, real64) tuple = (minInt_25, x_3828)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3524
  block L_3524 (env_1372: unit)
    call L_3525 (<=_5 (env_1372, x_3829)) handle _ => raise
  block L_3525 (x_3831: bool)
    case x_3831 of
      true => L_3527 | false => L_3526
  block L_3526 ()
    val x_3832: (real64, real64) tuple = (x_3828, minInt_25)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3528
  block L_3528 (env_1373: unit)
    call L_3529 (<_8 (env_1373, x_3832)) handle _ => raise
  block L_3529 (x_3833: bool)
    case x_3833 of
      true => L_3531 | false => L_3530
  block L_3530 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3531 ()
    val x_3834: (real64, real64) tuple = (minInt_25, one_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3532
  block L_3532 (env_1374: unit)
    call L_3533 (-_4 (env_1374, x_3834)) handle _ => raise
  block L_3533 (x_3835: real64)
    val x_3836: (real64, real64) tuple = (x_3835, x_3828)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3534
  block L_3534 (env_1375: unit)
    call L_3535 (<_8 (env_1375, x_3836)) handle _ => raise
  block L_3535 (x_3837: bool)
    case x_3837 of
      true => L_3537 | false => L_3536
  block L_3536 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3537 ()
    case x_3830 of
      TO_NEGINF_0 => L_3541
    | TO_ZERO_0 => L_3540
    | TO_NEAREST_0 => L_3539
    | TO_POSINF_0 => L_3538
  block L_3538 ()
    return (minInt'_9)
  block L_3539 ()
    val x_3838: (real64, real64) tuple = (x_3828, minInt_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3542
  block L_3542 (env_1376: unit)
    call L_3543 (-_4 (env_1376, x_3838)) handle _ => raise
  block L_3543 (x_3839: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3544
  block L_3544 (env_1377: unit)
    call L_3545 (~_2 (env_1377, half_23)) handle _ => raise
  block L_3545 (x_3840: real64)
    val x_3841: (real64, real64) tuple = (x_3839, x_3840)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3546
  block L_3546 (env_1378: unit)
    call L_3547 (<_8 (env_1378, x_3841)) handle _ => raise
  block L_3547 (x_3842: bool)
    case x_3842 of
      true => L_3549 | false => L_3548
  block L_3548 ()
    return (minInt'_9)
  block L_3549 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3540 ()
    return (minInt'_9)
  block L_3541 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3527 ()
    val x_3843: (real64, real64) tuple = (x_3828, maxInt_25)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3550
  block L_3550 (env_1379: unit)
    call L_3551 (<=_5 (env_1379, x_3843)) handle _ => raise
  block L_3551 (x_3844: bool)
    case x_3844 of
      true => L_3553 | false => L_3552
  block L_3552 ()
    val x_3845: (real64, real64) tuple = (maxInt_25, one_29)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3554
  block L_3554 (env_1380: unit)
    call L_3555 (+_3 (env_1380, x_3845)) handle _ => raise
  block L_3555 (x_3846: real64)
    val x_3847: (real64, real64) tuple = (x_3828, x_3846)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3556
  block L_3556 (env_1381: unit)
    call L_3557 (<_8 (env_1381, x_3847)) handle _ => raise
  block L_3557 (x_3848: bool)
    case x_3848 of
      true => L_3559 | false => L_3558
  block L_3558 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3559 ()
    case x_3830 of
      TO_NEGINF_0 => L_3563
    | TO_ZERO_0 => L_3562
    | TO_NEAREST_0 => L_3561
    | TO_POSINF_0 => L_3560
  block L_3560 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3561 ()
    val x_3849: (real64, real64) tuple = (x_3828, maxInt_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3564
  block L_3564 (env_1382: unit)
    call L_3565 (-_4 (env_1382, x_3849)) handle _ => raise
  block L_3565 (x_3850: real64)
    val x_3851: (real64, real64) tuple = (x_3850, half_23)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3566
  block L_3566 (env_1383: unit)
    call L_3567 (>=_8 (env_1383, x_3851)) handle _ => raise
  block L_3567 (x_3852: bool)
    case x_3852 of
      true => L_3569 | false => L_3568
  block L_3568 ()
    return (maxInt'_27)
  block L_3569 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3562 ()
    return (maxInt'_27)
  block L_3563 ()
    return (maxInt'_27)
  block L_3553 ()
    case x_3830 of
      TO_POSINF_0 => L_3573
    | TO_NEAREST_0 => L_3572
    | TO_ZERO_0 => L_3571
    | TO_NEGINF_0 => L_3570
  block L_3570 ()
    val x_3853: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3828)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3574
  block L_3574 (env_1384: unit)
    call tail toInt16Unsafe_2 (env_1384, x_3853)
  block L_3571 ()
    val x_3854: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3828)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3575
  block L_3575 (env_1385: unit)
    call tail toInt16Unsafe_2 (env_1385, x_3854)
  block L_3572 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3576
  block L_3576 (env_1386: unit)
    call L_3577 (x_3492 (env_1386, x_1009 (*()*))) handle _ => raise
  block L_3577 (m'_12: t_9)
    case setRoundingMode_27 of
      setRoundingModeEnv_0 => L_3578
  block L_3578 (env_1387: (lambdas_223, word32) tuple)
    call L_3579 (setRoundingMode_3 (env_1387, x_1008 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3579 (x_3855: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3580
  block L_3580 (env_1388: unit)
    call L_3581 (round_2 (env_1388, x_3828)) handle _ => raise
  block L_3581 (x_3856: real64)
    case setRoundingMode_27 of
      setRoundingModeEnv_0 => L_3582
  block L_3582 (env_1389: (lambdas_223, word32) tuple)
    call L_3583 (setRoundingMode_3 (env_1389, m'_12)) handle _ => raise
  block L_3583 (x_3857: unit)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3584
  block L_3584 (env_1390: unit)
    call tail toInt16Unsafe_2 (env_1390, x_3856)
  block L_3573 ()
    val x_3858: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3828)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3585
  block L_3585 (env_1391: unit)
    call tail toInt16Unsafe_2 (env_1391, x_3858)
fun x_3859 (env_1392: (real64, real64, lambdas_99) tuple, x_3860: t_9):
  {returns = Some (lambdas_149), raises = Some (exn)} =
L_3586 ()
  block L_3586 ()
    val minInt_26: real64 = #0 (env_1392)
    val maxInt_26: real64 = #1 (env_1392)
    val setRoundingMode_28: lambdas_99 = #2 (env_1392)
    val x_3862: (lambdas_99, t_9, real64, real64) tuple =
      (setRoundingMode_28, x_3860, maxInt_26, minInt_26)
    val x_3861: lambdas_149 = con xEnv_135 (x_3862)
    return (x_3861)
fun x_3863 (env_1393: (lambdas_99, t_9, real64, real64) tuple, x_3864: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3587 ()
  block L_3587 ()
    val setRoundingMode_29: lambdas_99 = #0 (env_1393)
    val x_3866: t_9 = #1 (env_1393)
    val maxInt_27: real64 = #2 (env_1393)
    val minInt_27: real64 = #3 (env_1393)
    val x_3865: (real64, real64) tuple = (minInt_27, x_3864)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3588
  block L_3588 (env_1394: unit)
    call L_3589 (<=_5 (env_1394, x_3865)) handle _ => raise
  block L_3589 (x_3867: bool)
    case x_3867 of
      true => L_3591 | false => L_3590
  block L_3590 ()
    val x_3868: (real64, real64) tuple = (x_3864, minInt_27)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3592
  block L_3592 (env_1395: unit)
    call L_3593 (<_8 (env_1395, x_3868)) handle _ => raise
  block L_3593 (x_3869: bool)
    case x_3869 of
      true => L_3595 | false => L_3594
  block L_3594 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3595 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3591 ()
    val x_3870: (real64, real64) tuple = (x_3864, maxInt_27)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3596
  block L_3596 (env_1396: unit)
    call L_3597 (<=_5 (env_1396, x_3870)) handle _ => raise
  block L_3597 (x_3871: bool)
    case x_3871 of
      true => L_3599 | false => L_3598
  block L_3598 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3599 ()
    case x_3866 of
      TO_POSINF_0 => L_3603
    | TO_NEAREST_0 => L_3602
    | TO_ZERO_0 => L_3601
    | TO_NEGINF_0 => L_3600
  block L_3600 ()
    val x_3872: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3864)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3604
  block L_3604 (env_1397: unit)
    call tail toInt16Unsafe_2 (env_1397, x_3872)
  block L_3601 ()
    val x_3873: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3864)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3605
  block L_3605 (env_1398: unit)
    call tail toInt16Unsafe_2 (env_1398, x_3873)
  block L_3602 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3606
  block L_3606 (env_1399: unit)
    call L_3607 (x_3492 (env_1399, x_1006 (*()*))) handle _ => raise
  block L_3607 (m'_13: t_9)
    case setRoundingMode_29 of
      setRoundingModeEnv_0 => L_3608
  block L_3608 (env_1400: (lambdas_223, word32) tuple)
    call L_3609 (setRoundingMode_3 (env_1400, x_1005 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3609 (x_3874: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3610
  block L_3610 (env_1401: unit)
    call L_3611 (round_2 (env_1401, x_3864)) handle _ => raise
  block L_3611 (x_3875: real64)
    case setRoundingMode_29 of
      setRoundingModeEnv_0 => L_3612
  block L_3612 (env_1402: (lambdas_223, word32) tuple)
    call L_3613 (setRoundingMode_3 (env_1402, m'_13)) handle _ => raise
  block L_3613 (x_3876: unit)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3614
  block L_3614 (env_1403: unit)
    call tail toInt16Unsafe_2 (env_1403, x_3875)
  block L_3603 ()
    val x_3877: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3864)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3615
  block L_3615 (env_1404: unit)
    call tail toInt16Unsafe_2 (env_1404, x_3877)
fun x_2211 (env_1405: (lambdas_154, lambdas_153, word16) tuple, x_3878: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_3616 ()
  block L_3616 ()
    val <<_20: lambdas_154 = #0 (env_1405)
    val >>_20: lambdas_153 = #1 (env_1405)
    val maxInt'_28: word16 = #2 (env_1405)
    val x_3879: (word16, word32) tuple = (maxInt'_28, x_3878)
    case >>_20 of
      >>Env_6 => L_3617
  block L_3617 (env_1406: (word32, word16) tuple)
    call L_3618 (>>_21 (env_1406, x_3879)) handle _ => raise
  block L_3618 (x_3880: word16)
    val x_3881: (word16, word32) tuple = (x_3880, x_3878)
    case <<_20 of
      <<Env_6 => L_3619
  block L_3619 (env_1407: (word32, word16) tuple)
    call tail <<_21 (env_1407, x_3881)
fun x_3882 (env_1408:
              (real64, real64, lambdas_99, real64, word8, real64, word8) tuple,
            x_3883: t_9):
  {returns = Some (lambdas_155), raises = Some (exn)} =
L_3620 ()
  block L_3620 ()
    val minInt_28: real64 = #0 (env_1408)
    val maxInt_28: real64 = #1 (env_1408)
    val setRoundingMode_30: lambdas_99 = #2 (env_1408)
    val one_30: real64 = #3 (env_1408)
    val maxInt'_29: word8 = #4 (env_1408)
    val half_24: real64 = #5 (env_1408)
    val minInt'_10: word8 = #6 (env_1408)
    val x_3885:
      (word8, real64, word8, real64, lambdas_99, t_9, real64, real64) tuple =
      (minInt'_10,
       half_24,
       maxInt'_29,
       one_30,
       setRoundingMode_30,
       x_3883,
       maxInt_28,
       minInt_28)
    val x_3884: lambdas_155 = con xEnv_140 (x_3885)
    return (x_3884)
fun x_3886 (env_1409:
              (word8, real64, word8, real64, lambdas_99, t_9, real64, real64) tuple,
            x_3887: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3621 ()
  block L_3621 ()
    val minInt'_11: word8 = #0 (env_1409)
    val half_25: real64 = #1 (env_1409)
    val maxInt'_30: word8 = #2 (env_1409)
    val one_31: real64 = #3 (env_1409)
    val setRoundingMode_31: lambdas_99 = #4 (env_1409)
    val x_3889: t_9 = #5 (env_1409)
    val maxInt_29: real64 = #6 (env_1409)
    val minInt_29: real64 = #7 (env_1409)
    val x_3888: (real64, real64) tuple = (minInt_29, x_3887)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3622
  block L_3622 (env_1410: unit)
    call L_3623 (<=_5 (env_1410, x_3888)) handle _ => raise
  block L_3623 (x_3890: bool)
    case x_3890 of
      true => L_3625 | false => L_3624
  block L_3624 ()
    val x_3891: (real64, real64) tuple = (x_3887, minInt_29)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3626
  block L_3626 (env_1411: unit)
    call L_3627 (<_8 (env_1411, x_3891)) handle _ => raise
  block L_3627 (x_3892: bool)
    case x_3892 of
      true => L_3629 | false => L_3628
  block L_3628 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3629 ()
    val x_3893: (real64, real64) tuple = (minInt_29, one_31)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3630
  block L_3630 (env_1412: unit)
    call L_3631 (-_4 (env_1412, x_3893)) handle _ => raise
  block L_3631 (x_3894: real64)
    val x_3895: (real64, real64) tuple = (x_3894, x_3887)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3632
  block L_3632 (env_1413: unit)
    call L_3633 (<_8 (env_1413, x_3895)) handle _ => raise
  block L_3633 (x_3896: bool)
    case x_3896 of
      true => L_3635 | false => L_3634
  block L_3634 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3635 ()
    case x_3889 of
      TO_NEGINF_0 => L_3639
    | TO_ZERO_0 => L_3638
    | TO_NEAREST_0 => L_3637
    | TO_POSINF_0 => L_3636
  block L_3636 ()
    return (minInt'_11)
  block L_3637 ()
    val x_3897: (real64, real64) tuple = (x_3887, minInt_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3640
  block L_3640 (env_1414: unit)
    call L_3641 (-_4 (env_1414, x_3897)) handle _ => raise
  block L_3641 (x_3898: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3642
  block L_3642 (env_1415: unit)
    call L_3643 (~_2 (env_1415, half_25)) handle _ => raise
  block L_3643 (x_3899: real64)
    val x_3900: (real64, real64) tuple = (x_3898, x_3899)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3644
  block L_3644 (env_1416: unit)
    call L_3645 (<_8 (env_1416, x_3900)) handle _ => raise
  block L_3645 (x_3901: bool)
    case x_3901 of
      true => L_3647 | false => L_3646
  block L_3646 ()
    return (minInt'_11)
  block L_3647 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3638 ()
    return (minInt'_11)
  block L_3639 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3625 ()
    val x_3902: (real64, real64) tuple = (x_3887, maxInt_29)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3648
  block L_3648 (env_1417: unit)
    call L_3649 (<=_5 (env_1417, x_3902)) handle _ => raise
  block L_3649 (x_3903: bool)
    case x_3903 of
      true => L_3651 | false => L_3650
  block L_3650 ()
    val x_3904: (real64, real64) tuple = (maxInt_29, one_31)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3652
  block L_3652 (env_1418: unit)
    call L_3653 (+_3 (env_1418, x_3904)) handle _ => raise
  block L_3653 (x_3905: real64)
    val x_3906: (real64, real64) tuple = (x_3887, x_3905)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3654
  block L_3654 (env_1419: unit)
    call L_3655 (<_8 (env_1419, x_3906)) handle _ => raise
  block L_3655 (x_3907: bool)
    case x_3907 of
      true => L_3657 | false => L_3656
  block L_3656 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3657 ()
    case x_3889 of
      TO_NEGINF_0 => L_3661
    | TO_ZERO_0 => L_3660
    | TO_NEAREST_0 => L_3659
    | TO_POSINF_0 => L_3658
  block L_3658 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3659 ()
    val x_3908: (real64, real64) tuple = (x_3887, maxInt_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3662
  block L_3662 (env_1420: unit)
    call L_3663 (-_4 (env_1420, x_3908)) handle _ => raise
  block L_3663 (x_3909: real64)
    val x_3910: (real64, real64) tuple = (x_3909, half_25)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3664
  block L_3664 (env_1421: unit)
    call L_3665 (>=_8 (env_1421, x_3910)) handle _ => raise
  block L_3665 (x_3911: bool)
    case x_3911 of
      true => L_3667 | false => L_3666
  block L_3666 ()
    return (maxInt'_30)
  block L_3667 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3660 ()
    return (maxInt'_30)
  block L_3661 ()
    return (maxInt'_30)
  block L_3651 ()
    case x_3889 of
      TO_POSINF_0 => L_3671
    | TO_NEAREST_0 => L_3670
    | TO_ZERO_0 => L_3669
    | TO_NEGINF_0 => L_3668
  block L_3668 ()
    val x_3912: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3887)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3672
  block L_3672 (env_1422: unit)
    call tail toInt8Unsafe_2 (env_1422, x_3912)
  block L_3669 ()
    val x_3913: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3887)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3673
  block L_3673 (env_1423: unit)
    call tail toInt8Unsafe_2 (env_1423, x_3913)
  block L_3670 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3674
  block L_3674 (env_1424: unit)
    call L_3675 (x_3492 (env_1424, x_1003 (*()*))) handle _ => raise
  block L_3675 (m'_14: t_9)
    case setRoundingMode_31 of
      setRoundingModeEnv_0 => L_3676
  block L_3676 (env_1425: (lambdas_223, word32) tuple)
    call L_3677 (setRoundingMode_3 (env_1425, x_1002 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3677 (x_3914: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3678
  block L_3678 (env_1426: unit)
    call L_3679 (round_2 (env_1426, x_3887)) handle _ => raise
  block L_3679 (x_3915: real64)
    case setRoundingMode_31 of
      setRoundingModeEnv_0 => L_3680
  block L_3680 (env_1427: (lambdas_223, word32) tuple)
    call L_3681 (setRoundingMode_3 (env_1427, m'_14)) handle _ => raise
  block L_3681 (x_3916: unit)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3682
  block L_3682 (env_1428: unit)
    call tail toInt8Unsafe_2 (env_1428, x_3915)
  block L_3671 ()
    val x_3917: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3887)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3683
  block L_3683 (env_1429: unit)
    call tail toInt8Unsafe_2 (env_1429, x_3917)
fun x_3918 (env_1430: (real64, real64, lambdas_99) tuple, x_3919: t_9):
  {returns = Some (lambdas_157), raises = Some (exn)} =
L_3684 ()
  block L_3684 ()
    val minInt_30: real64 = #0 (env_1430)
    val maxInt_30: real64 = #1 (env_1430)
    val setRoundingMode_32: lambdas_99 = #2 (env_1430)
    val x_3921: (lambdas_99, t_9, real64, real64) tuple =
      (setRoundingMode_32, x_3919, maxInt_30, minInt_30)
    val x_3920: lambdas_157 = con xEnv_142 (x_3921)
    return (x_3920)
fun x_3922 (env_1431: (lambdas_99, t_9, real64, real64) tuple, x_3923: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3685 ()
  block L_3685 ()
    val setRoundingMode_33: lambdas_99 = #0 (env_1431)
    val x_3925: t_9 = #1 (env_1431)
    val maxInt_31: real64 = #2 (env_1431)
    val minInt_31: real64 = #3 (env_1431)
    val x_3924: (real64, real64) tuple = (minInt_31, x_3923)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3686
  block L_3686 (env_1432: unit)
    call L_3687 (<=_5 (env_1432, x_3924)) handle _ => raise
  block L_3687 (x_3926: bool)
    case x_3926 of
      true => L_3689 | false => L_3688
  block L_3688 ()
    val x_3927: (real64, real64) tuple = (x_3923, minInt_31)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3690
  block L_3690 (env_1433: unit)
    call L_3691 (<_8 (env_1433, x_3927)) handle _ => raise
  block L_3691 (x_3928: bool)
    case x_3928 of
      true => L_3693 | false => L_3692
  block L_3692 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3693 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3689 ()
    val x_3929: (real64, real64) tuple = (x_3923, maxInt_31)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3694
  block L_3694 (env_1434: unit)
    call L_3695 (<=_5 (env_1434, x_3929)) handle _ => raise
  block L_3695 (x_3930: bool)
    case x_3930 of
      true => L_3697 | false => L_3696
  block L_3696 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3697 ()
    case x_3925 of
      TO_POSINF_0 => L_3701
    | TO_NEAREST_0 => L_3700
    | TO_ZERO_0 => L_3699
    | TO_NEGINF_0 => L_3698
  block L_3698 ()
    val x_3931: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3923)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3702
  block L_3702 (env_1435: unit)
    call tail toInt8Unsafe_2 (env_1435, x_3931)
  block L_3699 ()
    val x_3932: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3923)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3703
  block L_3703 (env_1436: unit)
    call tail toInt8Unsafe_2 (env_1436, x_3932)
  block L_3700 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3704
  block L_3704 (env_1437: unit)
    call L_3705 (x_3492 (env_1437, x_1000 (*()*))) handle _ => raise
  block L_3705 (m'_15: t_9)
    case setRoundingMode_33 of
      setRoundingModeEnv_0 => L_3706
  block L_3706 (env_1438: (lambdas_223, word32) tuple)
    call L_3707 (setRoundingMode_3 (env_1438, x_999 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3707 (x_3933: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3708
  block L_3708 (env_1439: unit)
    call L_3709 (round_2 (env_1439, x_3923)) handle _ => raise
  block L_3709 (x_3934: real64)
    case setRoundingMode_33 of
      setRoundingModeEnv_0 => L_3710
  block L_3710 (env_1440: (lambdas_223, word32) tuple)
    call L_3711 (setRoundingMode_3 (env_1440, m'_15)) handle _ => raise
  block L_3711 (x_3935: unit)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3712
  block L_3712 (env_1441: unit)
    call tail toInt8Unsafe_2 (env_1441, x_3934)
  block L_3701 ()
    val x_3936: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3923)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3713
  block L_3713 (env_1442: unit)
    call tail toInt8Unsafe_2 (env_1442, x_3936)
fun x_2198 (env_1443: (lambdas_162, lambdas_161, word8) tuple, x_3937: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3714 ()
  block L_3714 ()
    val <<_22: lambdas_162 = #0 (env_1443)
    val >>_22: lambdas_161 = #1 (env_1443)
    val maxInt'_31: word8 = #2 (env_1443)
    val x_3938: (word8, word32) tuple = (maxInt'_31, x_3937)
    case >>_22 of
      >>Env_7 => L_3715
  block L_3715 (env_1444: (word32, word8) tuple)
    call L_3716 (>>_23 (env_1444, x_3938)) handle _ => raise
  block L_3716 (x_3939: word8)
    val x_3940: (word8, word32) tuple = (x_3939, x_3937)
    case <<_22 of
      <<Env_7 => L_3717
  block L_3717 (env_1445: (word32, word8) tuple)
    call tail <<_23 (env_1445, x_3940)
fun x_3941 (env_1446: lambdas_99, x_3942: t_9):
  {returns = Some (lambdas_163), raises = Some (exn)} =
L_3718 ()
  block L_3718 ()
    val x_3944: (t_9, lambdas_99) tuple = (x_3942, env_1446)
    val x_3943: lambdas_163 = con xEnv_147 (x_3944)
    return (x_3943)
fun x_3945 (env_1447: (t_9, lambdas_99) tuple, x_3946: real32):
  {returns = Some (real64), raises = Some (exn)} =
L_3719 ()
  block L_3719 ()
    val x_3947: t_9 = #0 (env_1447)
    val setRoundingMode_34: lambdas_99 = #1 (env_1447)
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3720
  block L_3720 (env_1448: unit)
    call L_3721 (x_3492 (env_1448, x_997 (*()*))) handle _ => raise
  block L_3721 (m'_16: t_9)
    case setRoundingMode_34 of
      setRoundingModeEnv_0 => L_3722
  block L_3722 (env_1449: (lambdas_223, word32) tuple)
    call L_3723 (setRoundingMode_3 (env_1449, x_3947)) handle _ => raise
  block L_3723 (x_3948: unit)
    case fromReal32Unsafe_1 (*con fromRe ... _237)*) of
      fromReal32UnsafeEnv_1 => L_3724
  block L_3724 (env_1450: unit)
    call L_3725 (fromReal32Unsafe_2 (env_1450, x_3946)) handle _ => raise
  block L_3725 (x_3949: real64)
    case setRoundingMode_34 of
      setRoundingModeEnv_0 => L_3726
  block L_3726 (env_1451: (lambdas_223, word32) tuple)
    call L_3727 (setRoundingMode_3 (env_1451, m'_16)) handle _ => raise
  block L_3727 (x_3950: unit)
    return (x_3949)
fun x_3951 (env_1452: unit, x_3952: t_9):
  {returns = Some (lambdas_337), raises = Some (exn)} =
L_3728 ()
  block L_3728 ()
    return (fromReal32Unsafe_1 (*con fromRe ... _237)*))
fun class_4 (env_1453: (word64, word64, word64) tuple, x_3953: real64):
  {returns = Some (float_class_0), raises = Some (exn)} =
L_3729 ()
  block L_3729 ()
    val zero_33: word64 = #0 (env_1453)
    val significandMask_2: word64 = #1 (env_1453)
    val exponentMask_2: word64 = #2 (env_1453)
    val x_3955: word64 = prim Real64_castToWord64 (x_3953)
    val x_3954: (word64, word64) tuple = (x_3955, exponentMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3730
  block L_3730 (env_1454: unit)
    call L_3731 (andb_2 (env_1454, x_3954)) handle _ => raise
  block L_3731 (x_3956: word64)
    val x_3957: (word64, word64) tuple = (x_3956, exponentMask_2)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3732
  block L_3732 (env_1455: unit)
    call L_3733 (x_2300 (env_1455, x_3957)) handle _ => raise
  block L_3733 (x_3958: bool)
    case x_3958 of
      true => L_3735 | false => L_3734
  block L_3734 ()
    val x_3959: (word64, word64) tuple = (x_3955, exponentMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3736
  block L_3736 (env_1456: unit)
    call L_3737 (andb_2 (env_1456, x_3959)) handle _ => raise
  block L_3737 (x_3960: word64)
    val x_3961: (word64, word64) tuple = (x_3960, zero_33)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3738
  block L_3738 (env_1457: unit)
    call L_3739 (x_2300 (env_1457, x_3961)) handle _ => raise
  block L_3739 (x_3962: bool)
    case x_3962 of
      true => L_3741 | false => L_3740
  block L_3740 ()
    return (x_994 (*con NORMAL_1*))
  block L_3741 ()
    val x_3963: (word64, word64) tuple = (x_3955, significandMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3742
  block L_3742 (env_1458: unit)
    call L_3743 (andb_2 (env_1458, x_3963)) handle _ => raise
  block L_3743 (x_3964: word64)
    val x_3965: (word64, word64) tuple = (x_3964, zero_33)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3744
  block L_3744 (env_1459: unit)
    call L_3745 (x_2300 (env_1459, x_3965)) handle _ => raise
  block L_3745 (x_3966: bool)
    case x_3966 of
      true => L_3747 | false => L_3746
  block L_3746 ()
    return (x_993 (*con SUBNORMAL_1*))
  block L_3747 ()
    return (x_992 (*con ZERO_1*))
  block L_3735 ()
    val x_3967: (word64, word64) tuple = (x_3955, significandMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3748
  block L_3748 (env_1460: unit)
    call L_3749 (andb_2 (env_1460, x_3967)) handle _ => raise
  block L_3749 (x_3968: word64)
    val x_3969: (word64, word64) tuple = (x_3968, zero_33)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3750
  block L_3750 (env_1461: unit)
    call L_3751 (x_2300 (env_1461, x_3969)) handle _ => raise
  block L_3751 (x_3970: bool)
    case x_3970 of
      true => L_3753 | false => L_3752
  block L_3752 ()
    return (x_991 (*con NAN_1*))
  block L_3753 ()
    return (x_990 (*con INF_0*))
fun mkMask_1 (env_1462: (lambdas_106, word64) tuple, x_3971: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3754 ()
  block L_3754 ()
    val <<_24: lambdas_106 = #0 (env_1462)
    val zero_34: word64 = #1 (env_1462)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_3755
  block L_3755 (env_1463: unit)
    call L_3756 (notb_7 (env_1463, zero_34)) handle _ => raise
  block L_3756 (x_3972: word64)
    val x_3973: (word64, word32) tuple = (x_3972, x_3971)
    case <<_24 of
      <<Env_0 => L_3757
  block L_3757 (env_1464: (word32, word64) tuple)
    call L_3758 (<<_9 (env_1464, x_3973)) handle _ => raise
  block L_3758 (x_3974: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_3759
  block L_3759 (env_1465: unit)
    call tail notb_7 (env_1465, x_3974)
fun x_3975 (env_1466:
              (lambdas_169,
               real32,
               real32,
               lambdas_99,
               real32,
               word64,
               real32,
               word64) tuple,
            x_3976: t_9):
  {returns = Some (lambdas_168), raises = Some (exn)} =
L_3760 ()
  block L_3760 ()
    val class_19: lambdas_169 = #0 (env_1466)
    val zero_35: real32 = #1 (env_1466)
    val maxWord_32: real32 = #2 (env_1466)
    val setRoundingMode_35: lambdas_99 = #3 (env_1466)
    val one_32: real32 = #4 (env_1466)
    val maxWord'_32: word64 = #5 (env_1466)
    val half_26: real32 = #6 (env_1466)
    val zero_36: word64 = #7 (env_1466)
    val x_3978:
      (word64,
       real32,
       word64,
       real32,
       lambdas_99,
       t_9,
       real32,
       real32,
       lambdas_169) tuple =
      (zero_36,
       half_26,
       maxWord'_32,
       one_32,
       setRoundingMode_35,
       x_3976,
       maxWord_32,
       zero_35,
       class_19)
    val x_3977: lambdas_168 = con xEnv_151 (x_3978)
    return (x_3977)
fun x_3979 (env_1467:
              (word64,
               real32,
               word64,
               real32,
               lambdas_99,
               t_9,
               real32,
               real32,
               lambdas_169) tuple,
            x_3980: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_3761 ()
  block L_3761 ()
    val zero_38: word64 = #0 (env_1467)
    val half_27: real32 = #1 (env_1467)
    val maxWord'_33: word64 = #2 (env_1467)
    val one_33: real32 = #3 (env_1467)
    val setRoundingMode_36: lambdas_99 = #4 (env_1467)
    val x_3981: t_9 = #5 (env_1467)
    val maxWord_33: real32 = #6 (env_1467)
    val zero_37: real32 = #7 (env_1467)
    val class_20: lambdas_169 = #8 (env_1467)
    case class_20 of
      classEnv_1 => L_3762
  block L_3762 (env_1468: (word32, word32, word32) tuple)
    call L_3763 (class_21 (env_1468, x_3980)) handle _ => raise
  block L_3763 (x_3982: float_class_0)
    case x_3982 of
      INF_0 => L_3765 | NAN_1 => L_3764 | _ => L_3766
  block L_3766 ()
    val x_3983: (real32, real32) tuple = (zero_37, x_3980)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3767
  block L_3767 (env_1469: unit)
    call L_3768 (<=_6 (env_1469, x_3983)) handle _ => raise
  block L_3768 (x_3984: bool)
    case x_3984 of
      true => L_3770 | false => L_3769
  block L_3769 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3771
  block L_3771 (env_1470: unit)
    call L_3772 (~_3 (env_1470, one_33)) handle _ => raise
  block L_3772 (x_3985: real32)
    val x_3986: (real32, real32) tuple = (x_3980, x_3985)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3773
  block L_3773 (env_1471: unit)
    call L_3774 (>_8 (env_1471, x_3986)) handle _ => raise
  block L_3774 (x_3987: bool)
    case x_3987 of
      true => L_3776 | false => L_3775
  block L_3775 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3776 ()
    case x_3981 of
      TO_NEGINF_0 => L_3780
    | TO_ZERO_0 => L_3779
    | TO_NEAREST_0 => L_3778
    | TO_POSINF_0 => L_3777
  block L_3777 ()
    return (zero_38)
  block L_3778 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3781
  block L_3781 (env_1472: unit)
    call L_3782 (~_3 (env_1472, half_27)) handle _ => raise
  block L_3782 (x_3988: real32)
    val x_3989: (real32, real32) tuple = (x_3980, x_3988)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3783
  block L_3783 (env_1473: unit)
    call L_3784 (<_9 (env_1473, x_3989)) handle _ => raise
  block L_3784 (x_3990: bool)
    case x_3990 of
      true => L_3786 | false => L_3785
  block L_3785 ()
    return (zero_38)
  block L_3786 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3779 ()
    return (zero_38)
  block L_3780 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3770 ()
    val x_3991: (real32, real32) tuple = (x_3980, maxWord_33)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3787
  block L_3787 (env_1474: unit)
    call L_3788 (<=_6 (env_1474, x_3991)) handle _ => raise
  block L_3788 (x_3992: bool)
    case x_3992 of
      true => L_3790 | false => L_3789
  block L_3789 ()
    val x_3993: (real32, real32) tuple = (maxWord_33, one_33)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_3791
  block L_3791 (env_1475: unit)
    call L_3792 (+_4 (env_1475, x_3993)) handle _ => raise
  block L_3792 (x_3994: real32)
    val x_3995: (real32, real32) tuple = (x_3980, x_3994)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3793
  block L_3793 (env_1476: unit)
    call L_3794 (<_9 (env_1476, x_3995)) handle _ => raise
  block L_3794 (x_3996: bool)
    case x_3996 of
      true => L_3796 | false => L_3795
  block L_3795 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3796 ()
    case x_3981 of
      TO_NEGINF_0 => L_3800
    | TO_ZERO_0 => L_3799
    | TO_NEAREST_0 => L_3798
    | TO_POSINF_0 => L_3797
  block L_3797 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3798 ()
    val x_3997: (real32, real32) tuple = (x_3980, maxWord_33)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_3801
  block L_3801 (env_1477: unit)
    call L_3802 (-_5 (env_1477, x_3997)) handle _ => raise
  block L_3802 (x_3998: real32)
    val x_3999: (real32, real32) tuple = (x_3998, half_27)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3803
  block L_3803 (env_1478: unit)
    call L_3804 (>=_9 (env_1478, x_3999)) handle _ => raise
  block L_3804 (x_4000: bool)
    case x_4000 of
      true => L_3806 | false => L_3805
  block L_3805 ()
    return (maxWord'_33)
  block L_3806 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3799 ()
    return (maxWord'_33)
  block L_3800 ()
    return (maxWord'_33)
  block L_3790 ()
    case x_3981 of
      TO_POSINF_0 => L_3810
    | TO_NEAREST_0 => L_3809
    | TO_ZERO_0 => L_3808
    | TO_NEGINF_0 => L_3807
  block L_3807 ()
    val x_4001: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3980)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3811
  block L_3811 (env_1479: unit)
    call tail toWord64Unsafe_3 (env_1479, x_4001)
  block L_3808 ()
    val x_4002: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3980)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3812
  block L_3812 (env_1480: unit)
    call tail toWord64Unsafe_3 (env_1480, x_4002)
  block L_3809 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3813
  block L_3813 (env_1481: unit)
    call L_3814 (x_3492 (env_1481, x_989 (*()*))) handle _ => raise
  block L_3814 (m'_17: t_9)
    case setRoundingMode_36 of
      setRoundingModeEnv_0 => L_3815
  block L_3815 (env_1482: (lambdas_223, word32) tuple)
    call L_3816 (setRoundingMode_3 (env_1482, x_988 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3816 (x_4003: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_3817
  block L_3817 (env_1483: unit)
    call L_3818 (round_3 (env_1483, x_3980)) handle _ => raise
  block L_3818 (x_4004: real32)
    case setRoundingMode_36 of
      setRoundingModeEnv_0 => L_3819
  block L_3819 (env_1484: (lambdas_223, word32) tuple)
    call L_3820 (setRoundingMode_3 (env_1484, m'_17)) handle _ => raise
  block L_3820 (x_4005: unit)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3821
  block L_3821 (env_1485: unit)
    call tail toWord64Unsafe_3 (env_1485, x_4004)
  block L_3810 ()
    val x_4006: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3980)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3822
  block L_3822 (env_1486: unit)
    call tail toWord64Unsafe_3 (env_1486, x_4006)
  block L_3764 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3765 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4007 (env_1487:
              (lambdas_169, real32, real32, lambdas_99, real32, word64, real32) tuple,
            x_4008: t_9):
  {returns = Some (lambdas_171), raises = Some (exn)} =
L_3823 ()
  block L_3823 ()
    val class_22: lambdas_169 = #0 (env_1487)
    val zero_39: real32 = #1 (env_1487)
    val maxWord_34: real32 = #2 (env_1487)
    val setRoundingMode_37: lambdas_99 = #3 (env_1487)
    val one_34: real32 = #4 (env_1487)
    val zero_40: word64 = #5 (env_1487)
    val half_28: real32 = #6 (env_1487)
    val x_4010:
      (real32, word64, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple =
      (half_28,
       zero_40,
       one_34,
       setRoundingMode_37,
       x_4008,
       maxWord_34,
       zero_39,
       class_22)
    val x_4009: lambdas_171 = con xEnv_153 (x_4010)
    return (x_4009)
fun x_4011 (env_1488:
              (real32,
               word64,
               real32,
               lambdas_99,
               t_9,
               real32,
               real32,
               lambdas_169) tuple,
            x_4012: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_3824 ()
  block L_3824 ()
    val half_29: real32 = #0 (env_1488)
    val zero_42: word64 = #1 (env_1488)
    val one_35: real32 = #2 (env_1488)
    val setRoundingMode_38: lambdas_99 = #3 (env_1488)
    val x_4013: t_9 = #4 (env_1488)
    val maxWord_35: real32 = #5 (env_1488)
    val zero_41: real32 = #6 (env_1488)
    val class_23: lambdas_169 = #7 (env_1488)
    case class_23 of
      classEnv_1 => L_3825
  block L_3825 (env_1489: (word32, word32, word32) tuple)
    call L_3826 (class_21 (env_1489, x_4012)) handle _ => raise
  block L_3826 (x_4014: float_class_0)
    case x_4014 of
      INF_0 => L_3828 | NAN_1 => L_3827 | _ => L_3829
  block L_3829 ()
    val x_4015: (real32, real32) tuple = (zero_41, x_4012)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3830
  block L_3830 (env_1490: unit)
    call L_3831 (<=_6 (env_1490, x_4015)) handle _ => raise
  block L_3831 (x_4016: bool)
    case x_4016 of
      true => L_3833 | false => L_3832
  block L_3832 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3834
  block L_3834 (env_1491: unit)
    call L_3835 (~_3 (env_1491, one_35)) handle _ => raise
  block L_3835 (x_4017: real32)
    val x_4018: (real32, real32) tuple = (x_4012, x_4017)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3836
  block L_3836 (env_1492: unit)
    call L_3837 (>_8 (env_1492, x_4018)) handle _ => raise
  block L_3837 (x_4019: bool)
    case x_4019 of
      true => L_3839 | false => L_3838
  block L_3838 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3839 ()
    case x_4013 of
      TO_NEGINF_0 => L_3843
    | TO_ZERO_0 => L_3842
    | TO_NEAREST_0 => L_3841
    | TO_POSINF_0 => L_3840
  block L_3840 ()
    return (zero_42)
  block L_3841 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3844
  block L_3844 (env_1493: unit)
    call L_3845 (~_3 (env_1493, half_29)) handle _ => raise
  block L_3845 (x_4020: real32)
    val x_4021: (real32, real32) tuple = (x_4012, x_4020)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3846
  block L_3846 (env_1494: unit)
    call L_3847 (<_9 (env_1494, x_4021)) handle _ => raise
  block L_3847 (x_4022: bool)
    case x_4022 of
      true => L_3849 | false => L_3848
  block L_3848 ()
    return (zero_42)
  block L_3849 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3842 ()
    return (zero_42)
  block L_3843 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3833 ()
    val x_4023: (real32, real32) tuple = (x_4012, maxWord_35)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3850
  block L_3850 (env_1495: unit)
    call L_3851 (<=_6 (env_1495, x_4023)) handle _ => raise
  block L_3851 (x_4024: bool)
    case x_4024 of
      true => L_3853 | false => L_3852
  block L_3852 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3853 ()
    case x_4013 of
      TO_POSINF_0 => L_3857
    | TO_NEAREST_0 => L_3856
    | TO_ZERO_0 => L_3855
    | TO_NEGINF_0 => L_3854
  block L_3854 ()
    val x_4025: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4012)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3858
  block L_3858 (env_1496: unit)
    call tail toWord64Unsafe_3 (env_1496, x_4025)
  block L_3855 ()
    val x_4026: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4012)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3859
  block L_3859 (env_1497: unit)
    call tail toWord64Unsafe_3 (env_1497, x_4026)
  block L_3856 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3860
  block L_3860 (env_1498: unit)
    call L_3861 (x_3492 (env_1498, x_986 (*()*))) handle _ => raise
  block L_3861 (m'_18: t_9)
    case setRoundingMode_38 of
      setRoundingModeEnv_0 => L_3862
  block L_3862 (env_1499: (lambdas_223, word32) tuple)
    call L_3863 (setRoundingMode_3 (env_1499, x_985 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3863 (x_4027: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_3864
  block L_3864 (env_1500: unit)
    call L_3865 (round_3 (env_1500, x_4012)) handle _ => raise
  block L_3865 (x_4028: real32)
    case setRoundingMode_38 of
      setRoundingModeEnv_0 => L_3866
  block L_3866 (env_1501: (lambdas_223, word32) tuple)
    call L_3867 (setRoundingMode_3 (env_1501, m'_18)) handle _ => raise
  block L_3867 (x_4029: unit)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3868
  block L_3868 (env_1502: unit)
    call tail toWord64Unsafe_3 (env_1502, x_4028)
  block L_3857 ()
    val x_4030: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4012)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3869
  block L_3869 (env_1503: unit)
    call tail toWord64Unsafe_3 (env_1503, x_4030)
  block L_3827 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3828 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2160 (env_1504: (lambdas_106, lambdas_105, word64) tuple, x_4031: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3870 ()
  block L_3870 ()
    val <<_25: lambdas_106 = #0 (env_1504)
    val >>_24: lambdas_105 = #1 (env_1504)
    val maxWord'_34: word64 = #2 (env_1504)
    val x_4032: (word64, word32) tuple = (maxWord'_34, x_4031)
    case >>_24 of
      >>Env_0 => L_3871
  block L_3871 (env_1505: (word32, word64) tuple)
    call L_3872 (>>_9 (env_1505, x_4032)) handle _ => raise
  block L_3872 (x_4033: word64)
    val x_4034: (word64, word32) tuple = (x_4033, x_4031)
    case <<_25 of
      <<Env_0 => L_3873
  block L_3873 (env_1506: (word32, word64) tuple)
    call tail <<_9 (env_1506, x_4034)
fun x_4035 (env_1507:
              (lambdas_169,
               real32,
               real32,
               lambdas_99,
               real32,
               word32,
               real32,
               word32) tuple,
            x_4036: t_9):
  {returns = Some (lambdas_175), raises = Some (exn)} =
L_3874 ()
  block L_3874 ()
    val class_24: lambdas_169 = #0 (env_1507)
    val zero_43: real32 = #1 (env_1507)
    val maxWord_36: real32 = #2 (env_1507)
    val setRoundingMode_39: lambdas_99 = #3 (env_1507)
    val one_36: real32 = #4 (env_1507)
    val maxWord'_35: word32 = #5 (env_1507)
    val half_30: real32 = #6 (env_1507)
    val zero_44: word32 = #7 (env_1507)
    val x_4038:
      (word32,
       real32,
       word32,
       real32,
       lambdas_99,
       t_9,
       real32,
       real32,
       lambdas_169) tuple =
      (zero_44,
       half_30,
       maxWord'_35,
       one_36,
       setRoundingMode_39,
       x_4036,
       maxWord_36,
       zero_43,
       class_24)
    val x_4037: lambdas_175 = con xEnv_158 (x_4038)
    return (x_4037)
fun x_4039 (env_1508:
              (word32,
               real32,
               word32,
               real32,
               lambdas_99,
               t_9,
               real32,
               real32,
               lambdas_169) tuple,
            x_4040: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_3875 ()
  block L_3875 ()
    val zero_46: word32 = #0 (env_1508)
    val half_31: real32 = #1 (env_1508)
    val maxWord'_36: word32 = #2 (env_1508)
    val one_37: real32 = #3 (env_1508)
    val setRoundingMode_40: lambdas_99 = #4 (env_1508)
    val x_4041: t_9 = #5 (env_1508)
    val maxWord_37: real32 = #6 (env_1508)
    val zero_45: real32 = #7 (env_1508)
    val class_25: lambdas_169 = #8 (env_1508)
    case class_25 of
      classEnv_1 => L_3876
  block L_3876 (env_1509: (word32, word32, word32) tuple)
    call L_3877 (class_21 (env_1509, x_4040)) handle _ => raise
  block L_3877 (x_4042: float_class_0)
    case x_4042 of
      INF_0 => L_3879 | NAN_1 => L_3878 | _ => L_3880
  block L_3880 ()
    val x_4043: (real32, real32) tuple = (zero_45, x_4040)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3881
  block L_3881 (env_1510: unit)
    call L_3882 (<=_6 (env_1510, x_4043)) handle _ => raise
  block L_3882 (x_4044: bool)
    case x_4044 of
      true => L_3884 | false => L_3883
  block L_3883 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3885
  block L_3885 (env_1511: unit)
    call L_3886 (~_3 (env_1511, one_37)) handle _ => raise
  block L_3886 (x_4045: real32)
    val x_4046: (real32, real32) tuple = (x_4040, x_4045)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3887
  block L_3887 (env_1512: unit)
    call L_3888 (>_8 (env_1512, x_4046)) handle _ => raise
  block L_3888 (x_4047: bool)
    case x_4047 of
      true => L_3890 | false => L_3889
  block L_3889 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3890 ()
    case x_4041 of
      TO_NEGINF_0 => L_3894
    | TO_ZERO_0 => L_3893
    | TO_NEAREST_0 => L_3892
    | TO_POSINF_0 => L_3891
  block L_3891 ()
    return (zero_46)
  block L_3892 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3895
  block L_3895 (env_1513: unit)
    call L_3896 (~_3 (env_1513, half_31)) handle _ => raise
  block L_3896 (x_4048: real32)
    val x_4049: (real32, real32) tuple = (x_4040, x_4048)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3897
  block L_3897 (env_1514: unit)
    call L_3898 (<_9 (env_1514, x_4049)) handle _ => raise
  block L_3898 (x_4050: bool)
    case x_4050 of
      true => L_3900 | false => L_3899
  block L_3899 ()
    return (zero_46)
  block L_3900 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3893 ()
    return (zero_46)
  block L_3894 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3884 ()
    val x_4051: (real32, real32) tuple = (x_4040, maxWord_37)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3901
  block L_3901 (env_1515: unit)
    call L_3902 (<=_6 (env_1515, x_4051)) handle _ => raise
  block L_3902 (x_4052: bool)
    case x_4052 of
      true => L_3904 | false => L_3903
  block L_3903 ()
    val x_4053: (real32, real32) tuple = (maxWord_37, one_37)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_3905
  block L_3905 (env_1516: unit)
    call L_3906 (+_4 (env_1516, x_4053)) handle _ => raise
  block L_3906 (x_4054: real32)
    val x_4055: (real32, real32) tuple = (x_4040, x_4054)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3907
  block L_3907 (env_1517: unit)
    call L_3908 (<_9 (env_1517, x_4055)) handle _ => raise
  block L_3908 (x_4056: bool)
    case x_4056 of
      true => L_3910 | false => L_3909
  block L_3909 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3910 ()
    case x_4041 of
      TO_NEGINF_0 => L_3914
    | TO_ZERO_0 => L_3913
    | TO_NEAREST_0 => L_3912
    | TO_POSINF_0 => L_3911
  block L_3911 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3912 ()
    val x_4057: (real32, real32) tuple = (x_4040, maxWord_37)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_3915
  block L_3915 (env_1518: unit)
    call L_3916 (-_5 (env_1518, x_4057)) handle _ => raise
  block L_3916 (x_4058: real32)
    val x_4059: (real32, real32) tuple = (x_4058, half_31)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3917
  block L_3917 (env_1519: unit)
    call L_3918 (>=_9 (env_1519, x_4059)) handle _ => raise
  block L_3918 (x_4060: bool)
    case x_4060 of
      true => L_3920 | false => L_3919
  block L_3919 ()
    return (maxWord'_36)
  block L_3920 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3913 ()
    return (maxWord'_36)
  block L_3914 ()
    return (maxWord'_36)
  block L_3904 ()
    case x_4041 of
      TO_POSINF_0 => L_3924
    | TO_NEAREST_0 => L_3923
    | TO_ZERO_0 => L_3922
    | TO_NEGINF_0 => L_3921
  block L_3921 ()
    val x_4061: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4040)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3925
  block L_3925 (env_1520: unit)
    call tail toWord32Unsafe_3 (env_1520, x_4061)
  block L_3922 ()
    val x_4062: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4040)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3926
  block L_3926 (env_1521: unit)
    call tail toWord32Unsafe_3 (env_1521, x_4062)
  block L_3923 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3927
  block L_3927 (env_1522: unit)
    call L_3928 (x_3492 (env_1522, x_984 (*()*))) handle _ => raise
  block L_3928 (m'_19: t_9)
    case setRoundingMode_40 of
      setRoundingModeEnv_0 => L_3929
  block L_3929 (env_1523: (lambdas_223, word32) tuple)
    call L_3930 (setRoundingMode_3 (env_1523, x_983 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3930 (x_4063: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_3931
  block L_3931 (env_1524: unit)
    call L_3932 (round_3 (env_1524, x_4040)) handle _ => raise
  block L_3932 (x_4064: real32)
    case setRoundingMode_40 of
      setRoundingModeEnv_0 => L_3933
  block L_3933 (env_1525: (lambdas_223, word32) tuple)
    call L_3934 (setRoundingMode_3 (env_1525, m'_19)) handle _ => raise
  block L_3934 (x_4065: unit)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3935
  block L_3935 (env_1526: unit)
    call tail toWord32Unsafe_3 (env_1526, x_4064)
  block L_3924 ()
    val x_4066: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4040)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3936
  block L_3936 (env_1527: unit)
    call tail toWord32Unsafe_3 (env_1527, x_4066)
  block L_3878 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3879 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4067 (env_1528:
              (lambdas_169, real32, real32, lambdas_99, real32, word32, real32) tuple,
            x_4068: t_9):
  {returns = Some (lambdas_177), raises = Some (exn)} =
L_3937 ()
  block L_3937 ()
    val class_26: lambdas_169 = #0 (env_1528)
    val zero_47: real32 = #1 (env_1528)
    val maxWord_38: real32 = #2 (env_1528)
    val setRoundingMode_41: lambdas_99 = #3 (env_1528)
    val one_38: real32 = #4 (env_1528)
    val zero_48: word32 = #5 (env_1528)
    val half_32: real32 = #6 (env_1528)
    val x_4070:
      (real32, word32, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple =
      (half_32,
       zero_48,
       one_38,
       setRoundingMode_41,
       x_4068,
       maxWord_38,
       zero_47,
       class_26)
    val x_4069: lambdas_177 = con xEnv_160 (x_4070)
    return (x_4069)
fun x_4071 (env_1529:
              (real32,
               word32,
               real32,
               lambdas_99,
               t_9,
               real32,
               real32,
               lambdas_169) tuple,
            x_4072: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_3938 ()
  block L_3938 ()
    val half_33: real32 = #0 (env_1529)
    val zero_50: word32 = #1 (env_1529)
    val one_39: real32 = #2 (env_1529)
    val setRoundingMode_42: lambdas_99 = #3 (env_1529)
    val x_4073: t_9 = #4 (env_1529)
    val maxWord_39: real32 = #5 (env_1529)
    val zero_49: real32 = #6 (env_1529)
    val class_27: lambdas_169 = #7 (env_1529)
    case class_27 of
      classEnv_1 => L_3939
  block L_3939 (env_1530: (word32, word32, word32) tuple)
    call L_3940 (class_21 (env_1530, x_4072)) handle _ => raise
  block L_3940 (x_4074: float_class_0)
    case x_4074 of
      INF_0 => L_3942 | NAN_1 => L_3941 | _ => L_3943
  block L_3943 ()
    val x_4075: (real32, real32) tuple = (zero_49, x_4072)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3944
  block L_3944 (env_1531: unit)
    call L_3945 (<=_6 (env_1531, x_4075)) handle _ => raise
  block L_3945 (x_4076: bool)
    case x_4076 of
      true => L_3947 | false => L_3946
  block L_3946 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3948
  block L_3948 (env_1532: unit)
    call L_3949 (~_3 (env_1532, one_39)) handle _ => raise
  block L_3949 (x_4077: real32)
    val x_4078: (real32, real32) tuple = (x_4072, x_4077)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3950
  block L_3950 (env_1533: unit)
    call L_3951 (>_8 (env_1533, x_4078)) handle _ => raise
  block L_3951 (x_4079: bool)
    case x_4079 of
      true => L_3953 | false => L_3952
  block L_3952 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3953 ()
    case x_4073 of
      TO_NEGINF_0 => L_3957
    | TO_ZERO_0 => L_3956
    | TO_NEAREST_0 => L_3955
    | TO_POSINF_0 => L_3954
  block L_3954 ()
    return (zero_50)
  block L_3955 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3958
  block L_3958 (env_1534: unit)
    call L_3959 (~_3 (env_1534, half_33)) handle _ => raise
  block L_3959 (x_4080: real32)
    val x_4081: (real32, real32) tuple = (x_4072, x_4080)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3960
  block L_3960 (env_1535: unit)
    call L_3961 (<_9 (env_1535, x_4081)) handle _ => raise
  block L_3961 (x_4082: bool)
    case x_4082 of
      true => L_3963 | false => L_3962
  block L_3962 ()
    return (zero_50)
  block L_3963 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3956 ()
    return (zero_50)
  block L_3957 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3947 ()
    val x_4083: (real32, real32) tuple = (x_4072, maxWord_39)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3964
  block L_3964 (env_1536: unit)
    call L_3965 (<=_6 (env_1536, x_4083)) handle _ => raise
  block L_3965 (x_4084: bool)
    case x_4084 of
      true => L_3967 | false => L_3966
  block L_3966 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3967 ()
    case x_4073 of
      TO_POSINF_0 => L_3971
    | TO_NEAREST_0 => L_3970
    | TO_ZERO_0 => L_3969
    | TO_NEGINF_0 => L_3968
  block L_3968 ()
    val x_4085: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4072)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3972
  block L_3972 (env_1537: unit)
    call tail toWord32Unsafe_3 (env_1537, x_4085)
  block L_3969 ()
    val x_4086: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4072)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3973
  block L_3973 (env_1538: unit)
    call tail toWord32Unsafe_3 (env_1538, x_4086)
  block L_3970 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_3974
  block L_3974 (env_1539: unit)
    call L_3975 (x_3492 (env_1539, x_981 (*()*))) handle _ => raise
  block L_3975 (m'_20: t_9)
    case setRoundingMode_42 of
      setRoundingModeEnv_0 => L_3976
  block L_3976 (env_1540: (lambdas_223, word32) tuple)
    call L_3977 (setRoundingMode_3 (env_1540, x_980 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3977 (x_4087: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_3978
  block L_3978 (env_1541: unit)
    call L_3979 (round_3 (env_1541, x_4072)) handle _ => raise
  block L_3979 (x_4088: real32)
    case setRoundingMode_42 of
      setRoundingModeEnv_0 => L_3980
  block L_3980 (env_1542: (lambdas_223, word32) tuple)
    call L_3981 (setRoundingMode_3 (env_1542, m'_20)) handle _ => raise
  block L_3981 (x_4089: unit)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3982
  block L_3982 (env_1543: unit)
    call tail toWord32Unsafe_3 (env_1543, x_4088)
  block L_3971 ()
    val x_4090: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4072)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_3983
  block L_3983 (env_1544: unit)
    call tail toWord32Unsafe_3 (env_1544, x_4090)
  block L_3941 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3942 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2149 (env_1545: (lambdas_114, lambdas_113, word32) tuple, x_4091: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3984 ()
  block L_3984 ()
    val <<_26: lambdas_114 = #0 (env_1545)
    val >>_25: lambdas_113 = #1 (env_1545)
    val maxWord'_37: word32 = #2 (env_1545)
    val x_4092: (word32, word32) tuple = (maxWord'_37, x_4091)
    case >>_25 of
      >>Env_1 => L_3985
  block L_3985 (env_1546: (word32, word32) tuple)
    call L_3986 (>>_11 (env_1546, x_4092)) handle _ => raise
  block L_3986 (x_4093: word32)
    val x_4094: (word32, word32) tuple = (x_4093, x_4091)
    case <<_26 of
      <<Env_1 => L_3987
  block L_3987 (env_1547: (word32, word32) tuple)
    call tail <<_8 (env_1547, x_4094)
fun x_4095 (env_1548:
              (lambdas_169, real32, real32, lambdas_99, real32, word16, real32) tuple,
            x_4096: t_9):
  {returns = Some (lambdas_181), raises = Some (exn)} =
L_3988 ()
  block L_3988 ()
    val class_28: lambdas_169 = #0 (env_1548)
    val zero_51: real32 = #1 (env_1548)
    val maxWord_40: real32 = #2 (env_1548)
    val setRoundingMode_43: lambdas_99 = #3 (env_1548)
    val one_40: real32 = #4 (env_1548)
    val maxWord'_38: word16 = #5 (env_1548)
    val half_34: real32 = #6 (env_1548)
    val x_4098:
      (real32, word16, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple =
      (half_34,
       maxWord'_38,
       one_40,
       setRoundingMode_43,
       x_4096,
       maxWord_40,
       zero_51,
       class_28)
    val x_4097: lambdas_181 = con xEnv_165 (x_4098)
    return (x_4097)
fun x_4099 (env_1549:
              (real32,
               word16,
               real32,
               lambdas_99,
               t_9,
               real32,
               real32,
               lambdas_169) tuple,
            x_4100: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_3989 ()
  block L_3989 ()
    val half_35: real32 = #0 (env_1549)
    val maxWord'_39: word16 = #1 (env_1549)
    val one_41: real32 = #2 (env_1549)
    val setRoundingMode_44: lambdas_99 = #3 (env_1549)
    val x_4101: t_9 = #4 (env_1549)
    val maxWord_41: real32 = #5 (env_1549)
    val zero_52: real32 = #6 (env_1549)
    val class_29: lambdas_169 = #7 (env_1549)
    case class_29 of
      classEnv_1 => L_3990
  block L_3990 (env_1550: (word32, word32, word32) tuple)
    call L_3991 (class_21 (env_1550, x_4100)) handle _ => raise
  block L_3991 (x_4102: float_class_0)
    case x_4102 of
      INF_0 => L_3993 | NAN_1 => L_3992 | _ => L_3994
  block L_3994 ()
    val x_4103: (real32, real32) tuple = (zero_52, x_4100)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3995
  block L_3995 (env_1551: unit)
    call L_3996 (<=_6 (env_1551, x_4103)) handle _ => raise
  block L_3996 (x_4104: bool)
    case x_4104 of
      true => L_3998 | false => L_3997
  block L_3997 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3999
  block L_3999 (env_1552: unit)
    call L_4000 (~_3 (env_1552, one_41)) handle _ => raise
  block L_4000 (x_4105: real32)
    val x_4106: (real32, real32) tuple = (x_4100, x_4105)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4001
  block L_4001 (env_1553: unit)
    call L_4002 (>_8 (env_1553, x_4106)) handle _ => raise
  block L_4002 (x_4107: bool)
    case x_4107 of
      true => L_4004 | false => L_4003
  block L_4003 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4004 ()
    case x_4101 of
      TO_NEGINF_0 => L_4008
    | TO_ZERO_0 => L_4007
    | TO_NEAREST_0 => L_4006
    | TO_POSINF_0 => L_4005
  block L_4005 ()
    return (x_285 (*0x0:w16*))
  block L_4006 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4009
  block L_4009 (env_1554: unit)
    call L_4010 (~_3 (env_1554, half_35)) handle _ => raise
  block L_4010 (x_4108: real32)
    val x_4109: (real32, real32) tuple = (x_4100, x_4108)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4011
  block L_4011 (env_1555: unit)
    call L_4012 (<_9 (env_1555, x_4109)) handle _ => raise
  block L_4012 (x_4110: bool)
    case x_4110 of
      true => L_4014 | false => L_4013
  block L_4013 ()
    return (x_285 (*0x0:w16*))
  block L_4014 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4007 ()
    return (x_285 (*0x0:w16*))
  block L_4008 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3998 ()
    val x_4111: (real32, real32) tuple = (x_4100, maxWord_41)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4015
  block L_4015 (env_1556: unit)
    call L_4016 (<=_6 (env_1556, x_4111)) handle _ => raise
  block L_4016 (x_4112: bool)
    case x_4112 of
      true => L_4018 | false => L_4017
  block L_4017 ()
    val x_4113: (real32, real32) tuple = (maxWord_41, one_41)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4019
  block L_4019 (env_1557: unit)
    call L_4020 (+_4 (env_1557, x_4113)) handle _ => raise
  block L_4020 (x_4114: real32)
    val x_4115: (real32, real32) tuple = (x_4100, x_4114)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4021
  block L_4021 (env_1558: unit)
    call L_4022 (<_9 (env_1558, x_4115)) handle _ => raise
  block L_4022 (x_4116: bool)
    case x_4116 of
      true => L_4024 | false => L_4023
  block L_4023 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4024 ()
    case x_4101 of
      TO_NEGINF_0 => L_4028
    | TO_ZERO_0 => L_4027
    | TO_NEAREST_0 => L_4026
    | TO_POSINF_0 => L_4025
  block L_4025 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4026 ()
    val x_4117: (real32, real32) tuple = (x_4100, maxWord_41)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4029
  block L_4029 (env_1559: unit)
    call L_4030 (-_5 (env_1559, x_4117)) handle _ => raise
  block L_4030 (x_4118: real32)
    val x_4119: (real32, real32) tuple = (x_4118, half_35)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4031
  block L_4031 (env_1560: unit)
    call L_4032 (>=_9 (env_1560, x_4119)) handle _ => raise
  block L_4032 (x_4120: bool)
    case x_4120 of
      true => L_4034 | false => L_4033
  block L_4033 ()
    return (maxWord'_39)
  block L_4034 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4027 ()
    return (maxWord'_39)
  block L_4028 ()
    return (maxWord'_39)
  block L_4018 ()
    case x_4101 of
      TO_POSINF_0 => L_4038
    | TO_NEAREST_0 => L_4037
    | TO_ZERO_0 => L_4036
    | TO_NEGINF_0 => L_4035
  block L_4035 ()
    val x_4121: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4100)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4039
  block L_4039 (env_1561: unit)
    call tail toWord16Unsafe_3 (env_1561, x_4121)
  block L_4036 ()
    val x_4122: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4100)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4040
  block L_4040 (env_1562: unit)
    call tail toWord16Unsafe_3 (env_1562, x_4122)
  block L_4037 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4041
  block L_4041 (env_1563: unit)
    call L_4042 (x_3492 (env_1563, x_979 (*()*))) handle _ => raise
  block L_4042 (m'_21: t_9)
    case setRoundingMode_44 of
      setRoundingModeEnv_0 => L_4043
  block L_4043 (env_1564: (lambdas_223, word32) tuple)
    call L_4044 (setRoundingMode_3 (env_1564, x_978 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4044 (x_4123: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4045
  block L_4045 (env_1565: unit)
    call L_4046 (round_3 (env_1565, x_4100)) handle _ => raise
  block L_4046 (x_4124: real32)
    case setRoundingMode_44 of
      setRoundingModeEnv_0 => L_4047
  block L_4047 (env_1566: (lambdas_223, word32) tuple)
    call L_4048 (setRoundingMode_3 (env_1566, m'_21)) handle _ => raise
  block L_4048 (x_4125: unit)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4049
  block L_4049 (env_1567: unit)
    call tail toWord16Unsafe_3 (env_1567, x_4124)
  block L_4038 ()
    val x_4126: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4100)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4050
  block L_4050 (env_1568: unit)
    call tail toWord16Unsafe_3 (env_1568, x_4126)
  block L_3992 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3993 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4127 (env_1569:
              (lambdas_169, real32, real32, lambdas_99, real32, real32) tuple,
            x_4128: t_9):
  {returns = Some (lambdas_183), raises = Some (exn)} =
L_4051 ()
  block L_4051 ()
    val class_30: lambdas_169 = #0 (env_1569)
    val zero_53: real32 = #1 (env_1569)
    val maxWord_42: real32 = #2 (env_1569)
    val setRoundingMode_45: lambdas_99 = #3 (env_1569)
    val one_42: real32 = #4 (env_1569)
    val half_36: real32 = #5 (env_1569)
    val x_4130:
      (real32, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple =
      (half_36,
       one_42,
       setRoundingMode_45,
       x_4128,
       maxWord_42,
       zero_53,
       class_30)
    val x_4129: lambdas_183 = con xEnv_167 (x_4130)
    return (x_4129)
fun x_4131 (env_1570:
              (real32, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple,
            x_4132: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4052 ()
  block L_4052 ()
    val half_37: real32 = #0 (env_1570)
    val one_43: real32 = #1 (env_1570)
    val setRoundingMode_46: lambdas_99 = #2 (env_1570)
    val x_4133: t_9 = #3 (env_1570)
    val maxWord_43: real32 = #4 (env_1570)
    val zero_54: real32 = #5 (env_1570)
    val class_31: lambdas_169 = #6 (env_1570)
    case class_31 of
      classEnv_1 => L_4053
  block L_4053 (env_1571: (word32, word32, word32) tuple)
    call L_4054 (class_21 (env_1571, x_4132)) handle _ => raise
  block L_4054 (x_4134: float_class_0)
    case x_4134 of
      INF_0 => L_4056 | NAN_1 => L_4055 | _ => L_4057
  block L_4057 ()
    val x_4135: (real32, real32) tuple = (zero_54, x_4132)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4058
  block L_4058 (env_1572: unit)
    call L_4059 (<=_6 (env_1572, x_4135)) handle _ => raise
  block L_4059 (x_4136: bool)
    case x_4136 of
      true => L_4061 | false => L_4060
  block L_4060 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4062
  block L_4062 (env_1573: unit)
    call L_4063 (~_3 (env_1573, one_43)) handle _ => raise
  block L_4063 (x_4137: real32)
    val x_4138: (real32, real32) tuple = (x_4132, x_4137)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4064
  block L_4064 (env_1574: unit)
    call L_4065 (>_8 (env_1574, x_4138)) handle _ => raise
  block L_4065 (x_4139: bool)
    case x_4139 of
      true => L_4067 | false => L_4066
  block L_4066 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4067 ()
    case x_4133 of
      TO_NEGINF_0 => L_4071
    | TO_ZERO_0 => L_4070
    | TO_NEAREST_0 => L_4069
    | TO_POSINF_0 => L_4068
  block L_4068 ()
    return (x_285 (*0x0:w16*))
  block L_4069 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4072
  block L_4072 (env_1575: unit)
    call L_4073 (~_3 (env_1575, half_37)) handle _ => raise
  block L_4073 (x_4140: real32)
    val x_4141: (real32, real32) tuple = (x_4132, x_4140)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4074
  block L_4074 (env_1576: unit)
    call L_4075 (<_9 (env_1576, x_4141)) handle _ => raise
  block L_4075 (x_4142: bool)
    case x_4142 of
      true => L_4077 | false => L_4076
  block L_4076 ()
    return (x_285 (*0x0:w16*))
  block L_4077 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4070 ()
    return (x_285 (*0x0:w16*))
  block L_4071 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4061 ()
    val x_4143: (real32, real32) tuple = (x_4132, maxWord_43)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4078
  block L_4078 (env_1577: unit)
    call L_4079 (<=_6 (env_1577, x_4143)) handle _ => raise
  block L_4079 (x_4144: bool)
    case x_4144 of
      true => L_4081 | false => L_4080
  block L_4080 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4081 ()
    case x_4133 of
      TO_POSINF_0 => L_4085
    | TO_NEAREST_0 => L_4084
    | TO_ZERO_0 => L_4083
    | TO_NEGINF_0 => L_4082
  block L_4082 ()
    val x_4145: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4132)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4086
  block L_4086 (env_1578: unit)
    call tail toWord16Unsafe_3 (env_1578, x_4145)
  block L_4083 ()
    val x_4146: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4132)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4087
  block L_4087 (env_1579: unit)
    call tail toWord16Unsafe_3 (env_1579, x_4146)
  block L_4084 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4088
  block L_4088 (env_1580: unit)
    call L_4089 (x_3492 (env_1580, x_976 (*()*))) handle _ => raise
  block L_4089 (m'_22: t_9)
    case setRoundingMode_46 of
      setRoundingModeEnv_0 => L_4090
  block L_4090 (env_1581: (lambdas_223, word32) tuple)
    call L_4091 (setRoundingMode_3 (env_1581, x_975 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4091 (x_4147: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4092
  block L_4092 (env_1582: unit)
    call L_4093 (round_3 (env_1582, x_4132)) handle _ => raise
  block L_4093 (x_4148: real32)
    case setRoundingMode_46 of
      setRoundingModeEnv_0 => L_4094
  block L_4094 (env_1583: (lambdas_223, word32) tuple)
    call L_4095 (setRoundingMode_3 (env_1583, m'_22)) handle _ => raise
  block L_4095 (x_4149: unit)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4096
  block L_4096 (env_1584: unit)
    call tail toWord16Unsafe_3 (env_1584, x_4148)
  block L_4085 ()
    val x_4150: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4132)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4097
  block L_4097 (env_1585: unit)
    call tail toWord16Unsafe_3 (env_1585, x_4150)
  block L_4055 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4056 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2138 (env_1586: (lambdas_122, lambdas_121, word16) tuple, x_4151: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_4098 ()
  block L_4098 ()
    val <<_27: lambdas_122 = #0 (env_1586)
    val >>_26: lambdas_121 = #1 (env_1586)
    val maxWord'_40: word16 = #2 (env_1586)
    val x_4152: (word16, word32) tuple = (maxWord'_40, x_4151)
    case >>_26 of
      >>Env_2 => L_4099
  block L_4099 (env_1587: word32)
    call L_4100 (>>_13 (env_1587, x_4152)) handle _ => raise
  block L_4100 (x_4153: word16)
    val x_4154: (word16, word32) tuple = (x_4153, x_4151)
    case <<_27 of
      <<Env_2 => L_4101
  block L_4101 (env_1588: word32)
    call tail <<_13 (env_1588, x_4154)
fun x_4155 (env_1589:
              (lambdas_169, real32, real32, lambdas_99, real32, word8, real32) tuple,
            x_4156: t_9):
  {returns = Some (lambdas_187), raises = Some (exn)} =
L_4102 ()
  block L_4102 ()
    val class_32: lambdas_169 = #0 (env_1589)
    val zero_55: real32 = #1 (env_1589)
    val maxWord_44: real32 = #2 (env_1589)
    val setRoundingMode_47: lambdas_99 = #3 (env_1589)
    val one_44: real32 = #4 (env_1589)
    val maxWord'_41: word8 = #5 (env_1589)
    val half_38: real32 = #6 (env_1589)
    val x_4158:
      (real32, word8, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple =
      (half_38,
       maxWord'_41,
       one_44,
       setRoundingMode_47,
       x_4156,
       maxWord_44,
       zero_55,
       class_32)
    val x_4157: lambdas_187 = con xEnv_172 (x_4158)
    return (x_4157)
fun x_4159 (env_1590:
              (real32,
               word8,
               real32,
               lambdas_99,
               t_9,
               real32,
               real32,
               lambdas_169) tuple,
            x_4160: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4103 ()
  block L_4103 ()
    val half_39: real32 = #0 (env_1590)
    val maxWord'_42: word8 = #1 (env_1590)
    val one_45: real32 = #2 (env_1590)
    val setRoundingMode_48: lambdas_99 = #3 (env_1590)
    val x_4161: t_9 = #4 (env_1590)
    val maxWord_45: real32 = #5 (env_1590)
    val zero_56: real32 = #6 (env_1590)
    val class_33: lambdas_169 = #7 (env_1590)
    case class_33 of
      classEnv_1 => L_4104
  block L_4104 (env_1591: (word32, word32, word32) tuple)
    call L_4105 (class_21 (env_1591, x_4160)) handle _ => raise
  block L_4105 (x_4162: float_class_0)
    case x_4162 of
      INF_0 => L_4107 | NAN_1 => L_4106 | _ => L_4108
  block L_4108 ()
    val x_4163: (real32, real32) tuple = (zero_56, x_4160)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4109
  block L_4109 (env_1592: unit)
    call L_4110 (<=_6 (env_1592, x_4163)) handle _ => raise
  block L_4110 (x_4164: bool)
    case x_4164 of
      true => L_4112 | false => L_4111
  block L_4111 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4113
  block L_4113 (env_1593: unit)
    call L_4114 (~_3 (env_1593, one_45)) handle _ => raise
  block L_4114 (x_4165: real32)
    val x_4166: (real32, real32) tuple = (x_4160, x_4165)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4115
  block L_4115 (env_1594: unit)
    call L_4116 (>_8 (env_1594, x_4166)) handle _ => raise
  block L_4116 (x_4167: bool)
    case x_4167 of
      true => L_4118 | false => L_4117
  block L_4117 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4118 ()
    case x_4161 of
      TO_NEGINF_0 => L_4122
    | TO_ZERO_0 => L_4121
    | TO_NEAREST_0 => L_4120
    | TO_POSINF_0 => L_4119
  block L_4119 ()
    return (x_271 (*0x0:w8*))
  block L_4120 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4123
  block L_4123 (env_1595: unit)
    call L_4124 (~_3 (env_1595, half_39)) handle _ => raise
  block L_4124 (x_4168: real32)
    val x_4169: (real32, real32) tuple = (x_4160, x_4168)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4125
  block L_4125 (env_1596: unit)
    call L_4126 (<_9 (env_1596, x_4169)) handle _ => raise
  block L_4126 (x_4170: bool)
    case x_4170 of
      true => L_4128 | false => L_4127
  block L_4127 ()
    return (x_271 (*0x0:w8*))
  block L_4128 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4121 ()
    return (x_271 (*0x0:w8*))
  block L_4122 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4112 ()
    val x_4171: (real32, real32) tuple = (x_4160, maxWord_45)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4129
  block L_4129 (env_1597: unit)
    call L_4130 (<=_6 (env_1597, x_4171)) handle _ => raise
  block L_4130 (x_4172: bool)
    case x_4172 of
      true => L_4132 | false => L_4131
  block L_4131 ()
    val x_4173: (real32, real32) tuple = (maxWord_45, one_45)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4133
  block L_4133 (env_1598: unit)
    call L_4134 (+_4 (env_1598, x_4173)) handle _ => raise
  block L_4134 (x_4174: real32)
    val x_4175: (real32, real32) tuple = (x_4160, x_4174)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4135
  block L_4135 (env_1599: unit)
    call L_4136 (<_9 (env_1599, x_4175)) handle _ => raise
  block L_4136 (x_4176: bool)
    case x_4176 of
      true => L_4138 | false => L_4137
  block L_4137 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4138 ()
    case x_4161 of
      TO_NEGINF_0 => L_4142
    | TO_ZERO_0 => L_4141
    | TO_NEAREST_0 => L_4140
    | TO_POSINF_0 => L_4139
  block L_4139 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4140 ()
    val x_4177: (real32, real32) tuple = (x_4160, maxWord_45)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4143
  block L_4143 (env_1600: unit)
    call L_4144 (-_5 (env_1600, x_4177)) handle _ => raise
  block L_4144 (x_4178: real32)
    val x_4179: (real32, real32) tuple = (x_4178, half_39)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4145
  block L_4145 (env_1601: unit)
    call L_4146 (>=_9 (env_1601, x_4179)) handle _ => raise
  block L_4146 (x_4180: bool)
    case x_4180 of
      true => L_4148 | false => L_4147
  block L_4147 ()
    return (maxWord'_42)
  block L_4148 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4141 ()
    return (maxWord'_42)
  block L_4142 ()
    return (maxWord'_42)
  block L_4132 ()
    case x_4161 of
      TO_POSINF_0 => L_4152
    | TO_NEAREST_0 => L_4151
    | TO_ZERO_0 => L_4150
    | TO_NEGINF_0 => L_4149
  block L_4149 ()
    val x_4181: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4160)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4153
  block L_4153 (env_1602: unit)
    call tail toWord8Unsafe_3 (env_1602, x_4181)
  block L_4150 ()
    val x_4182: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4160)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4154
  block L_4154 (env_1603: unit)
    call tail toWord8Unsafe_3 (env_1603, x_4182)
  block L_4151 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4155
  block L_4155 (env_1604: unit)
    call L_4156 (x_3492 (env_1604, x_974 (*()*))) handle _ => raise
  block L_4156 (m'_23: t_9)
    case setRoundingMode_48 of
      setRoundingModeEnv_0 => L_4157
  block L_4157 (env_1605: (lambdas_223, word32) tuple)
    call L_4158 (setRoundingMode_3 (env_1605, x_973 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4158 (x_4183: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4159
  block L_4159 (env_1606: unit)
    call L_4160 (round_3 (env_1606, x_4160)) handle _ => raise
  block L_4160 (x_4184: real32)
    case setRoundingMode_48 of
      setRoundingModeEnv_0 => L_4161
  block L_4161 (env_1607: (lambdas_223, word32) tuple)
    call L_4162 (setRoundingMode_3 (env_1607, m'_23)) handle _ => raise
  block L_4162 (x_4185: unit)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4163
  block L_4163 (env_1608: unit)
    call tail toWord8Unsafe_3 (env_1608, x_4184)
  block L_4152 ()
    val x_4186: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4160)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4164
  block L_4164 (env_1609: unit)
    call tail toWord8Unsafe_3 (env_1609, x_4186)
  block L_4106 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4107 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4187 (env_1610:
              (lambdas_169, real32, real32, lambdas_99, real32, real32) tuple,
            x_4188: t_9):
  {returns = Some (lambdas_189), raises = Some (exn)} =
L_4165 ()
  block L_4165 ()
    val class_34: lambdas_169 = #0 (env_1610)
    val zero_57: real32 = #1 (env_1610)
    val maxWord_46: real32 = #2 (env_1610)
    val setRoundingMode_49: lambdas_99 = #3 (env_1610)
    val one_46: real32 = #4 (env_1610)
    val half_40: real32 = #5 (env_1610)
    val x_4190:
      (real32, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple =
      (half_40,
       one_46,
       setRoundingMode_49,
       x_4188,
       maxWord_46,
       zero_57,
       class_34)
    val x_4189: lambdas_189 = con xEnv_174 (x_4190)
    return (x_4189)
fun x_4191 (env_1611:
              (real32, real32, lambdas_99, t_9, real32, real32, lambdas_169) tuple,
            x_4192: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4166 ()
  block L_4166 ()
    val half_41: real32 = #0 (env_1611)
    val one_47: real32 = #1 (env_1611)
    val setRoundingMode_50: lambdas_99 = #2 (env_1611)
    val x_4193: t_9 = #3 (env_1611)
    val maxWord_47: real32 = #4 (env_1611)
    val zero_58: real32 = #5 (env_1611)
    val class_35: lambdas_169 = #6 (env_1611)
    case class_35 of
      classEnv_1 => L_4167
  block L_4167 (env_1612: (word32, word32, word32) tuple)
    call L_4168 (class_21 (env_1612, x_4192)) handle _ => raise
  block L_4168 (x_4194: float_class_0)
    case x_4194 of
      INF_0 => L_4170 | NAN_1 => L_4169 | _ => L_4171
  block L_4171 ()
    val x_4195: (real32, real32) tuple = (zero_58, x_4192)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4172
  block L_4172 (env_1613: unit)
    call L_4173 (<=_6 (env_1613, x_4195)) handle _ => raise
  block L_4173 (x_4196: bool)
    case x_4196 of
      true => L_4175 | false => L_4174
  block L_4174 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4176
  block L_4176 (env_1614: unit)
    call L_4177 (~_3 (env_1614, one_47)) handle _ => raise
  block L_4177 (x_4197: real32)
    val x_4198: (real32, real32) tuple = (x_4192, x_4197)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4178
  block L_4178 (env_1615: unit)
    call L_4179 (>_8 (env_1615, x_4198)) handle _ => raise
  block L_4179 (x_4199: bool)
    case x_4199 of
      true => L_4181 | false => L_4180
  block L_4180 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4181 ()
    case x_4193 of
      TO_NEGINF_0 => L_4185
    | TO_ZERO_0 => L_4184
    | TO_NEAREST_0 => L_4183
    | TO_POSINF_0 => L_4182
  block L_4182 ()
    return (x_271 (*0x0:w8*))
  block L_4183 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4186
  block L_4186 (env_1616: unit)
    call L_4187 (~_3 (env_1616, half_41)) handle _ => raise
  block L_4187 (x_4200: real32)
    val x_4201: (real32, real32) tuple = (x_4192, x_4200)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4188
  block L_4188 (env_1617: unit)
    call L_4189 (<_9 (env_1617, x_4201)) handle _ => raise
  block L_4189 (x_4202: bool)
    case x_4202 of
      true => L_4191 | false => L_4190
  block L_4190 ()
    return (x_271 (*0x0:w8*))
  block L_4191 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4184 ()
    return (x_271 (*0x0:w8*))
  block L_4185 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4175 ()
    val x_4203: (real32, real32) tuple = (x_4192, maxWord_47)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4192
  block L_4192 (env_1618: unit)
    call L_4193 (<=_6 (env_1618, x_4203)) handle _ => raise
  block L_4193 (x_4204: bool)
    case x_4204 of
      true => L_4195 | false => L_4194
  block L_4194 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4195 ()
    case x_4193 of
      TO_POSINF_0 => L_4199
    | TO_NEAREST_0 => L_4198
    | TO_ZERO_0 => L_4197
    | TO_NEGINF_0 => L_4196
  block L_4196 ()
    val x_4205: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4192)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4200
  block L_4200 (env_1619: unit)
    call tail toWord8Unsafe_3 (env_1619, x_4205)
  block L_4197 ()
    val x_4206: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4192)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4201
  block L_4201 (env_1620: unit)
    call tail toWord8Unsafe_3 (env_1620, x_4206)
  block L_4198 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4202
  block L_4202 (env_1621: unit)
    call L_4203 (x_3492 (env_1621, x_971 (*()*))) handle _ => raise
  block L_4203 (m'_24: t_9)
    case setRoundingMode_50 of
      setRoundingModeEnv_0 => L_4204
  block L_4204 (env_1622: (lambdas_223, word32) tuple)
    call L_4205 (setRoundingMode_3 (env_1622, x_970 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4205 (x_4207: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4206
  block L_4206 (env_1623: unit)
    call L_4207 (round_3 (env_1623, x_4192)) handle _ => raise
  block L_4207 (x_4208: real32)
    case setRoundingMode_50 of
      setRoundingModeEnv_0 => L_4208
  block L_4208 (env_1624: (lambdas_223, word32) tuple)
    call L_4209 (setRoundingMode_3 (env_1624, m'_24)) handle _ => raise
  block L_4209 (x_4209: unit)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4210
  block L_4210 (env_1625: unit)
    call tail toWord8Unsafe_3 (env_1625, x_4208)
  block L_4199 ()
    val x_4210: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4192)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4211
  block L_4211 (env_1626: unit)
    call tail toWord8Unsafe_3 (env_1626, x_4210)
  block L_4169 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4170 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2127 (env_1627: (lambdas_130, lambdas_129, word8) tuple, x_4211: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_4212 ()
  block L_4212 ()
    val <<_28: lambdas_130 = #0 (env_1627)
    val >>_27: lambdas_129 = #1 (env_1627)
    val maxWord'_43: word8 = #2 (env_1627)
    val x_4212: (word8, word32) tuple = (maxWord'_43, x_4211)
    case >>_27 of
      >>Env_3 => L_4213
  block L_4213 (env_1628: word32)
    call L_4214 (>>_15 (env_1628, x_4212)) handle _ => raise
  block L_4214 (x_4213: word8)
    val x_4214: (word8, word32) tuple = (x_4213, x_4211)
    case <<_28 of
      <<Env_3 => L_4215
  block L_4215 (env_1629: word32)
    call tail <<_15 (env_1629, x_4214)
fun x_4215 (env_1630:
              (real32, real32, lambdas_99, real32, word64, real32, word64) tuple,
            x_4216: t_9):
  {returns = Some (lambdas_193), raises = Some (exn)} =
L_4216 ()
  block L_4216 ()
    val minInt_32: real32 = #0 (env_1630)
    val maxInt_32: real32 = #1 (env_1630)
    val setRoundingMode_51: lambdas_99 = #2 (env_1630)
    val one_48: real32 = #3 (env_1630)
    val maxInt'_32: word64 = #4 (env_1630)
    val half_42: real32 = #5 (env_1630)
    val minInt'_12: word64 = #6 (env_1630)
    val x_4218:
      (word64, real32, word64, real32, lambdas_99, t_9, real32, real32) tuple =
      (minInt'_12,
       half_42,
       maxInt'_32,
       one_48,
       setRoundingMode_51,
       x_4216,
       maxInt_32,
       minInt_32)
    val x_4217: lambdas_193 = con xEnv_179 (x_4218)
    return (x_4217)
fun x_4219 (env_1631:
              (word64, real32, word64, real32, lambdas_99, t_9, real32, real32) tuple,
            x_4220: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_4217 ()
  block L_4217 ()
    val minInt'_13: word64 = #0 (env_1631)
    val half_43: real32 = #1 (env_1631)
    val maxInt'_33: word64 = #2 (env_1631)
    val one_49: real32 = #3 (env_1631)
    val setRoundingMode_52: lambdas_99 = #4 (env_1631)
    val x_4222: t_9 = #5 (env_1631)
    val maxInt_33: real32 = #6 (env_1631)
    val minInt_33: real32 = #7 (env_1631)
    val x_4221: (real32, real32) tuple = (minInt_33, x_4220)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4218
  block L_4218 (env_1632: unit)
    call L_4219 (<=_6 (env_1632, x_4221)) handle _ => raise
  block L_4219 (x_4223: bool)
    case x_4223 of
      true => L_4221 | false => L_4220
  block L_4220 ()
    val x_4224: (real32, real32) tuple = (x_4220, minInt_33)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4222
  block L_4222 (env_1633: unit)
    call L_4223 (<_9 (env_1633, x_4224)) handle _ => raise
  block L_4223 (x_4225: bool)
    case x_4225 of
      true => L_4225 | false => L_4224
  block L_4224 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4225 ()
    val x_4226: (real32, real32) tuple = (minInt_33, one_49)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4226
  block L_4226 (env_1634: unit)
    call L_4227 (-_5 (env_1634, x_4226)) handle _ => raise
  block L_4227 (x_4227: real32)
    val x_4228: (real32, real32) tuple = (x_4227, x_4220)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4228
  block L_4228 (env_1635: unit)
    call L_4229 (<_9 (env_1635, x_4228)) handle _ => raise
  block L_4229 (x_4229: bool)
    case x_4229 of
      true => L_4231 | false => L_4230
  block L_4230 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4231 ()
    case x_4222 of
      TO_NEGINF_0 => L_4235
    | TO_ZERO_0 => L_4234
    | TO_NEAREST_0 => L_4233
    | TO_POSINF_0 => L_4232
  block L_4232 ()
    return (minInt'_13)
  block L_4233 ()
    val x_4230: (real32, real32) tuple = (x_4220, minInt_33)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4236
  block L_4236 (env_1636: unit)
    call L_4237 (-_5 (env_1636, x_4230)) handle _ => raise
  block L_4237 (x_4231: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4238
  block L_4238 (env_1637: unit)
    call L_4239 (~_3 (env_1637, half_43)) handle _ => raise
  block L_4239 (x_4232: real32)
    val x_4233: (real32, real32) tuple = (x_4231, x_4232)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4240
  block L_4240 (env_1638: unit)
    call L_4241 (<_9 (env_1638, x_4233)) handle _ => raise
  block L_4241 (x_4234: bool)
    case x_4234 of
      true => L_4243 | false => L_4242
  block L_4242 ()
    return (minInt'_13)
  block L_4243 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4234 ()
    return (minInt'_13)
  block L_4235 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4221 ()
    val x_4235: (real32, real32) tuple = (x_4220, maxInt_33)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4244
  block L_4244 (env_1639: unit)
    call L_4245 (<=_6 (env_1639, x_4235)) handle _ => raise
  block L_4245 (x_4236: bool)
    case x_4236 of
      true => L_4247 | false => L_4246
  block L_4246 ()
    val x_4237: (real32, real32) tuple = (maxInt_33, one_49)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4248
  block L_4248 (env_1640: unit)
    call L_4249 (+_4 (env_1640, x_4237)) handle _ => raise
  block L_4249 (x_4238: real32)
    val x_4239: (real32, real32) tuple = (x_4220, x_4238)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4250
  block L_4250 (env_1641: unit)
    call L_4251 (<_9 (env_1641, x_4239)) handle _ => raise
  block L_4251 (x_4240: bool)
    case x_4240 of
      true => L_4253 | false => L_4252
  block L_4252 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4253 ()
    case x_4222 of
      TO_NEGINF_0 => L_4257
    | TO_ZERO_0 => L_4256
    | TO_NEAREST_0 => L_4255
    | TO_POSINF_0 => L_4254
  block L_4254 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4255 ()
    val x_4241: (real32, real32) tuple = (x_4220, maxInt_33)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4258
  block L_4258 (env_1642: unit)
    call L_4259 (-_5 (env_1642, x_4241)) handle _ => raise
  block L_4259 (x_4242: real32)
    val x_4243: (real32, real32) tuple = (x_4242, half_43)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4260
  block L_4260 (env_1643: unit)
    call L_4261 (>=_9 (env_1643, x_4243)) handle _ => raise
  block L_4261 (x_4244: bool)
    case x_4244 of
      true => L_4263 | false => L_4262
  block L_4262 ()
    return (maxInt'_33)
  block L_4263 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4256 ()
    return (maxInt'_33)
  block L_4257 ()
    return (maxInt'_33)
  block L_4247 ()
    case x_4222 of
      TO_POSINF_0 => L_4267
    | TO_NEAREST_0 => L_4266
    | TO_ZERO_0 => L_4265
    | TO_NEGINF_0 => L_4264
  block L_4264 ()
    val x_4245: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4220)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4268
  block L_4268 (env_1644: unit)
    call tail toInt64Unsafe_3 (env_1644, x_4245)
  block L_4265 ()
    val x_4246: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4220)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4269
  block L_4269 (env_1645: unit)
    call tail toInt64Unsafe_3 (env_1645, x_4246)
  block L_4266 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4270
  block L_4270 (env_1646: unit)
    call L_4271 (x_3492 (env_1646, x_969 (*()*))) handle _ => raise
  block L_4271 (m'_25: t_9)
    case setRoundingMode_52 of
      setRoundingModeEnv_0 => L_4272
  block L_4272 (env_1647: (lambdas_223, word32) tuple)
    call L_4273 (setRoundingMode_3 (env_1647, x_968 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4273 (x_4247: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4274
  block L_4274 (env_1648: unit)
    call L_4275 (round_3 (env_1648, x_4220)) handle _ => raise
  block L_4275 (x_4248: real32)
    case setRoundingMode_52 of
      setRoundingModeEnv_0 => L_4276
  block L_4276 (env_1649: (lambdas_223, word32) tuple)
    call L_4277 (setRoundingMode_3 (env_1649, m'_25)) handle _ => raise
  block L_4277 (x_4249: unit)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4278
  block L_4278 (env_1650: unit)
    call tail toInt64Unsafe_3 (env_1650, x_4248)
  block L_4267 ()
    val x_4250: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4220)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4279
  block L_4279 (env_1651: unit)
    call tail toInt64Unsafe_3 (env_1651, x_4250)
fun x_4251 (env_1652: (real32, real32, lambdas_99) tuple, x_4252: t_9):
  {returns = Some (lambdas_195), raises = Some (exn)} =
L_4280 ()
  block L_4280 ()
    val minInt_34: real32 = #0 (env_1652)
    val maxInt_34: real32 = #1 (env_1652)
    val setRoundingMode_53: lambdas_99 = #2 (env_1652)
    val x_4254: (lambdas_99, t_9, real32, real32) tuple =
      (setRoundingMode_53, x_4252, maxInt_34, minInt_34)
    val x_4253: lambdas_195 = con xEnv_181 (x_4254)
    return (x_4253)
fun x_4255 (env_1653: (lambdas_99, t_9, real32, real32) tuple, x_4256: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_4281 ()
  block L_4281 ()
    val setRoundingMode_54: lambdas_99 = #0 (env_1653)
    val x_4258: t_9 = #1 (env_1653)
    val maxInt_35: real32 = #2 (env_1653)
    val minInt_35: real32 = #3 (env_1653)
    val x_4257: (real32, real32) tuple = (minInt_35, x_4256)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4282
  block L_4282 (env_1654: unit)
    call L_4283 (<=_6 (env_1654, x_4257)) handle _ => raise
  block L_4283 (x_4259: bool)
    case x_4259 of
      true => L_4285 | false => L_4284
  block L_4284 ()
    val x_4260: (real32, real32) tuple = (x_4256, minInt_35)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4286
  block L_4286 (env_1655: unit)
    call L_4287 (<_9 (env_1655, x_4260)) handle _ => raise
  block L_4287 (x_4261: bool)
    case x_4261 of
      true => L_4289 | false => L_4288
  block L_4288 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4289 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4285 ()
    val x_4262: (real32, real32) tuple = (x_4256, maxInt_35)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4290
  block L_4290 (env_1656: unit)
    call L_4291 (<=_6 (env_1656, x_4262)) handle _ => raise
  block L_4291 (x_4263: bool)
    case x_4263 of
      true => L_4293 | false => L_4292
  block L_4292 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4293 ()
    case x_4258 of
      TO_POSINF_0 => L_4297
    | TO_NEAREST_0 => L_4296
    | TO_ZERO_0 => L_4295
    | TO_NEGINF_0 => L_4294
  block L_4294 ()
    val x_4264: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4256)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4298
  block L_4298 (env_1657: unit)
    call tail toInt64Unsafe_3 (env_1657, x_4264)
  block L_4295 ()
    val x_4265: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4256)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4299
  block L_4299 (env_1658: unit)
    call tail toInt64Unsafe_3 (env_1658, x_4265)
  block L_4296 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4300
  block L_4300 (env_1659: unit)
    call L_4301 (x_3492 (env_1659, x_966 (*()*))) handle _ => raise
  block L_4301 (m'_26: t_9)
    case setRoundingMode_54 of
      setRoundingModeEnv_0 => L_4302
  block L_4302 (env_1660: (lambdas_223, word32) tuple)
    call L_4303 (setRoundingMode_3 (env_1660, x_965 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4303 (x_4266: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4304
  block L_4304 (env_1661: unit)
    call L_4305 (round_3 (env_1661, x_4256)) handle _ => raise
  block L_4305 (x_4267: real32)
    case setRoundingMode_54 of
      setRoundingModeEnv_0 => L_4306
  block L_4306 (env_1662: (lambdas_223, word32) tuple)
    call L_4307 (setRoundingMode_3 (env_1662, m'_26)) handle _ => raise
  block L_4307 (x_4268: unit)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4308
  block L_4308 (env_1663: unit)
    call tail toInt64Unsafe_3 (env_1663, x_4267)
  block L_4297 ()
    val x_4269: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4256)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4309
  block L_4309 (env_1664: unit)
    call tail toInt64Unsafe_3 (env_1664, x_4269)
fun x_2114 (env_1665: (lambdas_138, lambdas_137, word64) tuple, x_4270: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4310 ()
  block L_4310 ()
    val <<_29: lambdas_138 = #0 (env_1665)
    val >>_28: lambdas_137 = #1 (env_1665)
    val maxInt'_34: word64 = #2 (env_1665)
    val x_4271: (word64, word32) tuple = (maxInt'_34, x_4270)
    case >>_28 of
      >>Env_4 => L_4311
  block L_4311 (env_1666: (word32, word64) tuple)
    call L_4312 (>>_17 (env_1666, x_4271)) handle _ => raise
  block L_4312 (x_4272: word64)
    val x_4273: (word64, word32) tuple = (x_4272, x_4270)
    case <<_29 of
      <<Env_4 => L_4313
  block L_4313 (env_1667: (word32, word64) tuple)
    call tail <<_17 (env_1667, x_4273)
fun x_4274 (env_1668:
              (real32, real32, lambdas_99, real32, word32, real32, word32) tuple,
            x_4275: t_9):
  {returns = Some (lambdas_199), raises = Some (exn)} =
L_4314 ()
  block L_4314 ()
    val minInt_36: real32 = #0 (env_1668)
    val maxInt_36: real32 = #1 (env_1668)
    val setRoundingMode_55: lambdas_99 = #2 (env_1668)
    val one_50: real32 = #3 (env_1668)
    val maxInt'_35: word32 = #4 (env_1668)
    val half_44: real32 = #5 (env_1668)
    val minInt'_14: word32 = #6 (env_1668)
    val x_4277:
      (word32, real32, word32, real32, lambdas_99, t_9, real32, real32) tuple =
      (minInt'_14,
       half_44,
       maxInt'_35,
       one_50,
       setRoundingMode_55,
       x_4275,
       maxInt_36,
       minInt_36)
    val x_4276: lambdas_199 = con xEnv_186 (x_4277)
    return (x_4276)
fun x_4278 (env_1669:
              (word32, real32, word32, real32, lambdas_99, t_9, real32, real32) tuple,
            x_4279: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4315 ()
  block L_4315 ()
    val minInt'_15: word32 = #0 (env_1669)
    val half_45: real32 = #1 (env_1669)
    val maxInt'_36: word32 = #2 (env_1669)
    val one_51: real32 = #3 (env_1669)
    val setRoundingMode_56: lambdas_99 = #4 (env_1669)
    val x_4281: t_9 = #5 (env_1669)
    val maxInt_37: real32 = #6 (env_1669)
    val minInt_37: real32 = #7 (env_1669)
    val x_4280: (real32, real32) tuple = (minInt_37, x_4279)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4316
  block L_4316 (env_1670: unit)
    call L_4317 (<=_6 (env_1670, x_4280)) handle _ => raise
  block L_4317 (x_4282: bool)
    case x_4282 of
      true => L_4319 | false => L_4318
  block L_4318 ()
    val x_4283: (real32, real32) tuple = (x_4279, minInt_37)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4320
  block L_4320 (env_1671: unit)
    call L_4321 (<_9 (env_1671, x_4283)) handle _ => raise
  block L_4321 (x_4284: bool)
    case x_4284 of
      true => L_4323 | false => L_4322
  block L_4322 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4323 ()
    val x_4285: (real32, real32) tuple = (minInt_37, one_51)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4324
  block L_4324 (env_1672: unit)
    call L_4325 (-_5 (env_1672, x_4285)) handle _ => raise
  block L_4325 (x_4286: real32)
    val x_4287: (real32, real32) tuple = (x_4286, x_4279)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4326
  block L_4326 (env_1673: unit)
    call L_4327 (<_9 (env_1673, x_4287)) handle _ => raise
  block L_4327 (x_4288: bool)
    case x_4288 of
      true => L_4329 | false => L_4328
  block L_4328 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4329 ()
    case x_4281 of
      TO_NEGINF_0 => L_4333
    | TO_ZERO_0 => L_4332
    | TO_NEAREST_0 => L_4331
    | TO_POSINF_0 => L_4330
  block L_4330 ()
    return (minInt'_15)
  block L_4331 ()
    val x_4289: (real32, real32) tuple = (x_4279, minInt_37)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4334
  block L_4334 (env_1674: unit)
    call L_4335 (-_5 (env_1674, x_4289)) handle _ => raise
  block L_4335 (x_4290: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4336
  block L_4336 (env_1675: unit)
    call L_4337 (~_3 (env_1675, half_45)) handle _ => raise
  block L_4337 (x_4291: real32)
    val x_4292: (real32, real32) tuple = (x_4290, x_4291)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4338
  block L_4338 (env_1676: unit)
    call L_4339 (<_9 (env_1676, x_4292)) handle _ => raise
  block L_4339 (x_4293: bool)
    case x_4293 of
      true => L_4341 | false => L_4340
  block L_4340 ()
    return (minInt'_15)
  block L_4341 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4332 ()
    return (minInt'_15)
  block L_4333 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4319 ()
    val x_4294: (real32, real32) tuple = (x_4279, maxInt_37)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4342
  block L_4342 (env_1677: unit)
    call L_4343 (<=_6 (env_1677, x_4294)) handle _ => raise
  block L_4343 (x_4295: bool)
    case x_4295 of
      true => L_4345 | false => L_4344
  block L_4344 ()
    val x_4296: (real32, real32) tuple = (maxInt_37, one_51)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4346
  block L_4346 (env_1678: unit)
    call L_4347 (+_4 (env_1678, x_4296)) handle _ => raise
  block L_4347 (x_4297: real32)
    val x_4298: (real32, real32) tuple = (x_4279, x_4297)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4348
  block L_4348 (env_1679: unit)
    call L_4349 (<_9 (env_1679, x_4298)) handle _ => raise
  block L_4349 (x_4299: bool)
    case x_4299 of
      true => L_4351 | false => L_4350
  block L_4350 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4351 ()
    case x_4281 of
      TO_NEGINF_0 => L_4355
    | TO_ZERO_0 => L_4354
    | TO_NEAREST_0 => L_4353
    | TO_POSINF_0 => L_4352
  block L_4352 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4353 ()
    val x_4300: (real32, real32) tuple = (x_4279, maxInt_37)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4356
  block L_4356 (env_1680: unit)
    call L_4357 (-_5 (env_1680, x_4300)) handle _ => raise
  block L_4357 (x_4301: real32)
    val x_4302: (real32, real32) tuple = (x_4301, half_45)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4358
  block L_4358 (env_1681: unit)
    call L_4359 (>=_9 (env_1681, x_4302)) handle _ => raise
  block L_4359 (x_4303: bool)
    case x_4303 of
      true => L_4361 | false => L_4360
  block L_4360 ()
    return (maxInt'_36)
  block L_4361 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4354 ()
    return (maxInt'_36)
  block L_4355 ()
    return (maxInt'_36)
  block L_4345 ()
    case x_4281 of
      TO_POSINF_0 => L_4365
    | TO_NEAREST_0 => L_4364
    | TO_ZERO_0 => L_4363
    | TO_NEGINF_0 => L_4362
  block L_4362 ()
    val x_4304: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4279)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4366
  block L_4366 (env_1682: unit)
    call tail toInt32Unsafe_3 (env_1682, x_4304)
  block L_4363 ()
    val x_4305: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4279)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4367
  block L_4367 (env_1683: unit)
    call tail toInt32Unsafe_3 (env_1683, x_4305)
  block L_4364 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4368
  block L_4368 (env_1684: unit)
    call L_4369 (x_3492 (env_1684, x_963 (*()*))) handle _ => raise
  block L_4369 (m'_27: t_9)
    case setRoundingMode_56 of
      setRoundingModeEnv_0 => L_4370
  block L_4370 (env_1685: (lambdas_223, word32) tuple)
    call L_4371 (setRoundingMode_3 (env_1685, x_962 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4371 (x_4306: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4372
  block L_4372 (env_1686: unit)
    call L_4373 (round_3 (env_1686, x_4279)) handle _ => raise
  block L_4373 (x_4307: real32)
    case setRoundingMode_56 of
      setRoundingModeEnv_0 => L_4374
  block L_4374 (env_1687: (lambdas_223, word32) tuple)
    call L_4375 (setRoundingMode_3 (env_1687, m'_27)) handle _ => raise
  block L_4375 (x_4308: unit)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4376
  block L_4376 (env_1688: unit)
    call tail toInt32Unsafe_3 (env_1688, x_4307)
  block L_4365 ()
    val x_4309: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4279)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4377
  block L_4377 (env_1689: unit)
    call tail toInt32Unsafe_3 (env_1689, x_4309)
fun x_4310 (env_1690: (real32, real32, lambdas_99) tuple, x_4311: t_9):
  {returns = Some (lambdas_201), raises = Some (exn)} =
L_4378 ()
  block L_4378 ()
    val minInt_38: real32 = #0 (env_1690)
    val maxInt_38: real32 = #1 (env_1690)
    val setRoundingMode_57: lambdas_99 = #2 (env_1690)
    val x_4313: (lambdas_99, t_9, real32, real32) tuple =
      (setRoundingMode_57, x_4311, maxInt_38, minInt_38)
    val x_4312: lambdas_201 = con xEnv_188 (x_4313)
    return (x_4312)
fun x_4314 (env_1691: (lambdas_99, t_9, real32, real32) tuple, x_4315: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4379 ()
  block L_4379 ()
    val setRoundingMode_58: lambdas_99 = #0 (env_1691)
    val x_4317: t_9 = #1 (env_1691)
    val maxInt_39: real32 = #2 (env_1691)
    val minInt_39: real32 = #3 (env_1691)
    val x_4316: (real32, real32) tuple = (minInt_39, x_4315)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4380
  block L_4380 (env_1692: unit)
    call L_4381 (<=_6 (env_1692, x_4316)) handle _ => raise
  block L_4381 (x_4318: bool)
    case x_4318 of
      true => L_4383 | false => L_4382
  block L_4382 ()
    val x_4319: (real32, real32) tuple = (x_4315, minInt_39)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4384
  block L_4384 (env_1693: unit)
    call L_4385 (<_9 (env_1693, x_4319)) handle _ => raise
  block L_4385 (x_4320: bool)
    case x_4320 of
      true => L_4387 | false => L_4386
  block L_4386 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4387 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4383 ()
    val x_4321: (real32, real32) tuple = (x_4315, maxInt_39)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4388
  block L_4388 (env_1694: unit)
    call L_4389 (<=_6 (env_1694, x_4321)) handle _ => raise
  block L_4389 (x_4322: bool)
    case x_4322 of
      true => L_4391 | false => L_4390
  block L_4390 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4391 ()
    case x_4317 of
      TO_POSINF_0 => L_4395
    | TO_NEAREST_0 => L_4394
    | TO_ZERO_0 => L_4393
    | TO_NEGINF_0 => L_4392
  block L_4392 ()
    val x_4323: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4315)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4396
  block L_4396 (env_1695: unit)
    call tail toInt32Unsafe_3 (env_1695, x_4323)
  block L_4393 ()
    val x_4324: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4315)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4397
  block L_4397 (env_1696: unit)
    call tail toInt32Unsafe_3 (env_1696, x_4324)
  block L_4394 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4398
  block L_4398 (env_1697: unit)
    call L_4399 (x_3492 (env_1697, x_960 (*()*))) handle _ => raise
  block L_4399 (m'_28: t_9)
    case setRoundingMode_58 of
      setRoundingModeEnv_0 => L_4400
  block L_4400 (env_1698: (lambdas_223, word32) tuple)
    call L_4401 (setRoundingMode_3 (env_1698, x_959 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4401 (x_4325: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4402
  block L_4402 (env_1699: unit)
    call L_4403 (round_3 (env_1699, x_4315)) handle _ => raise
  block L_4403 (x_4326: real32)
    case setRoundingMode_58 of
      setRoundingModeEnv_0 => L_4404
  block L_4404 (env_1700: (lambdas_223, word32) tuple)
    call L_4405 (setRoundingMode_3 (env_1700, m'_28)) handle _ => raise
  block L_4405 (x_4327: unit)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4406
  block L_4406 (env_1701: unit)
    call tail toInt32Unsafe_3 (env_1701, x_4326)
  block L_4395 ()
    val x_4328: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4315)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4407
  block L_4407 (env_1702: unit)
    call tail toInt32Unsafe_3 (env_1702, x_4328)
fun x_2101 (env_1703: (lambdas_146, lambdas_145, word32) tuple, x_4329: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4408 ()
  block L_4408 ()
    val <<_30: lambdas_146 = #0 (env_1703)
    val >>_29: lambdas_145 = #1 (env_1703)
    val maxInt'_37: word32 = #2 (env_1703)
    val x_4330: (word32, word32) tuple = (maxInt'_37, x_4329)
    case >>_29 of
      >>Env_5 => L_4409
  block L_4409 (env_1704: (word32, word32) tuple)
    call L_4410 (>>_19 (env_1704, x_4330)) handle _ => raise
  block L_4410 (x_4331: word32)
    val x_4332: (word32, word32) tuple = (x_4331, x_4329)
    case <<_30 of
      <<Env_5 => L_4411
  block L_4411 (env_1705: (word32, word32) tuple)
    call tail <<_19 (env_1705, x_4332)
fun x_4333 (env_1706:
              (real32, real32, lambdas_99, real32, word16, real32, word16) tuple,
            x_4334: t_9):
  {returns = Some (lambdas_205), raises = Some (exn)} =
L_4412 ()
  block L_4412 ()
    val minInt_40: real32 = #0 (env_1706)
    val maxInt_40: real32 = #1 (env_1706)
    val setRoundingMode_59: lambdas_99 = #2 (env_1706)
    val one_52: real32 = #3 (env_1706)
    val maxInt'_38: word16 = #4 (env_1706)
    val half_46: real32 = #5 (env_1706)
    val minInt'_16: word16 = #6 (env_1706)
    val x_4336:
      (word16, real32, word16, real32, lambdas_99, t_9, real32, real32) tuple =
      (minInt'_16,
       half_46,
       maxInt'_38,
       one_52,
       setRoundingMode_59,
       x_4334,
       maxInt_40,
       minInt_40)
    val x_4335: lambdas_205 = con xEnv_193 (x_4336)
    return (x_4335)
fun x_4337 (env_1707:
              (word16, real32, word16, real32, lambdas_99, t_9, real32, real32) tuple,
            x_4338: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4413 ()
  block L_4413 ()
    val minInt'_17: word16 = #0 (env_1707)
    val half_47: real32 = #1 (env_1707)
    val maxInt'_39: word16 = #2 (env_1707)
    val one_53: real32 = #3 (env_1707)
    val setRoundingMode_60: lambdas_99 = #4 (env_1707)
    val x_4340: t_9 = #5 (env_1707)
    val maxInt_41: real32 = #6 (env_1707)
    val minInt_41: real32 = #7 (env_1707)
    val x_4339: (real32, real32) tuple = (minInt_41, x_4338)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4414
  block L_4414 (env_1708: unit)
    call L_4415 (<=_6 (env_1708, x_4339)) handle _ => raise
  block L_4415 (x_4341: bool)
    case x_4341 of
      true => L_4417 | false => L_4416
  block L_4416 ()
    val x_4342: (real32, real32) tuple = (x_4338, minInt_41)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4418
  block L_4418 (env_1709: unit)
    call L_4419 (<_9 (env_1709, x_4342)) handle _ => raise
  block L_4419 (x_4343: bool)
    case x_4343 of
      true => L_4421 | false => L_4420
  block L_4420 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4421 ()
    val x_4344: (real32, real32) tuple = (minInt_41, one_53)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4422
  block L_4422 (env_1710: unit)
    call L_4423 (-_5 (env_1710, x_4344)) handle _ => raise
  block L_4423 (x_4345: real32)
    val x_4346: (real32, real32) tuple = (x_4345, x_4338)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4424
  block L_4424 (env_1711: unit)
    call L_4425 (<_9 (env_1711, x_4346)) handle _ => raise
  block L_4425 (x_4347: bool)
    case x_4347 of
      true => L_4427 | false => L_4426
  block L_4426 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4427 ()
    case x_4340 of
      TO_NEGINF_0 => L_4431
    | TO_ZERO_0 => L_4430
    | TO_NEAREST_0 => L_4429
    | TO_POSINF_0 => L_4428
  block L_4428 ()
    return (minInt'_17)
  block L_4429 ()
    val x_4348: (real32, real32) tuple = (x_4338, minInt_41)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4432
  block L_4432 (env_1712: unit)
    call L_4433 (-_5 (env_1712, x_4348)) handle _ => raise
  block L_4433 (x_4349: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4434
  block L_4434 (env_1713: unit)
    call L_4435 (~_3 (env_1713, half_47)) handle _ => raise
  block L_4435 (x_4350: real32)
    val x_4351: (real32, real32) tuple = (x_4349, x_4350)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4436
  block L_4436 (env_1714: unit)
    call L_4437 (<_9 (env_1714, x_4351)) handle _ => raise
  block L_4437 (x_4352: bool)
    case x_4352 of
      true => L_4439 | false => L_4438
  block L_4438 ()
    return (minInt'_17)
  block L_4439 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4430 ()
    return (minInt'_17)
  block L_4431 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4417 ()
    val x_4353: (real32, real32) tuple = (x_4338, maxInt_41)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4440
  block L_4440 (env_1715: unit)
    call L_4441 (<=_6 (env_1715, x_4353)) handle _ => raise
  block L_4441 (x_4354: bool)
    case x_4354 of
      true => L_4443 | false => L_4442
  block L_4442 ()
    val x_4355: (real32, real32) tuple = (maxInt_41, one_53)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4444
  block L_4444 (env_1716: unit)
    call L_4445 (+_4 (env_1716, x_4355)) handle _ => raise
  block L_4445 (x_4356: real32)
    val x_4357: (real32, real32) tuple = (x_4338, x_4356)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4446
  block L_4446 (env_1717: unit)
    call L_4447 (<_9 (env_1717, x_4357)) handle _ => raise
  block L_4447 (x_4358: bool)
    case x_4358 of
      true => L_4449 | false => L_4448
  block L_4448 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4449 ()
    case x_4340 of
      TO_NEGINF_0 => L_4453
    | TO_ZERO_0 => L_4452
    | TO_NEAREST_0 => L_4451
    | TO_POSINF_0 => L_4450
  block L_4450 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4451 ()
    val x_4359: (real32, real32) tuple = (x_4338, maxInt_41)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4454
  block L_4454 (env_1718: unit)
    call L_4455 (-_5 (env_1718, x_4359)) handle _ => raise
  block L_4455 (x_4360: real32)
    val x_4361: (real32, real32) tuple = (x_4360, half_47)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4456
  block L_4456 (env_1719: unit)
    call L_4457 (>=_9 (env_1719, x_4361)) handle _ => raise
  block L_4457 (x_4362: bool)
    case x_4362 of
      true => L_4459 | false => L_4458
  block L_4458 ()
    return (maxInt'_39)
  block L_4459 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4452 ()
    return (maxInt'_39)
  block L_4453 ()
    return (maxInt'_39)
  block L_4443 ()
    case x_4340 of
      TO_POSINF_0 => L_4463
    | TO_NEAREST_0 => L_4462
    | TO_ZERO_0 => L_4461
    | TO_NEGINF_0 => L_4460
  block L_4460 ()
    val x_4363: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4338)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4464
  block L_4464 (env_1720: unit)
    call tail toInt16Unsafe_3 (env_1720, x_4363)
  block L_4461 ()
    val x_4364: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4338)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4465
  block L_4465 (env_1721: unit)
    call tail toInt16Unsafe_3 (env_1721, x_4364)
  block L_4462 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4466
  block L_4466 (env_1722: unit)
    call L_4467 (x_3492 (env_1722, x_957 (*()*))) handle _ => raise
  block L_4467 (m'_29: t_9)
    case setRoundingMode_60 of
      setRoundingModeEnv_0 => L_4468
  block L_4468 (env_1723: (lambdas_223, word32) tuple)
    call L_4469 (setRoundingMode_3 (env_1723, x_956 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4469 (x_4365: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4470
  block L_4470 (env_1724: unit)
    call L_4471 (round_3 (env_1724, x_4338)) handle _ => raise
  block L_4471 (x_4366: real32)
    case setRoundingMode_60 of
      setRoundingModeEnv_0 => L_4472
  block L_4472 (env_1725: (lambdas_223, word32) tuple)
    call L_4473 (setRoundingMode_3 (env_1725, m'_29)) handle _ => raise
  block L_4473 (x_4367: unit)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4474
  block L_4474 (env_1726: unit)
    call tail toInt16Unsafe_3 (env_1726, x_4366)
  block L_4463 ()
    val x_4368: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4338)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4475
  block L_4475 (env_1727: unit)
    call tail toInt16Unsafe_3 (env_1727, x_4368)
fun x_4369 (env_1728: (real32, real32, lambdas_99) tuple, x_4370: t_9):
  {returns = Some (lambdas_207), raises = Some (exn)} =
L_4476 ()
  block L_4476 ()
    val minInt_42: real32 = #0 (env_1728)
    val maxInt_42: real32 = #1 (env_1728)
    val setRoundingMode_61: lambdas_99 = #2 (env_1728)
    val x_4372: (lambdas_99, t_9, real32, real32) tuple =
      (setRoundingMode_61, x_4370, maxInt_42, minInt_42)
    val x_4371: lambdas_207 = con xEnv_195 (x_4372)
    return (x_4371)
fun x_4373 (env_1729: (lambdas_99, t_9, real32, real32) tuple, x_4374: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4477 ()
  block L_4477 ()
    val setRoundingMode_62: lambdas_99 = #0 (env_1729)
    val x_4376: t_9 = #1 (env_1729)
    val maxInt_43: real32 = #2 (env_1729)
    val minInt_43: real32 = #3 (env_1729)
    val x_4375: (real32, real32) tuple = (minInt_43, x_4374)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4478
  block L_4478 (env_1730: unit)
    call L_4479 (<=_6 (env_1730, x_4375)) handle _ => raise
  block L_4479 (x_4377: bool)
    case x_4377 of
      true => L_4481 | false => L_4480
  block L_4480 ()
    val x_4378: (real32, real32) tuple = (x_4374, minInt_43)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4482
  block L_4482 (env_1731: unit)
    call L_4483 (<_9 (env_1731, x_4378)) handle _ => raise
  block L_4483 (x_4379: bool)
    case x_4379 of
      true => L_4485 | false => L_4484
  block L_4484 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4485 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4481 ()
    val x_4380: (real32, real32) tuple = (x_4374, maxInt_43)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4486
  block L_4486 (env_1732: unit)
    call L_4487 (<=_6 (env_1732, x_4380)) handle _ => raise
  block L_4487 (x_4381: bool)
    case x_4381 of
      true => L_4489 | false => L_4488
  block L_4488 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4489 ()
    case x_4376 of
      TO_POSINF_0 => L_4493
    | TO_NEAREST_0 => L_4492
    | TO_ZERO_0 => L_4491
    | TO_NEGINF_0 => L_4490
  block L_4490 ()
    val x_4382: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4374)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4494
  block L_4494 (env_1733: unit)
    call tail toInt16Unsafe_3 (env_1733, x_4382)
  block L_4491 ()
    val x_4383: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4374)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4495
  block L_4495 (env_1734: unit)
    call tail toInt16Unsafe_3 (env_1734, x_4383)
  block L_4492 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4496
  block L_4496 (env_1735: unit)
    call L_4497 (x_3492 (env_1735, x_954 (*()*))) handle _ => raise
  block L_4497 (m'_30: t_9)
    case setRoundingMode_62 of
      setRoundingModeEnv_0 => L_4498
  block L_4498 (env_1736: (lambdas_223, word32) tuple)
    call L_4499 (setRoundingMode_3 (env_1736, x_953 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4499 (x_4384: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4500
  block L_4500 (env_1737: unit)
    call L_4501 (round_3 (env_1737, x_4374)) handle _ => raise
  block L_4501 (x_4385: real32)
    case setRoundingMode_62 of
      setRoundingModeEnv_0 => L_4502
  block L_4502 (env_1738: (lambdas_223, word32) tuple)
    call L_4503 (setRoundingMode_3 (env_1738, m'_30)) handle _ => raise
  block L_4503 (x_4386: unit)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4504
  block L_4504 (env_1739: unit)
    call tail toInt16Unsafe_3 (env_1739, x_4385)
  block L_4493 ()
    val x_4387: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4374)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4505
  block L_4505 (env_1740: unit)
    call tail toInt16Unsafe_3 (env_1740, x_4387)
fun x_2088 (env_1741: (lambdas_154, lambdas_153, word16) tuple, x_4388: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_4506 ()
  block L_4506 ()
    val <<_31: lambdas_154 = #0 (env_1741)
    val >>_30: lambdas_153 = #1 (env_1741)
    val maxInt'_40: word16 = #2 (env_1741)
    val x_4389: (word16, word32) tuple = (maxInt'_40, x_4388)
    case >>_30 of
      >>Env_6 => L_4507
  block L_4507 (env_1742: (word32, word16) tuple)
    call L_4508 (>>_21 (env_1742, x_4389)) handle _ => raise
  block L_4508 (x_4390: word16)
    val x_4391: (word16, word32) tuple = (x_4390, x_4388)
    case <<_31 of
      <<Env_6 => L_4509
  block L_4509 (env_1743: (word32, word16) tuple)
    call tail <<_21 (env_1743, x_4391)
fun x_4392 (env_1744:
              (real32, real32, lambdas_99, real32, word8, real32, word8) tuple,
            x_4393: t_9):
  {returns = Some (lambdas_211), raises = Some (exn)} =
L_4510 ()
  block L_4510 ()
    val minInt_44: real32 = #0 (env_1744)
    val maxInt_44: real32 = #1 (env_1744)
    val setRoundingMode_63: lambdas_99 = #2 (env_1744)
    val one_54: real32 = #3 (env_1744)
    val maxInt'_41: word8 = #4 (env_1744)
    val half_48: real32 = #5 (env_1744)
    val minInt'_18: word8 = #6 (env_1744)
    val x_4395:
      (word8, real32, word8, real32, lambdas_99, t_9, real32, real32) tuple =
      (minInt'_18,
       half_48,
       maxInt'_41,
       one_54,
       setRoundingMode_63,
       x_4393,
       maxInt_44,
       minInt_44)
    val x_4394: lambdas_211 = con xEnv_200 (x_4395)
    return (x_4394)
fun x_4396 (env_1745:
              (word8, real32, word8, real32, lambdas_99, t_9, real32, real32) tuple,
            x_4397: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4511 ()
  block L_4511 ()
    val minInt'_19: word8 = #0 (env_1745)
    val half_49: real32 = #1 (env_1745)
    val maxInt'_42: word8 = #2 (env_1745)
    val one_55: real32 = #3 (env_1745)
    val setRoundingMode_64: lambdas_99 = #4 (env_1745)
    val x_4399: t_9 = #5 (env_1745)
    val maxInt_45: real32 = #6 (env_1745)
    val minInt_45: real32 = #7 (env_1745)
    val x_4398: (real32, real32) tuple = (minInt_45, x_4397)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4512
  block L_4512 (env_1746: unit)
    call L_4513 (<=_6 (env_1746, x_4398)) handle _ => raise
  block L_4513 (x_4400: bool)
    case x_4400 of
      true => L_4515 | false => L_4514
  block L_4514 ()
    val x_4401: (real32, real32) tuple = (x_4397, minInt_45)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4516
  block L_4516 (env_1747: unit)
    call L_4517 (<_9 (env_1747, x_4401)) handle _ => raise
  block L_4517 (x_4402: bool)
    case x_4402 of
      true => L_4519 | false => L_4518
  block L_4518 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4519 ()
    val x_4403: (real32, real32) tuple = (minInt_45, one_55)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4520
  block L_4520 (env_1748: unit)
    call L_4521 (-_5 (env_1748, x_4403)) handle _ => raise
  block L_4521 (x_4404: real32)
    val x_4405: (real32, real32) tuple = (x_4404, x_4397)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4522
  block L_4522 (env_1749: unit)
    call L_4523 (<_9 (env_1749, x_4405)) handle _ => raise
  block L_4523 (x_4406: bool)
    case x_4406 of
      true => L_4525 | false => L_4524
  block L_4524 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4525 ()
    case x_4399 of
      TO_NEGINF_0 => L_4529
    | TO_ZERO_0 => L_4528
    | TO_NEAREST_0 => L_4527
    | TO_POSINF_0 => L_4526
  block L_4526 ()
    return (minInt'_19)
  block L_4527 ()
    val x_4407: (real32, real32) tuple = (x_4397, minInt_45)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4530
  block L_4530 (env_1750: unit)
    call L_4531 (-_5 (env_1750, x_4407)) handle _ => raise
  block L_4531 (x_4408: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4532
  block L_4532 (env_1751: unit)
    call L_4533 (~_3 (env_1751, half_49)) handle _ => raise
  block L_4533 (x_4409: real32)
    val x_4410: (real32, real32) tuple = (x_4408, x_4409)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4534
  block L_4534 (env_1752: unit)
    call L_4535 (<_9 (env_1752, x_4410)) handle _ => raise
  block L_4535 (x_4411: bool)
    case x_4411 of
      true => L_4537 | false => L_4536
  block L_4536 ()
    return (minInt'_19)
  block L_4537 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4528 ()
    return (minInt'_19)
  block L_4529 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4515 ()
    val x_4412: (real32, real32) tuple = (x_4397, maxInt_45)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4538
  block L_4538 (env_1753: unit)
    call L_4539 (<=_6 (env_1753, x_4412)) handle _ => raise
  block L_4539 (x_4413: bool)
    case x_4413 of
      true => L_4541 | false => L_4540
  block L_4540 ()
    val x_4414: (real32, real32) tuple = (maxInt_45, one_55)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4542
  block L_4542 (env_1754: unit)
    call L_4543 (+_4 (env_1754, x_4414)) handle _ => raise
  block L_4543 (x_4415: real32)
    val x_4416: (real32, real32) tuple = (x_4397, x_4415)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4544
  block L_4544 (env_1755: unit)
    call L_4545 (<_9 (env_1755, x_4416)) handle _ => raise
  block L_4545 (x_4417: bool)
    case x_4417 of
      true => L_4547 | false => L_4546
  block L_4546 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4547 ()
    case x_4399 of
      TO_NEGINF_0 => L_4551
    | TO_ZERO_0 => L_4550
    | TO_NEAREST_0 => L_4549
    | TO_POSINF_0 => L_4548
  block L_4548 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4549 ()
    val x_4418: (real32, real32) tuple = (x_4397, maxInt_45)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4552
  block L_4552 (env_1756: unit)
    call L_4553 (-_5 (env_1756, x_4418)) handle _ => raise
  block L_4553 (x_4419: real32)
    val x_4420: (real32, real32) tuple = (x_4419, half_49)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4554
  block L_4554 (env_1757: unit)
    call L_4555 (>=_9 (env_1757, x_4420)) handle _ => raise
  block L_4555 (x_4421: bool)
    case x_4421 of
      true => L_4557 | false => L_4556
  block L_4556 ()
    return (maxInt'_42)
  block L_4557 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4550 ()
    return (maxInt'_42)
  block L_4551 ()
    return (maxInt'_42)
  block L_4541 ()
    case x_4399 of
      TO_POSINF_0 => L_4561
    | TO_NEAREST_0 => L_4560
    | TO_ZERO_0 => L_4559
    | TO_NEGINF_0 => L_4558
  block L_4558 ()
    val x_4422: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4397)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4562
  block L_4562 (env_1758: unit)
    call tail toInt8Unsafe_3 (env_1758, x_4422)
  block L_4559 ()
    val x_4423: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4397)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4563
  block L_4563 (env_1759: unit)
    call tail toInt8Unsafe_3 (env_1759, x_4423)
  block L_4560 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4564
  block L_4564 (env_1760: unit)
    call L_4565 (x_3492 (env_1760, x_951 (*()*))) handle _ => raise
  block L_4565 (m'_31: t_9)
    case setRoundingMode_64 of
      setRoundingModeEnv_0 => L_4566
  block L_4566 (env_1761: (lambdas_223, word32) tuple)
    call L_4567 (setRoundingMode_3 (env_1761, x_950 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4567 (x_4424: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4568
  block L_4568 (env_1762: unit)
    call L_4569 (round_3 (env_1762, x_4397)) handle _ => raise
  block L_4569 (x_4425: real32)
    case setRoundingMode_64 of
      setRoundingModeEnv_0 => L_4570
  block L_4570 (env_1763: (lambdas_223, word32) tuple)
    call L_4571 (setRoundingMode_3 (env_1763, m'_31)) handle _ => raise
  block L_4571 (x_4426: unit)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4572
  block L_4572 (env_1764: unit)
    call tail toInt8Unsafe_3 (env_1764, x_4425)
  block L_4561 ()
    val x_4427: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4397)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4573
  block L_4573 (env_1765: unit)
    call tail toInt8Unsafe_3 (env_1765, x_4427)
fun x_4428 (env_1766: (real32, real32, lambdas_99) tuple, x_4429: t_9):
  {returns = Some (lambdas_213), raises = Some (exn)} =
L_4574 ()
  block L_4574 ()
    val minInt_46: real32 = #0 (env_1766)
    val maxInt_46: real32 = #1 (env_1766)
    val setRoundingMode_65: lambdas_99 = #2 (env_1766)
    val x_4431: (lambdas_99, t_9, real32, real32) tuple =
      (setRoundingMode_65, x_4429, maxInt_46, minInt_46)
    val x_4430: lambdas_213 = con xEnv_202 (x_4431)
    return (x_4430)
fun x_4432 (env_1767: (lambdas_99, t_9, real32, real32) tuple, x_4433: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4575 ()
  block L_4575 ()
    val setRoundingMode_66: lambdas_99 = #0 (env_1767)
    val x_4435: t_9 = #1 (env_1767)
    val maxInt_47: real32 = #2 (env_1767)
    val minInt_47: real32 = #3 (env_1767)
    val x_4434: (real32, real32) tuple = (minInt_47, x_4433)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4576
  block L_4576 (env_1768: unit)
    call L_4577 (<=_6 (env_1768, x_4434)) handle _ => raise
  block L_4577 (x_4436: bool)
    case x_4436 of
      true => L_4579 | false => L_4578
  block L_4578 ()
    val x_4437: (real32, real32) tuple = (x_4433, minInt_47)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4580
  block L_4580 (env_1769: unit)
    call L_4581 (<_9 (env_1769, x_4437)) handle _ => raise
  block L_4581 (x_4438: bool)
    case x_4438 of
      true => L_4583 | false => L_4582
  block L_4582 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4583 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4579 ()
    val x_4439: (real32, real32) tuple = (x_4433, maxInt_47)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4584
  block L_4584 (env_1770: unit)
    call L_4585 (<=_6 (env_1770, x_4439)) handle _ => raise
  block L_4585 (x_4440: bool)
    case x_4440 of
      true => L_4587 | false => L_4586
  block L_4586 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4587 ()
    case x_4435 of
      TO_POSINF_0 => L_4591
    | TO_NEAREST_0 => L_4590
    | TO_ZERO_0 => L_4589
    | TO_NEGINF_0 => L_4588
  block L_4588 ()
    val x_4441: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4433)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4592
  block L_4592 (env_1771: unit)
    call tail toInt8Unsafe_3 (env_1771, x_4441)
  block L_4589 ()
    val x_4442: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4433)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4593
  block L_4593 (env_1772: unit)
    call tail toInt8Unsafe_3 (env_1772, x_4442)
  block L_4590 ()
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4594
  block L_4594 (env_1773: unit)
    call L_4595 (x_3492 (env_1773, x_948 (*()*))) handle _ => raise
  block L_4595 (m'_32: t_9)
    case setRoundingMode_66 of
      setRoundingModeEnv_0 => L_4596
  block L_4596 (env_1774: (lambdas_223, word32) tuple)
    call L_4597 (setRoundingMode_3 (env_1774, x_947 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4597 (x_4443: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4598
  block L_4598 (env_1775: unit)
    call L_4599 (round_3 (env_1775, x_4433)) handle _ => raise
  block L_4599 (x_4444: real32)
    case setRoundingMode_66 of
      setRoundingModeEnv_0 => L_4600
  block L_4600 (env_1776: (lambdas_223, word32) tuple)
    call L_4601 (setRoundingMode_3 (env_1776, m'_32)) handle _ => raise
  block L_4601 (x_4445: unit)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4602
  block L_4602 (env_1777: unit)
    call tail toInt8Unsafe_3 (env_1777, x_4444)
  block L_4591 ()
    val x_4446: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4433)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4603
  block L_4603 (env_1778: unit)
    call tail toInt8Unsafe_3 (env_1778, x_4446)
fun x_2075 (env_1779: (lambdas_162, lambdas_161, word8) tuple, x_4447: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_4604 ()
  block L_4604 ()
    val <<_32: lambdas_162 = #0 (env_1779)
    val >>_31: lambdas_161 = #1 (env_1779)
    val maxInt'_43: word8 = #2 (env_1779)
    val x_4448: (word8, word32) tuple = (maxInt'_43, x_4447)
    case >>_31 of
      >>Env_7 => L_4605
  block L_4605 (env_1780: (word32, word8) tuple)
    call L_4606 (>>_23 (env_1780, x_4448)) handle _ => raise
  block L_4606 (x_4449: word8)
    val x_4450: (word8, word32) tuple = (x_4449, x_4447)
    case <<_32 of
      <<Env_7 => L_4607
  block L_4607 (env_1781: (word32, word8) tuple)
    call tail <<_23 (env_1781, x_4450)
fun x_4451 (env_1782: lambdas_99, x_4452: t_9):
  {returns = Some (lambdas_217), raises = Some (exn)} =
L_4608 ()
  block L_4608 ()
    val x_4454: (t_9, lambdas_99) tuple = (x_4452, env_1782)
    val x_4453: lambdas_217 = con xEnv_207 (x_4454)
    return (x_4453)
fun x_4455 (env_1783: (t_9, lambdas_99) tuple, x_4456: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_4609 ()
  block L_4609 ()
    val x_4457: t_9 = #0 (env_1783)
    val setRoundingMode_67: lambdas_99 = #1 (env_1783)
    case x_937 (*con xEnv_54 (x_936)*) of
      xEnv_54 => L_4610
  block L_4610 (env_1784: unit)
    call L_4611 (x_3492 (env_1784, x_945 (*()*))) handle _ => raise
  block L_4611 (m'_33: t_9)
    case setRoundingMode_67 of
      setRoundingModeEnv_0 => L_4612
  block L_4612 (env_1785: (lambdas_223, word32) tuple)
    call L_4613 (setRoundingMode_3 (env_1785, x_4457)) handle _ => raise
  block L_4613 (x_4458: unit)
    case fromReal32Unsafe_0 (*con fromRe ... _213)*) of
      fromReal32UnsafeEnv_0 => L_4614
  block L_4614 (env_1786: unit)
    call L_4615 (fromReal32Unsafe_3 (env_1786, x_4456)) handle _ => raise
  block L_4615 (x_4459: real32)
    case setRoundingMode_67 of
      setRoundingModeEnv_0 => L_4616
  block L_4616 (env_1787: (lambdas_223, word32) tuple)
    call L_4617 (setRoundingMode_3 (env_1787, m'_33)) handle _ => raise
  block L_4617 (x_4460: unit)
    return (x_4459)
fun x_4461 (env_1788: unit, x_4462: t_9):
  {returns = Some (lambdas_363), raises = Some (exn)} =
L_4618 ()
  block L_4618 ()
    return (fromReal32Unsafe_0 (*con fromRe ... _213)*))
fun class_21 (env_1789: (word32, word32, word32) tuple, x_4463: real32):
  {returns = Some (float_class_0), raises = Some (exn)} =
L_4619 ()
  block L_4619 ()
    val zero_59: word32 = #0 (env_1789)
    val significandMask_3: word32 = #1 (env_1789)
    val exponentMask_3: word32 = #2 (env_1789)
    val x_4465: word32 = prim Real32_castToWord32 (x_4463)
    val x_4464: (word32, word32) tuple = (x_4465, exponentMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4620
  block L_4620 (env_1790: unit)
    call L_4621 (andb_3 (env_1790, x_4464)) handle _ => raise
  block L_4621 (x_4466: word32)
    val x_4467: (word32, word32) tuple = (x_4466, exponentMask_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4622
  block L_4622 (env_1791: unit)
    call L_4623 (x_2054 (env_1791, x_4467)) handle _ => raise
  block L_4623 (x_4468: bool)
    case x_4468 of
      true => L_4625 | false => L_4624
  block L_4624 ()
    val x_4469: (word32, word32) tuple = (x_4465, exponentMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4626
  block L_4626 (env_1792: unit)
    call L_4627 (andb_3 (env_1792, x_4469)) handle _ => raise
  block L_4627 (x_4470: word32)
    val x_4471: (word32, word32) tuple = (x_4470, zero_59)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4628
  block L_4628 (env_1793: unit)
    call L_4629 (x_2054 (env_1793, x_4471)) handle _ => raise
  block L_4629 (x_4472: bool)
    case x_4472 of
      true => L_4631 | false => L_4630
  block L_4630 ()
    return (x_942 (*con NORMAL_1*))
  block L_4631 ()
    val x_4473: (word32, word32) tuple = (x_4465, significandMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4632
  block L_4632 (env_1794: unit)
    call L_4633 (andb_3 (env_1794, x_4473)) handle _ => raise
  block L_4633 (x_4474: word32)
    val x_4475: (word32, word32) tuple = (x_4474, zero_59)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4634
  block L_4634 (env_1795: unit)
    call L_4635 (x_2054 (env_1795, x_4475)) handle _ => raise
  block L_4635 (x_4476: bool)
    case x_4476 of
      true => L_4637 | false => L_4636
  block L_4636 ()
    return (x_941 (*con SUBNORMAL_1*))
  block L_4637 ()
    return (x_940 (*con ZERO_1*))
  block L_4625 ()
    val x_4477: (word32, word32) tuple = (x_4465, significandMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4638
  block L_4638 (env_1796: unit)
    call L_4639 (andb_3 (env_1796, x_4477)) handle _ => raise
  block L_4639 (x_4478: word32)
    val x_4479: (word32, word32) tuple = (x_4478, zero_59)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4640
  block L_4640 (env_1797: unit)
    call L_4641 (x_2054 (env_1797, x_4479)) handle _ => raise
  block L_4641 (x_4480: bool)
    case x_4480 of
      true => L_4643 | false => L_4642
  block L_4642 ()
    return (x_939 (*con NAN_1*))
  block L_4643 ()
    return (x_938 (*con INF_0*))
fun mkMask_0 (env_1798: (lambdas_114, word32) tuple, x_4481: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4644 ()
  block L_4644 ()
    val <<_33: lambdas_114 = #0 (env_1798)
    val zero_60: word32 = #1 (env_1798)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_4645
  block L_4645 (env_1799: unit)
    call L_4646 (notb_6 (env_1799, zero_60)) handle _ => raise
  block L_4646 (x_4482: word32)
    val x_4483: (word32, word32) tuple = (x_4482, x_4481)
    case <<_33 of
      <<Env_1 => L_4647
  block L_4647 (env_1800: (word32, word32) tuple)
    call L_4648 (<<_8 (env_1800, x_4483)) handle _ => raise
  block L_4648 (x_4484: word32)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_4649
  block L_4649 (env_1801: unit)
    call tail notb_6 (env_1801, x_4484)
fun x_3492 (env_1802: unit, x_4485: unit):
  {returns = Some (t_9), raises = Some (exn)} =
L_4650 ()
  block L_4650 ()
    val x_4487: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = IEEEReal_getRoundingMode} ()
    val x_4486: (word32, word32) tuple = (x_4487, FE_TONEAREST_0 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4651
  block L_4651 (env_1803: unit)
    call L_4652 (x_2054 (env_1803, x_4486)) handle _ => raise
  block L_4652 (x_4488: bool)
    case x_4488 of
      true => L_4654 | false => L_4653
  block L_4653 ()
    val x_4489: (word32, word32) tuple = (x_4487, FE_DOWNWARD_0 (*0x400:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4655
  block L_4655 (env_1804: unit)
    call L_4656 (x_2054 (env_1804, x_4489)) handle _ => raise
  block L_4656 (x_4490: bool)
    case x_4490 of
      true => L_4658 | false => L_4657
  block L_4657 ()
    val x_4491: (word32, word32) tuple = (x_4487, FE_UPWARD_0 (*0x800:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4659
  block L_4659 (env_1805: unit)
    call L_4660 (x_2054 (env_1805, x_4491)) handle _ => raise
  block L_4660 (x_4492: bool)
    case x_4492 of
      true => L_4662 | false => L_4661
  block L_4661 ()
    val x_4493: (word32, word32) tuple = (x_4487, FE_TOWARDZERO_0 (*0xC00:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4663
  block L_4663 (env_1806: unit)
    call L_4664 (x_2054 (env_1806, x_4493)) handle _ => raise
  block L_4664 (x_4494: bool)
    case x_4494 of
      true => L_4666 | false => L_4665
  block L_4665 ()
    raise (x_935 (*con Fail_0 (x_934)*))
  block L_4666 ()
    return (x_932 (*con TO_ZERO_0*))
  block L_4662 ()
    return (x_931 (*con TO_POSINF_0*))
  block L_4658 ()
    return (x_930 (*con TO_NEGINF_0*))
  block L_4654 ()
    return (x_929 (*con TO_NEAREST_0*))
fun setRoundingMode_3 (env_1807: (lambdas_223, word32) tuple, x_4495: t_9):
  {returns = Some (unit), raises = Some (exn)} =
L_4667 ()
  block L_4667 ()
    val errorMsg_3: lambdas_223 = #0 (env_1807)
    val inval_1: word32 = #1 (env_1807)
    case x_4495 of
      TO_NEAREST_0 => L_4671
    | TO_POSINF_0 => L_4670
    | TO_ZERO_0 => L_4669
    | TO_NEGINF_0 => L_4668
  block L_4668 ()
    goto L_4672 (FE_DOWNWARD_0 (*0x400:w32*))
  block L_4669 ()
    goto L_4672 (FE_TOWARDZERO_0 (*0xC00:w32*))
  block L_4670 ()
    goto L_4672 (FE_UPWARD_0 (*0x800:w32*))
  block L_4671 ()
    goto L_4672 (FE_TONEAREST_0 (*0x0:w32*))
  block L_4672 (x_4496: word32)
    val x_4497: (word32, word32) tuple =
      (x_4496, FE_NOSUPPORT_0 (*0xFFFFFFFF:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4673
  block L_4673 (env_1808: unit)
    call L_4674 (x_2054 (env_1808, x_4497)) handle _ => raise
  block L_4674 (x_4498: bool)
    case x_4498 of
      true => L_4676 | false => L_4675
  block L_4675 ()
    val x_4500: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = IEEEReal_setRoundingMode} (x_4496)
    val x_4499: (word32, word32) tuple = (x_4500, x_927 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4677
  block L_4677 (env_1809: unit)
    call L_4678 (x_2054 (env_1809, x_4499)) handle _ => raise
  block L_4678 (x_4501: bool)
    case x_4501 of
      true => L_4680 | false => L_4679
  block L_4679 ()
    case errorMsg_3 of
      errorMsgEnv_0 => L_4681
  block L_4681 (env_1810: (cpointer, lambdas_485) tuple)
    call L_4682 (errorMsg_2 (env_1810, inval_1)) handle _ => raise
  block L_4682 (x_4502: (word8) vector)
    val x_4506: t_0 = con SOME_0 (inval_1)
    val x_4505: ((word8) vector, t_0) tuple = (x_4502, x_4506)
    val x_4504: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1476, x_4505)
    val x_4503: exn = con SysErr_0 (x_4504)
    raise (x_4503)
  block L_4680 ()
    return (x_928 (*()*))
  block L_4676 ()
    raise (x_926 (*con Fail_0 (x_925)*))
fun x_2875 (env_1811: unit, x_4507: unit):
  {returns = Some (lambdas_224), raises = Some (exn)} =
L_4683 ()
  block L_4683 ()
    return (x_920 (*con xEnv_52 (x_919)*))
fun x_2892 (env_1812: unit, x_4508: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4684 ()
  block L_4684 ()
    return (x_918 (*()*))
fun raiseSys_7 (env_1813: lambdas_223, x_4509: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4685 ()
  block L_4685 ()
    case env_1813 of
      errorMsgEnv_0 => L_4686
  block L_4686 (env_1814: (cpointer, lambdas_485) tuple)
    call L_4687 (errorMsg_2 (env_1814, x_4509)) handle _ => raise
  block L_4687 (x_4510: (word8) vector)
    val x_4514: t_0 = con SOME_0 (x_4509)
    val x_4513: ((word8) vector, t_0) tuple = (x_4510, x_4514)
    val x_4512: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1476, x_4513)
    val x_4511: exn = con SysErr_0 (x_4512)
    raise (x_4511)
fun raiseSys_4 (env_1815: lambdas_223, x_4515: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4688 ()
  block L_4688 ()
    case env_1815 of
      errorMsgEnv_0 => L_4689
  block L_4689 (env_1816: (cpointer, lambdas_485) tuple)
    call L_4690 (errorMsg_2 (env_1816, x_4515)) handle _ => raise
  block L_4690 (x_4516: (word8) vector)
    val x_4520: t_0 = con SOME_0 (x_4515)
    val x_4519: ((word8) vector, t_0) tuple = (x_4516, x_4520)
    val x_4518: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1476, x_4519)
    val x_4517: exn = con SysErr_0 (x_4518)
    raise (x_4517)
fun errorMsg_2 (env_1817: (cpointer, lambdas_485) tuple, x_4521: word32):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4691 ()
  block L_4691 ()
    val null_1: cpointer = #0 (env_1817)
    val arrayAlloc_3: lambdas_485 = #1 (env_1817)
    val x_4522: word64 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_Error_strError} (x_4521)
    case fromWord_0 (*con fromWo ... _190)*) of
      fromWordEnv_0 => L_4692
  block L_4692 (env_1818: unit)
    call L_4693 (fromWord_2 (env_1818, x_4522)) handle _ => raise
  block L_4693 (x_4523: cpointer)
    val x_4524: bool = prim MLton_equal[cpointer] (x_4523, null_1)
    case x_4524 of
      true => L_4695 | false => L_4694
  block L_4694 ()
    call L_4696 (loop_31 (x_4522, x_913 (*0x0:w32*))) handle _ => raise
  block L_4696 (x_4525: word32)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_4697
  block L_4697 (env_1819: unit)
    call L_4698 (fromIntForLength_1 (env_1819, x_4525)) handle _ => raise
  block L_4698 (x_4526: word64)
    case arrayAlloc_3 of
      arrayAllocEnv_0 => L_4699
  block L_4699 (env_1820: word64)
    call L_4700 (arrayAlloc_4 (env_1820, x_4526)) handle _ => raise
  block L_4700 (a_1: (word8) array)
    val tuple_105: (word64, word64, (word8) array) tuple = (x_4526, x_4522, a_1)
    call L_4701 (loop_32 (tuple_105, x_1477)) handle _ => raise
  block L_4701 (b_14: unit)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_4702
  block L_4702 (env_1821: unit)
    call L_4703 (x_4527 (env_1821, a_1)) handle _ => raise
  block L_4703 (x_4528: (word8) array)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_4704
  block L_4704 (env_1822: unit)
    call tail x_1795 (env_1822, x_4528)
  block L_4695 ()
    return (x_909 (*"Unknown error"*))
fun loop_32 (env_1823: (word64, word64, (word8) array) tuple,
             x_4529: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4705 ()
  block L_4705 ()
    val x_4531: word64 = #0 (env_1823)
    val x_4532: word64 = #1 (env_1823)
    val a_2: (word8) array = #2 (env_1823)
    val b_15: unit = #1 (x_4529)
    val i_6: word64 = #0 (x_4529)
    val x_4530: (word64, word64) tuple = (i_6, x_4531)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_4706
  block L_4706 (env_1824: unit)
    call L_4707 (>=_7 (env_1824, x_4530)) handle _ => raise
  block L_4707 (x_4533: bool)
    case x_4533 of
      true => L_4709 | false => L_4708
  block L_4708 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_4710
  block L_4710 (env_1825: unit)
    call L_4711 (sextdFromInt64ToInt32_1 (env_1825, i_6)) handle _ => raise
  block L_4711 (x_4534: word32)
    val x_4535: (word64, word32) tuple = (x_4532, x_4534)
    case sub_0 (*con subEnv ... e_39)*) of
      subEnv_0 => L_4712
  block L_4712 (env_1826: unit)
    call L_4713 (sub_1 (env_1826, x_4535)) handle _ => raise
  block L_4713 (x_4536: word8)
    val x_4537: ((word8) array, word64, word8) tuple = (a_2, i_6, x_4536)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_4714
  block L_4714 (env_1827: unit)
    call L_4715 (x_2554 (env_1827, x_4537)) handle _ => raise
  block L_4715 (x_4538: unit)
    val x_4539: (word64, word64) tuple = (i_6, x_916 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_4716
  block L_4716 (env_1828: unit)
    call L_4717 (+!_2 (env_1828, x_4539)) handle _ => raise
  block L_4717 (x_4540: word64)
    val x_4541: (word64, unit) tuple = (x_4540, x_915 (*()*))
    call tail loop_32 (env_1823, x_4541)
  block L_4709 ()
    return (b_15)
fun loop_31 (env_1829: word64, x_4542: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4718 ()
  block L_4718 ()
    val x_4543: (word64, word32) tuple = (env_1829, x_4542)
    case sub_0 (*con subEnv ... e_39)*) of
      subEnv_0 => L_4719
  block L_4719 (env_1830: unit)
    call L_4720 (sub_1 (env_1830, x_4543)) handle _ => raise
  block L_4720 (x_4544: word8)
    case8 x_4544 of
      0x0:w8 => L_4721 | _ => L_4722
  block L_4722 ()
    goto L_4723 (x_910 (*con false*))
  block L_4721 ()
    goto L_4723 (x_911 (*con true*))
  block L_4723 (x_4545: bool)
    case x_4545 of
      true => L_4725 | false => L_4724
  block L_4724 ()
    val x_4546: (word32, word32) tuple = (x_4542, x_912 (*0x1:w32*))
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_4726
  block L_4726 (env_1831: unit)
    call L_4727 (+!_3 (env_1831, x_4546)) handle _ => raise
  block L_4727 (x_4547: word32)
    call tail loop_31 (env_1829, x_4547)
  block L_4725 ()
    return (x_4542)
fun x_4548 (env_1832: (lambdas_31, list_3) tuple, x_4549: exn):
  {returns = Some (t_2), raises = Some (exn)} =
L_4728 ()
  block L_4728 ()
    val concat_5: lambdas_31 = #0 (env_1832)
    val errorNames_1: list_3 = #1 (env_1832)
    case x_4549 of
      SysErr_0 => L_4729 | _ => L_4730
  block L_4730 ()
    case x_896 (*con xEnv_51 (x_895)*) of
      xEnv_51 => L_4731
  block L_4731 (env_1833: unit)
    call tail x_4550 (env_1833, x_897 (*()*))
  block L_4729 (x_4551: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_4554: ((word8) vector, t_0) tuple = #1 (x_4551)
    val x_4553: (unit) ref = #0 (x_4551)
    val x_4552: bool = prim MLton_equal[(unit) ref] (x_4553, x_1476)
    case x_4552 of
      true => L_4733 | false => L_4732
  block L_4732 ()
    case x_896 (*con xEnv_51 (x_895)*) of
      xEnv_51 => L_4734
  block L_4734 (env_1834: unit)
    call tail x_4550 (env_1834, x_908 (*()*))
  block L_4733 ()
    val x_4556: t_0 = #1 (x_4554)
    val x_4555: (word8) vector = #0 (x_4554)
    case x_4556 of
      NONE_1 => L_4736 | SOME_0 => L_4735
  block L_4735 (x_4557: word32)
    call L_4737 (loop_33 (x_4557, errorNames_1)) handle _ => raise
  block L_4737 (x_4558: t_27)
    case x_4558 of
      NONE_4 => L_4739 | SOME_20 => L_4738
  block L_4738 (x_4559: (word32, (word8) vector) tuple)
    val x_4560: (word8) vector = #1 (x_4559)
    goto L_4740 (x_4560)
  block L_4739 ()
    goto L_4740 (x_905 (*"<UNKNOWN>"*))
  block L_4740 (x_4561: (word8) vector)
    val x_4565: ((word8) vector, list_7) tuple =
      (x_4561, x_903 (*con ::_1 (x_902)*))
    val x_4564: list_7 = con ::_1 (x_4565)
    val x_4563: ((word8) vector, list_7) tuple = (x_906 (*" ["*), x_4564)
    val x_4562: list_7 = con ::_1 (x_4563)
    case concat_5 of
      concatEnv_0 => L_4741
  block L_4741 (env_1835: (lambdas_494, lambdas_485, lambdas_495) tuple)
    call L_4742 (concat_2 (env_1835, x_4562)) handle _ => raise
  block L_4736 ()
    goto L_4742 (x_899 (*""*))
  block L_4742 (x_4566: (word8) vector)
    val x_4572: ((word8) vector, list_7) tuple = (x_4566, x_898 (*con nil_3*))
    val x_4571: list_7 = con ::_1 (x_4572)
    val x_4570: ((word8) vector, list_7) tuple = (x_4555, x_4571)
    val x_4569: list_7 = con ::_1 (x_4570)
    val x_4568: ((word8) vector, list_7) tuple = (x_907 (*"SysErr: "*), x_4569)
    val x_4567: list_7 = con ::_1 (x_4568)
    case concat_5 of
      concatEnv_0 => L_4743
  block L_4743 (env_1836: (lambdas_494, lambdas_485, lambdas_495) tuple)
    call L_4744 (concat_2 (env_1836, x_4567)) handle _ => raise
  block L_4744 (x_4573: (word8) vector)
    val x_4574: t_2 = con SOME_1 (x_4573)
    return (x_4574)
fun loop_33 (env_1837: word32, x_4575: list_3):
  {returns = Some (t_27), raises = Some (exn)} =
L_4745 ()
  block L_4745 ()
    case x_4575 of
      nil_5 => L_4747 | ::_6 => L_4746
  block L_4746 (x_4576: ((word32, (word8) vector) tuple, list_3) tuple)
    val x_4579: list_3 = #1 (x_4576)
    val x_4578: (word32, (word8) vector) tuple = #0 (x_4576)
    val m_0: word32 = #0 (x_4578)
    val x_4577: (word32, word32) tuple = (env_1837, m_0)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4748
  block L_4748 (env_1838: unit)
    call L_4749 (x_2054 (env_1838, x_4577)) handle _ => raise
  block L_4749 (x_4580: bool)
    case x_4580 of
      true => L_4751 | false => L_4750
  block L_4750 ()
    call tail loop_33 (env_1837, x_4579)
  block L_4751 ()
    val x_4581: t_27 = con SOME_20 (x_4578)
    return (x_4581)
  block L_4747 ()
    return (x_904 (*con NONE_4*))
fun x_4550 (env_1839: unit, unit_9: unit):
  {returns = Some (t_2), raises = Some (exn)} =
L_4752 ()
  block L_4752 ()
    return (x_894 (*con NONE_3*))
fun ::?_1 (env_1840: unit,
           x_4582: ((word32, (word8) vector) tuple, list_3) tuple):
  {returns = Some (list_3), raises = Some (exn)} =
L_4753 ()
  block L_4753 ()
    val x_4585: list_3 = #1 (x_4582)
    val x_4584: (word32, (word8) vector) tuple = #0 (x_4582)
    val x_4583: word32 = #0 (x_4584)
    case fromRep_0 (*con fromRe ... _811)*) of
      fromRepEnv_0 => L_4754
  block L_4754 (env_1841: unit)
    call L_4755 (fromRep_1 (env_1841, x_812 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_4755 (x_4586: word32)
    val x_4587: (word32, word32) tuple = (x_4583, x_4586)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4756
  block L_4756 (env_1842: unit)
    call L_4757 (x_2054 (env_1842, x_4587)) handle _ => raise
  block L_4757 (x_4588: bool)
    case x_4588 of
      true => L_4759 | false => L_4758
  block L_4758 ()
    val x_4589: list_3 = con ::_6 (x_4582)
    return (x_4589)
  block L_4759 ()
    return (x_4585)
fun fromRep_1 (env_1843: unit, x_4590: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4760 ()
  block L_4760 ()
    return (x_4590)
fun toRep_2 (env_1844: unit, x_4591: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4761 ()
  block L_4761 ()
    return (x_4591)
fun toRep_3 (env_1845: unit, x_4592: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4762 ()
  block L_4762 ()
    return (x_4592)
fun new_2 (env_1846: unit, x_4593: unit):
  {returns = Some ((list_2) ref), raises = Some (exn)} =
L_4763 ()
  block L_4763 ()
    val x_4594: (list_2) ref = prim Ref_ref[list_2] (x_806 (*con nil_4*))
    return (x_4594)
fun sub_1 (env_1847: unit, x_4595: (word64, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4764 ()
  block L_4764 ()
    val i_7: word32 = #1 (x_4595)
    val cs_0: word64 = #0 (x_4595)
    case fromWord_0 (*con fromWo ... _190)*) of
      fromWordEnv_0 => L_4765
  block L_4765 (env_1848: unit)
    call L_4766 (fromWord_2 (env_1848, cs_0)) handle _ => raise
  block L_4766 (x_4596: cpointer)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_4767
  block L_4767 (env_1849: unit)
    call L_4768 (sextdFromInt32ToInt64_1 (env_1849, i_7)) handle _ => raise
  block L_4768 (x_4597: word64)
    val x_4598: word8 = prim CPointer_getWord8 (x_4596, x_4597)
    case idFromWord8_0 (*con idFrom ... _202)*) of
      idFromWord8Env_0 => L_4769
  block L_4769 (env_1850: unit)
    call tail idFromWord8_1 (env_1850, x_4598)
fun x_4599 (env_1851: lambdas_31, x_4600: exn):
  {returns = Some (t_2), raises = Some (exn)} =
L_4770 ()
  block L_4770 ()
    case x_4600 of
      Fail_0 => L_4771 | _ => L_4772
  block L_4772 ()
    case x_801 (*con xEnv_50 (x_800)*) of
      xEnv_50 => L_4773
  block L_4773 (env_1852: unit)
    call tail x_4601 (env_1852, x_802 (*()*))
  block L_4771 (x_4602: ((unit) ref, (word8) vector) tuple)
    val x_4605: (word8) vector = #1 (x_4602)
    val x_4604: (unit) ref = #0 (x_4602)
    val x_4603: bool = prim MLton_equal[(unit) ref] (x_4604, x_1456)
    case x_4603 of
      true => L_4775 | false => L_4774
  block L_4774 ()
    case x_801 (*con xEnv_50 (x_800)*) of
      xEnv_50 => L_4776
  block L_4776 (env_1853: unit)
    call tail x_4601 (env_1853, x_805 (*()*))
  block L_4775 ()
    val x_4609: ((word8) vector, list_7) tuple = (x_4605, x_803 (*con nil_3*))
    val x_4608: list_7 = con ::_1 (x_4609)
    val x_4607: ((word8) vector, list_7) tuple = (x_804 (*"Fail: "*), x_4608)
    val x_4606: list_7 = con ::_1 (x_4607)
    case env_1851 of
      concatEnv_0 => L_4777
  block L_4777 (env_1854: (lambdas_494, lambdas_485, lambdas_495) tuple)
    call L_4778 (concat_2 (env_1854, x_4606)) handle _ => raise
  block L_4778 (x_4610: (word8) vector)
    val x_4611: t_2 = con SOME_1 (x_4610)
    return (x_4611)
fun x_4601 (env_1855: unit, unit_10: unit):
  {returns = Some (t_2), raises = Some (exn)} =
L_4779 ()
  block L_4779 ()
    return (x_799 (*con NONE_3*))
fun loop_10 (env_1856: (word64, (word8) array, word8) tuple,
             x_4612: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4780 ()
  block L_4780 ()
    val x_4614: word64 = #0 (env_1856)
    val a_3: (word8) array = #1 (env_1856)
    val x_4615: word8 = #2 (env_1856)
    val b_16: unit = #1 (x_4612)
    val i_8: word64 = #0 (x_4612)
    val x_4613: (word64, word64) tuple = (i_8, x_4614)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_4781
  block L_4781 (env_1857: unit)
    call L_4782 (>=_7 (env_1857, x_4613)) handle _ => raise
  block L_4782 (x_4616: bool)
    case x_4616 of
      true => L_4784 | false => L_4783
  block L_4783 ()
    val x_4617: ((word8) array, word64, word8) tuple = (a_3, i_8, x_4615)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_4785
  block L_4785 (env_1858: unit)
    call L_4786 (x_2554 (env_1858, x_4617)) handle _ => raise
  block L_4786 (x_4618: unit)
    val x_4619: (word64, word64) tuple = (i_8, x_797 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_4787
  block L_4787 (env_1859: unit)
    call L_4788 (+!_2 (env_1859, x_4619)) handle _ => raise
  block L_4788 (x_4620: word64)
    val x_4621: (word64, unit) tuple = (x_4620, x_796 (*()*))
    call tail loop_10 (env_1856, x_4621)
  block L_4784 ()
    return (b_16)
fun >>_9 (env_1860: (word32, word64) tuple, x_4622: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4789 ()
  block L_4789 ()
    val sizeInBitsWord_16: word32 = #0 (env_1860)
    val zero_61: word64 = #1 (env_1860)
    val n_1: word32 = #1 (x_4622)
    val i_9: word64 = #0 (x_4622)
    val x_4623: (word32, word32) tuple = (n_1, sizeInBitsWord_16)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4790
  block L_4790 (env_1861: unit)
    call L_4791 (>=_10 (env_1861, x_4623)) handle _ => raise
  block L_4791 (x_4624: bool)
    case x_4624 of
      true => L_4793 | false => L_4792
  block L_4792 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4794
  block L_4794 (env_1862: unit)
    call L_4795 (zextdFromWord32ToWord32_1 (env_1862, n_1)) handle _ => raise
  block L_4795 (x_4625: word32)
    val x_4626: (word64, word32) tuple = (i_9, x_4625)
    case >>?_3 (*con >>?Env_3 (x_150)*) of
      >>?Env_3 => L_4796
  block L_4796 (env_1863: unit)
    call tail >>?_4 (env_1863, x_4626)
  block L_4793 ()
    return (zero_61)
fun <<_9 (env_1864: (word32, word64) tuple, x_4627: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4797 ()
  block L_4797 ()
    val sizeInBitsWord_17: word32 = #0 (env_1864)
    val zero_62: word64 = #1 (env_1864)
    val n_2: word32 = #1 (x_4627)
    val i_10: word64 = #0 (x_4627)
    val x_4628: (word32, word32) tuple = (n_2, sizeInBitsWord_17)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4798
  block L_4798 (env_1865: unit)
    call L_4799 (>=_10 (env_1865, x_4628)) handle _ => raise
  block L_4799 (x_4629: bool)
    case x_4629 of
      true => L_4801 | false => L_4800
  block L_4800 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4802
  block L_4802 (env_1866: unit)
    call L_4803 (zextdFromWord32ToWord32_1 (env_1866, n_2)) handle _ => raise
  block L_4803 (x_4630: word32)
    val x_4631: (word64, word32) tuple = (i_10, x_4630)
    case <<?_3 (*con <<?Env_3 (x_146)*) of
      <<?Env_3 => L_4804
  block L_4804 (env_1867: unit)
    call tail <<?_4 (env_1867, x_4631)
  block L_4801 ()
    return (zero_62)
fun x_4632 (env_1868: unit, x_4633: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4805 ()
  block L_4805 ()
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4806
  block L_4806 (env_1869: unit)
    call L_4807 (st_1 (env_1869, x_4633)) handle _ => raise
  block L_4807 (x_4634: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4808
  block L_4808 (env_1870: unit)
    call L_4809 (st_1 (env_1870, x_4634)) handle _ => raise
  block L_4809 (x_4635: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4810
  block L_4810 (env_1871: unit)
    call tail st_1 (env_1871, x_4635)
fun x_4636 (env_1872: unit, x_4637: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4811 ()
  block L_4811 ()
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4812
  block L_4812 (env_1873: unit)
    call L_4813 (st_1 (env_1873, x_4637)) handle _ => raise
  block L_4813 (x_4638: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4814
  block L_4814 (env_1874: unit)
    call tail st_1 (env_1874, x_4638)
fun x_4639 (env_1875: unit, x_4640: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4815 ()
  block L_4815 ()
    return (x_4640)
fun st_1 (env_1876: unit, x_4641: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4816 ()
  block L_4816 ()
    val sft_0: word32 = #2 (x_4641)
    val msk_0: word32 = #1 (x_4641)
    val w_1: word32 = #0 (x_4641)
    val x_4642: (word32, word32) tuple = (w_1, msk_0)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4817
  block L_4817 (env_1877: unit)
    call L_4818 (andb_3 (env_1877, x_4642)) handle _ => raise
  block L_4818 (odd_0: word32)
    val x_4643: (word32, word32) tuple = (w_1, odd_0)
    case xorb_0 (*con xorbEn ... _142)*) of
      xorbEnv_0 => L_4819
  block L_4819 (env_1878: unit)
    call L_4820 (xorb_1 (env_1878, x_4643)) handle _ => raise
  block L_4820 (evn_0: word32)
    val x_4644: (word32, word32) tuple = (odd_0, sft_0)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_4821
  block L_4821 (env_1879: unit)
    call L_4822 (<<?_5 (env_1879, x_4644)) handle _ => raise
  block L_4822 (x_4645: word32)
    val x_4646: (word32, word32) tuple = (evn_0, sft_0)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4823
  block L_4823 (env_1880: unit)
    call L_4824 (>>?_5 (env_1880, x_4646)) handle _ => raise
  block L_4824 (x_4647: word32)
    val x_4648: (word32, word32) tuple = (x_4645, x_4647)
    case xorb_0 (*con xorbEn ... _142)*) of
      xorbEnv_0 => L_4825
  block L_4825 (env_1881: unit)
    call L_4826 (xorb_1 (env_1881, x_4648)) handle _ => raise
  block L_4826 (x_4649: word32)
    val x_4650: (word32, word32) tuple = (sft_0, x_536 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4827
  block L_4827 (env_1882: unit)
    call L_4828 (>>?_5 (env_1882, x_4650)) handle _ => raise
  block L_4828 (x_4651: word32)
    val x_4652: (word32, word32) tuple = (msk_0, x_4651)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_4829
  block L_4829 (env_1883: unit)
    call L_4830 (<<?_5 (env_1883, x_4652)) handle _ => raise
  block L_4830 (x_4653: word32)
    val x_4654: (word32, word32) tuple = (msk_0, x_4653)
    case xorb_0 (*con xorbEn ... _142)*) of
      xorbEnv_0 => L_4831
  block L_4831 (env_1884: unit)
    call L_4832 (xorb_1 (env_1884, x_4654)) handle _ => raise
  block L_4832 (x_4655: word32)
    val x_4656: (word32, word32) tuple = (sft_0, x_537 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4833
  block L_4833 (env_1885: unit)
    call L_4834 (>>?_5 (env_1885, x_4656)) handle _ => raise
  block L_4834 (x_4657: word32)
    val x_4658: (word32, word32, word32) tuple = (x_4649, x_4655, x_4657)
    return (x_4658)
fun >>_11 (env_1886: (word32, word32) tuple, x_4659: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4835 ()
  block L_4835 ()
    val sizeInBitsWord_18: word32 = #0 (env_1886)
    val zero_63: word32 = #1 (env_1886)
    val n_3: word32 = #1 (x_4659)
    val i_11: word32 = #0 (x_4659)
    val x_4660: (word32, word32) tuple = (n_3, sizeInBitsWord_18)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4836
  block L_4836 (env_1887: unit)
    call L_4837 (>=_10 (env_1887, x_4660)) handle _ => raise
  block L_4837 (x_4661: bool)
    case x_4661 of
      true => L_4839 | false => L_4838
  block L_4838 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4840
  block L_4840 (env_1888: unit)
    call L_4841 (zextdFromWord32ToWord32_1 (env_1888, n_3)) handle _ => raise
  block L_4841 (x_4662: word32)
    val x_4663: (word32, word32) tuple = (i_11, x_4662)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4842
  block L_4842 (env_1889: unit)
    call tail >>?_5 (env_1889, x_4663)
  block L_4839 ()
    return (zero_63)
fun <<_8 (env_1890: (word32, word32) tuple, x_4664: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4843 ()
  block L_4843 ()
    val sizeInBitsWord_19: word32 = #0 (env_1890)
    val zero_64: word32 = #1 (env_1890)
    val n_4: word32 = #1 (x_4664)
    val i_12: word32 = #0 (x_4664)
    val x_4665: (word32, word32) tuple = (n_4, sizeInBitsWord_19)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4844
  block L_4844 (env_1891: unit)
    call L_4845 (>=_10 (env_1891, x_4665)) handle _ => raise
  block L_4845 (x_4666: bool)
    case x_4666 of
      true => L_4847 | false => L_4846
  block L_4846 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4848
  block L_4848 (env_1892: unit)
    call L_4849 (zextdFromWord32ToWord32_1 (env_1892, n_4)) handle _ => raise
  block L_4849 (x_4667: word32)
    val x_4668: (word32, word32) tuple = (i_12, x_4667)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_4850
  block L_4850 (env_1893: unit)
    call tail <<?_5 (env_1893, x_4668)
  block L_4847 ()
    return (zero_64)
fun >>_13 (env_1894: word32, x_4669: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4851 ()
  block L_4851 ()
    val n_5: word32 = #1 (x_4669)
    val i_13: word16 = #0 (x_4669)
    val x_4670: (word32, word32) tuple = (n_5, env_1894)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4852
  block L_4852 (env_1895: unit)
    call L_4853 (>=_10 (env_1895, x_4670)) handle _ => raise
  block L_4853 (x_4671: bool)
    case x_4671 of
      true => L_4855 | false => L_4854
  block L_4854 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4856
  block L_4856 (env_1896: unit)
    call L_4857 (zextdFromWord32ToWord32_1 (env_1896, n_5)) handle _ => raise
  block L_4857 (x_4672: word32)
    val x_4673: (word16, word32) tuple = (i_13, x_4672)
    case >>?_1 (*con >>?Env_1 (x_136)*) of
      >>?Env_1 => L_4858
  block L_4858 (env_1897: unit)
    call tail >>?_6 (env_1897, x_4673)
  block L_4855 ()
    return (x_285 (*0x0:w16*))
fun <<_13 (env_1898: word32, x_4674: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4859 ()
  block L_4859 ()
    val n_6: word32 = #1 (x_4674)
    val i_14: word16 = #0 (x_4674)
    val x_4675: (word32, word32) tuple = (n_6, env_1898)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4860
  block L_4860 (env_1899: unit)
    call L_4861 (>=_10 (env_1899, x_4675)) handle _ => raise
  block L_4861 (x_4676: bool)
    case x_4676 of
      true => L_4863 | false => L_4862
  block L_4862 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4864
  block L_4864 (env_1900: unit)
    call L_4865 (zextdFromWord32ToWord32_1 (env_1900, n_6)) handle _ => raise
  block L_4865 (x_4677: word32)
    val x_4678: (word16, word32) tuple = (i_14, x_4677)
    case <<?_1 (*con <<?Env_1 (x_134)*) of
      <<?Env_1 => L_4866
  block L_4866 (env_1901: unit)
    call tail <<?_6 (env_1901, x_4678)
  block L_4863 ()
    return (x_285 (*0x0:w16*))
fun >>_15 (env_1902: word32, x_4679: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4867 ()
  block L_4867 ()
    val n_7: word32 = #1 (x_4679)
    val i_15: word8 = #0 (x_4679)
    val x_4680: (word32, word32) tuple = (n_7, env_1902)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4868
  block L_4868 (env_1903: unit)
    call L_4869 (>=_10 (env_1903, x_4680)) handle _ => raise
  block L_4869 (x_4681: bool)
    case x_4681 of
      true => L_4871 | false => L_4870
  block L_4870 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4872
  block L_4872 (env_1904: unit)
    call L_4873 (zextdFromWord32ToWord32_1 (env_1904, n_7)) handle _ => raise
  block L_4873 (x_4682: word32)
    val x_4683: (word8, word32) tuple = (i_15, x_4682)
    case >>?_0 (*con >>?Env_0 (x_133)*) of
      >>?Env_0 => L_4874
  block L_4874 (env_1905: unit)
    call tail >>?_7 (env_1905, x_4683)
  block L_4871 ()
    return (x_271 (*0x0:w8*))
fun <<_15 (env_1906: word32, x_4684: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4875 ()
  block L_4875 ()
    val n_8: word32 = #1 (x_4684)
    val i_16: word8 = #0 (x_4684)
    val x_4685: (word32, word32) tuple = (n_8, env_1906)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4876
  block L_4876 (env_1907: unit)
    call L_4877 (>=_10 (env_1907, x_4685)) handle _ => raise
  block L_4877 (x_4686: bool)
    case x_4686 of
      true => L_4879 | false => L_4878
  block L_4878 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4880
  block L_4880 (env_1908: unit)
    call L_4881 (zextdFromWord32ToWord32_1 (env_1908, n_8)) handle _ => raise
  block L_4881 (x_4687: word32)
    val x_4688: (word8, word32) tuple = (i_16, x_4687)
    case <<?_0 (*con <<?Env_0 (x_131)*) of
      <<?Env_0 => L_4882
  block L_4882 (env_1909: unit)
    call tail <<?_7 (env_1909, x_4688)
  block L_4879 ()
    return (x_271 (*0x0:w8*))
fun fmt_0 (env_1910:
             (word32,
              lambdas_245,
              word64,
              word64,
              word64,
              (word8) array,
              lambdas_248,
              (bool) ref) tuple,
           x_4689: radix_0):
  {returns = Some (lambdas_285), raises = Some (exn)} =
L_4883 ()
  block L_4883 ()
    val maxNumDigits_2: word32 = #0 (env_1910)
    val quot_4: lambdas_245 = #1 (env_1910)
    val one_56: word64 = #2 (env_1910)
    val minInt'_20: word64 = #3 (env_1910)
    val zero_65: word64 = #4 (env_1910)
    val x_4694: (word8) array = #5 (env_1910)
    val x_4693: lambdas_248 = #6 (env_1910)
    val x_4692: (bool) ref = #7 (env_1910)
    val x_4691:
      (word32,
       lambdas_245,
       word64,
       word64,
       word64,
       radix_0,
       (word8) array,
       lambdas_248,
       (bool) ref) tuple =
      (maxNumDigits_2,
       quot_4,
       one_56,
       minInt'_20,
       zero_65,
       x_4689,
       x_4694,
       x_4693,
       x_4692)
    val x_4690: lambdas_285 = con xEnv_227 (x_4691)
    return (x_4690)
fun x_4695 (env_1911:
              (word32,
               lambdas_245,
               word64,
               word64,
               word64,
               radix_0,
               (word8) array,
               lambdas_248,
               (bool) ref) tuple,
            x_4696: word64):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4884 ()
  block L_4884 ()
    val maxNumDigits_3: word32 = #0 (env_1911)
    val quot_5: lambdas_245 = #1 (env_1911)
    val one_57: word64 = #2 (env_1911)
    val minInt'_21: word64 = #3 (env_1911)
    val zero_66: word64 = #4 (env_1911)
    val x_4700: radix_0 = #5 (env_1911)
    val x_4699: (word8) array = #6 (env_1911)
    val x_4698: lambdas_248 = #7 (env_1911)
    val x_4697: (bool) ref = #8 (env_1911)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_4885
  block L_4885 (env_1912: unit)
    call L_4886 (atomicBegin_1 (env_1912, x_521 (*()*))) handle _ => raise
  block L_4886 (x_4701: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_4887
  block L_4887 (env_1913: unit)
    call L_4888 (x_2648 (env_1913, x_4697)) handle _ => raise
  block L_4888 (b_17: bool)
    case b_17 of
      true => L_4890 | false => L_4889
  block L_4889 ()
    val x_4702: ((bool) ref, bool) tuple = (x_4697, x_524 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_4891
  block L_4891 (env_1914: unit)
    call L_4892 (x_2686 (env_1914, x_4702)) handle _ => raise
  block L_4892 (x_4703: unit)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_4893
  block L_4893 (env_1915: unit)
    call L_4894 (atomicEnd_1 (env_1915, x_525 (*()*))) handle _ => raise
  block L_4894 (x_4704: unit)
    goto L_4895 (x_4699)
  block L_4890 ()
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_4896
  block L_4896 (env_1916: unit)
    call L_4897 (atomicEnd_1 (env_1916, x_522 (*()*))) handle _ => raise
  block L_4897 (x_4705: unit)
    case x_4698 of
      xEnv_228 => L_4898
  block L_4898 (env_1917: (lambdas_286, word32) tuple)
    call L_4895 (x_1637 (env_1917, x_523 (*()*))) handle _ => raise
  block L_4895 (x_4706: (word8) array)
    val x_4707: ((bool) ref, bool) tuple = (x_4697, b_17)
    case radixToInt_0 (*con radixT ... _440)*) of
      radixToIntEnv_0 => L_4899
  block L_4899 (env_1918: unit)
    call L_4900 (radixToInt_1 (env_1918, x_4700)) handle _ => L_4901
  block L_4900 (x_4708: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_4902
  block L_4902 (env_1919: unit)
    call L_4903 (sextdFromInt32ToInt64_1 (env_1919, x_4708)) handle _ => L_4901
  block L_4903 (radix_1: word64)
    val tuple_106:
      (word64, word64, word64, word64, (word8) array, lambdas_245, word64) tuple =
      (radix_1, zero_66, minInt'_21, one_57, x_4706, quot_5, x_4696)
    val x_4709: (word64, word64) tuple = (x_4696, zero_66)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_4904
  block L_4904 (env_1920: unit)
    call L_4905 (<_7 (env_1920, x_4709)) handle _ => L_4901
  block L_4905 (x_4710: bool)
    case x_4710 of
      true => L_4907 | false => L_4906
  block L_4906 ()
    case ~!_1 (*con ~!Env_1 (x_165)*) of
      ~!Env_1 => L_4908
  block L_4908 (env_1921: unit)
    call L_4909 (~!_2 (env_1921, x_4696)) handle _ => L_4901
  block L_4907 ()
    goto L_4909 (x_4696)
  block L_4909 (x_4711: word64)
    val x_4712: (word32, word32) tuple = (maxNumDigits_3, x_533 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_4910
  block L_4910 (env_1922: unit)
    call L_4911 (x_1785 (env_1922, x_4712)) handle _ => L_4901
  block L_4911 (x_4713: word32)
    val x_4714: (word64, word32) tuple = (x_4711, x_4713)
    call L_4912 (loop_34 (tuple_106, x_4714)) handle _ => L_4901
  block L_4901 (x_4715: exn)
    call L_4913 (x_4716 (x_4707, x_535 (*()*))) handle _ => raise
  block L_4913 (x_4717: unit)
    raise (x_4715)
  block L_4912 (x_4718: (word8) vector)
    goto L_4914 (x_4718)
  block L_4914 (x_4719: (word8) vector)
    call L_4915 (x_4716 (x_4707, x_534 (*()*))) handle _ => raise
  block L_4915 (x_4720: unit)
    return (x_4719)
fun loop_34 (env_1923:
               (word64,
                word64,
                word64,
                word64,
                (word8) array,
                lambdas_245,
                word64) tuple,
             x_4721: (word64, word32) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4916 ()
  block L_4916 ()
    val radix_2: word64 = #0 (env_1923)
    val zero_67: word64 = #1 (env_1923)
    val minInt'_22: word64 = #2 (env_1923)
    val one_58: word64 = #3 (env_1923)
    val x_4724: (word8) array = #4 (env_1923)
    val quot_6: lambdas_245 = #5 (env_1923)
    val x_4723: word64 = #6 (env_1923)
    val i_17: word32 = #1 (x_4721)
    val q_0: word64 = #0 (x_4721)
    val x_4722: (word64, word64) tuple = (radix_2, zero_67)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_4917
  block L_4917 (env_1924: unit)
    call L_4918 (x_2300 (env_1924, x_4722)) handle _ => raise
  block L_4918 (x_4725: bool)
    case x_4725 of
      true => L_4920 | false => L_4919
  block L_4919 ()
    val x_4726: (word64, word64) tuple = (q_0, minInt'_22)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_4921
  block L_4921 (env_1925: unit)
    call L_4922 (x_2300 (env_1925, x_4726)) handle _ => raise
  block L_4922 (x_4727: bool)
    case x_4727 of
      true => L_4924 | false => L_4923
  block L_4923 ()
    goto L_4925 (x_528 (*con false*))
  block L_4924 ()
    case x_167 (*con xEnv_23 (x_166)*) of
      xEnv_23 => L_4926
  block L_4926 (env_1926: unit)
    call L_4927 (x_1591 (env_1926, one_58)) handle _ => raise
  block L_4927 (x_4728: word64)
    val x_4729: (word64, word64) tuple = (radix_2, x_4728)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_4928
  block L_4928 (env_1927: unit)
    call L_4925 (x_2300 (env_1927, x_4729)) handle _ => raise
  block L_4925 (x_4730: bool)
    case x_4730 of
      true => L_4930 | false => L_4929
  block L_4929 ()
    val x_4731: word64 = prim WordS64_rem (q_0, radix_2)
    goto L_4931 (x_4731)
  block L_4930 ()
    goto L_4931 (zero_67)
  block L_4931 (x_4732: word64)
    case ~!_1 (*con ~!Env_1 (x_165)*) of
      ~!Env_1 => L_4932
  block L_4932 (env_1928: unit)
    call L_4933 (~!_2 (env_1928, x_4732)) handle _ => raise
  block L_4933 (x_4733: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_4934
  block L_4934 (env_1929: unit)
    call L_4935 (x_2428 (env_1929, x_4733)) handle _ => raise
  block L_4935 (x_4734: word32)
    case digitToChar_0 (*con digitT ... e_37)*) of
      digitToCharEnv_0 => L_4936
  block L_4936 (env_1930: unit)
    call L_4937 (digitToChar_1 (env_1930, x_4734)) handle _ => raise
  block L_4937 (x_4735: word8)
    val x_4736: ((word8) array, word32, word8) tuple = (x_4724, i_17, x_4735)
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_4938
  block L_4938 (env_1931: unit)
    call L_4939 (update_1 (env_1931, x_4736)) handle _ => raise
  block L_4939 (x_4737: unit)
    val x_4738: (word64, word64) tuple = (q_0, radix_2)
    case quot_6 of
      quotEnv_0 => L_4940
  block L_4940 (env_1932: (word64, word64, word64) tuple)
    call L_4941 (quot_3 (env_1932, x_4738)) handle _ => raise
  block L_4941 (q_1: word64)
    val x_4739: (word64, word64) tuple = (q_1, zero_67)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_4942
  block L_4942 (env_1933: unit)
    call L_4943 (x_2300 (env_1933, x_4739)) handle _ => raise
  block L_4943 (x_4740: bool)
    case x_4740 of
      true => L_4945 | false => L_4944
  block L_4944 ()
    val x_4741: (word32, word32) tuple = (i_17, x_532 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_4946
  block L_4946 (env_1934: unit)
    call L_4947 (x_1785 (env_1934, x_4741)) handle _ => raise
  block L_4947 (x_4742: word32)
    val x_4743: (word64, word32) tuple = (q_1, x_4742)
    call tail loop_34 (env_1923, x_4743)
  block L_4945 ()
    val x_4744: (word64, word64) tuple = (x_4723, zero_67)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_4948
  block L_4948 (env_1935: unit)
    call L_4949 (<_7 (env_1935, x_4744)) handle _ => raise
  block L_4949 (x_4745: bool)
    case x_4745 of
      true => L_4951 | false => L_4950
  block L_4950 ()
    goto L_4952 (i_17)
  block L_4951 ()
    val x_4746: (word32, word32) tuple = (i_17, x_529 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_4953
  block L_4953 (env_1936: unit)
    call L_4954 (x_1785 (env_1936, x_4746)) handle _ => raise
  block L_4954 (i_18: word32)
    val x_4747: ((word8) array, word32, word8) tuple =
      (x_4724, i_18, x_530 (*0x7E:w8*))
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_4955
  block L_4955 (env_1937: unit)
    call L_4956 (update_1 (env_1937, x_4747)) handle _ => raise
  block L_4956 (x_4748: unit)
    goto L_4952 (i_18)
  block L_4952 (x_4749: word32)
    val x_4750: ((word8) array, word32, t_0) tuple =
      (x_4724, x_4749, x_531 (*con NONE_1*))
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_4957
  block L_4957 (env_1938: unit)
    call L_4958 (slice_1 (env_1938, x_4750)) handle _ => raise
  block L_4958 (x_4751: t_13)
    case vector_0 (*con vector ... e_19)*) of
      vectorEnv_0 => L_4959
  block L_4959 (env_1939: unit)
    call tail vector_1 (env_1939, x_4751)
  block L_4920 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_4716 (env_1940: ((bool) ref, bool) tuple, x_4752: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4960 ()
  block L_4960 ()
    val x_4753: (bool) ref = #0 (env_1940)
    val b_18: bool = #1 (env_1940)
    case b_18 of
      true => L_4962 | false => L_4961
  block L_4961 ()
    val x_4754: ((bool) ref, bool) tuple = (x_4753, x_527 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_4963
  block L_4963 (env_1941: unit)
    call tail x_2686 (env_1941, x_4754)
  block L_4962 ()
    return (x_526 (*()*))
fun x_1637 (env_1942: (lambdas_286, word32) tuple, x_4755: unit):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4964 ()
  block L_4964 ()
    val new_4: lambdas_286 = #0 (env_1942)
    val maxNumDigits_4: word32 = #1 (env_1942)
    val x_4756: (word32, word8) tuple = (maxNumDigits_4, x_518 (*0x0:w8*))
    case new_4 of
      newEnv_1 => L_4965
  block L_4965 (env_1943: lambdas_485)
    call tail new_3 (env_1943, x_4756)
fun >>_17 (env_1944: (word32, word64) tuple, x_4757: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4966 ()
  block L_4966 ()
    val sizeInBitsWord_20: word32 = #0 (env_1944)
    val zero_68: word64 = #1 (env_1944)
    val n_9: word32 = #1 (x_4757)
    val i_19: word64 = #0 (x_4757)
    val x_4758: (word32, word32) tuple = (n_9, sizeInBitsWord_20)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4967
  block L_4967 (env_1945: unit)
    call L_4968 (>=_10 (env_1945, x_4758)) handle _ => raise
  block L_4968 (x_4759: bool)
    case x_4759 of
      true => L_4970 | false => L_4969
  block L_4969 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4971
  block L_4971 (env_1946: unit)
    call L_4972 (zextdFromWord32ToWord32_1 (env_1946, n_9)) handle _ => raise
  block L_4972 (x_4760: word32)
    val x_4761: (word64, word32) tuple = (i_19, x_4760)
    case x_322 (*con xEnv_43 (x_321)*) of
      xEnv_43 => L_4973
  block L_4973 (env_1947: unit)
    call tail x_1545 (env_1947, x_4761)
  block L_4970 ()
    return (zero_68)
fun <<_17 (env_1948: (word32, word64) tuple, x_4762: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4974 ()
  block L_4974 ()
    val sizeInBitsWord_21: word32 = #0 (env_1948)
    val zero_69: word64 = #1 (env_1948)
    val n_10: word32 = #1 (x_4762)
    val i_20: word64 = #0 (x_4762)
    val x_4763: (word32, word32) tuple = (n_10, sizeInBitsWord_21)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4975
  block L_4975 (env_1949: unit)
    call L_4976 (>=_10 (env_1949, x_4763)) handle _ => raise
  block L_4976 (x_4764: bool)
    case x_4764 of
      true => L_4978 | false => L_4977
  block L_4977 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4979
  block L_4979 (env_1950: unit)
    call L_4980 (zextdFromWord32ToWord32_1 (env_1950, n_10)) handle _ => raise
  block L_4980 (x_4765: word32)
    val x_4766: (word64, word32) tuple = (i_20, x_4765)
    case x_320 (*con xEnv_42 (x_319)*) of
      xEnv_42 => L_4981
  block L_4981 (env_1951: unit)
    call tail x_1540 (env_1951, x_4766)
  block L_4978 ()
    return (zero_69)
fun x_2407 (env_1952:
              (word32,
               lambdas_250,
               word32,
               word32,
               word32,
               (word8) array,
               lambdas_484,
               (bool) ref) tuple,
            x_4767: word32):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4982 ()
  block L_4982 ()
    val maxNumDigits_5: word32 = #0 (env_1952)
    val quot_7: lambdas_250 = #1 (env_1952)
    val one_59: word32 = #2 (env_1952)
    val minInt'_23: word32 = #3 (env_1952)
    val zero_70: word32 = #4 (env_1952)
    val x_4770: (word8) array = #5 (env_1952)
    val x_4769: lambdas_484 = #6 (env_1952)
    val x_4768: (bool) ref = #7 (env_1952)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_4983
  block L_4983 (env_1953: unit)
    call L_4984 (atomicBegin_1 (env_1953, x_502 (*()*))) handle _ => raise
  block L_4984 (x_4771: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_4985
  block L_4985 (env_1954: unit)
    call L_4986 (x_2648 (env_1954, x_4768)) handle _ => raise
  block L_4986 (b_19: bool)
    case b_19 of
      true => L_4988 | false => L_4987
  block L_4987 ()
    val x_4772: ((bool) ref, bool) tuple = (x_4768, x_505 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_4989
  block L_4989 (env_1955: unit)
    call L_4990 (x_2686 (env_1955, x_4772)) handle _ => raise
  block L_4990 (x_4773: unit)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_4991
  block L_4991 (env_1956: unit)
    call L_4992 (atomicEnd_1 (env_1956, x_506 (*()*))) handle _ => raise
  block L_4992 (x_4774: unit)
    goto L_4993 (x_4770)
  block L_4988 ()
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_4994
  block L_4994 (env_1957: unit)
    call L_4995 (atomicEnd_1 (env_1957, x_503 (*()*))) handle _ => raise
  block L_4995 (x_4775: unit)
    case x_4769 of
      xEnv_235 => L_4996
  block L_4996 (env_1958: (lambdas_286, word32) tuple)
    call L_4993 (x_1629 (env_1958, x_504 (*()*))) handle _ => raise
  block L_4993 (x_4776: (word8) array)
    val x_4777: ((bool) ref, bool) tuple = (x_4768, b_19)
    case radixToInt_0 (*con radixT ... _440)*) of
      radixToIntEnv_0 => L_4997
  block L_4997 (env_1959: unit)
    call L_4998 (radixToInt_1 (env_1959, x_501 (*con DEC_1*))) handle _ => L_4999
  block L_4998 (x_4778: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_5000
  block L_5000 (env_1960: unit)
    call L_5001 (sextdFromInt32ToInt32_1 (env_1960, x_4778)) handle _ => L_4999
  block L_5001 (radix_3: word32)
    val tuple_107:
      (word32, word32, word32, word32, (word8) array, lambdas_250, word32) tuple =
      (radix_3, zero_70, minInt'_23, one_59, x_4776, quot_7, x_4767)
    val x_4779: (word32, word32) tuple = (x_4767, zero_70)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5002
  block L_5002 (env_1961: unit)
    call L_5003 (<_5 (env_1961, x_4779)) handle _ => L_4999
  block L_5003 (x_4780: bool)
    case x_4780 of
      true => L_5005 | false => L_5004
  block L_5004 ()
    case ~!_0 (*con ~!Env_0 (x_154)*) of
      ~!Env_0 => L_5006
  block L_5006 (env_1962: unit)
    call L_5007 (~!_3 (env_1962, x_4767)) handle _ => L_4999
  block L_5005 ()
    goto L_5007 (x_4767)
  block L_5007 (x_4781: word32)
    val x_4782: (word32, word32) tuple = (maxNumDigits_5, x_514 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_5008
  block L_5008 (env_1963: unit)
    call L_5009 (x_1785 (env_1963, x_4782)) handle _ => L_4999
  block L_5009 (x_4783: word32)
    val x_4784: (word32, word32) tuple = (x_4781, x_4783)
    call L_5010 (loop_35 (tuple_107, x_4784)) handle _ => L_4999
  block L_4999 (x_4785: exn)
    call L_5011 (x_4786 (x_4777, x_516 (*()*))) handle _ => raise
  block L_5011 (x_4787: unit)
    raise (x_4785)
  block L_5010 (x_4788: (word8) vector)
    goto L_5012 (x_4788)
  block L_5012 (x_4789: (word8) vector)
    call L_5013 (x_4786 (x_4777, x_515 (*()*))) handle _ => raise
  block L_5013 (x_4790: unit)
    return (x_4789)
fun loop_35 (env_1964:
               (word32,
                word32,
                word32,
                word32,
                (word8) array,
                lambdas_250,
                word32) tuple,
             x_4791: (word32, word32) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5014 ()
  block L_5014 ()
    val radix_4: word32 = #0 (env_1964)
    val zero_71: word32 = #1 (env_1964)
    val minInt'_24: word32 = #2 (env_1964)
    val one_60: word32 = #3 (env_1964)
    val x_4794: (word8) array = #4 (env_1964)
    val quot_8: lambdas_250 = #5 (env_1964)
    val x_4793: word32 = #6 (env_1964)
    val i_21: word32 = #1 (x_4791)
    val q_2: word32 = #0 (x_4791)
    val x_4792: (word32, word32) tuple = (radix_4, zero_71)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5015
  block L_5015 (env_1965: unit)
    call L_5016 (x_2054 (env_1965, x_4792)) handle _ => raise
  block L_5016 (x_4795: bool)
    case x_4795 of
      true => L_5018 | false => L_5017
  block L_5017 ()
    val x_4796: (word32, word32) tuple = (q_2, minInt'_24)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5019
  block L_5019 (env_1966: unit)
    call L_5020 (x_2054 (env_1966, x_4796)) handle _ => raise
  block L_5020 (x_4797: bool)
    case x_4797 of
      true => L_5022 | false => L_5021
  block L_5021 ()
    goto L_5023 (x_509 (*con false*))
  block L_5022 ()
    case x_156 (*con xEnv_20 (x_155)*) of
      xEnv_20 => L_5024
  block L_5024 (env_1967: unit)
    call L_5025 (x_4798 (env_1967, one_60)) handle _ => raise
  block L_5025 (x_4799: word32)
    val x_4800: (word32, word32) tuple = (radix_4, x_4799)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5026
  block L_5026 (env_1968: unit)
    call L_5023 (x_2054 (env_1968, x_4800)) handle _ => raise
  block L_5023 (x_4801: bool)
    case x_4801 of
      true => L_5028 | false => L_5027
  block L_5027 ()
    val x_4802: (word32, word32) tuple = (q_2, radix_4)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5029
  block L_5029 (env_1969: unit)
    call L_5030 (remUnsafe_1 (env_1969, x_4802)) handle _ => raise
  block L_5028 ()
    goto L_5030 (zero_71)
  block L_5030 (x_4803: word32)
    case ~!_0 (*con ~!Env_0 (x_154)*) of
      ~!Env_0 => L_5031
  block L_5031 (env_1970: unit)
    call L_5032 (~!_3 (env_1970, x_4803)) handle _ => raise
  block L_5032 (x_4804: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_5033
  block L_5033 (env_1971: unit)
    call L_5034 (sextdFromInt32ToInt32_1 (env_1971, x_4804)) handle _ => raise
  block L_5034 (x_4805: word32)
    case digitToChar_0 (*con digitT ... e_37)*) of
      digitToCharEnv_0 => L_5035
  block L_5035 (env_1972: unit)
    call L_5036 (digitToChar_1 (env_1972, x_4805)) handle _ => raise
  block L_5036 (x_4806: word8)
    val x_4807: ((word8) array, word32, word8) tuple = (x_4794, i_21, x_4806)
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_5037
  block L_5037 (env_1973: unit)
    call L_5038 (update_1 (env_1973, x_4807)) handle _ => raise
  block L_5038 (x_4808: unit)
    val x_4809: (word32, word32) tuple = (q_2, radix_4)
    case quot_8 of
      quotEnv_1 => L_5039
  block L_5039 (env_1974: (word32, word32, word32) tuple)
    call L_5040 (quot_2 (env_1974, x_4809)) handle _ => raise
  block L_5040 (q_3: word32)
    val x_4810: (word32, word32) tuple = (q_3, zero_71)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5041
  block L_5041 (env_1975: unit)
    call L_5042 (x_2054 (env_1975, x_4810)) handle _ => raise
  block L_5042 (x_4811: bool)
    case x_4811 of
      true => L_5044 | false => L_5043
  block L_5043 ()
    val x_4812: (word32, word32) tuple = (i_21, x_513 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_5045
  block L_5045 (env_1976: unit)
    call L_5046 (x_1785 (env_1976, x_4812)) handle _ => raise
  block L_5046 (x_4813: word32)
    val x_4814: (word32, word32) tuple = (q_3, x_4813)
    call tail loop_35 (env_1964, x_4814)
  block L_5044 ()
    val x_4815: (word32, word32) tuple = (x_4793, zero_71)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5047
  block L_5047 (env_1977: unit)
    call L_5048 (<_5 (env_1977, x_4815)) handle _ => raise
  block L_5048 (x_4816: bool)
    case x_4816 of
      true => L_5050 | false => L_5049
  block L_5049 ()
    goto L_5051 (i_21)
  block L_5050 ()
    val x_4817: (word32, word32) tuple = (i_21, x_510 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_5052
  block L_5052 (env_1978: unit)
    call L_5053 (x_1785 (env_1978, x_4817)) handle _ => raise
  block L_5053 (i_22: word32)
    val x_4818: ((word8) array, word32, word8) tuple =
      (x_4794, i_22, x_511 (*0x7E:w8*))
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_5054
  block L_5054 (env_1979: unit)
    call L_5055 (update_1 (env_1979, x_4818)) handle _ => raise
  block L_5055 (x_4819: unit)
    goto L_5051 (i_22)
  block L_5051 (x_4820: word32)
    val x_4821: ((word8) array, word32, t_0) tuple =
      (x_4794, x_4820, x_512 (*con NONE_1*))
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_5056
  block L_5056 (env_1980: unit)
    call L_5057 (slice_1 (env_1980, x_4821)) handle _ => raise
  block L_5057 (x_4822: t_13)
    case vector_0 (*con vector ... e_19)*) of
      vectorEnv_0 => L_5058
  block L_5058 (env_1981: unit)
    call tail vector_1 (env_1981, x_4822)
  block L_5018 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_4786 (env_1982: ((bool) ref, bool) tuple, x_4823: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5059 ()
  block L_5059 ()
    val x_4824: (bool) ref = #0 (env_1982)
    val b_20: bool = #1 (env_1982)
    case b_20 of
      true => L_5061 | false => L_5060
  block L_5060 ()
    val x_4825: ((bool) ref, bool) tuple = (x_4824, x_508 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_5062
  block L_5062 (env_1983: unit)
    call tail x_2686 (env_1983, x_4825)
  block L_5061 ()
    return (x_507 (*()*))
fun x_1629 (env_1984: (lambdas_286, word32) tuple, x_4826: unit):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5063 ()
  block L_5063 ()
    val new_5: lambdas_286 = #0 (env_1984)
    val maxNumDigits_6: word32 = #1 (env_1984)
    val x_4827: (word32, word8) tuple = (maxNumDigits_6, x_498 (*0x0:w8*))
    case new_5 of
      newEnv_1 => L_5064
  block L_5064 (env_1985: lambdas_485)
    call tail new_3 (env_1985, x_4827)
fun >>_19 (env_1986: (word32, word32) tuple, x_4828: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5065 ()
  block L_5065 ()
    val sizeInBitsWord_22: word32 = #0 (env_1986)
    val zero_72: word32 = #1 (env_1986)
    val n_11: word32 = #1 (x_4828)
    val i_23: word32 = #0 (x_4828)
    val x_4829: (word32, word32) tuple = (n_11, sizeInBitsWord_22)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5066
  block L_5066 (env_1987: unit)
    call L_5067 (>=_10 (env_1987, x_4829)) handle _ => raise
  block L_5067 (x_4830: bool)
    case x_4830 of
      true => L_5069 | false => L_5068
  block L_5068 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5070
  block L_5070 (env_1988: unit)
    call L_5071 (zextdFromWord32ToWord32_1 (env_1988, n_11)) handle _ => raise
  block L_5071 (x_4831: word32)
    val x_4832: (word32, word32) tuple = (i_23, x_4831)
    case x_306 (*con xEnv_41 (x_305)*) of
      xEnv_41 => L_5072
  block L_5072 (env_1989: unit)
    call tail x_1533 (env_1989, x_4832)
  block L_5069 ()
    return (zero_72)
fun <<_19 (env_1990: (word32, word32) tuple, x_4833: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5073 ()
  block L_5073 ()
    val sizeInBitsWord_23: word32 = #0 (env_1990)
    val zero_73: word32 = #1 (env_1990)
    val n_12: word32 = #1 (x_4833)
    val i_24: word32 = #0 (x_4833)
    val x_4834: (word32, word32) tuple = (n_12, sizeInBitsWord_23)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5074
  block L_5074 (env_1991: unit)
    call L_5075 (>=_10 (env_1991, x_4834)) handle _ => raise
  block L_5075 (x_4835: bool)
    case x_4835 of
      true => L_5077 | false => L_5076
  block L_5076 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5078
  block L_5078 (env_1992: unit)
    call L_5079 (zextdFromWord32ToWord32_1 (env_1992, n_12)) handle _ => raise
  block L_5079 (x_4836: word32)
    val x_4837: (word32, word32) tuple = (i_24, x_4836)
    case x_304 (*con xEnv_40 (x_303)*) of
      xEnv_40 => L_5080
  block L_5080 (env_1993: unit)
    call tail x_1528 (env_1993, x_4837)
  block L_5077 ()
    return (zero_73)
fun >>_21 (env_1994: (word32, word16) tuple, x_4838: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5081 ()
  block L_5081 ()
    val sizeInBitsWord_24: word32 = #0 (env_1994)
    val zero_74: word16 = #1 (env_1994)
    val n_13: word32 = #1 (x_4838)
    val i_25: word16 = #0 (x_4838)
    val x_4839: (word32, word32) tuple = (n_13, sizeInBitsWord_24)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5082
  block L_5082 (env_1995: unit)
    call L_5083 (>=_10 (env_1995, x_4839)) handle _ => raise
  block L_5083 (x_4840: bool)
    case x_4840 of
      true => L_5085 | false => L_5084
  block L_5084 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5086
  block L_5086 (env_1996: unit)
    call L_5087 (zextdFromWord32ToWord32_1 (env_1996, n_13)) handle _ => raise
  block L_5087 (x_4841: word32)
    val x_4842: (word16, word32) tuple = (i_25, x_4841)
    case x_291 (*con xEnv_39 (x_290)*) of
      xEnv_39 => L_5088
  block L_5088 (env_1997: unit)
    call tail x_1521 (env_1997, x_4842)
  block L_5085 ()
    return (zero_74)
fun <<_21 (env_1998: (word32, word16) tuple, x_4843: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5089 ()
  block L_5089 ()
    val sizeInBitsWord_25: word32 = #0 (env_1998)
    val zero_75: word16 = #1 (env_1998)
    val n_14: word32 = #1 (x_4843)
    val i_26: word16 = #0 (x_4843)
    val x_4844: (word32, word32) tuple = (n_14, sizeInBitsWord_25)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5090
  block L_5090 (env_1999: unit)
    call L_5091 (>=_10 (env_1999, x_4844)) handle _ => raise
  block L_5091 (x_4845: bool)
    case x_4845 of
      true => L_5093 | false => L_5092
  block L_5092 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5094
  block L_5094 (env_2000: unit)
    call L_5095 (zextdFromWord32ToWord32_1 (env_2000, n_14)) handle _ => raise
  block L_5095 (x_4846: word32)
    val x_4847: (word16, word32) tuple = (i_26, x_4846)
    case x_289 (*con xEnv_38 (x_288)*) of
      xEnv_38 => L_5096
  block L_5096 (env_2001: unit)
    call tail x_1516 (env_2001, x_4847)
  block L_5093 ()
    return (zero_75)
fun >>_23 (env_2002: (word32, word8) tuple, x_4848: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5097 ()
  block L_5097 ()
    val sizeInBitsWord_26: word32 = #0 (env_2002)
    val zero_76: word8 = #1 (env_2002)
    val n_15: word32 = #1 (x_4848)
    val i_27: word8 = #0 (x_4848)
    val x_4849: (word32, word32) tuple = (n_15, sizeInBitsWord_26)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5098
  block L_5098 (env_2003: unit)
    call L_5099 (>=_10 (env_2003, x_4849)) handle _ => raise
  block L_5099 (x_4850: bool)
    case x_4850 of
      true => L_5101 | false => L_5100
  block L_5100 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5102
  block L_5102 (env_2004: unit)
    call L_5103 (zextdFromWord32ToWord32_1 (env_2004, n_15)) handle _ => raise
  block L_5103 (x_4851: word32)
    val x_4852: (word8, word32) tuple = (i_27, x_4851)
    case x_277 (*con xEnv_37 (x_276)*) of
      xEnv_37 => L_5104
  block L_5104 (env_2005: unit)
    call tail x_1509 (env_2005, x_4852)
  block L_5101 ()
    return (zero_76)
fun <<_23 (env_2006: (word32, word8) tuple, x_4853: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5105 ()
  block L_5105 ()
    val sizeInBitsWord_27: word32 = #0 (env_2006)
    val zero_77: word8 = #1 (env_2006)
    val n_16: word32 = #1 (x_4853)
    val i_28: word8 = #0 (x_4853)
    val x_4854: (word32, word32) tuple = (n_16, sizeInBitsWord_27)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5106
  block L_5106 (env_2007: unit)
    call L_5107 (>=_10 (env_2007, x_4854)) handle _ => raise
  block L_5107 (x_4855: bool)
    case x_4855 of
      true => L_5109 | false => L_5108
  block L_5108 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5110
  block L_5110 (env_2008: unit)
    call L_5111 (zextdFromWord32ToWord32_1 (env_2008, n_16)) handle _ => raise
  block L_5111 (x_4856: word32)
    val x_4857: (word8, word32) tuple = (i_28, x_4856)
    case x_275 (*con xEnv_36 (x_274)*) of
      xEnv_36 => L_5112
  block L_5112 (env_2009: unit)
    call tail x_1504 (env_2009, x_4857)
  block L_5109 ()
    return (zero_77)
fun digitToChar_1 (env_2010: unit, x_4858: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_5113 ()
  block L_5113 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5114
  block L_5114 (env_2011: unit)
    call L_5115 (full_2 (env_2011, x_494 (*"0123456789ABCDEF"*))) handle _ => raise
  block L_5115 (x_4859: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5116
  block L_5116 (env_2012: unit)
    call L_5117 (sextdFromInt32ToInt64_1 (env_2012, x_4858)) handle _ => L_5118
  block L_5118 (x_4860: exn)
    case x_4860 of
      Overflow_0 => L_5119 | _ => L_5120
  block L_5120 ()
    call L_5117 (x_4861 (x_4860, x_495 (*()*))) handle _ => raise
  block L_5119 (x_4862: (unit) ref)
    val x_4863: bool = prim MLton_equal[(unit) ref] (x_4862, x_62)
    case x_4863 of
      true => L_5122 | false => L_5121
  block L_5121 ()
    call L_5117 (x_4861 (x_4860, x_496 (*()*))) handle _ => raise
  block L_5122 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_5117 (i_29: word64)
    case x_4859 of
      T_4 => L_5123
  block L_5123 (x_4864: (word64, (word8) vector, word64) tuple)
    val x_4866: word64 = #0 (x_4864)
    val x_4865: (word64, word64) tuple = (i_29, x_4866)
    case >=_5 (*con >=Env_ ... e_15)*) of
      >=Env_5 => L_5124
  block L_5124 (env_2013: unit)
    call L_5125 (>=_11 (env_2013, x_4865)) handle _ => raise
  block L_5125 (x_4867: bool)
    case x_4867 of
      true => L_5127 | false => L_5126
  block L_5126 ()
    case x_4859 of
      T_4 => L_5128
  block L_5128 (x_4868: (word64, (word8) vector, word64) tuple)
    val x_4870: word64 = #2 (x_4868)
    val x_4871: (word8) vector = #1 (x_4868)
    val x_4869: (word64, word64) tuple = (x_4870, i_29)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5129
  block L_5129 (env_2014: unit)
    call L_5130 (+!_2 (env_2014, x_4869)) handle _ => raise
  block L_5130 (x_4872: word64)
    val x_4873: ((word8) vector, word64) tuple = (x_4871, x_4872)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_5131
  block L_5131 (env_2015: unit)
    call tail x_2551 (env_2015, x_4873)
  block L_5127 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_4861 (env_2016: exn, unit_11: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5132 ()
  block L_5132 ()
    raise (env_2016)
fun loop_9 (env_2017: (word64, (bool) array) tuple, x_4874: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5133 ()
  block L_5133 ()
    val x_4876: word64 = #0 (env_2017)
    val x_4877: (bool) array = #1 (env_2017)
    val b_21: unit = #1 (x_4874)
    val i_30: word64 = #0 (x_4874)
    val x_4875: (word64, word64) tuple = (i_30, x_4876)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5134
  block L_5134 (env_2018: unit)
    call L_5135 (>=_7 (env_2018, x_4875)) handle _ => raise
  block L_5135 (x_4878: bool)
    case x_4878 of
      true => L_5137 | false => L_5136
  block L_5136 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5138
  block L_5138 (env_2019: unit)
    call L_5139 (sextdFromInt64ToInt32_1 (env_2019, i_30)) handle _ => raise
  block L_5139 (x_4879: word32)
    case x_432 (*con xEnv_45 (x_431)*) of
      xEnv_45 => L_5140
  block L_5140 (env_2020: unit)
    call L_5141 (x_1790 (env_2020, x_4879)) handle _ => raise
  block L_5141 (x_4880: word8)
    val x_4881: (word8, word8) tuple = (x_4880, x_480 (*0x20:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5142
  block L_5142 (env_2021: unit)
    call L_5143 (x_2568 (env_2021, x_4881)) handle _ => raise
  block L_5143 (x_4882: bool)
    case x_4882 of
      true => L_5145 | false => L_5144
  block L_5144 ()
    val x_4883: (word8, word8) tuple = (x_4880, x_482 (*0x9:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5146
  block L_5146 (env_2022: unit)
    call L_5147 (x_2568 (env_2022, x_4883)) handle _ => raise
  block L_5145 ()
    goto L_5147 (x_481 (*con true*))
  block L_5147 (x_4884: bool)
    case x_4884 of
      true => L_5149 | false => L_5148
  block L_5148 ()
    val x_4885: (word8, word8) tuple = (x_4880, x_484 (*0xD:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5150
  block L_5150 (env_2023: unit)
    call L_5151 (x_2568 (env_2023, x_4885)) handle _ => raise
  block L_5149 ()
    goto L_5151 (x_483 (*con true*))
  block L_5151 (x_4886: bool)
    case x_4886 of
      true => L_5153 | false => L_5152
  block L_5152 ()
    val x_4887: (word8, word8) tuple = (x_4880, x_486 (*0xA:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5154
  block L_5154 (env_2024: unit)
    call L_5155 (x_2568 (env_2024, x_4887)) handle _ => raise
  block L_5153 ()
    goto L_5155 (x_485 (*con true*))
  block L_5155 (x_4888: bool)
    case x_4888 of
      true => L_5157 | false => L_5156
  block L_5156 ()
    val x_4889: (word8, word8) tuple = (x_4880, x_488 (*0xB:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5158
  block L_5158 (env_2025: unit)
    call L_5159 (x_2568 (env_2025, x_4889)) handle _ => raise
  block L_5157 ()
    goto L_5159 (x_487 (*con true*))
  block L_5159 (x_4890: bool)
    case x_4890 of
      true => L_5161 | false => L_5160
  block L_5160 ()
    val x_4891: (word8, word8) tuple = (x_4880, x_490 (*0xC:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5162
  block L_5162 (env_2026: unit)
    call L_5163 (x_2568 (env_2026, x_4891)) handle _ => raise
  block L_5161 ()
    goto L_5163 (x_489 (*con true*))
  block L_5163 (x_4892: bool)
    val _: unit = prim Array_update[bool] (x_4877, i_30, x_4892)
    val x_4893: (word64, word64) tuple = (i_30, x_492 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5164
  block L_5164 (env_2027: unit)
    call L_5165 (+!_2 (env_2027, x_4893)) handle _ => raise
  block L_5165 (x_4894: word64)
    val x_4895: (word64, unit) tuple = (x_4894, x_491 (*()*))
    call tail loop_9 (env_2017, x_4895)
  block L_5137 ()
    return (b_21)
fun loop_8 (env_2028: (word64, list_1, (t_0) array) tuple,
            x_4896: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5166 ()
  block L_5166 ()
    val x_4898: word64 = #0 (env_2028)
    val x_4900: list_1 = #1 (env_2028)
    val x_4899: (t_0) array = #2 (env_2028)
    val b_22: unit = #1 (x_4896)
    val i_31: word64 = #0 (x_4896)
    val x_4897: (word64, word64) tuple = (i_31, x_4898)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5167
  block L_5167 (env_2029: unit)
    call L_5168 (>=_7 (env_2029, x_4897)) handle _ => raise
  block L_5168 (x_4901: bool)
    case x_4901 of
      true => L_5170 | false => L_5169
  block L_5169 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5171
  block L_5171 (env_2030: unit)
    call L_5172 (sextdFromInt64ToInt32_1 (env_2030, i_31)) handle _ => raise
  block L_5172 (x_4902: word32)
    case x_432 (*con xEnv_45 (x_431)*) of
      xEnv_45 => L_5173
  block L_5173 (env_2031: unit)
    call L_5174 (x_1790 (env_2031, x_4902)) handle _ => raise
  block L_5174 (x_4903: word8)
    call L_5175 (loop_36 (x_4903, x_4900)) handle _ => raise
  block L_5175 (x_4904: t_0)
    val _: unit = prim Array_update[t_0] (x_4899, i_31, x_4904)
    val x_4905: (word64, word64) tuple = (i_31, x_477 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5176
  block L_5176 (env_2032: unit)
    call L_5177 (+!_2 (env_2032, x_4905)) handle _ => raise
  block L_5177 (x_4906: word64)
    val x_4907: (word64, unit) tuple = (x_4906, x_476 (*()*))
    call tail loop_8 (env_2028, x_4907)
  block L_5170 ()
    return (b_22)
fun loop_36 (env_2033: word8, x_4908: list_1):
  {returns = Some (t_0), raises = Some (exn)} =
L_5178 ()
  block L_5178 ()
    case x_4908 of
      nil_2 => L_5180 | ::_4 => L_5179
  block L_5179 (x_4909: (lambdas_1, list_1) tuple)
    val x_4911: list_1 = #1 (x_4909)
    val x_4910: lambdas_1 = #0 (x_4909)
    case x_4910 of
      xEnv_246 => L_5181
  block L_5181 (env_2034: (word32, word32, word8, word8) tuple)
    call L_5182 (x_4912 (env_2034, env_2033)) handle _ => raise
  block L_5182 (x_4913: t_0)
    case x_4913 of
      NONE_1 => L_5183 | _ => L_5184
  block L_5184 ()
    return (x_4913)
  block L_5183 ()
    call tail loop_36 (env_2033, x_4911)
  block L_5180 ()
    return (x_475 (*con NONE_1*))
fun loop_7 (env_2035: (word64, lambdas_1, (t_0) array) tuple,
            x_4914: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5185 ()
  block L_5185 ()
    val x_4916: word64 = #0 (env_2035)
    val x_4918: lambdas_1 = #1 (env_2035)
    val x_4917: (t_0) array = #2 (env_2035)
    val b_23: unit = #1 (x_4914)
    val i_32: word64 = #0 (x_4914)
    val x_4915: (word64, word64) tuple = (i_32, x_4916)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5186
  block L_5186 (env_2036: unit)
    call L_5187 (>=_7 (env_2036, x_4915)) handle _ => raise
  block L_5187 (x_4919: bool)
    case x_4919 of
      true => L_5189 | false => L_5188
  block L_5188 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5190
  block L_5190 (env_2037: unit)
    call L_5191 (sextdFromInt64ToInt32_1 (env_2037, i_32)) handle _ => raise
  block L_5191 (x_4920: word32)
    case x_432 (*con xEnv_45 (x_431)*) of
      xEnv_45 => L_5192
  block L_5192 (env_2038: unit)
    call L_5193 (x_1790 (env_2038, x_4920)) handle _ => raise
  block L_5193 (x_4921: word8)
    case x_4918 of
      xEnv_246 => L_5194
  block L_5194 (env_2039: (word32, word32, word8, word8) tuple)
    call L_5195 (x_4912 (env_2039, x_4921)) handle _ => raise
  block L_5195 (x_4922: t_0)
    val _: unit = prim Array_update[t_0] (x_4917, i_32, x_4922)
    val x_4923: (word64, word64) tuple = (i_32, x_462 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5196
  block L_5196 (env_2040: unit)
    call L_5197 (+!_2 (env_2040, x_4923)) handle _ => raise
  block L_5197 (x_4924: word64)
    val x_4925: (word64, unit) tuple = (x_4924, x_461 (*()*))
    call tail loop_7 (env_2035, x_4925)
  block L_5189 ()
    return (b_23)
fun loop_6 (env_2041: (word64, lambdas_1, (t_0) array) tuple,
            x_4926: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5198 ()
  block L_5198 ()
    val x_4928: word64 = #0 (env_2041)
    val x_4930: lambdas_1 = #1 (env_2041)
    val x_4929: (t_0) array = #2 (env_2041)
    val b_24: unit = #1 (x_4926)
    val i_33: word64 = #0 (x_4926)
    val x_4927: (word64, word64) tuple = (i_33, x_4928)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5199
  block L_5199 (env_2042: unit)
    call L_5200 (>=_7 (env_2042, x_4927)) handle _ => raise
  block L_5200 (x_4931: bool)
    case x_4931 of
      true => L_5202 | false => L_5201
  block L_5201 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5203
  block L_5203 (env_2043: unit)
    call L_5204 (sextdFromInt64ToInt32_1 (env_2043, i_33)) handle _ => raise
  block L_5204 (x_4932: word32)
    case x_432 (*con xEnv_45 (x_431)*) of
      xEnv_45 => L_5205
  block L_5205 (env_2044: unit)
    call L_5206 (x_1790 (env_2044, x_4932)) handle _ => raise
  block L_5206 (x_4933: word8)
    case x_4930 of
      xEnv_246 => L_5207
  block L_5207 (env_2045: (word32, word32, word8, word8) tuple)
    call L_5208 (x_4912 (env_2045, x_4933)) handle _ => raise
  block L_5208 (x_4934: t_0)
    val _: unit = prim Array_update[t_0] (x_4929, i_33, x_4934)
    val x_4935: (word64, word64) tuple = (i_33, x_455 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5209
  block L_5209 (env_2046: unit)
    call L_5210 (+!_2 (env_2046, x_4935)) handle _ => raise
  block L_5210 (x_4936: word64)
    val x_4937: (word64, unit) tuple = (x_4936, x_454 (*()*))
    call tail loop_6 (env_2041, x_4937)
  block L_5202 ()
    return (b_24)
fun loop_5 (env_2047: (word64, lambdas_1, (t_0) array) tuple,
            x_4938: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5211 ()
  block L_5211 ()
    val x_4940: word64 = #0 (env_2047)
    val x_4942: lambdas_1 = #1 (env_2047)
    val x_4941: (t_0) array = #2 (env_2047)
    val b_25: unit = #1 (x_4938)
    val i_34: word64 = #0 (x_4938)
    val x_4939: (word64, word64) tuple = (i_34, x_4940)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5212
  block L_5212 (env_2048: unit)
    call L_5213 (>=_7 (env_2048, x_4939)) handle _ => raise
  block L_5213 (x_4943: bool)
    case x_4943 of
      true => L_5215 | false => L_5214
  block L_5214 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5216
  block L_5216 (env_2049: unit)
    call L_5217 (sextdFromInt64ToInt32_1 (env_2049, i_34)) handle _ => raise
  block L_5217 (x_4944: word32)
    case x_432 (*con xEnv_45 (x_431)*) of
      xEnv_45 => L_5218
  block L_5218 (env_2050: unit)
    call L_5219 (x_1790 (env_2050, x_4944)) handle _ => raise
  block L_5219 (x_4945: word8)
    case x_4942 of
      xEnv_246 => L_5220
  block L_5220 (env_2051: (word32, word32, word8, word8) tuple)
    call L_5221 (x_4912 (env_2051, x_4945)) handle _ => raise
  block L_5221 (x_4946: t_0)
    val _: unit = prim Array_update[t_0] (x_4941, i_34, x_4946)
    val x_4947: (word64, word64) tuple = (i_34, x_448 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5222
  block L_5222 (env_2052: unit)
    call L_5223 (+!_2 (env_2052, x_4947)) handle _ => raise
  block L_5223 (x_4948: word64)
    val x_4949: (word64, unit) tuple = (x_4948, x_447 (*()*))
    call tail loop_5 (env_2047, x_4949)
  block L_5215 ()
    return (b_25)
fun range_1 (env_2053: unit, x_4950: (word32, word8, word8) tuple):
  {returns = Some (lambdas_1), raises = Some (exn)} =
L_5224 ()
  block L_5224 ()
    val cmax_0: word8 = #2 (x_4950)
    val cmin_0: word8 = #1 (x_4950)
    val add_0: word32 = #0 (x_4950)
    case x_434 (*con xEnv_46 (x_433)*) of
      xEnv_46 => L_5225
  block L_5225 (env_2054: unit)
    call L_5226 (x_4951 (env_2054, cmin_0)) handle _ => raise
  block L_5226 (min_0: word32)
    val x_4953: (word32, word32, word8, word8) tuple =
      (min_0, add_0, cmax_0, cmin_0)
    val x_4952: lambdas_1 = con xEnv_246 (x_4953)
    return (x_4952)
fun x_4912 (env_2055: (word32, word32, word8, word8) tuple, x_4954: word8):
  {returns = Some (t_0), raises = Some (exn)} =
L_5227 ()
  block L_5227 ()
    val min_1: word32 = #0 (env_2055)
    val add_1: word32 = #1 (env_2055)
    val cmax_1: word8 = #2 (env_2055)
    val cmin_1: word8 = #3 (env_2055)
    val x_4955: (word8, word8) tuple = (cmin_1, x_4954)
    case <=_1 (*con <=Env_ ... le_8)*) of
      <=Env_1 => L_5228
  block L_5228 (env_2056: unit)
    call L_5229 (<=_7 (env_2056, x_4955)) handle _ => raise
  block L_5229 (x_4956: bool)
    case x_4956 of
      true => L_5231 | false => L_5230
  block L_5230 ()
    goto L_5232 (x_441 (*con false*))
  block L_5231 ()
    val x_4957: (word8, word8) tuple = (x_4954, cmax_1)
    case <=_1 (*con <=Env_ ... le_8)*) of
      <=Env_1 => L_5233
  block L_5233 (env_2057: unit)
    call L_5232 (<=_7 (env_2057, x_4957)) handle _ => raise
  block L_5232 (x_4958: bool)
    case x_4958 of
      true => L_5235 | false => L_5234
  block L_5234 ()
    return (x_442 (*con NONE_1*))
  block L_5235 ()
    case x_434 (*con xEnv_46 (x_433)*) of
      xEnv_46 => L_5236
  block L_5236 (env_2058: unit)
    call L_5237 (x_4951 (env_2058, x_4954)) handle _ => raise
  block L_5237 (x_4959: word32)
    val x_4960: (word32, word32) tuple = (add_1, x_4959)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5238
  block L_5238 (env_2059: unit)
    call L_5239 (+!_3 (env_2059, x_4960)) handle _ => raise
  block L_5239 (x_4961: word32)
    val x_4962: (word32, word32) tuple = (x_4961, min_1)
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5240
  block L_5240 (env_2060: unit)
    call L_5241 (-!_3 (env_2060, x_4962)) handle _ => raise
  block L_5241 (x_4963: word32)
    val x_4964: t_0 = con SOME_0 (x_4963)
    return (x_4964)
fun radixToInt_1 (env_2061: unit, x_4965: radix_0):
  {returns = Some (word32), raises = Some (exn)} =
L_5242 ()
  block L_5242 ()
    case x_4965 of
      BIN_1 => L_5246 | DEC_1 => L_5245 | HEX_0 => L_5244 | OCT_1 => L_5243
  block L_5243 ()
    return (x_439 (*0x8:w32*))
  block L_5244 ()
    return (x_438 (*0x10:w32*))
  block L_5245 ()
    return (x_437 (*0xA:w32*))
  block L_5246 ()
    return (x_436 (*0x2:w32*))
fun x_4951 (env_2062: unit, x_4966: word8):
  {returns = Some (word32), raises = Some (exn)} =
L_5247 ()
  block L_5247 ()
    val x_4967: word32 = prim WordU8_extdToWord32 (x_4966)
    return (x_4967)
fun x_1790 (env_2063: unit, x_4968: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_5248 ()
  block L_5248 ()
    val x_4969: word8 = prim WordS32_extdToWord8 (x_4968)
    case idFromWord8_0 (*con idFrom ... _202)*) of
      idFromWord8Env_0 => L_5249
  block L_5249 (env_2064: unit)
    call tail idFromWord8_1 (env_2064, x_4969)
fun update_1 (env_2065: unit, x_4970: ((word8) array, word32, word8) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5250 ()
  block L_5250 ()
    val x_4971: word8 = #2 (x_4970)
    val i_35: word32 = #1 (x_4970)
    val seq_0: (word8) array = #0 (x_4970)
    case full_0 (*con fullEn ... e_18)*) of
      fullEnv_0 => L_5251
  block L_5251 (env_2066: unit)
    call L_5252 (full_3 (env_2066, seq_0)) handle _ => raise
  block L_5252 (x_4972: t_13)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5253
  block L_5253 (env_2067: unit)
    call L_5254 (sextdFromInt32ToInt64_1 (env_2067, i_35)) handle _ => L_5255
  block L_5255 (x_4973: exn)
    case x_4973 of
      Overflow_0 => L_5256 | _ => L_5257
  block L_5257 ()
    call L_5254 (x_4974 (x_4973, x_429 (*()*))) handle _ => raise
  block L_5256 (x_4975: (unit) ref)
    val x_4976: bool = prim MLton_equal[(unit) ref] (x_4975, x_62)
    case x_4976 of
      true => L_5259 | false => L_5258
  block L_5258 ()
    call L_5254 (x_4974 (x_4973, x_430 (*()*))) handle _ => raise
  block L_5259 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_5254 (i_36: word64)
    case x_4972 of
      T_3 => L_5260
  block L_5260 (x_4977: (word64, (word8) array, word64) tuple)
    val x_4979: word64 = #0 (x_4977)
    val x_4978: (word64, word64) tuple = (i_36, x_4979)
    case >=_5 (*con >=Env_ ... e_15)*) of
      >=Env_5 => L_5261
  block L_5261 (env_2068: unit)
    call L_5262 (>=_11 (env_2068, x_4978)) handle _ => raise
  block L_5262 (x_4980: bool)
    case x_4980 of
      true => L_5264 | false => L_5263
  block L_5263 ()
    case x_4972 of
      T_3 => L_5265
  block L_5265 (x_4981: (word64, (word8) array, word64) tuple)
    val x_4983: word64 = #2 (x_4981)
    val x_4984: (word8) array = #1 (x_4981)
    val x_4982: (word64, word64) tuple = (x_4983, i_36)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5266
  block L_5266 (env_2069: unit)
    call L_5267 (+!_2 (env_2069, x_4982)) handle _ => raise
  block L_5267 (x_4985: word64)
    val x_4986: ((word8) array, word64, word8) tuple = (x_4984, x_4985, x_4971)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5268
  block L_5268 (env_2070: unit)
    call tail x_2554 (env_2070, x_4986)
  block L_5264 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_4974 (env_2071: exn, unit_12: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5269 ()
  block L_5269 ()
    raise (env_2071)
fun base_4 (env_2072: unit, x_4987: t_13):
  {returns = Some (((word8) array, word32, word32) tuple), raises = Some (exn)} =
L_5270 ()
  block L_5270 ()
    case x_4987 of
      T_3 => L_5271
  block L_5271 (x_4988: (word64, (word8) array, word64) tuple)
    val x_4991: word64 = #2 (x_4988)
    val x_4990: (word8) array = #1 (x_4988)
    val x_4989: word64 = #0 (x_4988)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5272
  block L_5272 (env_2073: unit)
    call L_5273 (x_2428 (env_2073, x_4991)) handle _ => L_5274
  block L_5273 (x_4992: word32)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5275
  block L_5275 (env_2074: unit)
    call L_5276 (x_2428 (env_2074, x_4989)) handle _ => L_5274
  block L_5274 (x_4993: exn)
    case x_4993 of
      Overflow_0 => L_5277 | _ => L_5278
  block L_5278 ()
    call tail x_4994 (x_4993, x_424 (*()*))
  block L_5277 (x_4995: (unit) ref)
    val x_4996: bool = prim MLton_equal[(unit) ref] (x_4995, x_62)
    case x_4996 of
      true => L_5280 | false => L_5279
  block L_5279 ()
    call tail x_4994 (x_4993, x_428 (*()*))
  block L_5280 ()
    raise (x_427 (*con Fail_0 (x_426)*))
  block L_5276 (x_4997: word32)
    val x_4998: ((word8) array, word32, word32) tuple = (x_4990, x_4992, x_4997)
    return (x_4998)
fun x_4994 (env_2075: exn, unit_13: unit):
  {returns = Some (((word8) array, word32, word32) tuple), raises = Some (exn)} =
L_5281 ()
  block L_5281 ()
    raise (env_2075)
fun slice_1 (env_2076: unit, x_4999: ((word8) array, word32, t_0) tuple):
  {returns = Some (t_13), raises = Some (exn)} =
L_5282 ()
  block L_5282 ()
    val len_5: t_0 = #2 (x_4999)
    val start_0: word32 = #1 (x_4999)
    val seq_1: (word8) array = #0 (x_4999)
    case full_0 (*con fullEn ... e_18)*) of
      fullEnv_0 => L_5283
  block L_5283 (env_2077: unit)
    call L_5284 (full_3 (env_2077, seq_1)) handle _ => raise
  block L_5284 (x_5000: t_13)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5285
  block L_5285 (env_2078: unit)
    call L_5286 (sextdFromInt32ToInt64_1 (env_2078, start_0)) handle _ => L_5287
  block L_5286 (x_5001: word64)
    case len_5 of
      NONE_1 => L_5289 | SOME_0 => L_5288
  block L_5288 (x_5002: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5290
  block L_5290 (env_2079: unit)
    call L_5291 (sextdFromInt32ToInt64_1 (env_2079, x_5002)) handle _ => L_5287
  block L_5291 (x_5003: word64)
    val x_5004: t_28 = con SOME_21 (x_5003)
    goto L_5292 (x_5004)
  block L_5289 ()
    goto L_5292 (x_420 (*con NONE_0*))
  block L_5292 (x_5005: t_28)
    case x_5000 of
      T_3 => L_5293
  block L_5293 (x_5006: (word64, (word8) array, word64) tuple)
    val x_5009: word64 = #2 (x_5006)
    val x_5008: (word8) array = #1 (x_5006)
    val x_5007: word64 = #0 (x_5006)
    case x_5005 of
      NONE_0 => L_5295 | SOME_21 => L_5294
  block L_5294 (x_5010: word64)
    val x_5011: (word64, word64) tuple = (x_5001, x_5007)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5296
  block L_5296 (env_2080: unit)
    call L_5297 (>_5 (env_2080, x_5011)) handle _ => L_5287
  block L_5297 (x_5012: bool)
    case x_5012 of
      true => L_5299 | false => L_5298
  block L_5298 ()
    val x_5013: (word64, word64) tuple = (x_5007, x_5001)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5300
  block L_5300 (env_2081: unit)
    call L_5301 (-!_2 (env_2081, x_5013)) handle _ => L_5287
  block L_5301 (x_5014: word64)
    val x_5015: (word64, word64) tuple = (x_5010, x_5014)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5302
  block L_5302 (env_2082: unit)
    call L_5303 (>_5 (env_2082, x_5015)) handle _ => L_5287
  block L_5299 ()
    goto L_5303 (x_421 (*con true*))
  block L_5303 (x_5016: bool)
    case x_5016 of
      true => L_5305 | false => L_5304
  block L_5304 ()
    val x_5017: (word64, word64) tuple = (x_5009, x_5001)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5306
  block L_5306 (env_2083: unit)
    call L_5307 (+!_2 (env_2083, x_5017)) handle _ => L_5287
  block L_5307 (x_5018: word64)
    val x_5020: (word64, (word8) array, word64) tuple = (x_5010, x_5008, x_5018)
    val x_5019: t_13 = con T_3 (x_5020)
    return (x_5019)
  block L_5305 ()
    goto L_5287 (x_69 (*con Subscr ... x_68)*))
  block L_5295 ()
    val x_5021: (word64, word64) tuple = (x_5001, x_5007)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5308
  block L_5308 (env_2084: unit)
    call L_5309 (>_5 (env_2084, x_5021)) handle _ => L_5287
  block L_5309 (x_5022: bool)
    case x_5022 of
      true => L_5311 | false => L_5310
  block L_5310 ()
    val x_5023: (word64, word64) tuple = (x_5009, x_5001)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5312
  block L_5312 (env_2085: unit)
    call L_5313 (+!_2 (env_2085, x_5023)) handle _ => L_5287
  block L_5313 (x_5024: word64)
    val x_5025: (word64, word64) tuple = (x_5007, x_5001)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5314
  block L_5314 (env_2086: unit)
    call L_5315 (-!_2 (env_2086, x_5025)) handle _ => L_5287
  block L_5315 (x_5026: word64)
    val x_5028: (word64, (word8) array, word64) tuple = (x_5026, x_5008, x_5024)
    val x_5027: t_13 = con T_3 (x_5028)
    return (x_5027)
  block L_5311 ()
    goto L_5287 (x_69 (*con Subscr ... x_68)*))
  block L_5287 (x_5029: exn)
    case x_5029 of
      Overflow_0 => L_5316 | _ => L_5317
  block L_5317 ()
    call tail x_5030 (x_5029, x_422 (*()*))
  block L_5316 (x_5031: (unit) ref)
    val x_5032: bool = prim MLton_equal[(unit) ref] (x_5031, x_62)
    case x_5032 of
      true => L_5319 | false => L_5318
  block L_5318 ()
    call tail x_5030 (x_5029, x_423 (*()*))
  block L_5319 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_5030 (env_2087: exn, unit_14: unit):
  {returns = Some (t_13), raises = Some (exn)} =
L_5320 ()
  block L_5320 ()
    raise (env_2087)
fun new_3 (env_2088: lambdas_485, x_5033: (word32, word8) tuple):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5321 ()
  block L_5321 ()
    val x_5034: word8 = #1 (x_5033)
    val n_17: word32 = #0 (x_5033)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_5322
  block L_5322 (env_2089: unit)
    call L_5323 (fromIntForLength_1 (env_2089, n_17)) handle _ => raise
  block L_5323 (x_5035: word64)
    case env_2088 of
      arrayAllocEnv_0 => L_5324
  block L_5324 (env_2090: word64)
    call L_5325 (arrayAlloc_4 (env_2090, x_5035)) handle _ => raise
  block L_5325 (a_4: (word8) array)
    val tuple_108: (word64, (word8) array, word8) tuple = (x_5035, a_4, x_5034)
    call L_5326 (loop_37 (tuple_108, x_1458)) handle _ => raise
  block L_5326 (b_26: unit)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_5327
  block L_5327 (env_2091: unit)
    call tail x_4527 (env_2091, a_4)
fun loop_37 (env_2092: (word64, (word8) array, word8) tuple,
             x_5036: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5328 ()
  block L_5328 ()
    val x_5038: word64 = #0 (env_2092)
    val a_5: (word8) array = #1 (env_2092)
    val x_5039: word8 = #2 (env_2092)
    val b_27: unit = #1 (x_5036)
    val i_37: word64 = #0 (x_5036)
    val x_5037: (word64, word64) tuple = (i_37, x_5038)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5329
  block L_5329 (env_2093: unit)
    call L_5330 (>=_7 (env_2093, x_5037)) handle _ => raise
  block L_5330 (x_5040: bool)
    case x_5040 of
      true => L_5332 | false => L_5331
  block L_5331 ()
    val x_5041: ((word8) array, word64, word8) tuple = (a_5, i_37, x_5039)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5333
  block L_5333 (env_2094: unit)
    call L_5334 (x_2554 (env_2094, x_5041)) handle _ => raise
  block L_5334 (x_5042: unit)
    val x_5043: (word64, word64) tuple = (i_37, x_418 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5335
  block L_5335 (env_2095: unit)
    call L_5336 (+!_2 (env_2095, x_5043)) handle _ => raise
  block L_5336 (x_5044: word64)
    val x_5045: (word64, unit) tuple = (x_5044, x_417 (*()*))
    call tail loop_37 (env_2092, x_5045)
  block L_5332 ()
    return (b_27)
fun length_2 (env_2096: unit, x_5046: (word8) array):
  {returns = Some (word32), raises = Some (exn)} =
L_5337 ()
  block L_5337 ()
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_5338
  block L_5338 (env_2097: unit)
    call L_5339 (x_2454 (env_2097, x_5046)) handle _ => L_5340
  block L_5339 (x_5047: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5341
  block L_5341 (env_2098: unit)
    call L_5342 (x_2428 (env_2098, x_5047)) handle _ => L_5340
  block L_5340 (x_5048: exn)
    case x_5048 of
      Overflow_0 => L_5343 | _ => L_5344
  block L_5344 ()
    call tail x_5049 (x_5048, x_411 (*()*))
  block L_5343 (x_5050: (unit) ref)
    val x_5051: bool = prim MLton_equal[(unit) ref] (x_5050, x_62)
    case x_5051 of
      true => L_5346 | false => L_5345
  block L_5345 ()
    call tail x_5049 (x_5048, x_415 (*()*))
  block L_5346 ()
    raise (x_414 (*con Fail_0 (x_413)*))
  block L_5342 (x_5052: word32)
    return (x_5052)
fun x_5049 (env_2099: exn, unit_15: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_5347 ()
  block L_5347 ()
    raise (env_2099)
fun concat_2 (env_2100: (lambdas_494, lambdas_485, lambdas_495) tuple,
              x_5053: list_7):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5348 ()
  block L_5348 ()
    val arrayAlloc_6: lambdas_494 = #0 (env_2100)
    val arrayAlloc_5: lambdas_485 = #1 (env_2100)
    val sequence_1: lambdas_495 = #2 (env_2100)
    case x_5053 of
      nil_3 => L_5350 | ::_1 => L_5349
  block L_5349 (x_5054: ((word8) vector, list_7) tuple)
    val x_5056: list_7 = #1 (x_5054)
    val x_5055: (word8) vector = #0 (x_5054)
    case x_5056 of
      nil_3 => L_5351 | _ => L_5352
  block L_5352 ()
    val x_5057: (list_7, word64) tuple = (x_5053, x_403 (*0x0:w64*))
    case loop_0 (*con loopEn ... e_31)*) of
      loopEnv_0 => L_5353
  block L_5353 (env_2101: unit)
    call L_5354 (loop_38 (env_2101, x_5057)) handle _ => raise
  block L_5354 (x_5058: word64)
    case arrayAlloc_5 of
      arrayAllocEnv_0 => L_5355
  block L_5355 (env_2102: word64)
    call L_5356 (arrayAlloc_4 (env_2102, x_5058)) handle _ => raise
  block L_5356 (x_5059: (word8) array)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_5357
  block L_5357 (env_2103: unit)
    call L_5358 (x_4527 (env_2103, x_5059)) handle _ => raise
  block L_5358 (x_5060: (word8) array)
    val x_5061: (word64, list_7) tuple = (x_410 (*0x0:w64*), x_5053)
    call tail loop_39 (x_5060, x_5061)
  block L_5351 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5359
  block L_5359 (env_2104: unit)
    call L_5360 (full_2 (env_2104, x_5055)) handle _ => raise
  block L_5360 (x_5062: t_19)
    case sequence_1 of
      sequenceEnv_0 => L_5361
  block L_5361 (env_2105: lambdas_494)
    call tail sequence_2 (env_2105, x_5062)
  block L_5350 ()
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_5362
  block L_5362 (env_2106: unit)
    call L_5363 (fromIntForLength_1 (env_2106, x_396 (*0x0:w32*))) handle _ => raise
  block L_5363 (x_5063: word64)
    case arrayAlloc_6 of
      arrayAllocEnv_1 => L_5364
  block L_5364 (env_2107: word64)
    call L_5365 (arrayAlloc_2 (env_2107, x_5063)) handle _ => raise
  block L_5365 (a_6: (word8) array)
    val tuple_109: (word64, (word8) array) tuple = (x_5063, a_6)
    call L_5366 (loop_40 (tuple_109, x_1457)) handle _ => raise
  block L_5366 (b_28: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5367
  block L_5367 (env_2108: unit)
    call tail x_1795 (env_2108, a_6)
fun loop_39 (env_2109: (word8) array, x_5064: (word64, list_7) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5368 ()
  block L_5368 ()
    val xs_0: list_7 = #1 (x_5064)
    val di_0: word64 = #0 (x_5064)
    case xs_0 of
      nil_3 => L_5370 | ::_1 => L_5369
  block L_5369 (x_5065: ((word8) vector, list_7) tuple)
    val x_5067: list_7 = #1 (x_5065)
    val x_5066: (word8) vector = #0 (x_5065)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5371
  block L_5371 (env_2110: unit)
    call L_5372 (full_2 (env_2110, x_5066)) handle _ => raise
  block L_5372 (sl_2: t_19)
    case sl_2 of
      T_4 => L_5373
  block L_5373 (x_5068: (word64, (word8) vector, word64) tuple)
    val x_5072: word64 = #2 (x_5068)
    val x_5071: (word8) vector = #1 (x_5068)
    val x_5070: word64 = #0 (x_5068)
    val x_5069: (word64, word64) tuple = (x_5070, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5374
  block L_5374 (env_2111: unit)
    call L_5375 (<_7 (env_2111, x_5069)) handle _ => raise
  block L_5375 (x_5073: bool)
    case x_5073 of
      true => L_5377 | false => L_5376
  block L_5376 ()
    val x_5074: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (env_2109, di_0, x_5071, x_5072, x_5070)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_5378
  block L_5378 (env_2112: unit)
    call L_5379 (x_2466 (env_2112, x_5074)) handle _ => raise
  block L_5377 ()
    val x_5075: (word64, word64) tuple = (x_5070, x_406 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5380
  block L_5380 (env_2113: unit)
    call L_5381 (-!_2 (env_2113, x_5075)) handle _ => raise
  block L_5381 (len_6: word64)
    val tuple_110:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_6, di_0, x_5072, x_5071, env_2109)
    call L_5379 (loop_41 (tuple_110, x_409 (*0x0:w64*))) handle _ => raise
  block L_5379 (x_5076: unit)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_5382
  block L_5382 (env_2114: unit)
    call L_5383 (length_3 (env_2114, sl_2)) handle _ => raise
  block L_5383 (x_5077: word64)
    val x_5078: (word64, word64) tuple = (di_0, x_5077)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5384
  block L_5384 (env_2115: unit)
    call L_5385 (+!_2 (env_2115, x_5078)) handle _ => raise
  block L_5385 (x_5079: word64)
    val x_5080: (word64, list_7) tuple = (x_5079, x_5067)
    call tail loop_39 (env_2109, x_5080)
  block L_5370 ()
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5386
  block L_5386 (env_2116: unit)
    call tail x_1795 (env_2116, env_2109)
fun loop_41 (env_2117:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_5081: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_5387 ()
  block L_5387 ()
    val len_7: word64 = #0 (env_2117)
    val di_1: word64 = #1 (env_2117)
    val x_5085: word64 = #2 (env_2117)
    val x_5084: (word8) vector = #3 (env_2117)
    val x_5083: (word8) array = #4 (env_2117)
    val x_5082: (word64, word64) tuple = (x_5081, len_7)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_5388
  block L_5388 (env_2118: unit)
    call L_5389 (>_6 (env_2118, x_5082)) handle _ => raise
  block L_5389 (x_5086: bool)
    case x_5086 of
      true => L_5391 | false => L_5390
  block L_5390 ()
    val x_5087: (word64, word64) tuple = (di_1, x_5081)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5392
  block L_5392 (env_2119: unit)
    call L_5393 (+!_2 (env_2119, x_5087)) handle _ => raise
  block L_5393 (x_5088: word64)
    val x_5089: (word64, word64) tuple = (x_5085, x_5081)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5394
  block L_5394 (env_2120: unit)
    call L_5395 (+!_2 (env_2120, x_5089)) handle _ => raise
  block L_5395 (x_5090: word64)
    val x_5091: ((word8) vector, word64) tuple = (x_5084, x_5090)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_5396
  block L_5396 (env_2121: unit)
    call L_5397 (x_2551 (env_2121, x_5091)) handle _ => raise
  block L_5397 (x_5092: word8)
    val x_5093: ((word8) array, word64, word8) tuple = (x_5083, x_5088, x_5092)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5398
  block L_5398 (env_2122: unit)
    call L_5399 (x_2554 (env_2122, x_5093)) handle _ => raise
  block L_5399 (x_5094: unit)
    val x_5095: (word64, word64) tuple = (x_5081, x_408 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5400
  block L_5400 (env_2123: unit)
    call L_5401 (+!_2 (env_2123, x_5095)) handle _ => raise
  block L_5401 (x_5096: word64)
    call tail loop_41 (env_2117, x_5096)
  block L_5391 ()
    return (x_407 (*()*))
fun loop_38 (env_2124: unit, x_5097: (list_7, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5402 ()
  block L_5402 ()
    val b_29: word64 = #1 (x_5097)
    val l_4: list_7 = #0 (x_5097)
    case l_4 of
      nil_3 => L_5404 | ::_1 => L_5403
  block L_5403 (x_5098: ((word8) vector, list_7) tuple)
    val x_5100: list_7 = #1 (x_5098)
    val x_5099: (word8) vector = #0 (x_5098)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5405
  block L_5405 (env_2125: unit)
    call L_5406 (full_2 (env_2125, x_5099)) handle _ => L_5407
  block L_5406 (x_5101: t_19)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_5408
  block L_5408 (env_2126: unit)
    call L_5409 (length_3 (env_2126, x_5101)) handle _ => L_5407
  block L_5409 (x_5102: word64)
    val x_5103: (word64, word64) tuple = (b_29, x_5102)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_5410
  block L_5410 (env_2127: unit)
    call L_5411 (x_3113 (env_2127, x_5103)) handle _ => L_5407
  block L_5407 (x_5104: exn)
    case x_5104 of
      Overflow_0 => L_5412 | _ => L_5413
  block L_5413 ()
    call L_5411 (x_5105 (x_5104, x_404 (*()*))) handle _ => raise
  block L_5412 (x_5106: (unit) ref)
    val x_5107: bool = prim MLton_equal[(unit) ref] (x_5106, x_62)
    case x_5107 of
      true => L_5415 | false => L_5414
  block L_5414 ()
    call L_5411 (x_5105 (x_5104, x_405 (*()*))) handle _ => raise
  block L_5415 ()
    raise (x_66 (*con Size_0 (x_65)*))
  block L_5411 (x_5108: word64)
    val x_5109: (list_7, word64) tuple = (x_5100, x_5108)
    case loop_0 (*con loopEn ... e_31)*) of
      loopEnv_0 => L_5416
  block L_5416 (env_2128: unit)
    call tail loop_38 (env_2128, x_5109)
  block L_5404 ()
    return (b_29)
fun x_5105 (env_2129: exn, unit_16: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5417 ()
  block L_5417 ()
    raise (env_2129)
fun loop_40 (env_2130: (word64, (word8) array) tuple,
             x_5110: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5418 ()
  block L_5418 ()
    val x_5112: word64 = #0 (env_2130)
    val b_30: unit = #1 (x_5110)
    val i_38: word64 = #0 (x_5110)
    val x_5111: (word64, word64) tuple = (i_38, x_5112)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5419
  block L_5419 (env_2131: unit)
    call L_5420 (>=_7 (env_2131, x_5111)) handle _ => raise
  block L_5420 (x_5113: bool)
    case x_5113 of
      true => L_5422 | false => L_5421
  block L_5421 ()
    raise (x_400 (*con Fail_0 (x_399)*))
  block L_5422 ()
    return (b_30)
fun append_1 (env_2132: (lambdas_495, lambdas_494) tuple,
              x_5114: ((word8) vector, (word8) vector) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5423 ()
  block L_5423 ()
    val sequence_3: lambdas_495 = #0 (env_2132)
    val arrayAlloc_7: lambdas_494 = #1 (env_2132)
    val x_5116: (word8) vector = #1 (x_5114)
    val x_5115: (word8) vector = #0 (x_5114)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5424
  block L_5424 (env_2133: unit)
    call L_5425 (full_2 (env_2133, x_5115)) handle _ => raise
  block L_5425 (x_5117: t_19)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5426
  block L_5426 (env_2134: unit)
    call L_5427 (full_2 (env_2134, x_5116)) handle _ => raise
  block L_5427 (x_5118: t_19)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_5428
  block L_5428 (env_2135: unit)
    call L_5429 (length_3 (env_2135, x_5117)) handle _ => raise
  block L_5429 (x_5119: word64)
    val x_5120: (word64, word64) tuple = (x_5119, x_393 (*0x0:w64*))
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5430
  block L_5430 (env_2136: unit)
    call L_5431 (x_2300 (env_2136, x_5120)) handle _ => raise
  block L_5431 (x_5121: bool)
    case x_5121 of
      true => L_5433 | false => L_5432
  block L_5432 ()
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_5434
  block L_5434 (env_2137: unit)
    call L_5435 (length_3 (env_2137, x_5118)) handle _ => raise
  block L_5435 (x_5122: word64)
    val x_5123: (word64, word64) tuple = (x_5122, x_394 (*0x0:w64*))
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5436
  block L_5436 (env_2138: unit)
    call L_5437 (x_2300 (env_2138, x_5123)) handle _ => raise
  block L_5437 (x_5124: bool)
    case x_5124 of
      true => L_5439 | false => L_5438
  block L_5438 ()
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_5440
  block L_5440 (env_2139: unit)
    call L_5441 (base_5 (env_2139, x_5117)) handle _ => raise
  block L_5441 (x_5125: ((word8) vector, word64, word64) tuple)
    val len1_0: word64 = #2 (x_5125)
    val start1_0: word64 = #1 (x_5125)
    val seq1_0: (word8) vector = #0 (x_5125)
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_5442
  block L_5442 (env_2140: unit)
    call L_5443 (base_5 (env_2140, x_5118)) handle _ => raise
  block L_5443 (x_5126: ((word8) vector, word64, word64) tuple)
    val len2_0: word64 = #2 (x_5126)
    val start2_0: word64 = #1 (x_5126)
    val seq2_0: (word8) vector = #0 (x_5126)
    val x_5127: (word64, word64) tuple = (len1_0, len2_0)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5444
  block L_5444 (env_2141: unit)
    call L_5445 (+!_2 (env_2141, x_5127)) handle _ => raise
  block L_5445 (n_18: word64)
    case arrayAlloc_7 of
      arrayAllocEnv_1 => L_5446
  block L_5446 (env_2142: word64)
    call L_5447 (arrayAlloc_2 (env_2142, n_18)) handle _ => raise
  block L_5447 (a_7: (word8) array)
    val x_5128: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_7, x_395 (*0x0:w64*), seq1_0, start1_0, len1_0)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_5448
  block L_5448 (env_2143: unit)
    call L_5449 (x_2466 (env_2143, x_5128)) handle _ => raise
  block L_5449 (x_5129: unit)
    val x_5130: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_7, len1_0, seq2_0, start2_0, len2_0)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_5450
  block L_5450 (env_2144: unit)
    call L_5451 (x_2466 (env_2144, x_5130)) handle _ => raise
  block L_5451 (x_5131: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5452
  block L_5452 (env_2145: unit)
    call tail x_1795 (env_2145, a_7)
  block L_5439 ()
    case sequence_3 of
      sequenceEnv_0 => L_5453
  block L_5453 (env_2146: lambdas_494)
    call tail sequence_2 (env_2146, x_5117)
  block L_5433 ()
    case sequence_3 of
      sequenceEnv_0 => L_5454
  block L_5454 (env_2147: lambdas_494)
    call tail sequence_2 (env_2147, x_5118)
fun base_3 (env_2148: unit, x_5132: t_19):
  {returns = Some (((word8) vector, word32, word32) tuple), raises = Some (exn)} =
L_5455 ()
  block L_5455 ()
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_5456
  block L_5456 (env_2149: unit)
    call L_5457 (base_5 (env_2149, x_5132)) handle _ => raise
  block L_5457 (x_5133: ((word8) vector, word64, word64) tuple)
    val len_8: word64 = #2 (x_5133)
    val start_1: word64 = #1 (x_5133)
    val seq_2: (word8) vector = #0 (x_5133)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5458
  block L_5458 (env_2150: unit)
    call L_5459 (x_2428 (env_2150, start_1)) handle _ => L_5460
  block L_5459 (x_5134: word32)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5461
  block L_5461 (env_2151: unit)
    call L_5462 (x_2428 (env_2151, len_8)) handle _ => L_5460
  block L_5460 (x_5135: exn)
    case x_5135 of
      Overflow_0 => L_5463 | _ => L_5464
  block L_5464 ()
    call tail x_5136 (x_5135, x_388 (*()*))
  block L_5463 (x_5137: (unit) ref)
    val x_5138: bool = prim MLton_equal[(unit) ref] (x_5137, x_62)
    case x_5138 of
      true => L_5466 | false => L_5465
  block L_5465 ()
    call tail x_5136 (x_5135, x_392 (*()*))
  block L_5466 ()
    raise (x_391 (*con Fail_0 (x_390)*))
  block L_5462 (x_5139: word32)
    val x_5140: ((word8) vector, word32, word32) tuple = (seq_2, x_5134, x_5139)
    return (x_5140)
fun x_5136 (env_2152: exn, unit_17: unit):
  {returns = Some (((word8) vector, word32, word32) tuple), raises = Some (exn)} =
L_5467 ()
  block L_5467 ()
    raise (env_2152)
fun fromIntForLength_1 (env_2153: unit, x_5141: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_5468 ()
  block L_5468 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5469
  block L_5469 (env_2154: unit)
    call L_5470 (sextdFromInt32ToInt64_1 (env_2154, x_5141)) handle _ => L_5471
  block L_5471 (x_5142: exn)
    case x_5142 of
      Overflow_0 => L_5472 | _ => L_5473
  block L_5473 ()
    call tail x_5143 (x_5142, x_386 (*()*))
  block L_5472 (x_5144: (unit) ref)
    val x_5145: bool = prim MLton_equal[(unit) ref] (x_5144, x_62)
    case x_5145 of
      true => L_5475 | false => L_5474
  block L_5474 ()
    call tail x_5143 (x_5142, x_387 (*()*))
  block L_5475 ()
    raise (x_66 (*con Size_0 (x_65)*))
  block L_5470 (x_5146: word64)
    return (x_5146)
fun x_5143 (env_2155: exn, unit_18: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5476 ()
  block L_5476 ()
    raise (env_2155)
fun exnMessage_2 (env_2156: (list_0) ref, x_5147: exn):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5477 ()
  block L_5477 ()
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_5478
  block L_5478 (env_2157: unit)
    call L_5479 (x_1797 (env_2157, env_2156)) handle _ => raise
  block L_5479 (x_5148: list_0)
    call tail find_0 (x_5147, x_5148)
fun find_0 (env_2158: exn, x_5149: list_0):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5480 ()
  block L_5480 ()
    case x_5149 of
      nil_1 => L_5482 | ::_3 => L_5481
  block L_5481 (x_5150: (lambdas_0, list_0) tuple)
    val x_5152: list_0 = #1 (x_5150)
    val x_5151: lambdas_0 = #0 (x_5150)
    case x_5151 of
      xEnv_249 => L_5485 | xEnv_248 => L_5484 | xEnv_247 => L_5483
  block L_5483 (env_2159: (lambdas_31, lambdas_32) tuple)
    call L_5486 (x_3439 (env_2159, env_2158)) handle _ => raise
  block L_5484 (env_2160: lambdas_31)
    call L_5486 (x_4599 (env_2160, env_2158)) handle _ => raise
  block L_5485 (env_2161: (lambdas_31, list_3) tuple)
    call L_5486 (x_4548 (env_2161, env_2158)) handle _ => raise
  block L_5486 (x_5153: t_2)
    case x_5153 of
      NONE_3 => L_5488 | SOME_1 => L_5487
  block L_5487 (x_5154: (word8) vector)
    return (x_5154)
  block L_5488 ()
    call tail find_0 (env_2158, x_5152)
  block L_5482 ()
    case name_0 (*con nameEnv_0 (x_53)*) of
      nameEnv_0 => L_5489
  block L_5489 (env_2162: unit)
    call tail name_1 (env_2162, env_2158)
fun mkBigCvt_0 (env_2163:
                  (word64,
                   word32,
                   word32,
                   word32,
                   lambdas_250,
                   word32,
                   word32,
                   word32) tuple,
                x_5155: (word32, lambdas_285) tuple):
  {returns = Some (lambdas_284), raises = Some (exn)} =
L_5490 ()
  block L_5490 ()
    val bytesPerSequenceMetaData_1: word64 = #0 (env_2163)
    val minInt'_25: word32 = #1 (env_2163)
    val one_62: word32 = #2 (env_2163)
    val zero_79: word32 = #3 (env_2163)
    val quot_9: lambdas_250 = #4 (env_2163)
    val sizeInBitsWord_28: word32 = #5 (env_2163)
    val zero_78: word32 = #6 (env_2163)
    val one_61: word32 = #7 (env_2163)
    val x_5157:
      (word64,
       word32,
       word32,
       word32,
       lambdas_250,
       word32,
       word32,
       word32,
       (word32, lambdas_285) tuple) tuple =
      (bytesPerSequenceMetaData_1,
       minInt'_25,
       one_62,
       zero_79,
       quot_9,
       sizeInBitsWord_28,
       zero_78,
       one_61,
       x_5155)
    val x_5156: lambdas_284 = con xEnv_226 (x_5157)
    return (x_5156)
fun x_5158 (env_2164:
              (word64,
               word32,
               word32,
               word32,
               lambdas_250,
               word32,
               word32,
               word32,
               (word32, lambdas_285) tuple) tuple,
            x_5159: intInf):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5491 ()
  block L_5491 ()
    val bytesPerSequenceMetaData_2: word64 = #0 (env_2164)
    val minInt'_26: word32 = #1 (env_2164)
    val one_64: word32 = #2 (env_2164)
    val zero_81: word32 = #3 (env_2164)
    val quot_10: lambdas_250 = #4 (env_2164)
    val sizeInBitsWord_29: word32 = #5 (env_2164)
    val zero_80: word32 = #6 (env_2164)
    val one_63: word32 = #7 (env_2164)
    val x_5161: (word32, lambdas_285) tuple = #8 (env_2164)
    val x_5162: lambdas_285 = #1 (x_5161)
    val x_5160: word32 = #0 (x_5161)
    case isSmall_0 (*con isSmal ... e_24)*) of
      isSmallEnv_0 => L_5492
  block L_5492 (env_2165: unit)
    call L_5493 (isSmall_1 (env_2165, x_5159)) handle _ => raise
  block L_5493 (x_5163: bool)
    case x_5163 of
      true => L_5495 | false => L_5494
  block L_5494 ()
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_5496
  block L_5496 (env_2166: unit)
    call L_5497 (idFromInt32ToWord32_1 (env_2166, x_5160)) handle _ => raise
  block L_5497 (x_5164: word32)
    val x_5165: (word32, word32) tuple = (x_5164, zero_80)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5498
  block L_5498 (env_2167: unit)
    call L_5499 (x_2054 (env_2167, x_5165)) handle _ => raise
  block L_5499 (x_5166: bool)
    case x_5166 of
      true => L_5501 | false => L_5500
  block L_5500 ()
    val x_5167: (word32, word32) tuple = (sizeInBitsWord_29, x_373 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5502
  block L_5502 (env_2168: unit)
    call L_5503 (>>?_5 (env_2168, x_5167)) handle _ => raise
  block L_5503 (x_5168: word32)
    val x_5169: (word32, word32, word32) tuple =
      (x_5164, x_5168, x_374 (*0x0:w32*))
    call L_5504 (loop_42 (one_63, x_5169)) handle _ => raise
  block L_5504 (x_5170: word32)
    val x_5171: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_5170)
    case quot_10 of
      quotEnv_1 => L_5505
  block L_5505 (env_2169: (word32, word32, word32) tuple)
    call L_5506 (quot_2 (env_2169, x_5171)) handle _ => raise
  block L_5506 (x_5172: word32)
    val x_5173: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), zero_81)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_5507
  block L_5507 (env_2170: unit)
    call L_5508 (>=_6 (env_2170, x_5173)) handle _ => raise
  block L_5508 (x_5174: bool)
    case x_5174 of
      true => L_5510 | false => L_5509
  block L_5509 ()
    val x_5175: (word32, word32) tuple = (x_5170, zero_81)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5511
  block L_5511 (env_2171: unit)
    call L_5512 (<_5 (env_2171, x_5175)) handle _ => raise
  block L_5512 (x_5176: bool)
    case x_5176 of
      true => L_5514 | false => L_5513
  block L_5513 ()
    val x_5177: (word32, word32) tuple = (x_5170, zero_81)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_5515
  block L_5515 (env_2172: unit)
    call L_5516 (>_9 (env_2172, x_5177)) handle _ => raise
  block L_5516 (x_5178: bool)
    case x_5178 of
      true => L_5518 | false => L_5517
  block L_5517 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_5518 ()
    val x_5179: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), one_64)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5519
  block L_5519 (env_2173: unit)
    call L_5520 (+!_3 (env_2173, x_5179)) handle _ => raise
  block L_5520 (x_5180: word32)
    val x_5181: (word32, word32) tuple = (x_5180, x_5170)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5521
  block L_5521 (env_2174: unit)
    call L_5522 (remUnsafe_1 (env_2174, x_5181)) handle _ => raise
  block L_5522 (x_5182: word32)
    val x_5183: (word32, word32) tuple = (x_5170, one_64)
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5523
  block L_5523 (env_2175: unit)
    call L_5524 (-!_3 (env_2175, x_5183)) handle _ => raise
  block L_5524 (x_5184: word32)
    val x_5185: (word32, word32) tuple = (x_5182, x_5184)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5525
  block L_5525 (env_2176: unit)
    call L_5526 (+!_3 (env_2176, x_5185)) handle _ => raise
  block L_5514 ()
    val x_5186: (word32, word32) tuple =
      (sizeInBits_32 (*0x40:w32*), minInt'_26)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5527
  block L_5527 (env_2177: unit)
    call L_5528 (x_2054 (env_2177, x_5186)) handle _ => raise
  block L_5528 (x_5187: bool)
    case x_5187 of
      true => L_5530 | false => L_5529
  block L_5529 ()
    goto L_5531 (x_375 (*con false*))
  block L_5530 ()
    case x_156 (*con xEnv_20 (x_155)*) of
      xEnv_20 => L_5532
  block L_5532 (env_2178: unit)
    call L_5533 (x_4798 (env_2178, one_64)) handle _ => raise
  block L_5533 (x_5188: word32)
    val x_5189: (word32, word32) tuple = (x_5170, x_5188)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5534
  block L_5534 (env_2179: unit)
    call L_5531 (x_2054 (env_2179, x_5189)) handle _ => raise
  block L_5531 (x_5190: bool)
    case x_5190 of
      true => L_5536 | false => L_5535
  block L_5535 ()
    val x_5191: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_5170)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5537
  block L_5537 (env_2180: unit)
    call L_5526 (remUnsafe_1 (env_2180, x_5191)) handle _ => raise
  block L_5536 ()
    goto L_5526 (zero_81)
  block L_5510 ()
    val x_5192: (word32, word32) tuple = (x_5170, zero_81)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_5538
  block L_5538 (env_2181: unit)
    call L_5539 (>_9 (env_2181, x_5192)) handle _ => raise
  block L_5539 (x_5193: bool)
    case x_5193 of
      true => L_5541 | false => L_5540
  block L_5540 ()
    val x_5194: (word32, word32) tuple = (x_5170, zero_81)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5542
  block L_5542 (env_2182: unit)
    call L_5543 (<_5 (env_2182, x_5194)) handle _ => raise
  block L_5543 (x_5195: bool)
    case x_5195 of
      true => L_5545 | false => L_5544
  block L_5544 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_5545 ()
    val x_5196: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), zero_81)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5546
  block L_5546 (env_2183: unit)
    call L_5547 (x_2054 (env_2183, x_5196)) handle _ => raise
  block L_5547 (x_5197: bool)
    case x_5197 of
      true => L_5549 | false => L_5548
  block L_5548 ()
    val x_5198: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), one_64)
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5550
  block L_5550 (env_2184: unit)
    call L_5551 (-!_3 (env_2184, x_5198)) handle _ => raise
  block L_5551 (x_5199: word32)
    val x_5200: (word32, word32) tuple = (x_5199, x_5170)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5552
  block L_5552 (env_2185: unit)
    call L_5553 (remUnsafe_1 (env_2185, x_5200)) handle _ => raise
  block L_5553 (x_5201: word32)
    val x_5202: (word32, word32) tuple = (x_5170, one_64)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_5554
  block L_5554 (env_2186: unit)
    call L_5555 (x_1626 (env_2186, x_5202)) handle _ => raise
  block L_5555 (x_5203: word32)
    val x_5204: (word32, word32) tuple = (x_5201, x_5203)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5556
  block L_5556 (env_2187: unit)
    call L_5526 (+!_3 (env_2187, x_5204)) handle _ => raise
  block L_5549 ()
    goto L_5526 (zero_81)
  block L_5541 ()
    val x_5205: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_5170)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5557
  block L_5557 (env_2188: unit)
    call L_5526 (remUnsafe_1 (env_2188, x_5205)) handle _ => raise
  block L_5526 (x_5206: word32)
    val x_5207: (word32, word32) tuple = (x_5206, x_376 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5558
  block L_5558 (env_2189: unit)
    call L_5559 (x_2054 (env_2189, x_5207)) handle _ => raise
  block L_5559 (x_5208: bool)
    case x_5208 of
      true => L_5561 | false => L_5560
  block L_5560 ()
    goto L_5562 (x_378 (*0x1:w32*))
  block L_5561 ()
    goto L_5562 (x_377 (*0x0:w32*))
  block L_5562 (x_5209: word32)
    val x_5210: (word32, word32) tuple = (x_5172, x_5209)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_5563
  block L_5563 (env_2190: unit)
    call L_5564 (x_1626 (env_2190, x_5210)) handle _ => raise
  block L_5564 (dpl_0: word32)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5565
  block L_5565 (env_2191: unit)
    call L_5566 (+_5 (env_2191, x_1455)) handle _ => raise
  block L_5566 (x_5211: word64)
    val x_5212: (word64, word64) tuple = (bytesPerSequenceMetaData_2, x_5211)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5567
  block L_5567 (env_2192: unit)
    call L_5568 (+_5 (env_2192, x_5212)) handle _ => raise
  block L_5568 (x_5213: word64)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_5569
  block L_5569 (env_2193: unit)
    call L_5570 (zextdFromInt32ToWord64_1 (env_2193, dpl_0)) handle _ => raise
  block L_5570 (x_5214: word64)
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_5571
  block L_5571 (env_2194: unit)
    call L_5572 (numLimbs_1 (env_2194, x_5159)) handle _ => raise
  block L_5572 (x_5215: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_5573
  block L_5573 (env_2195: unit)
    call L_5574 (zextdFromInt64ToWord64_1 (env_2195, x_5215)) handle _ => raise
  block L_5574 (x_5216: word64)
    val x_5217: (word64, word64) tuple = (x_5214, x_5216)
    case *_0 (*con *Env_0 (x_147)*) of
      *Env_0 => L_5575
  block L_5575 (env_2196: unit)
    call L_5576 (*_1 (env_2196, x_5217)) handle _ => raise
  block L_5576 (x_5218: word64)
    val x_5219: (word64, word64) tuple = (x_5213, x_5218)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5577
  block L_5577 (env_2197: unit)
    call L_5578 (+_5 (env_2197, x_5219)) handle _ => raise
  block L_5578 (bytes_1: word64)
    val x_5220: (word8) vector = prim IntInf_toString (x_5159, x_5160, bytes_1)
    return (x_5220)
  block L_5501 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_5495 ()
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_5579
  block L_5579 (env_2198: unit)
    call L_5580 (dropTagCoerce_1 (env_2198, x_5159)) handle _ => raise
  block L_5580 (x_5221: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_5581
  block L_5581 (env_2199: unit)
    call L_5582 (zextdFromWord64ToInt64_1 (env_2199, x_5221)) handle _ => raise
  block L_5582 (x_5222: word64)
    case x_5162 of
      xEnv_227 => L_5583
  block L_5583 (env_2200:
                  (word32,
                   lambdas_245,
                   word64,
                   word64,
                   word64,
                   radix_0,
                   (word8) array,
                   lambdas_248,
                   (bool) ref) tuple)
    call tail x_4695 (env_2200, x_5222)
fun loop_42 (env_2201: word32, x_5223: (word32, word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5584 ()
  block L_5584 ()
    val acc_0: word32 = #2 (x_5223)
    val s_0: word32 = #1 (x_5223)
    val n_19: word32 = #0 (x_5223)
    val x_5224: (word32, word32) tuple = (n_19, env_2201)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5585
  block L_5585 (env_2202: unit)
    call L_5586 (x_2054 (env_2202, x_5224)) handle _ => raise
  block L_5586 (x_5225: bool)
    case x_5225 of
      true => L_5588 | false => L_5587
  block L_5587 ()
    val x_5226: (word32, word32) tuple = (env_2201, s_0)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_5589
  block L_5589 (env_2203: unit)
    call L_5590 (<<?_5 (env_2203, x_5226)) handle _ => raise
  block L_5590 (x_5227: word32)
    val x_5228: (word32, word32) tuple = (n_19, x_5227)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5591
  block L_5591 (env_2204: unit)
    call L_5592 (>=_10 (env_2204, x_5228)) handle _ => raise
  block L_5592 (x_5229: bool)
    case x_5229 of
      true => L_5594 | false => L_5593
  block L_5593 ()
    val x_5230: (word32, word32) tuple = (n_19, acc_0)
    goto L_5595 (x_5230)
  block L_5594 ()
    val x_5231: (word32, word32) tuple = (n_19, s_0)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5596
  block L_5596 (env_2205: unit)
    call L_5597 (>>?_5 (env_2205, x_5231)) handle _ => raise
  block L_5597 (x_5232: word32)
    val x_5234: word32 = prim Word32_add (acc_0, s_0)
    val x_5233: (word32, word32) tuple = (x_5232, x_5234)
    goto L_5595 (x_5233)
  block L_5595 (x_5235: (word32, word32) tuple)
    val acc_1: word32 = #1 (x_5235)
    val n_20: word32 = #0 (x_5235)
    val x_5236: (word32, word32) tuple = (s_0, x_372 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5598
  block L_5598 (env_2206: unit)
    call L_5599 (>>?_5 (env_2206, x_5236)) handle _ => raise
  block L_5599 (x_5237: word32)
    val x_5238: (word32, word32, word32) tuple = (n_20, x_5237, acc_1)
    call tail loop_42 (env_2201, x_5238)
  block L_5588 ()
    return (acc_0)
fun reserve_1 (env_2207: (word64, word64) tuple, x_5239: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5600 ()
  block L_5600 ()
    val bytesPerMPLimb_1: word64 = #0 (env_2207)
    val bytesPerSequenceMetaData_3: word64 = #1 (env_2207)
    val extra_0: word64 = #1 (x_5239)
    val num_0: word64 = #0 (x_5239)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_5601
  block L_5601 (env_2208: unit)
    call L_5602 (zextdFromInt64ToWord64_1 (env_2208, num_0)) handle _ => raise
  block L_5602 (x_5240: word64)
    val x_5241: (word64, word64) tuple = (bytesPerMPLimb_1, x_5240)
    case *_0 (*con *Env_0 (x_147)*) of
      *Env_0 => L_5603
  block L_5603 (env_2209: unit)
    call L_5604 (*_1 (env_2209, x_5241)) handle _ => raise
  block L_5604 (x_5242: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_5605
  block L_5605 (env_2210: unit)
    call L_5606 (zextdFromInt64ToWord64_1 (env_2210, extra_0)) handle _ => raise
  block L_5606 (x_5243: word64)
    val x_5244: (word64, word64) tuple = (bytesPerMPLimb_1, x_5243)
    case *_0 (*con *Env_0 (x_147)*) of
      *Env_0 => L_5607
  block L_5607 (env_2211: unit)
    call L_5608 (*_1 (env_2211, x_5244)) handle _ => raise
  block L_5608 (x_5245: word64)
    val x_5246: (word64, word64) tuple =
      (bytesPerSequenceMetaData_3, x_369 (*0x7:w64*))
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5609
  block L_5609 (env_2212: unit)
    call L_5610 (+_5 (env_2212, x_5246)) handle _ => raise
  block L_5610 (x_5247: word64)
    val x_5248: (word64, word64) tuple = (bytesPerMPLimb_1, x_5247)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5611
  block L_5611 (env_2213: unit)
    call L_5612 (+_5 (env_2213, x_5248)) handle _ => raise
  block L_5612 (x_5249: word64)
    val x_5250: (word64, word64) tuple = (x_5245, x_5249)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5613
  block L_5613 (env_2214: unit)
    call L_5614 (+_5 (env_2214, x_5250)) handle _ => raise
  block L_5614 (x_5251: word64)
    val x_5252: (word64, word64) tuple = (x_5242, x_5251)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5615
  block L_5615 (env_2215: unit)
    call tail +_5 (env_2215, x_5252)
fun sextdFromInt64_1 (env_2216: (word32, word64) tuple, x_5253: word64):
  {returns = Some (intInf), raises = Some (exn)} =
L_5616 ()
  block L_5616 ()
    val sizeInBitsWord_30: word32 = #0 (env_2216)
    val zero_82: word64 = #1 (env_2216)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5617
  block L_5617 (env_2217: unit)
    call L_5618 (idFromInt64ToWord64_1 (env_2217, x_5253)) handle _ => raise
  block L_5618 (x_5254: word64)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_5619
  block L_5619 (env_2218: unit)
    call L_5620 (>_9 (env_2218, x_1451)) handle _ => raise
  block L_5620 (x_5255: bool)
    case x_5255 of
      true => L_5622 | false => L_5621
  block L_5621 ()
    val x_5256: (word32, word32) tuple = (sizeInBitsWord_30, x_350 (*0x2:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_5623
  block L_5623 (env_2219: unit)
    call L_5624 (-_3 (env_2219, x_5256)) handle _ => raise
  block L_5624 (shift_0: word32)
    val x_5257: (word64, word32) tuple = (x_5254, shift_0)
    case ~>>?_0 (*con ~>>?En ... _149)*) of
      ~>>?Env_0 => L_5625
  block L_5625 (env_2220: unit)
    call L_5626 (~>>?_1 (env_2220, x_5257)) handle _ => raise
  block L_5626 (upperBits_0: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_5627
  block L_5627 (env_2221: unit)
    call L_5628 (notb_7 (env_2221, zero_82)) handle _ => raise
  block L_5628 (oneBits_0: word64)
    val x_5258: (word64, word64) tuple = (upperBits_0, zero_82)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5629
  block L_5629 (env_2222: unit)
    call L_5630 (x_2300 (env_2222, x_5258)) handle _ => raise
  block L_5630 (x_5259: bool)
    case x_5259 of
      true => L_5632 | false => L_5631
  block L_5631 ()
    val x_5260: (word64, word64) tuple = (upperBits_0, oneBits_0)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5633
  block L_5633 (env_2223: unit)
    call L_5634 (x_2300 (env_2223, x_5260)) handle _ => raise
  block L_5632 ()
    goto L_5634 (x_351 (*con true*))
  block L_5622 ()
    goto L_5634 (x_349 (*con true*))
  block L_5634 (x_5261: bool)
    case x_5261 of
      true => L_5636 | false => L_5635
  block L_5635 ()
    val tuple_111: (word64, word32) tuple = (zero_82, sizeInBitsWord_30)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_5637
  block L_5637 (env_2224: unit)
    call L_5638 (idFromWord64ToInt64_1 (env_2224, x_5254)) handle _ => raise
  block L_5638 (x_5262: word64)
    val x_5263: (word64, word64) tuple = (x_5262, x_353 (*0x0:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5639
  block L_5639 (env_2225: unit)
    call L_5640 (<_7 (env_2225, x_5263)) handle _ => raise
  block L_5640 (x_5264: bool)
    case x_5264 of
      true => L_5642 | false => L_5641
  block L_5641 ()
    val x_5265: (word64, word64, list_12) tuple =
      (x_5254, x_360 (*0x1:w64*), x_365 (*con ::_0 (x_364)*))
    call L_5643 (loop_43 (tuple_111, x_5265)) handle _ => raise
  block L_5642 ()
    val x_5267: word64 = prim Word64_neg (x_5254)
    val x_5266: (word64, word64, list_12) tuple =
      (x_5267, x_354 (*0x1:w64*), x_359 (*con ::_0 (x_358)*))
    call L_5643 (loop_43 (tuple_111, x_5266)) handle _ => raise
  block L_5643 (x_5268: (word64, list_12) tuple)
    val acc_2: list_12 = #1 (x_5268)
    val n_21: word64 = #0 (x_5268)
    val x_5269: (word64) array = prim Array_alloc[word64] (n_21)
    call L_5644 (loop_44 (x_5269, acc_2)) handle _ => raise
  block L_5644 (x_5270: unit)
    val x_5272: (word64) vector = prim Array_toVector[word64] (x_5269)
    val x_5271: intInf = prim WordVector_toIntInf (x_5272)
    return (x_5271)
  block L_5636 ()
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_5645
  block L_5645 (env_2226: unit)
    call L_5646 (addTag_1 (env_2226, x_5254)) handle _ => raise
  block L_5646 (x_5273: word64)
    case fromWord_1 (*con fromWo ... _200)*) of
      fromWordEnv_1 => L_5647
  block L_5647 (env_2227: unit)
    call tail fromWord_3 (env_2227, x_5273)
fun loop_44 (env_2228: (word64) array, x_5274: list_12):
  {returns = Some (unit), raises = Some (exn)} =
L_5648 ()
  block L_5648 ()
    case x_5274 of
      nil_0 => L_5650 | ::_0 => L_5649
  block L_5649 (x_5275: ((word64, word64) tuple, list_12) tuple)
    val x_5280: list_12 = #1 (x_5275)
    val x_5278: (word64, word64) tuple = #0 (x_5275)
    val x_5279: word64 = #1 (x_5278)
    val x_5277: word64 = #0 (x_5278)
    val x_5276: (word64, word64) tuple = (x_367 (*0x0:w64*), x_5277)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5651
  block L_5651 (env_2229: unit)
    call L_5652 (+!_2 (env_2229, x_5276)) handle _ => raise
  block L_5652 (x_5281: word64)
    val _: unit = prim Array_update[word64] (env_2228, x_5281, x_5279)
    call tail loop_44 (env_2228, x_5280)
  block L_5650 ()
    return (x_366 (*()*))
fun loop_43 (env_2230: (word64, word32) tuple,
             x_5282: (word64, word64, list_12) tuple):
  {returns = Some ((word64, list_12) tuple), raises = Some (exn)} =
L_5653 ()
  block L_5653 ()
    val zero_83: word64 = #0 (env_2230)
    val sizeInBitsWord_31: word32 = #1 (env_2230)
    val acc_3: list_12 = #2 (x_5282)
    val i_39: word64 = #1 (x_5282)
    val w_2: word64 = #0 (x_5282)
    val x_5283: (word64, word64) tuple = (w_2, zero_83)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5654
  block L_5654 (env_2231: unit)
    call L_5655 (x_2300 (env_2231, x_5283)) handle _ => raise
  block L_5655 (x_5284: bool)
    case x_5284 of
      true => L_5657 | false => L_5656
  block L_5656 ()
    val x_5285: (word64, word32) tuple = (w_2, sizeInBitsWord_31)
    case >>?_3 (*con >>?Env_3 (x_150)*) of
      >>?Env_3 => L_5658
  block L_5658 (env_2232: unit)
    call L_5659 (>>?_4 (env_2232, x_5285)) handle _ => raise
  block L_5659 (w_3: word64)
    val x_5286: (word64, word64) tuple = (i_39, x_352 (*0x1:w64*))
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_5660
  block L_5660 (env_2233: unit)
    call L_5661 (x_3113 (env_2233, x_5286)) handle _ => raise
  block L_5661 (x_5287: word64)
    val x_5291: (word64, word64) tuple = (i_39, w_2)
    val x_5290: ((word64, word64) tuple, list_12) tuple = (x_5291, acc_3)
    val x_5289: list_12 = con ::_0 (x_5290)
    val x_5288: (word64, word64, list_12) tuple = (w_3, x_5287, x_5289)
    call tail loop_43 (env_2230, x_5288)
  block L_5657 ()
    val x_5292: (word64, list_12) tuple = (i_39, acc_3)
    return (x_5292)
fun addTag_1 (env_2234: unit, x_5293: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_5662 ()
  block L_5662 ()
    val x_5294: (word64, word32) tuple = (x_5293, x_347 (*0x1:w32*))
    case <<?_3 (*con <<?Env_3 (x_146)*) of
      <<?Env_3 => L_5663
  block L_5663 (env_2235: unit)
    call L_5664 (<<?_4 (env_2235, x_5294)) handle _ => raise
  block L_5664 (x_5295: word64)
    val x_5296: word64 = prim Word64_orb (x_5295, x_348 (*0x1:w64*))
    return (x_5296)
fun dropTagCoerce_1 (env_2236: unit, x_5297: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_5665 ()
  block L_5665 ()
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5666
  block L_5666 (env_2237: unit)
    call L_5667 (toWord_1 (env_2237, x_5297)) handle _ => raise
  block L_5667 (x_5298: word64)
    val x_5299: (word64, word32) tuple = (x_5298, x_346 (*0x1:w32*))
    case ~>>?_0 (*con ~>>?En ... _149)*) of
      ~>>?Env_0 => L_5668
  block L_5668 (env_2238: unit)
    call tail ~>>?_1 (env_2238, x_5299)
fun numLimbs_1 (env_2239: unit, x_5300: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_5669 ()
  block L_5669 ()
    case isSmall_0 (*con isSmal ... e_24)*) of
      isSmallEnv_0 => L_5670
  block L_5670 (env_2240: unit)
    call L_5671 (isSmall_1 (env_2240, x_5300)) handle _ => raise
  block L_5671 (x_5301: bool)
    case x_5301 of
      true => L_5673 | false => L_5672
  block L_5672 ()
    val x_5304: (word64) vector = prim IntInf_toVector (x_5300)
    val x_5303: word64 = prim Vector_length[word64] (x_5304)
    val x_5302: (word64, word64) tuple = (x_5303, x_345 (*0x1:w64*))
    case x_170 (*con xEnv_24 (x_169)*) of
      xEnv_24 => L_5674
  block L_5674 (env_2241: unit)
    call tail x_2295 (env_2241, x_5302)
  block L_5673 ()
    return (x_344 (*0x1:w64*))
fun areSmall_1 (env_2242: unit, x_5305: (intInf, intInf) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5675 ()
  block L_5675 ()
    val i'_0: intInf = #1 (x_5305)
    val i_40: intInf = #0 (x_5305)
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5676
  block L_5676 (env_2243: unit)
    call L_5677 (toWord_1 (env_2243, i_40)) handle _ => raise
  block L_5677 (x_5306: word64)
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5678
  block L_5678 (env_2244: unit)
    call L_5679 (toWord_1 (env_2244, i'_0)) handle _ => raise
  block L_5679 (x_5307: word64)
    val x_5308: (word64, word64) tuple = (x_5306, x_5307)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_5680
  block L_5680 (env_2245: unit)
    call L_5681 (andb_2 (env_2245, x_5308)) handle _ => raise
  block L_5681 (x_5309: word64)
    val x_5310: (word64, word64) tuple = (x_5309, x_343 (*0x1:w64*))
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_5682
  block L_5682 (env_2246: unit)
    call L_5683 (andb_2 (env_2246, x_5310)) handle _ => raise
  block L_5683 (x_5311: word64)
    val x_5312: (word64, word64) tuple = (x_342 (*0x0:w64*), x_5311)
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5684
  block L_5684 (env_2247: unit)
    call tail x_5313 (env_2247, x_5312)
fun isSmall_1 (env_2248: unit, x_5314: intInf):
  {returns = Some (bool), raises = Some (exn)} =
L_5685 ()
  block L_5685 ()
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5686
  block L_5686 (env_2249: unit)
    call L_5687 (toWord_1 (env_2249, x_5314)) handle _ => raise
  block L_5687 (x_5315: word64)
    val x_5316: (word64, word64) tuple = (x_5315, x_341 (*0x1:w64*))
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_5688
  block L_5688 (env_2250: unit)
    call L_5689 (andb_2 (env_2250, x_5316)) handle _ => raise
  block L_5689 (x_5317: word64)
    val x_5318: (word64, word64) tuple = (x_340 (*0x0:w64*), x_5317)
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5690
  block L_5690 (env_2251: unit)
    call tail x_5313 (env_2251, x_5318)
fun sequence_2 (env_2252: lambdas_494, x_5319: t_19):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5691 ()
  block L_5691 ()
    case x_5319 of
      T_4 => L_5692
  block L_5692 (x_5320: (word64, (word8) vector, word64) tuple)
    val x_5322: word64 = #2 (x_5320)
    val x_5324: (word8) vector = #1 (x_5320)
    val x_5323: word64 = #0 (x_5320)
    val x_5321: (word64, word64) tuple = (x_5322, x_337 (*0x0:w64*))
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5693
  block L_5693 (env_2253: unit)
    call L_5694 (x_5313 (env_2253, x_5321)) handle _ => raise
  block L_5694 (x_5325: bool)
    case x_5325 of
      true => L_5696 | false => L_5695
  block L_5695 ()
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_5697
  block L_5697 (env_2254: unit)
    call L_5698 (x_2426 (env_2254, x_5324)) handle _ => raise
  block L_5698 (x_5326: word64)
    val x_5327: (word64, word64) tuple = (x_5323, x_5326)
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5699
  block L_5699 (env_2255: unit)
    call L_5700 (x_5313 (env_2255, x_5327)) handle _ => raise
  block L_5696 ()
    goto L_5700 (x_338 (*con true*))
  block L_5700 (x_5328: bool)
    case x_5328 of
      true => L_5702 | false => L_5701
  block L_5701 ()
    return (x_5324)
  block L_5702 ()
    case env_2252 of
      arrayAllocEnv_1 => L_5703
  block L_5703 (env_2256: word64)
    call L_5704 (arrayAlloc_2 (env_2256, x_5323)) handle _ => raise
  block L_5704 (a_8: (word8) array)
    val x_5329: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_8, x_339 (*0x0:w64*), x_5324, x_5322, x_5323)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_5705
  block L_5705 (env_2257: unit)
    call L_5706 (x_2466 (env_2257, x_5329)) handle _ => raise
  block L_5706 (x_5330: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5707
  block L_5707 (env_2258: unit)
    call tail x_1795 (env_2258, a_8)
fun base_5 (env_2259: unit, x_5331: t_19):
  {returns = Some (((word8) vector, word64, word64) tuple), raises = Some (exn)} =
L_5708 ()
  block L_5708 ()
    case x_5331 of
      T_4 => L_5709
  block L_5709 (x_5332: (word64, (word8) vector, word64) tuple)
    val x_5335: word64 = #2 (x_5332)
    val x_5336: (word8) vector = #1 (x_5332)
    val x_5334: word64 = #0 (x_5332)
    val x_5333: ((word8) vector, word64, word64) tuple =
      (x_5336, x_5335, x_5334)
    return (x_5333)
fun full_2 (env_2260: unit, x_5337: (word8) vector):
  {returns = Some (t_19), raises = Some (exn)} =
L_5710 ()
  block L_5710 ()
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_5711
  block L_5711 (env_2261: unit)
    call L_5712 (x_2426 (env_2261, x_5337)) handle _ => raise
  block L_5712 (x_5338: word64)
    val x_5340: (word64, (word8) vector, word64) tuple =
      (x_5338, x_5337, x_336 (*0x0:w64*))
    val x_5339: t_19 = con T_4 (x_5340)
    return (x_5339)
fun length_3 (env_2262: unit, x_5341: t_19):
  {returns = Some (word64), raises = Some (exn)} =
L_5713 ()
  block L_5713 ()
    case x_5341 of
      T_4 => L_5714
  block L_5714 (x_5342: (word64, (word8) vector, word64) tuple)
    val x_5343: word64 = #0 (x_5342)
    return (x_5343)
fun arrayAlloc_2 (env_2263: word64, x_5344: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5715 ()
  block L_5715 ()
    val x_5345: (word64, word64) tuple = (x_5344, env_2263)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5716
  block L_5716 (env_2264: unit)
    call L_5717 (>_5 (env_2264, x_5345)) handle _ => raise
  block L_5717 (x_5346: bool)
    case x_5346 of
      true => L_5719 | false => L_5718
  block L_5718 ()
    case x_175 (*con xEnv_26 (x_174)*) of
      xEnv_26 => L_5720
  block L_5720 (env_2265: unit)
    call tail x_5347 (env_2265, x_5344)
  block L_5719 ()
    raise (x_66 (*con Size_0 (x_65)*))
fun valOf_3 (env_2266: unit, x_5348: t_0):
  {returns = Some (word32), raises = Some (exn)} =
L_5721 ()
  block L_5721 ()
    case x_5348 of
      SOME_0 => L_5723 | NONE_1 => L_5722
  block L_5722 ()
    return (x_335 (*0x0:w32*))
  block L_5723 (x_5349: word32)
    return (x_5349)
fun vector_1 (env_2267: unit, x_5350: t_13):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5724 ()
  block L_5724 ()
    case x_5350 of
      T_3 => L_5725
  block L_5725 (x_5351: (word64, (word8) array, word64) tuple)
    val x_5352: word64 = #0 (x_5351)
    case unsafeArrayAlloc_0 (*con unsafe ... e_17)*) of
      unsafeArrayAllocEnv_0 => L_5726
  block L_5726 (env_2268: unit)
    call L_5727 (unsafeArrayAlloc_1 (env_2268, x_5352)) handle _ => raise
  block L_5727 (x_5353: (word8) array)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_5728
  block L_5728 (env_2269: unit)
    call L_5729 (x_4527 (env_2269, x_5353)) handle _ => raise
  block L_5729 (x_5354: (word8) array)
    case x_5350 of
      T_3 => L_5730
  block L_5730 (x_5355: (word64, (word8) array, word64) tuple)
    val x_5359: word64 = #2 (x_5355)
    val x_5358: (word8) array = #1 (x_5355)
    val x_5357: word64 = #0 (x_5355)
    val x_5356: (word64, word64) tuple = (x_5357, smallCopyLimit_0 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5731
  block L_5731 (env_2270: unit)
    call L_5732 (<_7 (env_2270, x_5356)) handle _ => raise
  block L_5732 (x_5360: bool)
    case x_5360 of
      true => L_5734 | false => L_5733
  block L_5733 ()
    val x_5361: unit =
      prim Array_copyArray[word8] (x_5354,
                                   x_330 (*0x0:w64*),
                                   x_5358,
                                   x_5359,
                                   x_5357)
    goto L_5735 (x_5361)
  block L_5734 ()
    val x_5362: (word64, word64) tuple = (x_5357, x_331 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5736
  block L_5736 (env_2271: unit)
    call L_5737 (-!_2 (env_2271, x_5362)) handle _ => raise
  block L_5737 (len_9: word64)
    val tuple_112: (word64, word64, (word8) array, (word8) array) tuple =
      (len_9, x_5359, x_5358, x_5354)
    call L_5735 (loop_45 (tuple_112, x_334 (*0x0:w64*))) handle _ => raise
  block L_5735 (x_5363: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5738
  block L_5738 (env_2272: unit)
    call tail x_1795 (env_2272, x_5354)
fun loop_45 (env_2273: (word64, word64, (word8) array, (word8) array) tuple,
             x_5364: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_5739 ()
  block L_5739 ()
    val len_10: word64 = #0 (env_2273)
    val x_5368: word64 = #1 (env_2273)
    val x_5367: (word8) array = #2 (env_2273)
    val x_5366: (word8) array = #3 (env_2273)
    val x_5365: (word64, word64) tuple = (x_5364, len_10)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_5740
  block L_5740 (env_2274: unit)
    call L_5741 (>_6 (env_2274, x_5365)) handle _ => raise
  block L_5741 (x_5369: bool)
    case x_5369 of
      true => L_5743 | false => L_5742
  block L_5742 ()
    val x_5370: (word64, word64) tuple = (x_330 (*0x0:w64*), x_5364)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5744
  block L_5744 (env_2275: unit)
    call L_5745 (+!_2 (env_2275, x_5370)) handle _ => raise
  block L_5745 (x_5371: word64)
    val x_5372: (word64, word64) tuple = (x_5368, x_5364)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5746
  block L_5746 (env_2276: unit)
    call L_5747 (+!_2 (env_2276, x_5372)) handle _ => raise
  block L_5747 (x_5373: word64)
    val x_5375: word8 = prim Array_sub[word8] (x_5367, x_5373)
    val x_5374: ((word8) array, word64, word8) tuple = (x_5366, x_5371, x_5375)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5748
  block L_5748 (env_2277: unit)
    call L_5749 (x_2554 (env_2277, x_5374)) handle _ => raise
  block L_5749 (x_5376: unit)
    val x_5377: (word64, word64) tuple = (x_5364, x_333 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5750
  block L_5750 (env_2278: unit)
    call L_5751 (+!_2 (env_2278, x_5377)) handle _ => raise
  block L_5751 (x_5378: word64)
    call tail loop_45 (env_2273, x_5378)
  block L_5743 ()
    return (x_332 (*()*))
fun full_3 (env_2279: unit, x_5379: (word8) array):
  {returns = Some (t_13), raises = Some (exn)} =
L_5752 ()
  block L_5752 ()
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_5753
  block L_5753 (env_2280: unit)
    call L_5754 (x_2454 (env_2280, x_5379)) handle _ => raise
  block L_5754 (x_5380: word64)
    val x_5382: (word64, (word8) array, word64) tuple =
      (x_5380, x_5379, x_329 (*0x0:w64*))
    val x_5381: t_13 = con T_3 (x_5382)
    return (x_5381)
fun arrayAlloc_4 (env_2281: word64, x_5383: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5755 ()
  block L_5755 ()
    val x_5384: (word64, word64) tuple = (x_5383, env_2281)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5756
  block L_5756 (env_2282: unit)
    call L_5757 (>_5 (env_2282, x_5384)) handle _ => raise
  block L_5757 (x_5385: bool)
    case x_5385 of
      true => L_5759 | false => L_5758
  block L_5758 ()
    case unsafeArrayAlloc_0 (*con unsafe ... e_17)*) of
      unsafeArrayAllocEnv_0 => L_5760
  block L_5760 (env_2283: unit)
    call tail unsafeArrayAlloc_1 (env_2283, x_5383)
  block L_5759 ()
    raise (x_66 (*con Size_0 (x_65)*))
fun unsafeArrayAlloc_1 (env_2284: unit, x_5386: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5761 ()
  block L_5761 ()
    case x_175 (*con xEnv_26 (x_174)*) of
      xEnv_26 => L_5762
  block L_5762 (env_2285: unit)
    call tail x_5347 (env_2285, x_5386)
fun valOf_2 (env_2286: unit, x_5387: t_0):
  {returns = Some (word32), raises = Some (exn)} =
L_5763 ()
  block L_5763 ()
    case x_5387 of
      SOME_0 => L_5765 | NONE_1 => L_5764
  block L_5764 ()
    return (x_328 (*0x0:w32*))
  block L_5765 (x_5388: word32)
    return (x_5388)
fun x_4527 (env_2287: unit, x_5389: (word8) array):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5766 ()
  block L_5766 ()
    return (x_5389)
fun >=_11 (env_2288: unit, x_5390: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5767 ()
  block L_5767 ()
    case ltu_0 (*con ltuEnv ... e_13)*) of
      ltuEnv_0 => L_5768
  block L_5768 (env_2289: unit)
    call L_5769 (ltu_1 (env_2289, x_5390)) handle _ => raise
  block L_5769 (x_5391: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5770
  block L_5770 (env_2290: unit)
    call tail not_1 (env_2290, x_5391)
fun >_5 (env_2291: unit, x_5392: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5771 ()
  block L_5771 ()
    val b_31: word64 = #1 (x_5392)
    val a_9: word64 = #0 (x_5392)
    val x_5393: (word64, word64) tuple = (b_31, a_9)
    case ltu_0 (*con ltuEnv ... e_13)*) of
      ltuEnv_0 => L_5772
  block L_5772 (env_2292: unit)
    call tail ltu_1 (env_2292, x_5393)
fun ltu_1 (env_2293: unit, x_5394: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5773 ()
  block L_5773 ()
    val i'_1: word64 = #1 (x_5394)
    val i_41: word64 = #0 (x_5394)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5774
  block L_5774 (env_2294: unit)
    call L_5775 (idFromInt64ToWord64_1 (env_2294, i_41)) handle _ => raise
  block L_5775 (x_5395: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5776
  block L_5776 (env_2295: unit)
    call L_5777 (idFromInt64ToWord64_1 (env_2295, i'_1)) handle _ => raise
  block L_5777 (x_5396: word64)
    val x_5397: bool = prim WordU64_lt (x_5395, x_5396)
    return (x_5397)
fun quot_3 (env_2296: (word64, word64, word64) tuple,
            x_5398: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5778 ()
  block L_5778 ()
    val zero_84: word64 = #0 (env_2296)
    val minInt'_27: word64 = #1 (env_2296)
    val one_65: word64 = #2 (env_2296)
    val y_0: word64 = #1 (x_5398)
    val x_5400: word64 = #0 (x_5398)
    val x_5399: (word64, word64) tuple = (y_0, zero_84)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5779
  block L_5779 (env_2297: unit)
    call L_5780 (x_2300 (env_2297, x_5399)) handle _ => raise
  block L_5780 (x_5401: bool)
    case x_5401 of
      true => L_5782 | false => L_5781
  block L_5781 ()
    val x_5402: (word64, word64) tuple = (x_5400, minInt'_27)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5783
  block L_5783 (env_2298: unit)
    call L_5784 (x_2300 (env_2298, x_5402)) handle _ => raise
  block L_5784 (x_5403: bool)
    case x_5403 of
      true => L_5786 | false => L_5785
  block L_5785 ()
    goto L_5787 (x_325 (*con false*))
  block L_5786 ()
    case x_167 (*con xEnv_23 (x_166)*) of
      xEnv_23 => L_5788
  block L_5788 (env_2299: unit)
    call L_5789 (x_1591 (env_2299, one_65)) handle _ => raise
  block L_5789 (x_5404: word64)
    val x_5405: (word64, word64) tuple = (y_0, x_5404)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5790
  block L_5790 (env_2300: unit)
    call L_5787 (x_2300 (env_2300, x_5405)) handle _ => raise
  block L_5787 (x_5406: bool)
    case x_5406 of
      true => L_5792 | false => L_5791
  block L_5791 ()
    val x_5407: word64 = prim WordS64_quot (x_5400, y_0)
    return (x_5407)
  block L_5792 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_5782 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_1545 (env_2301: unit, x_5408: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5793 ()
  block L_5793 ()
    val w_4: word32 = #1 (x_5408)
    val x_5409: word64 = #0 (x_5408)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5794
  block L_5794 (env_2302: unit)
    call L_5795 (idFromInt64ToWord64_1 (env_2302, x_5409)) handle _ => raise
  block L_5795 (x_5410: word64)
    val x_5411: (word64, word32) tuple = (x_5410, w_4)
    case >>?_3 (*con >>?Env_3 (x_150)*) of
      >>?Env_3 => L_5796
  block L_5796 (env_2303: unit)
    call L_5797 (>>?_4 (env_2303, x_5411)) handle _ => raise
  block L_5797 (x_5412: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_5798
  block L_5798 (env_2304: unit)
    call tail idFromWord64ToInt64_1 (env_2304, x_5412)
fun x_1540 (env_2305: unit, x_5413: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5799 ()
  block L_5799 ()
    val w_5: word32 = #1 (x_5413)
    val x_5414: word64 = #0 (x_5413)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5800
  block L_5800 (env_2306: unit)
    call L_5801 (idFromInt64ToWord64_1 (env_2306, x_5414)) handle _ => raise
  block L_5801 (x_5415: word64)
    val x_5416: (word64, word32) tuple = (x_5415, w_5)
    case <<?_3 (*con <<?Env_3 (x_146)*) of
      <<?Env_3 => L_5802
  block L_5802 (env_2307: unit)
    call L_5803 (<<?_4 (env_2307, x_5416)) handle _ => raise
  block L_5803 (x_5417: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_5804
  block L_5804 (env_2308: unit)
    call tail idFromWord64ToInt64_1 (env_2308, x_5417)
fun quot_2 (env_2309: (word32, word32, word32) tuple,
            x_5418: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5805 ()
  block L_5805 ()
    val zero_85: word32 = #0 (env_2309)
    val minInt'_28: word32 = #1 (env_2309)
    val one_66: word32 = #2 (env_2309)
    val y_1: word32 = #1 (x_5418)
    val x_5420: word32 = #0 (x_5418)
    val x_5419: (word32, word32) tuple = (y_1, zero_85)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5806
  block L_5806 (env_2310: unit)
    call L_5807 (x_2054 (env_2310, x_5419)) handle _ => raise
  block L_5807 (x_5421: bool)
    case x_5421 of
      true => L_5809 | false => L_5808
  block L_5808 ()
    val x_5422: (word32, word32) tuple = (x_5420, minInt'_28)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5810
  block L_5810 (env_2311: unit)
    call L_5811 (x_2054 (env_2311, x_5422)) handle _ => raise
  block L_5811 (x_5423: bool)
    case x_5423 of
      true => L_5813 | false => L_5812
  block L_5812 ()
    goto L_5814 (x_309 (*con false*))
  block L_5813 ()
    case x_156 (*con xEnv_20 (x_155)*) of
      xEnv_20 => L_5815
  block L_5815 (env_2312: unit)
    call L_5816 (x_4798 (env_2312, one_66)) handle _ => raise
  block L_5816 (x_5424: word32)
    val x_5425: (word32, word32) tuple = (y_1, x_5424)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5817
  block L_5817 (env_2313: unit)
    call L_5814 (x_2054 (env_2313, x_5425)) handle _ => raise
  block L_5814 (x_5426: bool)
    case x_5426 of
      true => L_5819 | false => L_5818
  block L_5818 ()
    val x_5427: word32 = prim WordS32_quot (x_5420, y_1)
    return (x_5427)
  block L_5819 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_5809 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_1533 (env_2314: unit, x_5428: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5820 ()
  block L_5820 ()
    val w_6: word32 = #1 (x_5428)
    val x_5429: word32 = #0 (x_5428)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_5821
  block L_5821 (env_2315: unit)
    call L_5822 (idFromInt32ToWord32_1 (env_2315, x_5429)) handle _ => raise
  block L_5822 (x_5430: word32)
    val x_5431: (word32, word32) tuple = (x_5430, w_6)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5823
  block L_5823 (env_2316: unit)
    call L_5824 (>>?_5 (env_2316, x_5431)) handle _ => raise
  block L_5824 (x_5432: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_5825
  block L_5825 (env_2317: unit)
    call tail idFromWord32ToInt32_1 (env_2317, x_5432)
fun x_1528 (env_2318: unit, x_5433: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5826 ()
  block L_5826 ()
    val w_7: word32 = #1 (x_5433)
    val x_5434: word32 = #0 (x_5433)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_5827
  block L_5827 (env_2319: unit)
    call L_5828 (idFromInt32ToWord32_1 (env_2319, x_5434)) handle _ => raise
  block L_5828 (x_5435: word32)
    val x_5436: (word32, word32) tuple = (x_5435, w_7)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_5829
  block L_5829 (env_2320: unit)
    call L_5830 (<<?_5 (env_2320, x_5436)) handle _ => raise
  block L_5830 (x_5437: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_5831
  block L_5831 (env_2321: unit)
    call tail idFromWord32ToInt32_1 (env_2321, x_5437)
fun x_1521 (env_2322: unit, x_5438: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5832 ()
  block L_5832 ()
    val w_8: word32 = #1 (x_5438)
    val x_5439: word16 = #0 (x_5438)
    case idFromInt16ToWord16_0 (*con idFrom ... _105)*) of
      idFromInt16ToWord16Env_0 => L_5833
  block L_5833 (env_2323: unit)
    call L_5834 (idFromInt16ToWord16_1 (env_2323, x_5439)) handle _ => raise
  block L_5834 (x_5440: word16)
    val x_5441: (word16, word32) tuple = (x_5440, w_8)
    case >>?_1 (*con >>?Env_1 (x_136)*) of
      >>?Env_1 => L_5835
  block L_5835 (env_2324: unit)
    call L_5836 (>>?_6 (env_2324, x_5441)) handle _ => raise
  block L_5836 (x_5442: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... _109)*) of
      idFromWord16ToInt16Env_0 => L_5837
  block L_5837 (env_2325: unit)
    call tail idFromWord16ToInt16_1 (env_2325, x_5442)
fun x_1516 (env_2326: unit, x_5443: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5838 ()
  block L_5838 ()
    val w_9: word32 = #1 (x_5443)
    val x_5444: word16 = #0 (x_5443)
    case idFromInt16ToWord16_0 (*con idFrom ... _105)*) of
      idFromInt16ToWord16Env_0 => L_5839
  block L_5839 (env_2327: unit)
    call L_5840 (idFromInt16ToWord16_1 (env_2327, x_5444)) handle _ => raise
  block L_5840 (x_5445: word16)
    val x_5446: (word16, word32) tuple = (x_5445, w_9)
    case <<?_1 (*con <<?Env_1 (x_134)*) of
      <<?Env_1 => L_5841
  block L_5841 (env_2328: unit)
    call L_5842 (<<?_6 (env_2328, x_5446)) handle _ => raise
  block L_5842 (x_5447: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... _109)*) of
      idFromWord16ToInt16Env_0 => L_5843
  block L_5843 (env_2329: unit)
    call tail idFromWord16ToInt16_1 (env_2329, x_5447)
fun x_1509 (env_2330: unit, x_5448: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5844 ()
  block L_5844 ()
    val w_10: word32 = #1 (x_5448)
    val x_5449: word8 = #0 (x_5448)
    case idFromInt8ToWord8_0 (*con idFrom ... _104)*) of
      idFromInt8ToWord8Env_0 => L_5845
  block L_5845 (env_2331: unit)
    call L_5846 (idFromInt8ToWord8_1 (env_2331, x_5449)) handle _ => raise
  block L_5846 (x_5450: word8)
    val x_5451: (word8, word32) tuple = (x_5450, w_10)
    case >>?_0 (*con >>?Env_0 (x_133)*) of
      >>?Env_0 => L_5847
  block L_5847 (env_2332: unit)
    call L_5848 (>>?_7 (env_2332, x_5451)) handle _ => raise
  block L_5848 (x_5452: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... _108)*) of
      idFromWord8ToInt8Env_0 => L_5849
  block L_5849 (env_2333: unit)
    call tail idFromWord8ToInt8_1 (env_2333, x_5452)
fun x_1504 (env_2334: unit, x_5453: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5850 ()
  block L_5850 ()
    val w_11: word32 = #1 (x_5453)
    val x_5454: word8 = #0 (x_5453)
    case idFromInt8ToWord8_0 (*con idFrom ... _104)*) of
      idFromInt8ToWord8Env_0 => L_5851
  block L_5851 (env_2335: unit)
    call L_5852 (idFromInt8ToWord8_1 (env_2335, x_5454)) handle _ => raise
  block L_5852 (x_5455: word8)
    val x_5456: (word8, word32) tuple = (x_5455, w_11)
    case <<?_0 (*con <<?Env_0 (x_131)*) of
      <<?Env_0 => L_5853
  block L_5853 (env_2336: unit)
    call L_5854 (<<?_7 (env_2336, x_5456)) handle _ => raise
  block L_5854 (x_5457: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... _108)*) of
      idFromWord8ToInt8Env_0 => L_5855
  block L_5855 (env_2337: unit)
    call tail idFromWord8ToInt8_1 (env_2337, x_5457)
fun x_2428 (env_2338: unit, x_5458: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_5856 ()
  block L_5856 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5857
  block L_5857 (env_2339: unit)
    call L_5858 (sextdFromInt64ToInt32_1 (env_2339, x_5458)) handle _ => raise
  block L_5858 (res_1: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5859
  block L_5859 (env_2340: unit)
    call L_5860 (sextdFromInt32ToInt64_1 (env_2340, res_1)) handle _ => raise
  block L_5860 (x_5459: word64)
    val x_5460: (word64, word64) tuple = (x_5458, x_5459)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5861
  block L_5861 (env_2341: unit)
    call L_5862 (x_2300 (env_2341, x_5460)) handle _ => raise
  block L_5862 (x_5461: bool)
    case x_5461 of
      true => L_5864 | false => L_5863
  block L_5863 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_5864 ()
    return (res_1)
fun x_2532 (env_2342: unit, x_5462: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5865 ()
  block L_5865 ()
    case bug_0 (*con bugEnv_0 (x_189)*) of
      bugEnv_0 => L_5866
  block L_5866 (env_2343: unit)
    call tail bug_1 (env_2343, x_261 (*"missing s ... rary"*))
fun x_2536 (env_2344: unit, x_5463: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_5867 ()
  block L_5867 ()
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5868
  block L_5868 (env_2345: unit)
    call L_5869 (print_1 (env_2345, x_253 (*"unhandled ... on: "*))) handle _ => raise
  block L_5869 (x_5464: unit)
    case x_5463 of
      Fail8_0 => L_5870 | _ => L_5871
  block L_5871 ()
    call L_5872 (x_5465 (x_5463, x_254 (*()*))) handle _ => raise
  block L_5870 (x_5466: ((unit) ref, (word8) vector) tuple)
    val x_5469: (word8) vector = #1 (x_5466)
    val x_5468: (unit) ref = #0 (x_5466)
    val x_5467: bool = prim MLton_equal[(unit) ref] (x_5468, x_1446)
    case x_5467 of
      true => L_5874 | false => L_5873
  block L_5873 ()
    call L_5872 (x_5465 (x_5463, x_256 (*()*))) handle _ => raise
  block L_5874 ()
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5875
  block L_5875 (env_2346: unit)
    call L_5876 (print_1 (env_2346, x_255 (*"Fail "*))) handle _ => raise
  block L_5876 (x_5470: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5877
  block L_5877 (env_2347: unit)
    call L_5872 (print_1 (env_2347, x_5469)) handle _ => raise
  block L_5872 (x_5471: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5878
  block L_5878 (env_2348: unit)
    call L_5879 (print_1 (env_2348, x_257 (*"\n"*))) handle _ => raise
  block L_5879 (x_5472: unit)
    case bug_0 (*con bugEnv_0 (x_189)*) of
      bugEnv_0 => L_5880
  block L_5880 (env_2349: unit)
    call tail bug_1 (env_2349, x_258 (*"unhandled ... rary"*))
fun x_5465 (env_2350: exn, unit_19: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5881 ()
  block L_5881 ()
    case name_0 (*con nameEnv_0 (x_53)*) of
      nameEnv_0 => L_5882
  block L_5882 (env_2351: unit)
    call L_5883 (name_1 (env_2351, env_2350)) handle _ => raise
  block L_5883 (x_5473: (word8) vector)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5884
  block L_5884 (env_2352: unit)
    call tail print_1 (env_2352, x_5473)
fun castFromWord_3 (env_2353: unit, x_5474: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_5885 ()
  block L_5885 ()
    val x_5475: real64 = prim Word64_castToReal64 (x_5474)
    return (x_5475)
fun castFromWord_2 (env_2354: unit, x_5476: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_5886 ()
  block L_5886 ()
    val x_5477: real32 = prim Word32_castToReal32 (x_5476)
    return (x_5477)
fun >=_8 (env_2355: unit, x_5478: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5887 ()
  block L_5887 ()
    val b_32: real64 = #1 (x_5478)
    val a_10: real64 = #0 (x_5478)
    val x_5479: (real64, real64) tuple = (b_32, a_10)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_5888
  block L_5888 (env_2356: unit)
    call tail <=_5 (env_2356, x_5479)
fun >_7 (env_2357: unit, x_5480: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5889 ()
  block L_5889 ()
    val b_33: real64 = #1 (x_5480)
    val a_11: real64 = #0 (x_5480)
    val x_5481: (real64, real64) tuple = (b_33, a_11)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_5890
  block L_5890 (env_2358: unit)
    call tail <_8 (env_2358, x_5481)
fun toWord64Unsafe_2 (env_2359: unit, x_5482: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_5891 ()
  block L_5891 ()
    val x_5483: word64 = prim Real64_rndToWordU64 (x_5482)
    return (x_5483)
fun toWord32Unsafe_2 (env_2360: unit, x_5484: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_5892 ()
  block L_5892 ()
    val x_5485: word32 = prim Real64_rndToWordU32 (x_5484)
    return (x_5485)
fun toWord16Unsafe_2 (env_2361: unit, x_5486: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_5893 ()
  block L_5893 ()
    val x_5487: word16 = prim Real64_rndToWordU16 (x_5486)
    return (x_5487)
fun toWord8Unsafe_2 (env_2362: unit, x_5488: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_5894 ()
  block L_5894 ()
    val x_5489: word8 = prim Real64_rndToWordU8 (x_5488)
    return (x_5489)
fun toReal32Unsafe_2 (env_2363: unit, x_5490: real64):
  {returns = Some (real32), raises = Some (exn)} =
L_5895 ()
  block L_5895 ()
    val x_5491: real32 = prim Real64_rndToReal32 (x_5490)
    return (x_5491)
fun toInt64Unsafe_2 (env_2364: unit, x_5492: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_5896 ()
  block L_5896 ()
    val x_5493: word64 = prim Real64_rndToWordS64 (x_5492)
    return (x_5493)
fun toInt32Unsafe_2 (env_2365: unit, x_5494: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_5897 ()
  block L_5897 ()
    val x_5495: word32 = prim Real64_rndToWordS32 (x_5494)
    return (x_5495)
fun toInt16Unsafe_2 (env_2366: unit, x_5496: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_5898 ()
  block L_5898 ()
    val x_5497: word16 = prim Real64_rndToWordS16 (x_5496)
    return (x_5497)
fun toInt8Unsafe_2 (env_2367: unit, x_5498: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_5899 ()
  block L_5899 ()
    val x_5499: word8 = prim Real64_rndToWordS8 (x_5498)
    return (x_5499)
fun fromWord64Unsafe_3 (env_2368: unit, x_5500: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_5900 ()
  block L_5900 ()
    val x_5501: real64 = prim WordU64_rndToReal64 (x_5500)
    return (x_5501)
fun fromWord32Unsafe_3 (env_2369: unit, x_5502: word32):
  {returns = Some (real64), raises = Some (exn)} =
L_5901 ()
  block L_5901 ()
    val x_5503: real64 = prim WordU32_rndToReal64 (x_5502)
    return (x_5503)
fun fromWord16Unsafe_3 (env_2370: unit, x_5504: word16):
  {returns = Some (real64), raises = Some (exn)} =
L_5902 ()
  block L_5902 ()
    val x_5505: real64 = prim WordU16_rndToReal64 (x_5504)
    return (x_5505)
fun fromWord8Unsafe_3 (env_2371: unit, x_5506: word8):
  {returns = Some (real64), raises = Some (exn)} =
L_5903 ()
  block L_5903 ()
    val x_5507: real64 = prim WordU8_rndToReal64 (x_5506)
    return (x_5507)
fun fromReal32Unsafe_2 (env_2372: unit, x_5508: real32):
  {returns = Some (real64), raises = Some (exn)} =
L_5904 ()
  block L_5904 ()
    val x_5509: real64 = prim Real32_rndToReal64 (x_5508)
    return (x_5509)
fun fromInt64Unsafe_3 (env_2373: unit, x_5510: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_5905 ()
  block L_5905 ()
    val x_5511: real64 = prim WordS64_rndToReal64 (x_5510)
    return (x_5511)
fun fromInt32Unsafe_3 (env_2374: unit, x_5512: word32):
  {returns = Some (real64), raises = Some (exn)} =
L_5906 ()
  block L_5906 ()
    val x_5513: real64 = prim WordS32_rndToReal64 (x_5512)
    return (x_5513)
fun fromInt16Unsafe_3 (env_2375: unit, x_5514: word16):
  {returns = Some (real64), raises = Some (exn)} =
L_5907 ()
  block L_5907 ()
    val x_5515: real64 = prim WordS16_rndToReal64 (x_5514)
    return (x_5515)
fun fromInt8Unsafe_3 (env_2376: unit, x_5516: word8):
  {returns = Some (real64), raises = Some (exn)} =
L_5908 ()
  block L_5908 ()
    val x_5517: real64 = prim WordS8_rndToReal64 (x_5516)
    return (x_5517)
fun round_2 (env_2377: unit, x_5518: real64):
  {returns = Some (real64), raises = Some (exn)} =
L_5909 ()
  block L_5909 ()
    val x_5519: real64 = prim Real64_round (x_5518)
    return (x_5519)
fun <=_5 (env_2378: unit, x_5520: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5910 ()
  block L_5910 ()
    val x_5522: real64 = #1 (x_5520)
    val x_5523: real64 = #0 (x_5520)
    val x_5521: bool = prim Real64_le (x_5523, x_5522)
    return (x_5521)
fun <_8 (env_2379: unit, x_5524: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5911 ()
  block L_5911 ()
    val x_5526: real64 = #1 (x_5524)
    val x_5527: real64 = #0 (x_5524)
    val x_5525: bool = prim Real64_lt (x_5527, x_5526)
    return (x_5525)
fun ~_2 (env_2380: unit, x_5528: real64):
  {returns = Some (real64), raises = Some (exn)} =
L_5912 ()
  block L_5912 ()
    val x_5529: real64 = prim Real64_neg (x_5528)
    return (x_5529)
fun -_4 (env_2381: unit, x_5530: (real64, real64) tuple):
  {returns = Some (real64), raises = Some (exn)} =
L_5913 ()
  block L_5913 ()
    val x_5532: real64 = #1 (x_5530)
    val x_5533: real64 = #0 (x_5530)
    val x_5531: real64 = prim Real64_sub (x_5533, x_5532)
    return (x_5531)
fun +_3 (env_2382: unit, x_5534: (real64, real64) tuple):
  {returns = Some (real64), raises = Some (exn)} =
L_5914 ()
  block L_5914 ()
    val x_5536: real64 = #1 (x_5534)
    val x_5537: real64 = #0 (x_5534)
    val x_5535: real64 = prim Real64_add (x_5537, x_5536)
    return (x_5535)
fun >=_9 (env_2383: unit, x_5538: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5915 ()
  block L_5915 ()
    val b_34: real32 = #1 (x_5538)
    val a_12: real32 = #0 (x_5538)
    val x_5539: (real32, real32) tuple = (b_34, a_12)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_5916
  block L_5916 (env_2384: unit)
    call tail <=_6 (env_2384, x_5539)
fun >_8 (env_2385: unit, x_5540: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5917 ()
  block L_5917 ()
    val b_35: real32 = #1 (x_5540)
    val a_13: real32 = #0 (x_5540)
    val x_5541: (real32, real32) tuple = (b_35, a_13)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_5918
  block L_5918 (env_2386: unit)
    call tail <_9 (env_2386, x_5541)
fun toWord64Unsafe_3 (env_2387: unit, x_5542: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_5919 ()
  block L_5919 ()
    val x_5543: word64 = prim Real32_rndToWordU64 (x_5542)
    return (x_5543)
fun toWord32Unsafe_3 (env_2388: unit, x_5544: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_5920 ()
  block L_5920 ()
    val x_5545: word32 = prim Real32_rndToWordU32 (x_5544)
    return (x_5545)
fun toWord16Unsafe_3 (env_2389: unit, x_5546: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_5921 ()
  block L_5921 ()
    val x_5547: word16 = prim Real32_rndToWordU16 (x_5546)
    return (x_5547)
fun toWord8Unsafe_3 (env_2390: unit, x_5548: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_5922 ()
  block L_5922 ()
    val x_5549: word8 = prim Real32_rndToWordU8 (x_5548)
    return (x_5549)
fun toReal32Unsafe_3 (env_2391: unit, x_5550: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5923 ()
  block L_5923 ()
    return (x_5550)
fun toInt64Unsafe_3 (env_2392: unit, x_5551: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_5924 ()
  block L_5924 ()
    val x_5552: word64 = prim Real32_rndToWordS64 (x_5551)
    return (x_5552)
fun toInt32Unsafe_3 (env_2393: unit, x_5553: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_5925 ()
  block L_5925 ()
    val x_5554: word32 = prim Real32_rndToWordS32 (x_5553)
    return (x_5554)
fun toInt16Unsafe_3 (env_2394: unit, x_5555: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_5926 ()
  block L_5926 ()
    val x_5556: word16 = prim Real32_rndToWordS16 (x_5555)
    return (x_5556)
fun toInt8Unsafe_3 (env_2395: unit, x_5557: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_5927 ()
  block L_5927 ()
    val x_5558: word8 = prim Real32_rndToWordS8 (x_5557)
    return (x_5558)
fun fromWord64Unsafe_2 (env_2396: unit, x_5559: word64):
  {returns = Some (real32), raises = Some (exn)} =
L_5928 ()
  block L_5928 ()
    val x_5560: real32 = prim WordU64_rndToReal32 (x_5559)
    return (x_5560)
fun fromWord32Unsafe_2 (env_2397: unit, x_5561: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_5929 ()
  block L_5929 ()
    val x_5562: real32 = prim WordU32_rndToReal32 (x_5561)
    return (x_5562)
fun fromWord16Unsafe_2 (env_2398: unit, x_5563: word16):
  {returns = Some (real32), raises = Some (exn)} =
L_5930 ()
  block L_5930 ()
    val x_5564: real32 = prim WordU16_rndToReal32 (x_5563)
    return (x_5564)
fun fromWord8Unsafe_2 (env_2399: unit, x_5565: word8):
  {returns = Some (real32), raises = Some (exn)} =
L_5931 ()
  block L_5931 ()
    val x_5566: real32 = prim WordU8_rndToReal32 (x_5565)
    return (x_5566)
fun fromReal32Unsafe_3 (env_2400: unit, x_5567: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5932 ()
  block L_5932 ()
    return (x_5567)
fun fromInt64Unsafe_2 (env_2401: unit, x_5568: word64):
  {returns = Some (real32), raises = Some (exn)} =
L_5933 ()
  block L_5933 ()
    val x_5569: real32 = prim WordS64_rndToReal32 (x_5568)
    return (x_5569)
fun fromInt32Unsafe_2 (env_2402: unit, x_5570: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_5934 ()
  block L_5934 ()
    val x_5571: real32 = prim WordS32_rndToReal32 (x_5570)
    return (x_5571)
fun fromInt16Unsafe_2 (env_2403: unit, x_5572: word16):
  {returns = Some (real32), raises = Some (exn)} =
L_5935 ()
  block L_5935 ()
    val x_5573: real32 = prim WordS16_rndToReal32 (x_5572)
    return (x_5573)
fun fromInt8Unsafe_2 (env_2404: unit, x_5574: word8):
  {returns = Some (real32), raises = Some (exn)} =
L_5936 ()
  block L_5936 ()
    val x_5575: real32 = prim WordS8_rndToReal32 (x_5574)
    return (x_5575)
fun round_3 (env_2405: unit, x_5576: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5937 ()
  block L_5937 ()
    val x_5577: real32 = prim Real32_round (x_5576)
    return (x_5577)
fun <=_6 (env_2406: unit, x_5578: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5938 ()
  block L_5938 ()
    val x_5580: real32 = #1 (x_5578)
    val x_5581: real32 = #0 (x_5578)
    val x_5579: bool = prim Real32_le (x_5581, x_5580)
    return (x_5579)
fun <_9 (env_2407: unit, x_5582: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5939 ()
  block L_5939 ()
    val x_5584: real32 = #1 (x_5582)
    val x_5585: real32 = #0 (x_5582)
    val x_5583: bool = prim Real32_lt (x_5585, x_5584)
    return (x_5583)
fun ~_3 (env_2408: unit, x_5586: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5940 ()
  block L_5940 ()
    val x_5587: real32 = prim Real32_neg (x_5586)
    return (x_5587)
fun -_5 (env_2409: unit, x_5588: (real32, real32) tuple):
  {returns = Some (real32), raises = Some (exn)} =
L_5941 ()
  block L_5941 ()
    val x_5590: real32 = #1 (x_5588)
    val x_5591: real32 = #0 (x_5588)
    val x_5589: real32 = prim Real32_sub (x_5591, x_5590)
    return (x_5589)
fun +_4 (env_2410: unit, x_5592: (real32, real32) tuple):
  {returns = Some (real32), raises = Some (exn)} =
L_5942 ()
  block L_5942 ()
    val x_5594: real32 = #1 (x_5592)
    val x_5595: real32 = #0 (x_5592)
    val x_5593: real32 = prim Real32_add (x_5595, x_5594)
    return (x_5593)
fun <=_7 (env_2411: unit, x_5596: (word8, word8) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5943 ()
  block L_5943 ()
    val b_36: word8 = #1 (x_5596)
    val a_14: word8 = #0 (x_5596)
    val x_5597: bool = prim WordU8_lt (b_36, a_14)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5944
  block L_5944 (env_2412: unit)
    call tail not_1 (env_2412, x_5597)
fun idFromWord8_1 (env_2413: unit, x_5598: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_5945 ()
  block L_5945 ()
    return (x_5598)
fun toWord_1 (env_2414: unit, x_5599: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_5946 ()
  block L_5946 ()
    val x_5600: word64 = prim IntInf_toWord (x_5599)
    return (x_5600)
fun fromWord_3 (env_2415: unit, x_5601: word64):
  {returns = Some (intInf), raises = Some (exn)} =
L_5947 ()
  block L_5947 ()
    val x_5602: intInf = prim Word_toIntInf (x_5601)
    return (x_5602)
fun print_1 (env_2416: unit, x_5603: (word8) vector):
  {returns = Some (unit), raises = Some (exn)} =
L_5948 ()
  block L_5948 ()
    val x_5604: unit =
      prim CFunction {args = ((word8) vector),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Objptr), res = None},
                      return = unit,
                      symbolScope = private,
                      target = Stdio_print} (x_5603)
    return (x_5604)
fun atomicEnd_1 (env_2417: unit, x_5605: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5949 ()
  block L_5949 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_5950
  block L_5950 (env_2418: unit)
    call L_5951 (atomicState_1 (env_2418, x_194 (*()*))) handle _ => raise
  block L_5951 (x_5606: word32)
    val x_5607: (word32, word32) tuple = (x_5606, x_195 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5952
  block L_5952 (env_2419: unit)
    call L_5953 (x_2054 (env_2419, x_5607)) handle _ => raise
  block L_5953 (x_5608: bool)
    case x_5608 of
      true => L_5955 | false => L_5954
  block L_5954 ()
    val x_5609: unit = prim Thread_atomicEnd ()
    return (x_5609)
  block L_5955 ()
    raise (x_198 (*con Fail8_0 (x_197)*))
fun atomicBegin_1 (env_2420: unit, x_5610: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5956 ()
  block L_5956 ()
    val x_5611: unit = prim Thread_atomicBegin ()
    return (x_5611)
fun atomicState_1 (env_2421: unit, x_5612: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_5957 ()
  block L_5957 ()
    val x_5613: word32 = prim Thread_atomicState ()
    return (x_5613)
fun fromWord_2 (env_2422: unit, x_5614: word64):
  {returns = Some (cpointer), raises = Some (exn)} =
L_5958 ()
  block L_5958 ()
    val x_5615: cpointer = prim CPointer_fromWord (x_5614)
    return (x_5615)
fun bug_1 (env_2423: unit, x_5616: (word8) vector):
  {returns = Some (unit), raises = Some (exn)} =
L_5959 ()
  block L_5959 ()
    val _: unit = prim MLton_bug (x_5616)
    bug
fun gcState_1 (env_2424: unit, x_5617: unit):
  {returns = Some (cpointer), raises = Some (exn)} =
L_5960 ()
  block L_5960 ()
    val x_5618: cpointer = prim GC_state ()
    return (x_5618)
fun x_2551 (env_2425: unit, x_5619: ((word8) vector, word64) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5961 ()
  block L_5961 ()
    val x_5621: word64 = #1 (x_5619)
    val x_5622: (word8) vector = #0 (x_5619)
    val x_5620: word8 = prim Vector_sub[word8] (x_5622, x_5621)
    return (x_5620)
fun x_2426 (env_2426: unit, x_5623: (word8) vector):
  {returns = Some (word64), raises = Some (exn)} =
L_5962 ()
  block L_5962 ()
    val x_5624: word64 = prim Vector_length[word8] (x_5623)
    return (x_5624)
fun x_1795 (env_2427: unit, x_5625: (word8) array):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5963 ()
  block L_5963 ()
    val x_5626: (word8) vector = prim Array_toVector[word8] (x_5625)
    return (x_5626)
fun x_2554 (env_2428: unit, x_5627: ((word8) array, word64, word8) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5964 ()
  block L_5964 ()
    val x_5629: word8 = #2 (x_5627)
    val x_5630: word64 = #1 (x_5627)
    val x_5631: (word8) array = #0 (x_5627)
    val x_5628: unit = prim Array_update[word8] (x_5631, x_5630, x_5629)
    return (x_5628)
fun x_2454 (env_2429: unit, x_5632: (word8) array):
  {returns = Some (word64), raises = Some (exn)} =
L_5965 ()
  block L_5965 ()
    val x_5633: word64 = prim Array_length[word8] (x_5632)
    return (x_5633)
fun x_2466 (env_2430: unit,
            x_5634:
              ((word8) array, word64, (word8) vector, word64, word64) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5966 ()
  block L_5966 ()
    val x_5636: word64 = #4 (x_5634)
    val x_5637: word64 = #3 (x_5634)
    val x_5638: (word8) vector = #2 (x_5634)
    val x_5639: word64 = #1 (x_5634)
    val x_5640: (word8) array = #0 (x_5634)
    val x_5635: unit =
      prim Array_copyVector[word8] (x_5640, x_5639, x_5638, x_5637, x_5636)
    return (x_5635)
fun x_5347 (env_2431: unit, x_5641: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5967 ()
  block L_5967 ()
    val x_5642: (word8) array = prim Array_alloc[word8] (x_5641)
    return (x_5642)
fun x_2850 (env_2432: unit, x_5643: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_5968 ()
  block L_5968 ()
    return (x_5643)
fun >=_7 (env_2433: unit, x_5644: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5969 ()
  block L_5969 ()
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5970
  block L_5970 (env_2434: unit)
    call L_5971 (<_7 (env_2434, x_5644)) handle _ => raise
  block L_5971 (x_5645: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5972
  block L_5972 (env_2435: unit)
    call tail not_1 (env_2435, x_5645)
fun >_6 (env_2436: unit, x_5646: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5973 ()
  block L_5973 ()
    val b_37: word64 = #1 (x_5646)
    val a_15: word64 = #0 (x_5646)
    val x_5647: (word64, word64) tuple = (b_37, a_15)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5974
  block L_5974 (env_2437: unit)
    call tail <_7 (env_2437, x_5647)
fun <_7 (env_2438: unit, x_5648: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5975 ()
  block L_5975 ()
    val x_5650: word64 = #1 (x_5648)
    val x_5651: word64 = #0 (x_5648)
    val x_5649: bool = prim WordS64_lt (x_5651, x_5650)
    return (x_5649)
fun x_2295 (env_2439: unit, x_5652: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5976 ()
  block L_5976 ()
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5977
  block L_5977 (env_2440: unit)
    call L_5978 (-!_2 (env_2440, x_5652)) handle _ => raise
  block L_5978 (r_2: word64)
    val x_5654: word64 = #1 (x_5652)
    val x_5655: word64 = #0 (x_5652)
    val x_5653: bool = prim WordS64_subCheckP (x_5655, x_5654)
    case x_5653 of
      true => L_5980 | false => L_5979
  block L_5979 ()
    return (r_2)
  block L_5980 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun -!_2 (env_2441: unit, x_5656: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5981 ()
  block L_5981 ()
    val x_5658: word64 = #1 (x_5656)
    val x_5659: word64 = #0 (x_5656)
    val x_5657: word64 = prim Word64_sub (x_5659, x_5658)
    return (x_5657)
fun x_1591 (env_2442: unit, x_5660: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_5982 ()
  block L_5982 ()
    case ~!_1 (*con ~!Env_1 (x_165)*) of
      ~!Env_1 => L_5983
  block L_5983 (env_2443: unit)
    call L_5984 (~!_2 (env_2443, x_5660)) handle _ => raise
  block L_5984 (r_3: word64)
    val x_5661: bool = prim WordS64_negCheckP (x_5660)
    case x_5661 of
      true => L_5986 | false => L_5985
  block L_5985 ()
    return (r_3)
  block L_5986 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun ~!_2 (env_2444: unit, x_5662: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_5987 ()
  block L_5987 ()
    val x_5663: word64 = prim Word64_neg (x_5662)
    return (x_5663)
fun x_3113 (env_2445: unit, x_5664: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5988 ()
  block L_5988 ()
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5989
  block L_5989 (env_2446: unit)
    call L_5990 (+!_2 (env_2446, x_5664)) handle _ => raise
  block L_5990 (r_4: word64)
    val x_5666: word64 = #1 (x_5664)
    val x_5667: word64 = #0 (x_5664)
    val x_5665: bool = prim WordS64_addCheckP (x_5667, x_5666)
    case x_5665 of
      true => L_5992 | false => L_5991
  block L_5991 ()
    return (r_4)
  block L_5992 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun +!_2 (env_2447: unit, x_5668: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5993 ()
  block L_5993 ()
    val x_5670: word64 = #1 (x_5668)
    val x_5671: word64 = #0 (x_5668)
    val x_5669: word64 = prim Word64_add (x_5671, x_5670)
    return (x_5669)
fun >=_6 (env_2448: unit, x_5672: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5994 ()
  block L_5994 ()
    val b_38: word32 = #1 (x_5672)
    val a_16: word32 = #0 (x_5672)
    val x_5673: (word32, word32) tuple = (b_38, a_16)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_5995
  block L_5995 (env_2449: unit)
    call tail <=_4 (env_2449, x_5673)
fun >_9 (env_2450: unit, x_5674: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5996 ()
  block L_5996 ()
    val b_39: word32 = #1 (x_5674)
    val a_17: word32 = #0 (x_5674)
    val x_5675: (word32, word32) tuple = (b_39, a_17)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5997
  block L_5997 (env_2451: unit)
    call tail <_5 (env_2451, x_5675)
fun <=_4 (env_2452: unit, x_5676: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5998 ()
  block L_5998 ()
    val b_40: word32 = #1 (x_5676)
    val a_18: word32 = #0 (x_5676)
    val x_5677: (word32, word32) tuple = (b_40, a_18)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5999
  block L_5999 (env_2453: unit)
    call L_6000 (<_5 (env_2453, x_5677)) handle _ => raise
  block L_6000 (x_5678: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6001
  block L_6001 (env_2454: unit)
    call tail not_1 (env_2454, x_5678)
fun <_5 (env_2455: unit, x_5679: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6002 ()
  block L_6002 ()
    val x_5681: word32 = #1 (x_5679)
    val x_5682: word32 = #0 (x_5679)
    val x_5680: bool = prim WordS32_lt (x_5682, x_5681)
    return (x_5680)
fun remUnsafe_1 (env_2456: unit, x_5683: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6003 ()
  block L_6003 ()
    val x_5685: word32 = #1 (x_5683)
    val x_5686: word32 = #0 (x_5683)
    val x_5684: word32 = prim WordS32_rem (x_5686, x_5685)
    return (x_5684)
fun x_1785 (env_2457: unit, x_5687: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6004 ()
  block L_6004 ()
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_6005
  block L_6005 (env_2458: unit)
    call L_6006 (-!_3 (env_2458, x_5687)) handle _ => raise
  block L_6006 (r_5: word32)
    val x_5689: word32 = #1 (x_5687)
    val x_5690: word32 = #0 (x_5687)
    val x_5688: bool = prim WordS32_subCheckP (x_5690, x_5689)
    case x_5688 of
      true => L_6008 | false => L_6007
  block L_6007 ()
    return (r_5)
  block L_6008 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun -!_3 (env_2459: unit, x_5691: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6009 ()
  block L_6009 ()
    val x_5693: word32 = #1 (x_5691)
    val x_5694: word32 = #0 (x_5691)
    val x_5692: word32 = prim Word32_sub (x_5694, x_5693)
    return (x_5692)
fun x_4798 (env_2460: unit, x_5695: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6010 ()
  block L_6010 ()
    case ~!_0 (*con ~!Env_0 (x_154)*) of
      ~!Env_0 => L_6011
  block L_6011 (env_2461: unit)
    call L_6012 (~!_3 (env_2461, x_5695)) handle _ => raise
  block L_6012 (r_6: word32)
    val x_5696: bool = prim WordS32_negCheckP (x_5695)
    case x_5696 of
      true => L_6014 | false => L_6013
  block L_6013 ()
    return (r_6)
  block L_6014 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun ~!_3 (env_2462: unit, x_5697: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6015 ()
  block L_6015 ()
    val x_5698: word32 = prim Word32_neg (x_5697)
    return (x_5698)
fun x_1626 (env_2463: unit, x_5699: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6016 ()
  block L_6016 ()
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_6017
  block L_6017 (env_2464: unit)
    call L_6018 (+!_3 (env_2464, x_5699)) handle _ => raise
  block L_6018 (r_7: word32)
    val x_5701: word32 = #1 (x_5699)
    val x_5702: word32 = #0 (x_5699)
    val x_5700: bool = prim WordS32_addCheckP (x_5702, x_5701)
    case x_5700 of
      true => L_6020 | false => L_6019
  block L_6019 ()
    return (r_7)
  block L_6020 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun +!_3 (env_2465: unit, x_5703: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6021 ()
  block L_6021 ()
    val x_5705: word32 = #1 (x_5703)
    val x_5706: word32 = #0 (x_5703)
    val x_5704: word32 = prim Word32_add (x_5706, x_5705)
    return (x_5704)
fun >>?_4 (env_2466: unit, x_5707: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6022 ()
  block L_6022 ()
    val x_5709: word32 = #1 (x_5707)
    val x_5710: word64 = #0 (x_5707)
    val x_5708: word64 = prim WordU64_rshift (x_5710, x_5709)
    return (x_5708)
fun ~>>?_1 (env_2467: unit, x_5711: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6023 ()
  block L_6023 ()
    val x_5713: word32 = #1 (x_5711)
    val x_5714: word64 = #0 (x_5711)
    val x_5712: word64 = prim WordS64_rshift (x_5714, x_5713)
    return (x_5712)
fun notb_7 (env_2468: unit, x_5715: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6024 ()
  block L_6024 ()
    val x_5716: word64 = prim Word64_notb (x_5715)
    return (x_5716)
fun *_1 (env_2469: unit, x_5717: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6025 ()
  block L_6025 ()
    val x_5719: word64 = #1 (x_5717)
    val x_5720: word64 = #0 (x_5717)
    val x_5718: word64 = prim WordU64_mul (x_5720, x_5719)
    return (x_5718)
fun <<?_4 (env_2470: unit, x_5721: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6026 ()
  block L_6026 ()
    val x_5723: word32 = #1 (x_5721)
    val x_5724: word64 = #0 (x_5721)
    val x_5722: word64 = prim Word64_lshift (x_5724, x_5723)
    return (x_5722)
fun andb_2 (env_2471: unit, x_5725: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6027 ()
  block L_6027 ()
    val x_5727: word64 = #1 (x_5725)
    val x_5728: word64 = #0 (x_5725)
    val x_5726: word64 = prim Word64_andb (x_5728, x_5727)
    return (x_5726)
fun +_5 (env_2472: unit, x_5729: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6028 ()
  block L_6028 ()
    val x_5731: word64 = #1 (x_5729)
    val x_5732: word64 = #0 (x_5729)
    val x_5730: word64 = prim Word64_add (x_5732, x_5731)
    return (x_5730)
fun >=_10 (env_2473: unit, x_5733: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6029 ()
  block L_6029 ()
    case <_0 (*con <Env_0 (x_143)*) of
      <Env_0 => L_6030
  block L_6030 (env_2474: unit)
    call L_6031 (<_6 (env_2474, x_5733)) handle _ => raise
  block L_6031 (x_5734: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6032
  block L_6032 (env_2475: unit)
    call tail not_1 (env_2475, x_5734)
fun <_6 (env_2476: unit, x_5735: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6033 ()
  block L_6033 ()
    val x_5737: word32 = #1 (x_5735)
    val x_5738: word32 = #0 (x_5735)
    val x_5736: bool = prim WordU32_lt (x_5738, x_5737)
    return (x_5736)
fun xorb_1 (env_2477: unit, x_5739: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6034 ()
  block L_6034 ()
    val x_5741: word32 = #1 (x_5739)
    val x_5742: word32 = #0 (x_5739)
    val x_5740: word32 = prim Word32_xorb (x_5742, x_5741)
    return (x_5740)
fun -_3 (env_2478: unit, x_5743: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6035 ()
  block L_6035 ()
    val x_5745: word32 = #1 (x_5743)
    val x_5746: word32 = #0 (x_5743)
    val x_5744: word32 = prim Word32_sub (x_5746, x_5745)
    return (x_5744)
fun >>?_5 (env_2479: unit, x_5747: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6036 ()
  block L_6036 ()
    val x_5749: word32 = #1 (x_5747)
    val x_5750: word32 = #0 (x_5747)
    val x_5748: word32 = prim WordU32_rshift (x_5750, x_5749)
    return (x_5748)
fun notb_6 (env_2480: unit, x_5751: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6037 ()
  block L_6037 ()
    val x_5752: word32 = prim Word32_notb (x_5751)
    return (x_5752)
fun <<?_5 (env_2481: unit, x_5753: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6038 ()
  block L_6038 ()
    val x_5755: word32 = #1 (x_5753)
    val x_5756: word32 = #0 (x_5753)
    val x_5754: word32 = prim Word32_lshift (x_5756, x_5755)
    return (x_5754)
fun andb_3 (env_2482: unit, x_5757: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6039 ()
  block L_6039 ()
    val x_5759: word32 = #1 (x_5757)
    val x_5760: word32 = #0 (x_5757)
    val x_5758: word32 = prim Word32_andb (x_5760, x_5759)
    return (x_5758)
fun >>?_6 (env_2483: unit, x_5761: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_6040 ()
  block L_6040 ()
    val x_5763: word32 = #1 (x_5761)
    val x_5764: word16 = #0 (x_5761)
    val x_5762: word16 = prim WordU16_rshift (x_5764, x_5763)
    return (x_5762)
fun notb_5 (env_2484: unit, x_5765: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_6041 ()
  block L_6041 ()
    val x_5766: word16 = prim Word16_notb (x_5765)
    return (x_5766)
fun <<?_6 (env_2485: unit, x_5767: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_6042 ()
  block L_6042 ()
    val x_5769: word32 = #1 (x_5767)
    val x_5770: word16 = #0 (x_5767)
    val x_5768: word16 = prim Word16_lshift (x_5770, x_5769)
    return (x_5768)
fun >>?_7 (env_2486: unit, x_5771: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_6043 ()
  block L_6043 ()
    val x_5773: word32 = #1 (x_5771)
    val x_5774: word8 = #0 (x_5771)
    val x_5772: word8 = prim WordU8_rshift (x_5774, x_5773)
    return (x_5772)
fun notb_4 (env_2487: unit, x_5775: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_6044 ()
  block L_6044 ()
    val x_5776: word8 = prim Word8_notb (x_5775)
    return (x_5776)
fun <<?_7 (env_2488: unit, x_5777: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_6045 ()
  block L_6045 ()
    val x_5779: word32 = #1 (x_5777)
    val x_5780: word8 = #0 (x_5777)
    val x_5778: word8 = prim Word8_lshift (x_5780, x_5779)
    return (x_5778)
fun sextdFromInt64ToInt64_1 (env_2489: unit, x_5781: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6046 ()
  block L_6046 ()
    return (x_5781)
fun sextdFromInt64ToInt32_1 (env_2490: unit, x_5782: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_6047 ()
  block L_6047 ()
    val x_5783: word32 = prim WordS64_extdToWord32 (x_5782)
    return (x_5783)
fun sextdFromInt32ToWord64_1 (env_2491: unit, x_5784: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6048 ()
  block L_6048 ()
    val x_5785: word64 = prim WordS32_extdToWord64 (x_5784)
    return (x_5785)
fun sextdFromInt32ToWord32_1 (env_2492: unit, x_5786: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6049 ()
  block L_6049 ()
    return (x_5786)
fun sextdFromInt32ToInt64_1 (env_2493: unit, x_5787: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6050 ()
  block L_6050 ()
    val x_5788: word64 = prim WordS32_extdToWord64 (x_5787)
    return (x_5788)
fun sextdFromInt32ToInt32_1 (env_2494: unit, x_5789: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6051 ()
  block L_6051 ()
    return (x_5789)
fun sextdFromInt16ToInt64_1 (env_2495: unit, x_5790: word16):
  {returns = Some (word64), raises = Some (exn)} =
L_6052 ()
  block L_6052 ()
    val x_5791: word64 = prim WordS16_extdToWord64 (x_5790)
    return (x_5791)
fun sextdFromInt8ToInt64_1 (env_2496: unit, x_5792: word8):
  {returns = Some (word64), raises = Some (exn)} =
L_6053 ()
  block L_6053 ()
    val x_5793: word64 = prim WordS8_extdToWord64 (x_5792)
    return (x_5793)
fun zextdFromWord64ToInt64_1 (env_2497: unit, x_5794: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6054 ()
  block L_6054 ()
    return (x_5794)
fun zextdFromWord64ToInt32_1 (env_2498: unit, x_5795: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_6055 ()
  block L_6055 ()
    val x_5796: word32 = prim WordU64_extdToWord32 (x_5795)
    return (x_5796)
fun zextdFromWord32ToWord64_1 (env_2499: unit, x_5797: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6056 ()
  block L_6056 ()
    val x_5798: word64 = prim WordU32_extdToWord64 (x_5797)
    return (x_5798)
fun zextdFromWord32ToWord32_1 (env_2500: unit, x_5799: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6057 ()
  block L_6057 ()
    return (x_5799)
fun zextdFromInt64ToWord64_1 (env_2501: unit, x_5800: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6058 ()
  block L_6058 ()
    return (x_5800)
fun zextdFromInt32ToWord64_1 (env_2502: unit, x_5801: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6059 ()
  block L_6059 ()
    val x_5802: word64 = prim WordU32_extdToWord64 (x_5801)
    return (x_5802)
fun zextdFromInt32ToWord32_1 (env_2503: unit, x_5803: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6060 ()
  block L_6060 ()
    return (x_5803)
fun zextdFromInt32ToInt64_1 (env_2504: unit, x_5804: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6061 ()
  block L_6061 ()
    val x_5805: word64 = prim WordU32_extdToWord64 (x_5804)
    return (x_5805)
fun zextdFromInt32ToInt32_1 (env_2505: unit, x_5806: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6062 ()
  block L_6062 ()
    return (x_5806)
fun zextdFromInt32ToInt16_1 (env_2506: unit, x_5807: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_6063 ()
  block L_6063 ()
    val x_5808: word16 = prim WordU32_extdToWord16 (x_5807)
    return (x_5808)
fun zextdFromInt32ToInt8_1 (env_2507: unit, x_5809: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_6064 ()
  block L_6064 ()
    val x_5810: word8 = prim WordU32_extdToWord8 (x_5809)
    return (x_5810)
fun idFromWord64ToInt64_1 (env_2508: unit, x_5811: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6065 ()
  block L_6065 ()
    return (x_5811)
fun idFromWord32ToInt32_1 (env_2509: unit, x_5812: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6066 ()
  block L_6066 ()
    return (x_5812)
fun idFromWord16ToInt16_1 (env_2510: unit, x_5813: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_6067 ()
  block L_6067 ()
    return (x_5813)
fun idFromWord8ToInt8_1 (env_2511: unit, x_5814: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_6068 ()
  block L_6068 ()
    return (x_5814)
fun idFromInt64ToWord64_1 (env_2512: unit, x_5815: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6069 ()
  block L_6069 ()
    return (x_5815)
fun idFromInt32ToWord32_1 (env_2513: unit, x_5816: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6070 ()
  block L_6070 ()
    return (x_5816)
fun idFromInt16ToWord16_1 (env_2514: unit, x_5817: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_6071 ()
  block L_6071 ()
    return (x_5817)
fun idFromInt8ToWord8_1 (env_2515: unit, x_5818: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_6072 ()
  block L_6072 ()
    return (x_5818)
fun x_5313 (env_2516: unit, x_5819: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6073 ()
  block L_6073 ()
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_6074
  block L_6074 (env_2517: unit)
    call L_6075 (x_2300 (env_2517, x_5819)) handle _ => raise
  block L_6075 (x_5820: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6076
  block L_6076 (env_2518: unit)
    call tail not_1 (env_2518, x_5820)
fun x_1497 (env_2519: unit, x_5821: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6077 ()
  block L_6077 ()
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_6078
  block L_6078 (env_2520: unit)
    call L_6079 (x_2054 (env_2520, x_5821)) handle _ => raise
  block L_6079 (x_5822: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6080
  block L_6080 (env_2521: unit)
    call tail not_1 (env_2521, x_5822)
fun x_2568 (env_2522: unit, x_5823: (word8, word8) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6081 ()
  block L_6081 ()
    val x_5825: word8 = #1 (x_5823)
    val x_5826: word8 = #0 (x_5823)
    val x_5824: bool = prim MLton_equal[word8] (x_5826, x_5825)
    return (x_5824)
fun x_2300 (env_2523: unit, x_5827: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6082 ()
  block L_6082 ()
    val x_5829: word64 = #1 (x_5827)
    val x_5830: word64 = #0 (x_5827)
    val x_5828: bool = prim MLton_equal[word64] (x_5830, x_5829)
    return (x_5828)
fun x_2054 (env_2524: unit, x_5831: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6083 ()
  block L_6083 ()
    val x_5833: word32 = #1 (x_5831)
    val x_5834: word32 = #0 (x_5831)
    val x_5832: bool = prim MLton_equal[word32] (x_5834, x_5833)
    return (x_5832)
fun x_2780 (env_2525: unit, x_5835: (t_0, t_0) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6084 ()
  block L_6084 ()
    val x_5837: t_0 = #1 (x_5835)
    val x_5838: t_0 = #0 (x_5835)
    val x_5836: bool = prim MLton_equal[t_0] (x_5838, x_5837)
    return (x_5836)
fun x_2686 (env_2526: unit, x_5839: ((bool) ref, bool) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_6085 ()
  block L_6085 ()
    val x_5841: bool = #1 (x_5839)
    val x_5842: (bool) ref = #0 (x_5839)
    val x_5840: unit = prim Ref_assign[bool] (x_5842, x_5841)
    return (x_5840)
fun x_3116 (env_2527: unit, x_5843: ((word64) ref, word64) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_6086 ()
  block L_6086 ()
    val x_5845: word64 = #1 (x_5843)
    val x_5846: (word64) ref = #0 (x_5843)
    val x_5844: unit = prim Ref_assign[word64] (x_5846, x_5845)
    return (x_5844)
fun x_2474 (env_2528: unit, x_5847: ((word32) ref, word32) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_6087 ()
  block L_6087 ()
    val x_5849: word32 = #1 (x_5847)
    val x_5850: (word32) ref = #0 (x_5847)
    val x_5848: unit = prim Ref_assign[word32] (x_5850, x_5849)
    return (x_5848)
fun x_2648 (env_2529: unit, x_5851: (bool) ref):
  {returns = Some (bool), raises = Some (exn)} =
L_6088 ()
  block L_6088 ()
    val x_5852: bool = prim Ref_deref[bool] (x_5851)
    return (x_5852)
fun x_2419 (env_2530: unit, x_5853: (bufferMode_0) ref):
  {returns = Some (bufferMode_0), raises = Some (exn)} =
L_6089 ()
  block L_6089 ()
    val x_5854: bufferMode_0 = prim Ref_deref[bufferMode_0] (x_5853)
    return (x_5854)
fun x_3109 (env_2531: unit, x_5855: (word64) ref):
  {returns = Some (word64), raises = Some (exn)} =
L_6090 ()
  block L_6090 ()
    val x_5856: word64 = prim Ref_deref[word64] (x_5855)
    return (x_5856)
fun x_2425 (env_2532: unit, x_5857: (word32) ref):
  {returns = Some (word32), raises = Some (exn)} =
L_6091 ()
  block L_6091 ()
    val x_5858: word32 = prim Ref_deref[word32] (x_5857)
    return (x_5858)
fun x_2416 (env_2533: unit, x_5859: (state_0) ref):
  {returns = Some (state_0), raises = Some (exn)} =
L_6092 ()
  block L_6092 ()
    val x_5860: state_0 = prim Ref_deref[state_0] (x_5859)
    return (x_5860)
fun x_2384 (env_2534: unit, x_5861: (list_5) ref):
  {returns = Some (list_5), raises = Some (exn)} =
L_6093 ()
  block L_6093 ()
    val x_5862: list_5 = prim Ref_deref[list_5] (x_5861)
    return (x_5862)
fun x_2316 (env_2535: unit, x_5863: (list_2) ref):
  {returns = Some (list_2), raises = Some (exn)} =
L_6094 ()
  block L_6094 ()
    val x_5864: list_2 = prim Ref_deref[list_2] (x_5863)
    return (x_5864)
fun x_1797 (env_2536: unit, x_5865: (list_0) ref):
  {returns = Some (list_0), raises = Some (exn)} =
L_6095 ()
  block L_6095 ()
    val x_5866: list_0 = prim Ref_deref[list_0] (x_5865)
    return (x_5866)
fun name_1 (env_2537: unit, x_5867: exn):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_6096 ()
  block L_6096 ()
    case x_5867 of
      UNKNOWN_0 => L_6141
    | Poll_0 => L_6140
    | DoublyRedirected_0 => L_6139
    | MisuseOfForget_0 => L_6138
    | Interrupt_0 => L_6137
    | Io_1 => L_6136
    | Ord_0 => L_6135
    | Ln_0 => L_6134
    | Sqrt_0 => L_6133
    | InvalidArc_0 => L_6132
    | Path_0 => L_6131
    | RandomAccessNotSupported_0 => L_6130
    | NonblockingNotSupported_0 => L_6129
    | Io_0 => L_6128
    | ClosedStream_0 => L_6127
    | BlockingNotSupported_0 => L_6126
    | Date_0 => L_6125
    | Time_0 => L_6124
    | Bad_1 => L_6123
    | Bad_0 => L_6122
    | Unordered_0 => L_6121
    | SysErr_0 => L_6120
    | UnequalLengths_0 => L_6119
    | Empty_0 => L_6118
    | Option_0 => L_6117
    | Fail_0 => L_6116
    | Chr_0 => L_6115
    | CreateVectorNotFull_1 => L_6114
    | CreateAlreadyGotVector_1 => L_6113
    | Vector_updateUnsafe_0 => L_6112
    | Vector_uninitUnsafe_0 => L_6111
    | Vector_uninitIsNop_0 => L_6110
    | CreateVectorNotFull_0 => L_6109
    | CreateAlreadyGotVector_0 => L_6108
    | Subscript_0 => L_6107
    | Span_0 => L_6106
    | Size_0 => L_6105
    | Overflow_0 => L_6104
    | Fail32_0 => L_6103
    | Fail16_0 => L_6102
    | Fail8_0 => L_6101
    | Domain_0 => L_6100
    | Div_0 => L_6099
    | Match_0 => L_6098
    | Bind_0 => L_6097
  block L_6097 (x_5868: (unit) ref)
    return (x_52 (*"Bind"*))
  block L_6098 (x_5869: (unit) ref)
    return (x_51 (*"Match"*))
  block L_6099 (x_5870: (unit) ref)
    return (x_50 (*"Div"*))
  block L_6100 (x_5871: (unit) ref)
    return (x_49 (*"Domain"*))
  block L_6101 (x_5872: ((unit) ref, (word8) vector) tuple)
    return (x_48 (*"Fail8"*))
  block L_6102 (x_5873: ((unit) ref, (word16) vector) tuple)
    return (x_47 (*"Fail16"*))
  block L_6103 (x_5874: ((unit) ref, (word32) vector) tuple)
    return (x_46 (*"Fail32"*))
  block L_6104 (x_5875: (unit) ref)
    return (x_45 (*"Overflow"*))
  block L_6105 (x_5876: (unit) ref)
    return (x_44 (*"Size"*))
  block L_6106 (x_5877: (unit) ref)
    return (x_43 (*"Span"*))
  block L_6107 (x_5878: (unit) ref)
    return (x_42 (*"Subscript"*))
  block L_6108 (x_5879: (unit) ref)
    return (x_41 (*"CreateAlr ... ctor"*))
  block L_6109 (x_5880: (unit) ref)
    return (x_40 (*"CreateVec ... Full"*))
  block L_6110 (x_5881: (unit) ref)
    return (x_39 (*"Vector_uninitIsNop"*))
  block L_6111 (x_5882: (unit) ref)
    return (x_38 (*"Vector_un ... safe"*))
  block L_6112 (x_5883: (unit) ref)
    return (x_37 (*"Vector_up ... safe"*))
  block L_6113 (x_5884: (unit) ref)
    return (x_36 (*"CreateAlr ... ctor"*))
  block L_6114 (x_5885: (unit) ref)
    return (x_35 (*"CreateVec ... Full"*))
  block L_6115 (x_5886: (unit) ref)
    return (x_34 (*"Chr"*))
  block L_6116 (x_5887: ((unit) ref, (word8) vector) tuple)
    return (x_33 (*"Fail"*))
  block L_6117 (x_5888: (unit) ref)
    return (x_32 (*"Option"*))
  block L_6118 (x_5889: (unit) ref)
    return (x_31 (*"Empty"*))
  block L_6119 (x_5890: (unit) ref)
    return (x_30 (*"UnequalLengths"*))
  block L_6120 (x_5891: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    return (x_29 (*"SysErr"*))
  block L_6121 (x_5892: (unit) ref)
    return (x_28 (*"Unordered"*))
  block L_6122 (x_5893: (unit) ref)
    return (x_27 (*"Bad"*))
  block L_6123 (x_5894: (unit) ref)
    return (x_26 (*"Bad"*))
  block L_6124 (x_5895: (unit) ref)
    return (x_25 (*"Time"*))
  block L_6125 (x_5896: (unit) ref)
    return (x_24 (*"Date"*))
  block L_6126 (x_5897: (unit) ref)
    return (x_23 (*"BlockingN ... rted"*))
  block L_6127 (x_5898: (unit) ref)
    return (x_22 (*"ClosedStream"*))
  block L_6128 (x_5899:
                  ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
    return (x_21 (*"Io"*))
  block L_6129 (x_5900: (unit) ref)
    return (x_20 (*"Nonblocki ... rted"*))
  block L_6130 (x_5901: (unit) ref)
    return (x_19 (*"RandomAcc ... rted"*))
  block L_6131 (x_5902: (unit) ref)
    return (x_18 (*"Path"*))
  block L_6132 (x_5903: (unit) ref)
    return (x_17 (*"InvalidArc"*))
  block L_6133 (x_5904: (unit) ref)
    return (x_16 (*"Sqrt"*))
  block L_6134 (x_5905: (unit) ref)
    return (x_15 (*"Ln"*))
  block L_6135 (x_5906: (unit) ref)
    return (x_14 (*"Ord"*))
  block L_6136 (x_5907: ((unit) ref, (word8) vector) tuple)
    return (x_13 (*"Io"*))
  block L_6137 (x_5908: (unit) ref)
    return (x_12 (*"Interrupt"*))
  block L_6138 (x_5909: (unit) ref)
    return (x_11 (*"MisuseOfForget"*))
  block L_6139 (x_5910: (unit) ref)
    return (x_10 (*"DoublyRedirected"*))
  block L_6140 (x_5911: (unit) ref)
    return (x_9 (*"Poll"*))
  block L_6141 (x_5912: (unit) ref)
    return (x_8 (*"UNKNOWN"*))
fun not_1 (env_2538: unit, x_5913: bool):
  {returns = Some (bool), raises = Some (exn)} =
L_6142 ()
  block L_6142 ()
    case x_5913 of
      true => L_6144 | false => L_6143
  block L_6143 ()
    return (x_7 (*con true*))
  block L_6144 ()
    return (x_6 (*con false*))
fun x_2531 (env_2539: unit, x_5914: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_6145 ()
  block L_6145 ()
    val _: unit = prim MLton_bug (x_3 (*"toplevel  ... lled"*))
    bug
fun x_2535 (env_2540: unit, x_5915: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_6146 ()
  block L_6146 ()
    val _: unit = prim MLton_bug (x_0 (*"toplevel  ... lled"*))
    bug


(* Main: *) main_0
