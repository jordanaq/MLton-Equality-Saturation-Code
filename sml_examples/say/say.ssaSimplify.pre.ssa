(* MLton 20210117 on-20210117-release *)


(* Datatypes: *)
datatype exn = UNKNOWN_0 of ((unit) ref)
             | Poll_0 of ((unit) ref)
             | DoublyRedirected_0 of ((unit) ref)
             | MisuseOfForget_0 of ((unit) ref)
             | Interrupt_0 of ((unit) ref)
             | Io_1 of (((unit) ref, (word8) vector) tuple)
             | Ord_0 of ((unit) ref)
             | Ln_0 of ((unit) ref)
             | Sqrt_0 of ((unit) ref)
             | InvalidArc_0 of ((unit) ref)
             | Path_0 of ((unit) ref)
             | RandomAccessNotSupported_0 of ((unit) ref)
             | NonblockingNotSupported_0 of ((unit) ref)
             | Io_0 of (((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
             | ClosedStream_0 of ((unit) ref)
             | BlockingNotSupported_0 of ((unit) ref)
             | Date_0 of ((unit) ref)
             | Time_0 of ((unit) ref)
             | Bad_1 of ((unit) ref)
             | Bad_0 of ((unit) ref)
             | Unordered_0 of ((unit) ref)
             | SysErr_0 of (((unit) ref, ((word8) vector, t_0) tuple) tuple)
             | UnequalLengths_0 of ((unit) ref)
             | Empty_0 of ((unit) ref)
             | Option_0 of ((unit) ref)
             | Fail_0 of (((unit) ref, (word8) vector) tuple)
             | Chr_0 of ((unit) ref)
             | CreateVectorNotFull_1 of ((unit) ref)
             | CreateAlreadyGotVector_1 of ((unit) ref)
             | Vector_updateUnsafe_0 of ((unit) ref)
             | Vector_uninitUnsafe_0 of ((unit) ref)
             | Vector_uninitIsNop_0 of ((unit) ref)
             | CreateVectorNotFull_0 of ((unit) ref)
             | CreateAlreadyGotVector_0 of ((unit) ref)
             | Subscript_0 of ((unit) ref)
             | Span_0 of ((unit) ref)
             | Size_0 of ((unit) ref)
             | Overflow_0 of ((unit) ref)
             | Fail32_0 of (((unit) ref, (word32) vector) tuple)
             | Fail16_0 of (((unit) ref, (word16) vector) tuple)
             | Fail8_0 of (((unit) ref, (word8) vector) tuple)
             | Domain_0 of ((unit) ref)
             | Div_0 of ((unit) ref)
             | Match_0 of ((unit) ref)
             | Bind_0 of ((unit) ref)
datatype bool = false | true
datatype t_0 = NONE_1 | SOME_0 of (word32)
datatype t_1 = Linux_1 | MinGW_0
datatype ans_0 = Big_0 of ((bool, bool, word8) tuple) | Small_0 of (word64)
datatype ans_1 = Big_1 of ((bool, bool, word16) tuple) | Small_1 of (word64)
datatype ans_2 = Big_2 of ((bool, bool, word32) tuple) | Small_2 of (word64)
datatype ans_3 = Big_3 of ((bool, bool, word64) tuple) | Small_3 of (word64)
datatype t_2 = NONE_3 | SOME_1 of ((word8) vector)
datatype list_0 = nil_1 | ::_3 of ((lambdas_0, list_0) tuple)
datatype radix_0 = BIN_1 | OCT_1 | DEC_1 | HEX_0
datatype list_1 = nil_2 | ::_4 of ((lambdas_1, list_1) tuple)
datatype t_3 = T_0 of ((lambdas_2, (word8) array, (bool) ref) tuple)
datatype t_4 = NONE_14 | SOME_2 of ((word8, word32) tuple)
datatype t_5 = NONE_15 | SOME_3 of ((word32, word32) tuple)
datatype t_6 = NONE_16 | SOME_4 of ((intInf, word32) tuple)
datatype t_7 = NONE_5 | SOME_5 of (intInf)
datatype t_8 = NONE_2 | SOME_6 of (word8)
datatype list_2 = nil_4 | ::_5 of ((lambdas_3, list_2) tuple)
datatype list_3 = nil_5
                | ::_6 of (((word32, (word8) vector) tuple, list_3) tuple)
datatype t_9 = TO_NEAREST_0 | TO_NEGINF_0 | TO_POSINF_0 | TO_ZERO_0
datatype float_class_0 = INF_0 | NAN_1 | NORMAL_1 | SUBNORMAL_1 | ZERO_1
datatype time_0 = T_1 of (intInf)
datatype list_4 = nil_10 | ::_2 of ((word32, list_4) tuple)
datatype stat_0 = T_2 of ((time_0,
                           time_0,
                           word64,
                           word32,
                           word64,
                           word32,
                           time_0,
                           word32,
                           word64,
                           word32) tuple)
datatype t_10 = NONE_11 | SOME_7 of (lambdas_2)
datatype t_11 = NONE_12 | SOME_8 of (lambdas_2)
datatype t_12 = NONE_9 | SOME_9 of (lambdas_4)
datatype t_13 = T_3 of ((word64, (word8) array, word64) tuple)
datatype t_14 = NONE_17 | SOME_10 of (lambdas_5)
datatype t_15 = NONE_18 | SOME_11 of (lambdas_6)
datatype t_16 = SOME_12 of (lambdas_2)
datatype t_17 = SOME_13 of (lambdas_2)
datatype t_18 = NONE_10 | SOME_14 of (lambdas_7)
datatype reader_0 = RD_0 of ((lambdas_2,
                              t_10,
                              t_11,
                              word32,
                              lambdas_2,
                              t_12,
                              t_12,
                              t_0,
                              (word8) vector,
                              t_14,
                              t_15,
                              t_16,
                              t_17,
                              t_18,
                              t_12) tuple)
datatype t_19 = T_4 of ((word64, (word8) vector, word64) tuple)
datatype t_20 = NONE_19 | SOME_15 of (lambdas_8)
datatype t_21 = NONE_20 | SOME_16 of (lambdas_9)
datatype writer_0 = WR_0 of ((t_10,
                              t_11,
                              word32,
                              lambdas_10,
                              t_12,
                              t_12,
                              t_0,
                              (word8) vector,
                              t_18,
                              t_12,
                              t_14,
                              t_15,
                              t_20,
                              t_21) tuple)
datatype outstream_0 = Out_0 of ((writer_0,
                                  (bufferMode_0) ref,
                                  (state_0) ref,
                                  writer_0) tuple)
datatype list_5 = nil_9 | ::_7 of (((outstream_0, bool) tuple, list_5) tuple)
datatype buffer_mode_0 = NO_BUF_1 | LINE_BUF_0 | BLOCK_BUF_0
datatype state_0 = Active_1 | Closed_1
datatype bufferMode_0 = NO_BUF_0
                      | LINE_BUF_1 of (buf_0)
                      | BLOCK_BUF_1 of (buf_0)
datatype t_22 = T_5 of ((outstream_0) ref)
datatype t_23 = T_6 of (((bool) ref, (bool) ref, cpointer) tuple)
datatype list_6 = nil_11 | ::_8 of ((t_23, list_6) tuple)
datatype buf_0 = Buf_0 of (((word8) array, (word32) ref) tuple)
datatype list_7 = nil_3 | ::_1 of (((word8) vector, list_7) tuple)
datatype whence_0 = SEEK_SET_1 | SEEK_CUR_1 | SEEK_END_1
datatype list_8 = nil_6 | ::_9 of (((word32, lambdas_2) tuple, list_8) tuple)
datatype list_9 = nil_8 | ::_10 of (((word32, lambdas_2) tuple, list_9) tuple)
datatype list_10 = nil_7 | ::_11 of (((word32, lambdas_2) tuple, list_10) tuple)
datatype t_24 = NONE_6 | SOME_17 of ((word32, lambdas_2) tuple)
datatype t_25 = NONE_8 | SOME_18 of ((word32, lambdas_2) tuple)
datatype t_26 = NONE_7 | SOME_19 of ((word32, lambdas_2) tuple)
datatype t_27 = NONE_4 | SOME_20 of ((word32, (word8) vector) tuple)
datatype t_28 = NONE_0 | SOME_21 of (word64)
datatype t_29 = NONE_21 | SOME_22 of ((word64, word32) tuple)
datatype t_30 = NONE_22
              | SOME_23 of (((word64, bool, word64) tuple, word32) tuple)
datatype list_11 = nil_12 | ::_12 of ((word8, list_11) tuple)
datatype t_31 = T_7 of ((word64, (bool) array, word64) tuple)
datatype t_32 = T_8 of ((word64, (t_0) array, word64) tuple)
datatype list_12 = nil_0 | ::_0 of (((word64, word64) tuple, list_12) tuple)
datatype t_33 = T_9 of ((word64, (word64) vector, word64) tuple)
datatype t_34 = NONE_13 | SOME_24 of ((word64, word8) tuple)
datatype t_35 = T_10 of ((word64, (word64) array, word64) tuple)
datatype t_36 = A_0 of (word64) | E_0 of (exn)
datatype t_37 = A_1 of (stat_0) | E_1 of (exn)
datatype t_38 = A_2 of ((word8) vector) | E_2 of (exn)
datatype t_39 = A_3 of (word32) | E_3 of (exn)
datatype lambdas_11 = xEnv_73 of (exn)
datatype lambdas_12 = loopEnv_5 of ((word64,
                                     word64,
                                     word64,
                                     (word8) vector,
                                     (word8) array) tuple)
datatype lambdas_13 = loopEnv_6 of ((word64, word64, (word8) vector) tuple)
datatype lambdas_14 = xEnv_74 of (exn)
datatype lambdas_15 = xEnv_75 of (exn)
datatype lambdas_16 = loopEnv_7 of ((word64,
                                     word64,
                                     word64,
                                     (word8) vector,
                                     (word8) array) tuple)
datatype lambdas_17 = xEnv_76 of (exn)
datatype lambdas_18 = xEnv_77 of (exn)
datatype lambdas_19 = loopEnv_8 of ((word32, (word8) vector, lambdas_8) tuple)
datatype lambdas_20 = putEnv_0 of (writer_0)
datatype lambdas_21 = xEnv_78 of ((lambdas_22, (list_6) ref) tuple)
datatype lambdas_23 = loopEnv_4 of (unit)
datatype lambdas_24 = xEnv_79 of (((list_6) ref,
                                   lambdas_27,
                                   lambdas_26,
                                   (word8) vector,
                                   lambdas_25) tuple)
datatype lambdas_28 = makeEnv_0 of (unit)
datatype lambdas_29 = defaultTopLevelHandlerEnv_0 of ((lambdas_32,
                                                       lambdas_31,
                                                       lambdas_30,
                                                       word32) tuple)
datatype lambdas_33 = defaultTopLevelSuffixEnv_0 of ((lambdas_30, word32, word32) tuple)
datatype lambdas_34 = loopEnv_9 of ((word32,
                                     word32,
                                     word32,
                                     word32,
                                     (word8) array,
                                     lambdas_35,
                                     word32) tuple)
datatype lambdas_36 = xEnv_80 of (((bool) ref, bool) tuple)
datatype lambdas_37 = loopEnv_3 of (unit)
datatype lambdas_38 = haltEnv_0 of (unit)
datatype lambdas_39 = xEnv_72 of (unit)
datatype lambdas_40 = xEnv_81 of (exn)
datatype lambdas_41 = xEnv_82 of (exn)
datatype lambdas_42 = xEnv_71 of (unit)
datatype lambdas_43 = loopEnv_10 of (word32)
datatype lambdas_44 = xEnv_70 of (unit)
datatype lambdas_45 = xEnv_69 of (unit)
datatype lambdas_46 = loopEnv_11 of (word32)
datatype lambdas_47 = errUnblockedEnv_0 of ((word32,
                                             (bool) ref,
                                             word32,
                                             (lambdas_49) ref,
                                             lambdas_48) tuple)
datatype lambdas_50 = xEnv_68 of (unit)
datatype lambdas_51 = xEnv_67 of (unit)
datatype lambdas_52 = loopEnv_12 of (word32)
datatype lambdas_53 = xEnv_66 of (unit)
datatype lambdas_54 = xEnv_65 of (unit)
datatype lambdas_55 = loopEnv_13 of (word32)
datatype lambdas_56 = errUnblockedEnv_1 of ((word32,
                                             (bool) ref,
                                             lambdas_58,
                                             word64,
                                             (lambdas_49) ref,
                                             lambdas_57) tuple)
datatype lambdas_58 = xEnv_83 of (((word8) array, word32, word32, word32) tuple)
datatype lambdas_59 = xEnv_64 of (unit)
datatype lambdas_60 = loopEnv_14 of (word32)
datatype lambdas_61 = xEnv_63 of (unit)
datatype lambdas_62 = xEnv_62 of (unit)
datatype lambdas_63 = loopEnv_15 of (word32)
datatype lambdas_64 = errUnblockedEnv_2 of ((word32,
                                             (bool) ref,
                                             lambdas_65,
                                             word64,
                                             (lambdas_49) ref,
                                             lambdas_57) tuple)
datatype lambdas_65 = xEnv_84 of (((word8) vector, word32, word32, word32) tuple)
datatype lambdas_66 = verifyPosEnv_0 of ((word64, lambdas_67, (word64) ref) tuple)
datatype lambdas_68 = endPosEnv_0 of (((bool) ref, lambdas_69) tuple)
datatype lambdas_70 = getPosEnv_0 of ((word64) ref)
datatype lambdas_71 = getEnv_0 of (unit)
datatype lambdas_72 = doitEnv_0 of (unit)
datatype lambdas_73 = loopEnv_2 of (unit)
datatype lambdas_74 = xEnv_85 of ((list_5) ref)
datatype lambdas_75 = flushOutEnv_0 of (unit)
datatype lambdas_76 = loopEnv_16 of ((word32, (word8) array, lambdas_5) tuple)
datatype lambdas_77 = flushBufEnv_0 of (unit)
datatype lambdas_78 = outstreamNameEnv_0 of (unit)
datatype lambdas_79 = outstreamWriterEnv_0 of (unit)
datatype lambdas_80 = terminatedEnv_0 of (unit)
datatype lambdas_81 = xEnv_86 of (((word8) vector, (word8) vector) tuple)
datatype lambdas_82 = xEnv_87 of ((word8) vector)
datatype lambdas_83 = liftExnEnv_0 of (unit)
datatype lambdas_84 = loopEnv_17 of (word32)
datatype lambdas_85 = xEnv_61 of (unit)
datatype lambdas_86 = xEnv_60 of (unit)
datatype lambdas_87 = loopEnv_18 of (word32)
datatype lambdas_88 = xEnv_59 of (unit)
datatype lambdas_89 = xEnv_58 of (unit)
datatype lambdas_90 = loopEnv_19 of (word32)
datatype lambdas_91 = errUnblockedEnv_3 of ((word32,
                                             (bool) ref,
                                             lambdas_92,
                                             word32,
                                             (lambdas_49) ref,
                                             lambdas_48) tuple)
datatype lambdas_92 = xEnv_88 of ((word32, word32) tuple)
datatype lambdas_93 = loopEnv_20 of (word32)
datatype lambdas_94 = xEnv_89 of (lambdas_95)
datatype lambdas_96 = loopEnv_1 of (unit)
datatype lambdas_97 = xEnv_90 of (exn)
datatype lambdas_98 = xEnv_57 of (unit)
datatype lambdas_99 = xEnv_91 of ((lambdas_31, lambdas_32) tuple)
datatype lambdas_100 = xEnv_92 of ((word64,
                                    real64,
                                    word64,
                                    real64,
                                    lambdas_102,
                                    t_9,
                                    real64,
                                    real64,
                                    lambdas_101) tuple)
datatype lambdas_103 = xEnv_93 of ((lambdas_101,
                                    real64,
                                    real64,
                                    lambdas_102,
                                    real64,
                                    word64,
                                    real64,
                                    word64) tuple)
datatype lambdas_104 = xEnv_94 of ((real64,
                                    word64,
                                    real64,
                                    lambdas_102,
                                    t_9,
                                    real64,
                                    real64,
                                    lambdas_101) tuple)
datatype lambdas_105 = xEnv_95 of ((lambdas_101,
                                    real64,
                                    real64,
                                    lambdas_102,
                                    real64,
                                    word64,
                                    real64) tuple)
datatype lambdas_106 = xEnv_97 of ((lambdas_101,
                                    real64,
                                    real64,
                                    lambdas_102,
                                    real64,
                                    word64,
                                    real64) tuple)
                     | xEnv_96 of ((lambdas_101,
                                    real64,
                                    real64,
                                    lambdas_102,
                                    real64,
                                    word64,
                                    real64,
                                    word64) tuple)
datatype lambdas_107 = xEnv_98 of ((lambdas_109, lambdas_108, word64) tuple)
datatype lambdas_110 = xEnv_99 of ((word32,
                                    real64,
                                    word32,
                                    real64,
                                    lambdas_102,
                                    t_9,
                                    real64,
                                    real64,
                                    lambdas_101) tuple)
datatype lambdas_111 = xEnv_100 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_112 = xEnv_101 of ((real64,
                                     word32,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_101) tuple)
datatype lambdas_113 = xEnv_102 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word32,
                                     real64) tuple)
datatype lambdas_114 = xEnv_104 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word32,
                                     real64) tuple)
                     | xEnv_103 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_115 = xEnv_105 of ((lambdas_117, lambdas_116, word32) tuple)
datatype lambdas_118 = xEnv_106 of ((real64,
                                     word16,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_101) tuple)
datatype lambdas_119 = xEnv_107 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word16,
                                     real64) tuple)
datatype lambdas_120 = xEnv_108 of ((real64,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_101) tuple)
datatype lambdas_121 = xEnv_109 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     real64) tuple)
datatype lambdas_122 = xEnv_111 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     real64) tuple)
                     | xEnv_110 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word16,
                                     real64) tuple)
datatype lambdas_123 = xEnv_112 of ((lambdas_125, lambdas_124, word16) tuple)
datatype lambdas_126 = xEnv_113 of ((real64,
                                     word8,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_101) tuple)
datatype lambdas_127 = xEnv_114 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word8,
                                     real64) tuple)
datatype lambdas_128 = xEnv_115 of ((real64,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64,
                                     lambdas_101) tuple)
datatype lambdas_129 = xEnv_116 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     real64) tuple)
datatype lambdas_130 = xEnv_118 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     real64) tuple)
                     | xEnv_117 of ((lambdas_101,
                                     real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word8,
                                     real64) tuple)
datatype lambdas_131 = xEnv_119 of ((lambdas_133, lambdas_132, word8) tuple)
datatype lambdas_134 = xEnv_120 of ((word64,
                                     real64,
                                     word64,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_135 = xEnv_121 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word64,
                                     real64,
                                     word64) tuple)
datatype lambdas_136 = xEnv_122 of ((lambdas_102, t_9, real64, real64) tuple)
datatype lambdas_137 = xEnv_123 of ((real64, real64, lambdas_102) tuple)
datatype lambdas_138 = xEnv_125 of ((real64, real64, lambdas_102) tuple)
                     | xEnv_124 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word64,
                                     real64,
                                     word64) tuple)
datatype lambdas_139 = xEnv_126 of ((lambdas_141, lambdas_140, word64) tuple)
datatype lambdas_142 = xEnv_127 of ((word32,
                                     real64,
                                     word32,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_143 = xEnv_128 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_144 = xEnv_129 of ((lambdas_102, t_9, real64, real64) tuple)
datatype lambdas_145 = xEnv_130 of ((real64, real64, lambdas_102) tuple)
datatype lambdas_146 = xEnv_132 of ((real64, real64, lambdas_102) tuple)
                     | xEnv_131 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word32,
                                     real64,
                                     word32) tuple)
datatype lambdas_147 = xEnv_133 of ((lambdas_149, lambdas_148, word32) tuple)
datatype lambdas_150 = xEnv_134 of ((word16,
                                     real64,
                                     word16,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_151 = xEnv_135 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word16,
                                     real64,
                                     word16) tuple)
datatype lambdas_152 = xEnv_136 of ((lambdas_102, t_9, real64, real64) tuple)
datatype lambdas_153 = xEnv_137 of ((real64, real64, lambdas_102) tuple)
datatype lambdas_154 = xEnv_139 of ((real64, real64, lambdas_102) tuple)
                     | xEnv_138 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word16,
                                     real64,
                                     word16) tuple)
datatype lambdas_155 = xEnv_140 of ((lambdas_157, lambdas_156, word16) tuple)
datatype lambdas_158 = xEnv_141 of ((word8,
                                     real64,
                                     word8,
                                     real64,
                                     lambdas_102,
                                     t_9,
                                     real64,
                                     real64) tuple)
datatype lambdas_159 = xEnv_142 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word8,
                                     real64,
                                     word8) tuple)
datatype lambdas_160 = xEnv_143 of ((lambdas_102, t_9, real64, real64) tuple)
datatype lambdas_161 = xEnv_144 of ((real64, real64, lambdas_102) tuple)
datatype lambdas_162 = xEnv_146 of ((real64, real64, lambdas_102) tuple)
                     | xEnv_145 of ((real64,
                                     real64,
                                     lambdas_102,
                                     real64,
                                     word8,
                                     real64,
                                     word8) tuple)
datatype lambdas_163 = xEnv_147 of ((lambdas_165, lambdas_164, word8) tuple)
datatype lambdas_166 = xEnv_148 of ((t_9, lambdas_102) tuple)
datatype lambdas_167 = xEnv_149 of (lambdas_102)
datatype lambdas_168 = xEnv_56 of (unit)
datatype lambdas_169 = xEnv_151 of (unit) | xEnv_150 of (lambdas_102)
datatype lambdas_101 = classEnv_0 of ((word64, word64, word64) tuple)
datatype lambdas_170 = mkMaskEnv_0 of ((lambdas_109, word64) tuple)
datatype lambdas_171 = xEnv_152 of ((word64,
                                     real32,
                                     word64,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_173 = xEnv_153 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_174 = xEnv_154 of ((real32,
                                     word64,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_175 = xEnv_155 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word64,
                                     real32) tuple)
datatype lambdas_176 = xEnv_157 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word64,
                                     real32) tuple)
                     | xEnv_156 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_177 = xEnv_158 of ((lambdas_109, lambdas_108, word64) tuple)
datatype lambdas_178 = xEnv_159 of ((word32,
                                     real32,
                                     word32,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_179 = xEnv_160 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_180 = xEnv_161 of ((real32,
                                     word32,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_181 = xEnv_162 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word32,
                                     real32) tuple)
datatype lambdas_182 = xEnv_164 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word32,
                                     real32) tuple)
                     | xEnv_163 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_183 = xEnv_165 of ((lambdas_117, lambdas_116, word32) tuple)
datatype lambdas_184 = xEnv_166 of ((real32,
                                     word16,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_185 = xEnv_167 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word16,
                                     real32) tuple)
datatype lambdas_186 = xEnv_168 of ((real32,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_187 = xEnv_169 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     real32) tuple)
datatype lambdas_188 = xEnv_171 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     real32) tuple)
                     | xEnv_170 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word16,
                                     real32) tuple)
datatype lambdas_189 = xEnv_172 of ((lambdas_125, lambdas_124, word16) tuple)
datatype lambdas_190 = xEnv_173 of ((real32,
                                     word8,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_191 = xEnv_174 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word8,
                                     real32) tuple)
datatype lambdas_192 = xEnv_175 of ((real32,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32,
                                     lambdas_172) tuple)
datatype lambdas_193 = xEnv_176 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     real32) tuple)
datatype lambdas_194 = xEnv_178 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     real32) tuple)
                     | xEnv_177 of ((lambdas_172,
                                     real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word8,
                                     real32) tuple)
datatype lambdas_195 = xEnv_179 of ((lambdas_133, lambdas_132, word8) tuple)
datatype lambdas_196 = xEnv_180 of ((word64,
                                     real32,
                                     word64,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_197 = xEnv_181 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_198 = xEnv_182 of ((lambdas_102, t_9, real32, real32) tuple)
datatype lambdas_199 = xEnv_183 of ((real32, real32, lambdas_102) tuple)
datatype lambdas_200 = xEnv_185 of ((real32, real32, lambdas_102) tuple)
                     | xEnv_184 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_201 = xEnv_186 of ((lambdas_141, lambdas_140, word64) tuple)
datatype lambdas_202 = xEnv_187 of ((word32,
                                     real32,
                                     word32,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_203 = xEnv_188 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_204 = xEnv_189 of ((lambdas_102, t_9, real32, real32) tuple)
datatype lambdas_205 = xEnv_190 of ((real32, real32, lambdas_102) tuple)
datatype lambdas_206 = xEnv_192 of ((real32, real32, lambdas_102) tuple)
                     | xEnv_191 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_207 = xEnv_193 of ((lambdas_149, lambdas_148, word32) tuple)
datatype lambdas_208 = xEnv_194 of ((word16,
                                     real32,
                                     word16,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_209 = xEnv_195 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word16,
                                     real32,
                                     word16) tuple)
datatype lambdas_210 = xEnv_196 of ((lambdas_102, t_9, real32, real32) tuple)
datatype lambdas_211 = xEnv_197 of ((real32, real32, lambdas_102) tuple)
datatype lambdas_212 = xEnv_199 of ((real32, real32, lambdas_102) tuple)
                     | xEnv_198 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word16,
                                     real32,
                                     word16) tuple)
datatype lambdas_213 = xEnv_200 of ((lambdas_157, lambdas_156, word16) tuple)
datatype lambdas_214 = xEnv_201 of ((word8,
                                     real32,
                                     word8,
                                     real32,
                                     lambdas_102,
                                     t_9,
                                     real32,
                                     real32) tuple)
datatype lambdas_215 = xEnv_202 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word8,
                                     real32,
                                     word8) tuple)
datatype lambdas_216 = xEnv_203 of ((lambdas_102, t_9, real32, real32) tuple)
datatype lambdas_217 = xEnv_204 of ((real32, real32, lambdas_102) tuple)
datatype lambdas_218 = xEnv_206 of ((real32, real32, lambdas_102) tuple)
                     | xEnv_205 of ((real32,
                                     real32,
                                     lambdas_102,
                                     real32,
                                     word8,
                                     real32,
                                     word8) tuple)
datatype lambdas_219 = xEnv_207 of ((lambdas_165, lambdas_164, word8) tuple)
datatype lambdas_220 = xEnv_208 of ((t_9, lambdas_102) tuple)
datatype lambdas_221 = xEnv_209 of (lambdas_102)
datatype lambdas_222 = xEnv_55 of (unit)
datatype lambdas_223 = xEnv_211 of (unit) | xEnv_210 of (lambdas_102)
datatype lambdas_172 = classEnv_1 of ((word32, word32, word32) tuple)
datatype lambdas_224 = mkMaskEnv_1 of ((lambdas_117, word32) tuple)
datatype lambdas_225 = xEnv_54 of (unit)
datatype lambdas_102 = setRoundingModeEnv_0 of ((lambdas_226, word32) tuple)
datatype lambdas_227 = xEnv_52 of (unit)
datatype lambdas_228 = loopEnv_21 of ((word64, word64, (word8) array) tuple)
datatype lambdas_229 = loopEnv_22 of (word64)
datatype lambdas_230 = loopEnv_23 of (word32)
datatype lambdas_231 = xEnv_51 of (unit)
datatype lambdas_232 = xEnv_212 of ((lambdas_31, list_3) tuple)
datatype lambdas_233 = ::?Env_0 of (unit)
datatype lambdas_234 = fromRepEnv_0 of (unit)
datatype lambdas_235 = toRepEnv_1 of (unit)
datatype lambdas_236 = toRepEnv_0 of (unit)
datatype lambdas_237 = newEnv_0 of (unit)
datatype lambdas_238 = subEnv_0 of (unit)
datatype lambdas_239 = xEnv_50 of (unit)
datatype lambdas_240 = xEnv_213 of (lambdas_31)
datatype lambdas_241 = loopEnv_24 of ((word64, (word8) array, word8) tuple)
datatype lambdas_108 = >>Env_0 of ((word32, word64) tuple)
datatype lambdas_109 = <<Env_0 of ((word32, word64) tuple)
datatype lambdas_242 = xEnv_49 of (unit)
datatype lambdas_243 = xEnv_48 of (unit)
datatype lambdas_244 = xEnv_47 of (unit)
datatype lambdas_245 = xEnv_216 of (unit)
                     | xEnv_215 of (unit)
                     | xEnv_214 of (unit)
                     | stEnv_1 of (unit)
datatype lambdas_246 = stEnv_0 of (unit)
datatype lambdas_116 = >>Env_1 of ((word32, word32) tuple)
datatype lambdas_117 = <<Env_1 of ((word32, word32) tuple)
datatype lambdas_124 = >>Env_2 of (word32)
datatype lambdas_125 = <<Env_2 of (word32)
datatype lambdas_132 = >>Env_3 of (word32)
datatype lambdas_133 = <<Env_3 of (word32)
datatype lambdas_247 = loopEnv_25 of ((word64,
                                       word64,
                                       word64,
                                       word64,
                                       (word8) array,
                                       lambdas_248,
                                       word64) tuple)
datatype lambdas_249 = xEnv_217 of (((bool) ref, bool) tuple)
datatype lambdas_250 = fmtEnv_0 of ((word32,
                                     lambdas_248,
                                     word64,
                                     word64,
                                     word64,
                                     (word8) array,
                                     lambdas_251,
                                     (bool) ref) tuple)
datatype lambdas_140 = >>Env_4 of ((word32, word64) tuple)
datatype lambdas_141 = <<Env_4 of ((word32, word64) tuple)
datatype lambdas_148 = >>Env_5 of ((word32, word32) tuple)
datatype lambdas_149 = <<Env_5 of ((word32, word32) tuple)
datatype lambdas_156 = >>Env_6 of ((word32, word16) tuple)
datatype lambdas_157 = <<Env_6 of ((word32, word16) tuple)
datatype lambdas_164 = >>Env_7 of ((word32, word8) tuple)
datatype lambdas_165 = <<Env_7 of ((word32, word8) tuple)
datatype lambdas_252 = xEnv_218 of (exn)
datatype lambdas_253 = digitToCharEnv_0 of (unit)
datatype lambdas_254 = loopEnv_26 of ((word64, (bool) array) tuple)
datatype lambdas_255 = loopEnv_27 of (word8)
datatype lambdas_256 = loopEnv_28 of ((word64, list_1, (t_0) array) tuple)
datatype lambdas_257 = loopEnv_29 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_258 = loopEnv_30 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_259 = loopEnv_31 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_260 = rangeEnv_0 of (unit)
datatype lambdas_261 = radixToIntEnv_0 of (unit)
datatype lambdas_262 = xEnv_46 of (unit)
datatype lambdas_263 = xEnv_45 of (unit)
datatype lambdas_264 = xEnv_219 of (exn)
datatype lambdas_265 = updateEnv_0 of (unit)
datatype lambdas_266 = xEnv_220 of (exn)
datatype lambdas_267 = baseEnv_2 of (unit)
datatype lambdas_268 = xEnv_221 of (exn)
datatype lambdas_269 = sliceEnv_0 of (unit)
datatype lambdas_270 = loopEnv_32 of ((word64, (word8) array, word8) tuple)
datatype lambdas_271 = xEnv_222 of (exn)
datatype lambdas_272 = lengthEnv_1 of (unit)
datatype lambdas_273 = loopEnv_33 of ((word64,
                                       word64,
                                       word64,
                                       (word8) vector,
                                       (word8) array) tuple)
datatype lambdas_274 = loopEnv_34 of ((word8) array)
datatype lambdas_275 = xEnv_223 of (exn)
datatype lambdas_276 = loopEnv_0 of (unit)
datatype lambdas_277 = loopEnv_35 of ((word64, (word8) array) tuple)
datatype lambdas_278 = xEnv_224 of (exn)
datatype lambdas_279 = baseEnv_1 of (unit)
datatype lambdas_280 = xEnv_225 of (exn)
datatype lambdas_281 = fromIntForLengthEnv_0 of (unit)
datatype lambdas_282 = findEnv_0 of (exn)
datatype lambdas_283 = loopEnv_36 of (word32)
datatype lambdas_284 = xEnv_226 of ((word64,
                                     word32,
                                     word32,
                                     word32,
                                     lambdas_35,
                                     word32,
                                     word32,
                                     word32,
                                     (word32, lambdas_285) tuple) tuple)
datatype lambdas_285 = xEnv_227 of ((word32,
                                     lambdas_248,
                                     word64,
                                     word64,
                                     word64,
                                     radix_0,
                                     (word8) array,
                                     lambdas_251,
                                     (bool) ref) tuple)
datatype lambdas_251 = xEnv_228 of ((lambdas_286, word32) tuple)
datatype lambdas_287 = mkBigCvtEnv_0 of ((word64,
                                          word32,
                                          word32,
                                          word32,
                                          lambdas_35,
                                          word32,
                                          word32,
                                          word32) tuple)
datatype lambdas_288 = loopEnv_37 of ((word64) array)
datatype lambdas_289 = loopEnv_38 of ((word64, word32) tuple)
datatype lambdas_290 = addTagEnv_0 of (unit)
datatype lambdas_291 = dropTagCoerceEnv_0 of (unit)
datatype lambdas_292 = numLimbsEnv_0 of (unit)
datatype lambdas_293 = areSmallEnv_0 of (unit)
datatype lambdas_294 = isSmallEnv_0 of (unit)
datatype lambdas_295 = baseEnv_0 of (unit)
datatype lambdas_296 = fullEnv_1 of (unit)
datatype lambdas_297 = lengthEnv_0 of (unit)
datatype lambdas_298 = valOfEnv_1 of (unit)
datatype lambdas_299 = loopEnv_39 of ((word64,
                                       word64,
                                       (word8) array,
                                       (word8) array) tuple)
datatype lambdas_300 = vectorEnv_0 of (unit)
datatype lambdas_301 = fullEnv_0 of (unit)
datatype lambdas_302 = unsafeArrayAllocEnv_0 of (unit)
datatype lambdas_303 = valOfEnv_0 of (unit)
datatype lambdas_304 = xEnv_44 of (unit)
datatype lambdas_305 = >=Env_5 of (unit)
datatype lambdas_306 = >Env_4 of (unit)
datatype lambdas_307 = ltuEnv_0 of (unit)
datatype lambdas_248 = quotEnv_0 of ((word64, word64, word64) tuple)
datatype lambdas_308 = xEnv_43 of (unit)
datatype lambdas_309 = xEnv_42 of (unit)
datatype lambdas_310 = xEnv_41 of (unit)
datatype lambdas_311 = xEnv_40 of (unit)
datatype lambdas_312 = xEnv_39 of (unit)
datatype lambdas_313 = xEnv_38 of (unit)
datatype lambdas_314 = xEnv_37 of (unit)
datatype lambdas_315 = xEnv_36 of (unit)
datatype lambdas_316 = xEnv_35 of (unit)
datatype lambdas_317 = xEnv_34 of (unit)
datatype lambdas_318 = xEnv_229 of (exn)
datatype lambdas_319 = xEnv_33 of (unit)
datatype lambdas_320 = castFromWordEnv_1 of (unit)
datatype lambdas_321 = castFromWordEnv_0 of (unit)
datatype lambdas_322 = >=Env_4 of (unit)
datatype lambdas_323 = >Env_3 of (unit)
datatype lambdas_324 = toWord64UnsafeEnv_1 of (unit)
datatype lambdas_325 = toWord32UnsafeEnv_1 of (unit)
datatype lambdas_326 = toWord16UnsafeEnv_1 of (unit)
datatype lambdas_327 = toWord8UnsafeEnv_1 of (unit)
datatype lambdas_328 = toReal32UnsafeEnv_1 of (unit)
datatype lambdas_329 = toInt64UnsafeEnv_1 of (unit)
datatype lambdas_330 = toInt32UnsafeEnv_1 of (unit)
datatype lambdas_331 = toInt16UnsafeEnv_1 of (unit)
datatype lambdas_332 = toInt8UnsafeEnv_1 of (unit)
datatype lambdas_333 = fromWord64UnsafeEnv_1 of (unit)
datatype lambdas_334 = fromWord32UnsafeEnv_1 of (unit)
datatype lambdas_335 = fromWord16UnsafeEnv_1 of (unit)
datatype lambdas_336 = fromWord8UnsafeEnv_1 of (unit)
datatype lambdas_337 = fromReal32UnsafeEnv_1 of (unit)
datatype lambdas_338 = fromInt64UnsafeEnv_1 of (unit)
datatype lambdas_339 = fromInt32UnsafeEnv_1 of (unit)
datatype lambdas_340 = fromInt16UnsafeEnv_1 of (unit)
datatype lambdas_341 = fromInt8UnsafeEnv_1 of (unit)
datatype lambdas_342 = roundEnv_1 of (unit)
datatype lambdas_343 = <=Env_3 of (unit)
datatype lambdas_344 = <Env_4 of (unit)
datatype lambdas_345 = ~Env_1 of (unit)
datatype lambdas_346 = -Env_2 of (unit)
datatype lambdas_347 = +Env_2 of (unit)
datatype lambdas_348 = >=Env_3 of (unit)
datatype lambdas_349 = >Env_2 of (unit)
datatype lambdas_350 = toWord64UnsafeEnv_0 of (unit)
datatype lambdas_351 = toWord32UnsafeEnv_0 of (unit)
datatype lambdas_352 = toWord16UnsafeEnv_0 of (unit)
datatype lambdas_353 = toWord8UnsafeEnv_0 of (unit)
datatype lambdas_354 = toReal32UnsafeEnv_0 of (unit)
datatype lambdas_355 = toInt64UnsafeEnv_0 of (unit)
datatype lambdas_356 = toInt32UnsafeEnv_0 of (unit)
datatype lambdas_357 = toInt16UnsafeEnv_0 of (unit)
datatype lambdas_358 = toInt8UnsafeEnv_0 of (unit)
datatype lambdas_359 = fromWord64UnsafeEnv_0 of (unit)
datatype lambdas_360 = fromWord32UnsafeEnv_0 of (unit)
datatype lambdas_361 = fromWord16UnsafeEnv_0 of (unit)
datatype lambdas_362 = fromWord8UnsafeEnv_0 of (unit)
datatype lambdas_363 = fromReal32UnsafeEnv_0 of (unit)
datatype lambdas_364 = fromInt64UnsafeEnv_0 of (unit)
datatype lambdas_365 = fromInt32UnsafeEnv_0 of (unit)
datatype lambdas_366 = fromInt16UnsafeEnv_0 of (unit)
datatype lambdas_367 = fromInt8UnsafeEnv_0 of (unit)
datatype lambdas_368 = roundEnv_0 of (unit)
datatype lambdas_369 = <=Env_2 of (unit)
datatype lambdas_370 = <Env_3 of (unit)
datatype lambdas_371 = ~Env_0 of (unit)
datatype lambdas_372 = -Env_1 of (unit)
datatype lambdas_373 = +Env_1 of (unit)
datatype lambdas_374 = <=Env_1 of (unit)
datatype lambdas_375 = idFromWord8Env_0 of (unit)
datatype lambdas_376 = toWordEnv_0 of (unit)
datatype lambdas_377 = fromWordEnv_1 of (unit)
datatype lambdas_378 = printEnv_0 of (unit)
datatype lambdas_379 = atomicEndEnv_0 of (unit)
datatype lambdas_380 = atomicBeginEnv_0 of (unit)
datatype lambdas_381 = atomicStateEnv_0 of (unit)
datatype lambdas_382 = fromWordEnv_0 of (unit)
datatype lambdas_383 = bugEnv_0 of (unit)
datatype lambdas_384 = gcStateEnv_0 of (unit)
datatype lambdas_385 = xEnv_32 of (unit)
datatype lambdas_386 = xEnv_31 of (unit)
datatype lambdas_387 = xEnv_30 of (unit)
datatype lambdas_388 = xEnv_29 of (unit)
datatype lambdas_389 = xEnv_28 of (unit)
datatype lambdas_390 = xEnv_27 of (unit)
datatype lambdas_391 = xEnv_26 of (unit)
datatype lambdas_392 = xEnv_25 of (unit)
datatype lambdas_393 = >=Env_2 of (unit)
datatype lambdas_394 = >Env_1 of (unit)
datatype lambdas_395 = <Env_2 of (unit)
datatype lambdas_396 = xEnv_24 of (unit)
datatype lambdas_397 = -!Env_1 of (unit)
datatype lambdas_398 = xEnv_23 of (unit)
datatype lambdas_399 = ~!Env_1 of (unit)
datatype lambdas_400 = xEnv_22 of (unit)
datatype lambdas_401 = +!Env_1 of (unit)
datatype lambdas_402 = >=Env_1 of (unit)
datatype lambdas_403 = >Env_0 of (unit)
datatype lambdas_404 = <=Env_0 of (unit)
datatype lambdas_405 = <Env_1 of (unit)
datatype lambdas_406 = remUnsafeEnv_0 of (unit)
datatype lambdas_407 = xEnv_21 of (unit)
datatype lambdas_408 = -!Env_0 of (unit)
datatype lambdas_409 = xEnv_20 of (unit)
datatype lambdas_410 = ~!Env_0 of (unit)
datatype lambdas_411 = xEnv_19 of (unit)
datatype lambdas_412 = +!Env_0 of (unit)
datatype lambdas_413 = >>?Env_3 of (unit)
datatype lambdas_414 = ~>>?Env_0 of (unit)
datatype lambdas_415 = notbEnv_3 of (unit)
datatype lambdas_416 = *Env_0 of (unit)
datatype lambdas_417 = <<?Env_3 of (unit)
datatype lambdas_418 = andbEnv_1 of (unit)
datatype lambdas_419 = +Env_0 of (unit)
datatype lambdas_420 = >=Env_0 of (unit)
datatype lambdas_421 = <Env_0 of (unit)
datatype lambdas_422 = xorbEnv_0 of (unit)
datatype lambdas_423 = -Env_0 of (unit)
datatype lambdas_424 = >>?Env_2 of (unit)
datatype lambdas_425 = notbEnv_2 of (unit)
datatype lambdas_426 = <<?Env_2 of (unit)
datatype lambdas_427 = andbEnv_0 of (unit)
datatype lambdas_428 = >>?Env_1 of (unit)
datatype lambdas_429 = notbEnv_1 of (unit)
datatype lambdas_430 = <<?Env_1 of (unit)
datatype lambdas_431 = >>?Env_0 of (unit)
datatype lambdas_432 = notbEnv_0 of (unit)
datatype lambdas_433 = <<?Env_0 of (unit)
datatype lambdas_434 = sextdFromInt64ToInt64Env_0 of (unit)
datatype lambdas_435 = sextdFromInt64ToInt32Env_0 of (unit)
datatype lambdas_436 = sextdFromInt32ToWord64Env_0 of (unit)
datatype lambdas_437 = sextdFromInt32ToWord32Env_0 of (unit)
datatype lambdas_438 = sextdFromInt32ToInt64Env_0 of (unit)
datatype lambdas_439 = sextdFromInt32ToInt32Env_0 of (unit)
datatype lambdas_440 = sextdFromInt16ToInt64Env_0 of (unit)
datatype lambdas_441 = sextdFromInt8ToInt64Env_0 of (unit)
datatype lambdas_442 = zextdFromWord64ToInt64Env_0 of (unit)
datatype lambdas_443 = zextdFromWord64ToInt32Env_0 of (unit)
datatype lambdas_444 = zextdFromWord32ToWord64Env_0 of (unit)
datatype lambdas_445 = zextdFromWord32ToWord32Env_0 of (unit)
datatype lambdas_446 = zextdFromInt64ToWord64Env_0 of (unit)
datatype lambdas_447 = zextdFromInt32ToWord64Env_0 of (unit)
datatype lambdas_448 = zextdFromInt32ToWord32Env_0 of (unit)
datatype lambdas_449 = zextdFromInt32ToInt64Env_0 of (unit)
datatype lambdas_450 = zextdFromInt32ToInt32Env_0 of (unit)
datatype lambdas_451 = zextdFromInt32ToInt16Env_0 of (unit)
datatype lambdas_452 = zextdFromInt32ToInt8Env_0 of (unit)
datatype lambdas_453 = idFromWord64ToInt64Env_0 of (unit)
datatype lambdas_454 = idFromWord32ToInt32Env_0 of (unit)
datatype lambdas_455 = idFromWord16ToInt16Env_0 of (unit)
datatype lambdas_456 = idFromWord8ToInt8Env_0 of (unit)
datatype lambdas_457 = idFromInt64ToWord64Env_0 of (unit)
datatype lambdas_458 = idFromInt32ToWord32Env_0 of (unit)
datatype lambdas_459 = idFromInt16ToWord16Env_0 of (unit)
datatype lambdas_460 = idFromInt8ToWord8Env_0 of (unit)
datatype lambdas_461 = xEnv_18 of (unit)
datatype lambdas_462 = xEnv_17 of (unit)
datatype lambdas_463 = xEnv_16 of (unit)
datatype lambdas_464 = xEnv_15 of (unit)
datatype lambdas_465 = xEnv_14 of (unit)
datatype lambdas_466 = xEnv_13 of (unit)
datatype lambdas_467 = xEnv_12 of (unit)
datatype lambdas_468 = xEnv_11 of (unit)
datatype lambdas_469 = xEnv_10 of (unit)
datatype lambdas_470 = xEnv_9 of (unit)
datatype lambdas_471 = xEnv_8 of (unit)
datatype lambdas_472 = xEnv_7 of (unit)
datatype lambdas_473 = xEnv_6 of (unit)
datatype lambdas_474 = xEnv_5 of (unit)
datatype lambdas_475 = xEnv_4 of (unit)
datatype lambdas_476 = xEnv_3 of (unit)
datatype lambdas_477 = xEnv_2 of (unit)
datatype lambdas_478 = nameEnv_0 of (unit)
datatype lambdas_479 = notEnv_0 of (unit)
datatype lambdas_480 = xEnv_231 of (unit)
                     | xEnv_230 of (unit)
                     | defaultTopLevelSuffixEnv_1 of ((lambdas_30,
                                                       word32,
                                                       word32) tuple)
datatype lambdas_481 = xEnv_1 of (unit)
datatype lambdas_482 = xEnv_233 of (unit)
                     | xEnv_232 of (unit)
                     | defaultTopLevelHandlerEnv_1 of ((lambdas_32,
                                                        lambdas_31,
                                                        lambdas_30,
                                                        word32) tuple)
datatype lambdas_30 = exitEnv_0 of (((bool) ref,
                                     (list_2) ref,
                                     (bool) ref,
                                     lambdas_483,
                                     (word8) array,
                                     word32,
                                     word32,
                                     word32,
                                     lambdas_35,
                                     word32,
                                     lambdas_31) tuple)
datatype lambdas_35 = quotEnv_1 of ((word32, word32, word32) tuple)
datatype lambdas_483 = xEnv_234 of ((lambdas_286, word32) tuple)
datatype lambdas_286 = newEnv_1 of (lambdas_484)
datatype lambdas_485 = xEnv_0 of (unit)
datatype lambdas_10 = closeEnv_0 of ((lambdas_48,
                                      (lambdas_49) ref,
                                      (bool) ref,
                                      word32,
                                      (bool) ref) tuple)
datatype lambdas_9 = xEnv_235 of ((word32,
                                   lambdas_488,
                                   lambdas_487,
                                   lambdas_486,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_8 = xEnv_236 of ((lambdas_488,
                                   lambdas_487,
                                   lambdas_486,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_488 = putVEnv_0 of ((word32,
                                      (bool) ref,
                                      (lambdas_49) ref,
                                      lambdas_57,
                                      lambdas_489) tuple)
datatype lambdas_7 = setPosEnv_0 of (((bool) ref, lambdas_67, (word64) ref) tuple)
datatype lambdas_6 = xEnv_237 of ((word32,
                                   lambdas_490,
                                   lambdas_487,
                                   lambdas_486,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_5 = xEnv_238 of ((lambdas_490,
                                   lambdas_487,
                                   lambdas_486,
                                   word32,
                                   (bool) ref,
                                   (bool) ref) tuple)
datatype lambdas_486 = xEnv_239 of (word32)
datatype lambdas_487 = setflEnv_0 of ((word32,
                                       (bool) ref,
                                       (lambdas_49) ref,
                                       lambdas_48) tuple)
datatype lambdas_48 = raiseSysEnv_0 of (lambdas_226)
datatype lambdas_490 = putAEnv_0 of ((word32,
                                      (bool) ref,
                                      (lambdas_49) ref,
                                      lambdas_57,
                                      lambdas_489) tuple)
datatype lambdas_489 = incPosEnv_0 of ((word64) ref)
datatype lambdas_49 = xEnv_53 of (unit)
datatype lambdas_4 = endPosEnv_1 of (((bool) ref, lambdas_69) tuple)
                   | getPosEnv_1 of ((word64) ref)
                   | verifyPosEnv_1 of ((word64, lambdas_67, (word64) ref) tuple)
datatype lambdas_67 = lseekEnv_0 of (lambdas_57)
datatype lambdas_57 = raiseSysEnv_1 of (lambdas_226)
datatype lambdas_69 = xEnv_240 of ((lambdas_226, lambdas_95) tuple)
datatype lambdas_95 = xEnv_241 of ((lambdas_492, intInf, lambdas_491) tuple)
datatype lambdas_491 = sextdFromInt64Env_0 of ((word32, word64) tuple)
datatype lambdas_492 = reserveEnv_0 of ((word64, word64) tuple)
datatype lambdas_226 = errorMsgEnv_0 of ((cpointer, lambdas_484) tuple)
datatype lambdas_3 = xEnv_244 of (((list_6) ref,
                                   lambdas_27,
                                   lambdas_26,
                                   (word8) vector,
                                   lambdas_25) tuple)
                   | xEnv_243 of ((list_5) ref)
                   | xEnv_242 of ((lambdas_22, (list_6) ref) tuple)
datatype lambdas_22 = initEnv_0 of ((lambdas_25, (t_23) ref) tuple)
datatype lambdas_25 = currentEnv_0 of ((t_23) ref)
datatype lambdas_2 = 
datatype lambdas_1 = xEnv_245 of ((word32, word32, word8, word8) tuple)
datatype lambdas_0 = xEnv_248 of ((lambdas_31, list_3) tuple)
                   | xEnv_247 of (lambdas_31)
                   | xEnv_246 of ((lambdas_31, lambdas_32) tuple)
datatype lambdas_32 = exnMessageEnv_0 of ((list_0) ref)
datatype lambdas_31 = concatEnv_0 of ((lambdas_27, lambdas_484, lambdas_26) tuple)
datatype lambdas_26 = sequenceEnv_0 of (lambdas_27)
datatype lambdas_484 = arrayAllocEnv_0 of (word64)
datatype lambdas_27 = arrayAllocEnv_1 of (word64)


(* Globals: *)
val x_0: (word8) vector = "toplevel handler not installed"
val x_1: unit = ()
val x_2: lambdas_485 = con xEnv_0 (x_1 (*()*))
val x_3: (word8) vector = "toplevel suffix not installed"
val x_4: unit = ()
val x_5: lambdas_481 = con xEnv_1 (x_4 (*()*))
val tuple_0: unit = ()
val not_0: lambdas_479 = con notEnv_0 (tuple_0 (*()*))
val x_6: bool = con false
val x_7: bool = con true
val bufSize_0: word32 = 0x1000:w32
val x_8: (word8) vector = "UNKNOWN"
val x_9: (word8) vector = "Poll"
val x_10: (word8) vector = "DoublyRedirected"
val x_11: (word8) vector = "MisuseOfForget"
val x_12: (word8) vector = "Interrupt"
val x_13: (word8) vector = "Io"
val x_14: (word8) vector = "Ord"
val x_15: (word8) vector = "Ln"
val x_16: (word8) vector = "Sqrt"
val x_17: (word8) vector = "InvalidArc"
val x_18: (word8) vector = "Path"
val x_19: (word8) vector = "RandomAccessNotSupported"
val x_20: (word8) vector = "NonblockingNotSupported"
val x_21: (word8) vector = "Io"
val x_22: (word8) vector = "ClosedStream"
val x_23: (word8) vector = "BlockingNotSupported"
val x_24: (word8) vector = "Date"
val x_25: (word8) vector = "Time"
val x_26: (word8) vector = "Bad"
val x_27: (word8) vector = "Bad"
val x_28: (word8) vector = "Unordered"
val x_29: (word8) vector = "SysErr"
val x_30: (word8) vector = "UnequalLengths"
val x_31: (word8) vector = "Empty"
val x_32: (word8) vector = "Option"
val x_33: (word8) vector = "Fail"
val x_34: (word8) vector = "Chr"
val x_35: (word8) vector = "CreateVectorNotFull"
val x_36: (word8) vector = "CreateAlreadyGotVector"
val x_37: (word8) vector = "Vector_updateUnsafe"
val x_38: (word8) vector = "Vector_uninitUnsafe"
val x_39: (word8) vector = "Vector_uninitIsNop"
val x_40: (word8) vector = "CreateVectorNotFull"
val x_41: (word8) vector = "CreateAlreadyGotVector"
val x_42: (word8) vector = "Subscript"
val x_43: (word8) vector = "Span"
val x_44: (word8) vector = "Size"
val x_45: (word8) vector = "Overflow"
val x_46: (word8) vector = "Fail32"
val x_47: (word8) vector = "Fail16"
val x_48: (word8) vector = "Fail8"
val x_49: (word8) vector = "Domain"
val x_50: (word8) vector = "Div"
val x_51: (word8) vector = "Match"
val x_52: (word8) vector = "Bind"
val x_53: unit = ()
val name_0: lambdas_478 = con nameEnv_0 (x_53 (*()*))
val x_54: unit = ()
val x_55: (unit) ref = prim Ref_ref[unit] (x_54 (*()*))
val x_56: exn = con Div_0 (x_55)
val x_57: unit = ()
val x_58: (unit) ref = prim Ref_ref[unit] (x_57 (*()*))
val x_59: exn = con Domain_0 (x_58)
val x_60: unit = ()
val x_1443: (unit) ref = prim Ref_ref[unit] (x_60 (*()*))
val x_61: unit = ()
val x_62: (unit) ref = prim Ref_ref[unit] (x_61 (*()*))
val x_63: exn = con Overflow_0 (x_62)
val x_64: unit = ()
val x_65: (unit) ref = prim Ref_ref[unit] (x_64 (*()*))
val x_66: exn = con Size_0 (x_65)
val x_67: unit = ()
val x_68: (unit) ref = prim Ref_ref[unit] (x_67 (*()*))
val x_69: exn = con Subscript_0 (x_68)
val x_70: unit = ()
val x_71: lambdas_477 = con xEnv_2 (x_70 (*()*))
val x_72: unit = ()
val x_73: lambdas_476 = con xEnv_3 (x_72 (*()*))
val x_74: unit = ()
val x_75: lambdas_475 = con xEnv_4 (x_74 (*()*))
val x_76: unit = ()
val x_77: lambdas_474 = con xEnv_5 (x_76 (*()*))
val x_78: unit = ()
val x_79: lambdas_473 = con xEnv_6 (x_78 (*()*))
val x_80: unit = ()
val x_81: lambdas_472 = con xEnv_7 (x_80 (*()*))
val x_82: unit = ()
val x_83: lambdas_471 = con xEnv_8 (x_82 (*()*))
val x_84: unit = ()
val x_85: lambdas_470 = con xEnv_9 (x_84 (*()*))
val x_86: unit = ()
val x_87: lambdas_469 = con xEnv_10 (x_86 (*()*))
val x_88: unit = ()
val x_89: lambdas_468 = con xEnv_11 (x_88 (*()*))
val x_90: unit = ()
val x_91: lambdas_467 = con xEnv_12 (x_90 (*()*))
val x_92: unit = ()
val x_93: lambdas_466 = con xEnv_13 (x_92 (*()*))
val x_94: unit = ()
val x_95: lambdas_465 = con xEnv_14 (x_94 (*()*))
val x_96: unit = ()
val x_97: lambdas_464 = con xEnv_15 (x_96 (*()*))
val x_98: unit = ()
val x_99: lambdas_463 = con xEnv_16 (x_98 (*()*))
val x_100: unit = ()
val x_101: lambdas_462 = con xEnv_17 (x_100 (*()*))
val x_102: unit = ()
val x_103: lambdas_461 = con xEnv_18 (x_102 (*()*))
val x_104: unit = ()
val idFromInt8ToWord8_0: lambdas_460 = con idFromInt8ToWord8Env_0 (x_104 (*()*))
val x_105: unit = ()
val idFromInt16ToWord16_0: lambdas_459 =
  con idFromInt16ToWord16Env_0 (x_105 (*()*))
val x_106: unit = ()
val idFromInt32ToWord32_0: lambdas_458 =
  con idFromInt32ToWord32Env_0 (x_106 (*()*))
val x_107: unit = ()
val idFromInt64ToWord64_0: lambdas_457 =
  con idFromInt64ToWord64Env_0 (x_107 (*()*))
val x_108: unit = ()
val idFromWord8ToInt8_0: lambdas_456 = con idFromWord8ToInt8Env_0 (x_108 (*()*))
val x_109: unit = ()
val idFromWord16ToInt16_0: lambdas_455 =
  con idFromWord16ToInt16Env_0 (x_109 (*()*))
val x_110: unit = ()
val idFromWord32ToInt32_0: lambdas_454 =
  con idFromWord32ToInt32Env_0 (x_110 (*()*))
val x_111: unit = ()
val idFromWord64ToInt64_0: lambdas_453 =
  con idFromWord64ToInt64Env_0 (x_111 (*()*))
val x_112: unit = ()
val zextdFromInt32ToInt8_0: lambdas_452 =
  con zextdFromInt32ToInt8Env_0 (x_112 (*()*))
val x_113: unit = ()
val zextdFromInt32ToInt16_0: lambdas_451 =
  con zextdFromInt32ToInt16Env_0 (x_113 (*()*))
val x_114: unit = ()
val zextdFromInt32ToInt32_0: lambdas_450 =
  con zextdFromInt32ToInt32Env_0 (x_114 (*()*))
val x_115: unit = ()
val zextdFromInt32ToInt64_0: lambdas_449 =
  con zextdFromInt32ToInt64Env_0 (x_115 (*()*))
val x_116: unit = ()
val zextdFromInt32ToWord32_0: lambdas_448 =
  con zextdFromInt32ToWord32Env_0 (x_116 (*()*))
val x_117: unit = ()
val zextdFromInt32ToWord64_0: lambdas_447 =
  con zextdFromInt32ToWord64Env_0 (x_117 (*()*))
val x_118: unit = ()
val zextdFromInt64ToWord64_0: lambdas_446 =
  con zextdFromInt64ToWord64Env_0 (x_118 (*()*))
val x_119: unit = ()
val zextdFromWord32ToWord32_0: lambdas_445 =
  con zextdFromWord32ToWord32Env_0 (x_119 (*()*))
val x_120: unit = ()
val zextdFromWord32ToWord64_0: lambdas_444 =
  con zextdFromWord32ToWord64Env_0 (x_120 (*()*))
val x_121: unit = ()
val zextdFromWord64ToInt32_0: lambdas_443 =
  con zextdFromWord64ToInt32Env_0 (x_121 (*()*))
val x_122: unit = ()
val zextdFromWord64ToInt64_0: lambdas_442 =
  con zextdFromWord64ToInt64Env_0 (x_122 (*()*))
val x_123: unit = ()
val sextdFromInt8ToInt64_0: lambdas_441 =
  con sextdFromInt8ToInt64Env_0 (x_123 (*()*))
val x_124: unit = ()
val sextdFromInt16ToInt64_0: lambdas_440 =
  con sextdFromInt16ToInt64Env_0 (x_124 (*()*))
val x_125: unit = ()
val sextdFromInt32ToInt32_0: lambdas_439 =
  con sextdFromInt32ToInt32Env_0 (x_125 (*()*))
val x_126: unit = ()
val sextdFromInt32ToInt64_0: lambdas_438 =
  con sextdFromInt32ToInt64Env_0 (x_126 (*()*))
val x_127: unit = ()
val sextdFromInt32ToWord32_0: lambdas_437 =
  con sextdFromInt32ToWord32Env_0 (x_127 (*()*))
val x_128: unit = ()
val sextdFromInt32ToWord64_0: lambdas_436 =
  con sextdFromInt32ToWord64Env_0 (x_128 (*()*))
val x_129: unit = ()
val sextdFromInt64ToInt32_0: lambdas_435 =
  con sextdFromInt64ToInt32Env_0 (x_129 (*()*))
val x_130: unit = ()
val sextdFromInt64ToInt64_0: lambdas_434 =
  con sextdFromInt64ToInt64Env_0 (x_130 (*()*))
val sizeInBits_0: word32 = 0x1:w32
val sizeInBits_1: word32 = 0x2:w32
val sizeInBits_2: word32 = 0x3:w32
val sizeInBits_3: word32 = 0x4:w32
val sizeInBits_4: word32 = 0x5:w32
val sizeInBits_5: word32 = 0x6:w32
val sizeInBits_6: word32 = 0x7:w32
val sizeInBits_7: word32 = 0x8:w32
val x_131: unit = ()
val <<?_0: lambdas_433 = con <<?Env_0 (x_131 (*()*))
val x_132: unit = ()
val notb_0: lambdas_432 = con notbEnv_0 (x_132 (*()*))
val x_133: unit = ()
val >>?_0: lambdas_431 = con >>?Env_0 (x_133 (*()*))
val sizeInBits_8: word32 = 0x9:w32
val sizeInBits_9: word32 = 0xA:w32
val sizeInBits_10: word32 = 0xB:w32
val sizeInBits_11: word32 = 0xC:w32
val sizeInBits_12: word32 = 0xD:w32
val sizeInBits_13: word32 = 0xE:w32
val sizeInBits_14: word32 = 0xF:w32
val sizeInBits_15: word32 = 0x10:w32
val x_134: unit = ()
val <<?_1: lambdas_430 = con <<?Env_1 (x_134 (*()*))
val x_135: unit = ()
val notb_1: lambdas_429 = con notbEnv_1 (x_135 (*()*))
val x_136: unit = ()
val >>?_1: lambdas_428 = con >>?Env_1 (x_136 (*()*))
val sizeInBits_16: word32 = 0x11:w32
val sizeInBits_17: word32 = 0x12:w32
val sizeInBits_18: word32 = 0x13:w32
val sizeInBits_19: word32 = 0x14:w32
val sizeInBits_20: word32 = 0x15:w32
val sizeInBits_21: word32 = 0x16:w32
val sizeInBits_22: word32 = 0x17:w32
val sizeInBits_23: word32 = 0x18:w32
val sizeInBits_24: word32 = 0x19:w32
val sizeInBits_25: word32 = 0x1A:w32
val sizeInBits_26: word32 = 0x1B:w32
val sizeInBits_27: word32 = 0x1C:w32
val sizeInBits_28: word32 = 0x1D:w32
val sizeInBits_29: word32 = 0x1E:w32
val sizeInBits_30: word32 = 0x1F:w32
val sizeInBits_31: word32 = 0x20:w32
val x_137: unit = ()
val andb_0: lambdas_427 = con andbEnv_0 (x_137 (*()*))
val x_138: unit = ()
val <<?_2: lambdas_426 = con <<?Env_2 (x_138 (*()*))
val x_139: unit = ()
val notb_2: lambdas_425 = con notbEnv_2 (x_139 (*()*))
val x_140: unit = ()
val >>?_2: lambdas_424 = con >>?Env_2 (x_140 (*()*))
val x_141: unit = ()
val -_0: lambdas_423 = con -Env_0 (x_141 (*()*))
val x_142: unit = ()
val xorb_0: lambdas_422 = con xorbEnv_0 (x_142 (*()*))
val x_143: unit = ()
val <_0: lambdas_421 = con <Env_0 (x_143 (*()*))
val tuple_1: unit = ()
val >=_0: lambdas_420 = con >=Env_0 (tuple_1 (*()*))
val sizeInBits_32: word32 = 0x40:w32
val x_144: unit = ()
val +_0: lambdas_419 = con +Env_0 (x_144 (*()*))
val x_145: unit = ()
val andb_1: lambdas_418 = con andbEnv_1 (x_145 (*()*))
val x_146: unit = ()
val <<?_3: lambdas_417 = con <<?Env_3 (x_146 (*()*))
val x_147: unit = ()
val *_0: lambdas_416 = con *Env_0 (x_147 (*()*))
val x_148: unit = ()
val notb_3: lambdas_415 = con notbEnv_3 (x_148 (*()*))
val x_149: unit = ()
val ~>>?_0: lambdas_414 = con ~>>?Env_0 (x_149 (*()*))
val x_150: unit = ()
val >>?_3: lambdas_413 = con >>?Env_3 (x_150 (*()*))
val sizeInBits_33: word32 = 0x1:w32
val sizeInBits_34: word32 = 0x2:w32
val sizeInBits_35: word32 = 0x3:w32
val sizeInBits_36: word32 = 0x4:w32
val sizeInBits_37: word32 = 0x5:w32
val sizeInBits_38: word32 = 0x6:w32
val sizeInBits_39: word32 = 0x7:w32
val sizeInBits_40: word32 = 0x8:w32
val precision_0: t_0 = con SOME_0 (sizeInBits_40 (*0x8:w32*))
val sizeInBits_41: word32 = 0x9:w32
val sizeInBits_42: word32 = 0xA:w32
val sizeInBits_43: word32 = 0xB:w32
val sizeInBits_44: word32 = 0xC:w32
val sizeInBits_45: word32 = 0xD:w32
val sizeInBits_46: word32 = 0xE:w32
val sizeInBits_47: word32 = 0xF:w32
val sizeInBits_48: word32 = 0x10:w32
val precision_1: t_0 = con SOME_0 (sizeInBits_48 (*0x10:w32*))
val sizeInBits_49: word32 = 0x11:w32
val sizeInBits_50: word32 = 0x12:w32
val sizeInBits_51: word32 = 0x13:w32
val sizeInBits_52: word32 = 0x14:w32
val sizeInBits_53: word32 = 0x15:w32
val sizeInBits_54: word32 = 0x16:w32
val sizeInBits_55: word32 = 0x17:w32
val sizeInBits_56: word32 = 0x18:w32
val sizeInBits_57: word32 = 0x19:w32
val sizeInBits_58: word32 = 0x1A:w32
val sizeInBits_59: word32 = 0x1B:w32
val sizeInBits_60: word32 = 0x1C:w32
val sizeInBits_61: word32 = 0x1D:w32
val sizeInBits_62: word32 = 0x1E:w32
val sizeInBits_63: word32 = 0x1F:w32
val sizeInBits_64: word32 = 0x20:w32
val precision_2: t_0 = con SOME_0 (sizeInBits_64 (*0x20:w32*))
val x_151: unit = ()
val +!_0: lambdas_412 = con +!Env_0 (x_151 (*()*))
val x_152: unit = ()
val x_153: lambdas_411 = con xEnv_19 (x_152 (*()*))
val x_154: unit = ()
val ~!_0: lambdas_410 = con ~!Env_0 (x_154 (*()*))
val x_155: unit = ()
val x_156: lambdas_409 = con xEnv_20 (x_155 (*()*))
val x_157: unit = ()
val -!_0: lambdas_408 = con -!Env_0 (x_157 (*()*))
val x_158: unit = ()
val x_159: lambdas_407 = con xEnv_21 (x_158 (*()*))
val x_160: unit = ()
val remUnsafe_0: lambdas_406 = con remUnsafeEnv_0 (x_160 (*()*))
val x_161: unit = ()
val <_1: lambdas_405 = con <Env_1 (x_161 (*()*))
val tuple_2: unit = ()
val <=_0: lambdas_404 = con <=Env_0 (tuple_2 (*()*))
val tuple_3: unit = ()
val >_0: lambdas_403 = con >Env_0 (tuple_3 (*()*))
val tuple_4: unit = ()
val >=_1: lambdas_402 = con >=Env_1 (tuple_4 (*()*))
val sizeInBits_65: word32 = 0x40:w32
val precision_3: t_0 = con SOME_0 (sizeInBits_65 (*0x40:w32*))
val x_162: unit = ()
val +!_1: lambdas_401 = con +!Env_1 (x_162 (*()*))
val x_163: unit = ()
val x_164: lambdas_400 = con xEnv_22 (x_163 (*()*))
val x_165: unit = ()
val ~!_1: lambdas_399 = con ~!Env_1 (x_165 (*()*))
val x_166: unit = ()
val x_167: lambdas_398 = con xEnv_23 (x_166 (*()*))
val x_168: unit = ()
val -!_1: lambdas_397 = con -!Env_1 (x_168 (*()*))
val x_169: unit = ()
val x_170: lambdas_396 = con xEnv_24 (x_169 (*()*))
val x_171: unit = ()
val <_2: lambdas_395 = con <Env_2 (x_171 (*()*))
val tuple_5: unit = ()
val >_1: lambdas_394 = con >Env_1 (tuple_5 (*()*))
val tuple_6: unit = ()
val >=_2: lambdas_393 = con >=Env_2 (tuple_6 (*()*))
val x_172: unit = ()
val x_173: lambdas_392 = con xEnv_25 (x_172 (*()*))
val x_174: unit = ()
val x_175: lambdas_391 = con xEnv_26 (x_174 (*()*))
val x_176: unit = ()
val x_177: lambdas_390 = con xEnv_27 (x_176 (*()*))
val x_178: unit = ()
val x_179: lambdas_389 = con xEnv_28 (x_178 (*()*))
val x_180: unit = ()
val x_181: lambdas_388 = con xEnv_29 (x_180 (*()*))
val x_182: unit = ()
val x_183: lambdas_387 = con xEnv_30 (x_182 (*()*))
val x_184: unit = ()
val x_185: lambdas_386 = con xEnv_31 (x_184 (*()*))
val x_186: unit = ()
val x_187: lambdas_385 = con xEnv_32 (x_186 (*()*))
val x_188: unit = ()
val gcState_0: lambdas_384 = con gcStateEnv_0 (x_188 (*()*))
val x_189: unit = ()
val bug_0: lambdas_383 = con bugEnv_0 (x_189 (*()*))
val x_190: unit = ()
val fromWord_0: lambdas_382 = con fromWordEnv_0 (x_190 (*()*))
val x_191: word64 = 0x0:w64
val isOn_0: bool = con false
val x_192: unit = ()
val atomicState_0: lambdas_381 = con atomicStateEnv_0 (x_192 (*()*))
val x_193: unit = ()
val atomicBegin_0: lambdas_380 = con atomicBeginEnv_0 (x_193 (*()*))
val tuple_7: unit = ()
val atomicEnd_0: lambdas_379 = con atomicEndEnv_0 (tuple_7 (*()*))
val x_194: unit = ()
val x_195: word32 = 0x0:w32
val x_196: (word8) vector = "Thread.atomicEnd"
val x_197: ((unit) ref, (word8) vector) tuple =
  (x_1443, x_196 (*"Thread.atomicEnd"*))
val x_198: exn = con Fail8_0 (x_197)
val FE_DOWNWARD_0: word32 = 0x400:w32
val FE_NOSUPPORT_0: word32 = 0xFFFFFFFF:w32
val FE_TONEAREST_0: word32 = 0x0:w32
val FE_TOWARDZERO_0: word32 = 0xC00:w32
val FE_UPWARD_0: word32 = 0x800:w32
val E2BIG_0: word32 = 0x7:w32
val EACCES_0: word32 = 0xD:w32
val EADDRINUSE_0: word32 = 0x62:w32
val EADDRNOTAVAIL_0: word32 = 0x63:w32
val EAFNOSUPPORT_0: word32 = 0x61:w32
val EAGAIN_0: word32 = 0xB:w32
val EALREADY_0: word32 = 0x72:w32
val EBADF_0: word32 = 0x9:w32
val EBADMSG_0: word32 = 0x4A:w32
val EBUSY_0: word32 = 0x10:w32
val ECANCELED_0: word32 = 0x7D:w32
val ECHILD_0: word32 = 0xA:w32
val ECONNABORTED_0: word32 = 0x67:w32
val ECONNREFUSED_0: word32 = 0x6F:w32
val ECONNRESET_0: word32 = 0x68:w32
val EDEADLK_0: word32 = 0x23:w32
val EDESTADDRREQ_0: word32 = 0x59:w32
val EDOM_0: word32 = 0x21:w32
val EDQUOT_0: word32 = 0x7A:w32
val EEXIST_0: word32 = 0x11:w32
val EFAULT_0: word32 = 0xE:w32
val EFBIG_0: word32 = 0x1B:w32
val EHOSTUNREACH_0: word32 = 0x71:w32
val EIDRM_0: word32 = 0x2B:w32
val EILSEQ_0: word32 = 0x54:w32
val EINPROGRESS_0: word32 = 0x73:w32
val EINTR_0: word32 = 0x4:w32
val EINVAL_0: word32 = 0x16:w32
val EIO_0: word32 = 0x5:w32
val EISCONN_0: word32 = 0x6A:w32
val EISDIR_0: word32 = 0x15:w32
val ELOOP_0: word32 = 0x28:w32
val EMFILE_0: word32 = 0x18:w32
val EMLINK_0: word32 = 0x1F:w32
val EMSGSIZE_0: word32 = 0x5A:w32
val EMULTIHOP_0: word32 = 0x48:w32
val ENAMETOOLONG_0: word32 = 0x24:w32
val ENETDOWN_0: word32 = 0x64:w32
val ENETRESET_0: word32 = 0x66:w32
val ENETUNREACH_0: word32 = 0x65:w32
val ENFILE_0: word32 = 0x17:w32
val ENOBUFS_0: word32 = 0x69:w32
val ENODATA_0: word32 = 0x3D:w32
val ENODEV_0: word32 = 0x13:w32
val ENOENT_0: word32 = 0x2:w32
val ENOEXEC_0: word32 = 0x8:w32
val ENOLCK_0: word32 = 0x25:w32
val ENOLINK_0: word32 = 0x43:w32
val ENOMEM_0: word32 = 0xC:w32
val ENOMSG_0: word32 = 0x2A:w32
val ENOPROTOOPT_0: word32 = 0x5C:w32
val ENOSPC_0: word32 = 0x1C:w32
val ENOSR_0: word32 = 0x3F:w32
val ENOSTR_0: word32 = 0x3C:w32
val ENOSYS_0: word32 = 0x26:w32
val ENOTCONN_0: word32 = 0x6B:w32
val ENOTDIR_0: word32 = 0x14:w32
val ENOTEMPTY_0: word32 = 0x27:w32
val ENOTSOCK_0: word32 = 0x58:w32
val ENOTSUP_0: word32 = 0x5F:w32
val ENOTTY_0: word32 = 0x19:w32
val ENXIO_0: word32 = 0x6:w32
val EOPNOTSUPP_0: word32 = 0x5F:w32
val EOVERFLOW_0: word32 = 0x4B:w32
val EPERM_0: word32 = 0x1:w32
val EPIPE_0: word32 = 0x20:w32
val EPROTO_0: word32 = 0x47:w32
val EPROTONOSUPPORT_0: word32 = 0x5D:w32
val EPROTOTYPE_0: word32 = 0x5B:w32
val ERANGE_0: word32 = 0x22:w32
val EROFS_0: word32 = 0x1E:w32
val ESPIPE_0: word32 = 0x1D:w32
val ESRCH_0: word32 = 0x3:w32
val ESTALE_0: word32 = 0x74:w32
val ETIME_0: word32 = 0x3E:w32
val ETIMEDOUT_0: word32 = 0x6E:w32
val ETXTBSY_0: word32 = 0x1A:w32
val EWOULDBLOCK_0: word32 = 0xB:w32
val EXDEV_0: word32 = 0x12:w32
val APPEND_0: word32 = 0x400:w32
val NONBLOCK_0: word32 = 0x800:w32
val F_SETFL_0: word32 = 0x4:w32
val SEEK_CUR_0: word32 = 0x1:w32
val SEEK_END_0: word32 = 0x2:w32
val SEEK_SET_0: word32 = 0x0:w32
val x_199: unit = ()
val print_0: lambdas_378 = con printEnv_0 (x_199 (*()*))
val x_200: unit = ()
val fromWord_1: lambdas_377 = con fromWordEnv_1 (x_200 (*()*))
val x_201: unit = ()
val toWord_0: lambdas_376 = con toWordEnv_0 (x_201 (*()*))
val x_202: unit = ()
val idFromWord8_0: lambdas_375 = con idFromWord8Env_0 (x_202 (*()*))
val tuple_8: unit = ()
val <=_1: lambdas_374 = con <=Env_1 (tuple_8 (*()*))
val realSize_0: word32 = 0x20:w32
val exponentBias_0: word32 = 0x7F:w32
val precision_4: word32 = 0x18:w32
val x_203: unit = ()
val +_1: lambdas_373 = con +Env_1 (x_203 (*()*))
val x_204: unit = ()
val -_1: lambdas_372 = con -Env_1 (x_204 (*()*))
val x_205: unit = ()
val ~_0: lambdas_371 = con ~Env_0 (x_205 (*()*))
val x_206: unit = ()
val <_3: lambdas_370 = con <Env_3 (x_206 (*()*))
val x_207: unit = ()
val <=_2: lambdas_369 = con <=Env_2 (x_207 (*()*))
val x_208: unit = ()
val round_0: lambdas_368 = con roundEnv_0 (x_208 (*()*))
val x_209: unit = ()
val fromInt8Unsafe_0: lambdas_367 = con fromInt8UnsafeEnv_0 (x_209 (*()*))
val x_210: unit = ()
val fromInt16Unsafe_0: lambdas_366 = con fromInt16UnsafeEnv_0 (x_210 (*()*))
val x_211: unit = ()
val fromInt32Unsafe_0: lambdas_365 = con fromInt32UnsafeEnv_0 (x_211 (*()*))
val x_212: unit = ()
val fromInt64Unsafe_0: lambdas_364 = con fromInt64UnsafeEnv_0 (x_212 (*()*))
val x_213: unit = ()
val fromReal32Unsafe_0: lambdas_363 = con fromReal32UnsafeEnv_0 (x_213 (*()*))
val x_214: unit = ()
val fromWord8Unsafe_0: lambdas_362 = con fromWord8UnsafeEnv_0 (x_214 (*()*))
val x_215: unit = ()
val fromWord16Unsafe_0: lambdas_361 = con fromWord16UnsafeEnv_0 (x_215 (*()*))
val x_216: unit = ()
val fromWord32Unsafe_0: lambdas_360 = con fromWord32UnsafeEnv_0 (x_216 (*()*))
val x_217: unit = ()
val fromWord64Unsafe_0: lambdas_359 = con fromWord64UnsafeEnv_0 (x_217 (*()*))
val x_218: unit = ()
val toInt8Unsafe_0: lambdas_358 = con toInt8UnsafeEnv_0 (x_218 (*()*))
val x_219: unit = ()
val toInt16Unsafe_0: lambdas_357 = con toInt16UnsafeEnv_0 (x_219 (*()*))
val x_220: unit = ()
val toInt32Unsafe_0: lambdas_356 = con toInt32UnsafeEnv_0 (x_220 (*()*))
val x_221: unit = ()
val toInt64Unsafe_0: lambdas_355 = con toInt64UnsafeEnv_0 (x_221 (*()*))
val x_222: unit = ()
val toReal32Unsafe_0: lambdas_354 = con toReal32UnsafeEnv_0 (x_222 (*()*))
val x_223: unit = ()
val toWord8Unsafe_0: lambdas_353 = con toWord8UnsafeEnv_0 (x_223 (*()*))
val x_224: unit = ()
val toWord16Unsafe_0: lambdas_352 = con toWord16UnsafeEnv_0 (x_224 (*()*))
val x_225: unit = ()
val toWord32Unsafe_0: lambdas_351 = con toWord32UnsafeEnv_0 (x_225 (*()*))
val x_226: unit = ()
val toWord64Unsafe_0: lambdas_350 = con toWord64UnsafeEnv_0 (x_226 (*()*))
val tuple_9: unit = ()
val >_2: lambdas_349 = con >Env_2 (tuple_9 (*()*))
val tuple_10: unit = ()
val >=_3: lambdas_348 = con >=Env_3 (tuple_10 (*()*))
val realSize_1: word32 = 0x40:w32
val exponentBias_1: word32 = 0x3FF:w32
val precision_5: word32 = 0x35:w32
val x_227: unit = ()
val +_2: lambdas_347 = con +Env_2 (x_227 (*()*))
val x_228: unit = ()
val -_2: lambdas_346 = con -Env_2 (x_228 (*()*))
val x_229: unit = ()
val ~_1: lambdas_345 = con ~Env_1 (x_229 (*()*))
val x_230: unit = ()
val <_4: lambdas_344 = con <Env_4 (x_230 (*()*))
val x_231: unit = ()
val <=_3: lambdas_343 = con <=Env_3 (x_231 (*()*))
val x_232: unit = ()
val round_1: lambdas_342 = con roundEnv_1 (x_232 (*()*))
val x_233: unit = ()
val fromInt8Unsafe_1: lambdas_341 = con fromInt8UnsafeEnv_1 (x_233 (*()*))
val x_234: unit = ()
val fromInt16Unsafe_1: lambdas_340 = con fromInt16UnsafeEnv_1 (x_234 (*()*))
val x_235: unit = ()
val fromInt32Unsafe_1: lambdas_339 = con fromInt32UnsafeEnv_1 (x_235 (*()*))
val x_236: unit = ()
val fromInt64Unsafe_1: lambdas_338 = con fromInt64UnsafeEnv_1 (x_236 (*()*))
val x_237: unit = ()
val fromReal32Unsafe_1: lambdas_337 = con fromReal32UnsafeEnv_1 (x_237 (*()*))
val x_238: unit = ()
val fromWord8Unsafe_1: lambdas_336 = con fromWord8UnsafeEnv_1 (x_238 (*()*))
val x_239: unit = ()
val fromWord16Unsafe_1: lambdas_335 = con fromWord16UnsafeEnv_1 (x_239 (*()*))
val x_240: unit = ()
val fromWord32Unsafe_1: lambdas_334 = con fromWord32UnsafeEnv_1 (x_240 (*()*))
val x_241: unit = ()
val fromWord64Unsafe_1: lambdas_333 = con fromWord64UnsafeEnv_1 (x_241 (*()*))
val x_242: unit = ()
val toInt8Unsafe_1: lambdas_332 = con toInt8UnsafeEnv_1 (x_242 (*()*))
val x_243: unit = ()
val toInt16Unsafe_1: lambdas_331 = con toInt16UnsafeEnv_1 (x_243 (*()*))
val x_244: unit = ()
val toInt32Unsafe_1: lambdas_330 = con toInt32UnsafeEnv_1 (x_244 (*()*))
val x_245: unit = ()
val toInt64Unsafe_1: lambdas_329 = con toInt64UnsafeEnv_1 (x_245 (*()*))
val x_246: unit = ()
val toReal32Unsafe_1: lambdas_328 = con toReal32UnsafeEnv_1 (x_246 (*()*))
val x_247: unit = ()
val toWord8Unsafe_1: lambdas_327 = con toWord8UnsafeEnv_1 (x_247 (*()*))
val x_248: unit = ()
val toWord16Unsafe_1: lambdas_326 = con toWord16UnsafeEnv_1 (x_248 (*()*))
val x_249: unit = ()
val toWord32Unsafe_1: lambdas_325 = con toWord32UnsafeEnv_1 (x_249 (*()*))
val x_250: unit = ()
val toWord64Unsafe_1: lambdas_324 = con toWord64UnsafeEnv_1 (x_250 (*()*))
val tuple_11: unit = ()
val >_3: lambdas_323 = con >Env_3 (tuple_11 (*()*))
val tuple_12: unit = ()
val >=_4: lambdas_322 = con >=Env_4 (tuple_12 (*()*))
val x_251: unit = ()
val castFromWord_0: lambdas_321 = con castFromWordEnv_0 (x_251 (*()*))
val x_252: unit = ()
val castFromWord_1: lambdas_320 = con castFromWordEnv_1 (x_252 (*()*))
val x_253: (word8) vector = "unhandled exception: "
val x_254: unit = ()
val x_255: (word8) vector = "Fail "
val x_256: unit = ()
val x_257: (word8) vector = "\n"
val x_258: (word8) vector = "unhandled exception in Basis Library"
val x_259: unit = ()
val x_260: lambdas_319 = con xEnv_33 (x_259 (*()*))
val x_261: (word8) vector = "missing suffix in Basis Library"
val x_262: unit = ()
val x_263: lambdas_317 = con xEnv_34 (x_262 (*()*))
val x_264: unit = ()
val x_265: lambdas_316 = con xEnv_35 (x_264 (*()*))
val x_1444: (word32, word32) tuple =
  (sizeInBits_40 (*0x8:w32*), sizeInBits_7 (*0x8:w32*))
val x_266: bool = con true
val x_267: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_268: ((unit) ref, (word8) vector) tuple =
  (x_1443, x_267 (*"MkNum0: I ... Bits"*))
val x_269: exn = con Fail8_0 (x_268)
val x_270: unit = ()
val x_271: word8 = 0x0:w8
val x_272: word32 = 0x0:w32
val x_273: word32 = 0x1:w32
val x_274: unit = ()
val x_275: lambdas_315 = con xEnv_36 (x_274 (*()*))
val x_276: unit = ()
val x_277: lambdas_314 = con xEnv_37 (x_276 (*()*))
val x_278: word32 = 0x1:w32
val x_279: word32 = 0x1:w32
val x_1445: (word32, word32) tuple =
  (sizeInBits_48 (*0x10:w32*), sizeInBits_15 (*0x10:w32*))
val x_280: bool = con true
val x_281: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_282: ((unit) ref, (word8) vector) tuple =
  (x_1443, x_281 (*"MkNum0: I ... Bits"*))
val x_283: exn = con Fail8_0 (x_282)
val x_284: unit = ()
val x_285: word16 = 0x0:w16
val x_286: word32 = 0x0:w32
val x_287: word32 = 0x1:w32
val x_288: unit = ()
val x_289: lambdas_313 = con xEnv_38 (x_288 (*()*))
val x_290: unit = ()
val x_291: lambdas_312 = con xEnv_39 (x_290 (*()*))
val x_292: word32 = 0x1:w32
val x_293: word32 = 0x1:w32
val x_1446: (word32, word32) tuple =
  (sizeInBits_64 (*0x20:w32*), sizeInBits_31 (*0x20:w32*))
val x_294: bool = con true
val x_295: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_296: ((unit) ref, (word8) vector) tuple =
  (x_1443, x_295 (*"MkNum0: I ... Bits"*))
val x_297: exn = con Fail8_0 (x_296)
val x_298: unit = ()
val x_299: word32 = 0x0:w32
val x_300: word32 = 0x1:w32
val x_301: word32 = 0x0:w32
val x_302: word32 = 0x1:w32
val x_303: unit = ()
val x_304: lambdas_311 = con xEnv_40 (x_303 (*()*))
val x_305: unit = ()
val x_306: lambdas_310 = con xEnv_41 (x_305 (*()*))
val x_307: word32 = 0x1:w32
val x_308: word32 = 0x1:w32
val x_309: bool = con false
val x_1447: (word32, word32) tuple =
  (sizeInBits_65 (*0x40:w32*), sizeInBits_32 (*0x40:w32*))
val x_310: bool = con true
val x_311: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_312: ((unit) ref, (word8) vector) tuple =
  (x_1443, x_311 (*"MkNum0: I ... Bits"*))
val x_313: exn = con Fail8_0 (x_312)
val x_314: unit = ()
val x_315: word32 = 0x0:w32
val x_316: word32 = 0x1:w32
val x_317: word32 = 0x0:w32
val x_318: word32 = 0x1:w32
val x_319: unit = ()
val x_320: lambdas_309 = con xEnv_42 (x_319 (*()*))
val x_321: unit = ()
val x_322: lambdas_308 = con xEnv_43 (x_321 (*()*))
val x_323: word32 = 0x1:w32
val x_324: word32 = 0x1:w32
val x_325: bool = con false
val tuple_13: unit = ()
val ltu_0: lambdas_307 = con ltuEnv_0 (tuple_13 (*()*))
val tuple_14: unit = ()
val >_4: lambdas_306 = con >Env_4 (tuple_14 (*()*))
val tuple_15: unit = ()
val >=_5: lambdas_305 = con >=Env_5 (tuple_15 (*()*))
val bytes_0: word32 = 0x18:w32
val x_326: unit = ()
val x_327: lambdas_304 = con xEnv_44 (x_326 (*()*))
val tuple_16: unit = ()
val valOf_0: lambdas_303 = con valOfEnv_0 (tuple_16 (*()*))
val x_328: word32 = 0x0:w32
val tuple_17: unit = ()
val unsafeArrayAlloc_0: lambdas_302 =
  con unsafeArrayAllocEnv_0 (tuple_17 (*()*))
val smallCopyLimit_0: word64 = 0x5:w64
val tuple_18: unit = ()
val full_0: lambdas_301 = con fullEnv_0 (tuple_18 (*()*))
val x_329: word64 = 0x0:w64
val tuple_19: unit = ()
val vector_0: lambdas_300 = con vectorEnv_0 (tuple_19 (*()*))
val x_330: word64 = 0x0:w64
val x_331: word64 = 0x1:w64
val x_332: unit = ()
val x_333: word64 = 0x1:w64
val x_334: word64 = 0x0:w64
val tuple_20: unit = ()
val valOf_1: lambdas_298 = con valOfEnv_1 (tuple_20 (*()*))
val x_335: word32 = 0x0:w32
val tuple_21: unit = ()
val length_0: lambdas_297 = con lengthEnv_0 (tuple_21 (*()*))
val smallCopyLimit_1: word64 = 0x5:w64
val tuple_22: unit = ()
val full_1: lambdas_296 = con fullEnv_1 (tuple_22 (*()*))
val x_336: word64 = 0x0:w64
val tuple_23: unit = ()
val base_0: lambdas_295 = con baseEnv_0 (tuple_23 (*()*))
val x_337: word64 = 0x0:w64
val x_338: bool = con true
val x_339: word64 = 0x0:w64
val zero_0: intInf = 0:ii
val tuple_24: unit = ()
val isSmall_0: lambdas_294 = con isSmallEnv_0 (tuple_24 (*()*))
val x_340: word64 = 0x0:w64
val x_341: word64 = 0x1:w64
val tuple_25: unit = ()
val areSmall_0: lambdas_293 = con areSmallEnv_0 (tuple_25 (*()*))
val x_342: word64 = 0x0:w64
val x_343: word64 = 0x1:w64
val tuple_26: unit = ()
val numLimbs_0: lambdas_292 = con numLimbsEnv_0 (tuple_26 (*()*))
val x_344: word64 = 0x1:w64
val x_345: word64 = 0x1:w64
val tuple_27: unit = ()
val dropTagCoerce_0: lambdas_291 = con dropTagCoerceEnv_0 (tuple_27 (*()*))
val x_346: word32 = 0x1:w32
val tuple_28: unit = ()
val addTag_0: lambdas_290 = con addTagEnv_0 (tuple_28 (*()*))
val x_347: word32 = 0x1:w32
val x_348: word64 = 0x1:w64
val x_1448: (word32, word32) tuple =
  (sizeInBits_32 (*0x40:w32*), sizeInBits_32 (*0x40:w32*))
val x_349: bool = con true
val x_350: word32 = 0x2:w32
val x_351: bool = con true
val x_352: word64 = 0x1:w64
val x_353: word64 = 0x0:w64
val x_354: word64 = 0x1:w64
val x_355: list_12 = con nil_0
val x_356: word64 = 0x0:w64
val x_357: word64 = 0x1:w64
val x_1449: (word64, word64) tuple = (x_356 (*0x0:w64*), x_357 (*0x1:w64*))
val x_358: ((word64, word64) tuple, list_12) tuple =
  (x_1449, x_355 (*con nil_0*))
val x_359: list_12 = con ::_0 (x_358)
val x_360: word64 = 0x1:w64
val x_361: list_12 = con nil_0
val x_362: word64 = 0x0:w64
val x_363: word64 = 0x0:w64
val x_1450: (word64, word64) tuple = (x_362 (*0x0:w64*), x_363 (*0x0:w64*))
val x_364: ((word64, word64) tuple, list_12) tuple =
  (x_1450, x_361 (*con nil_0*))
val x_365: list_12 = con ::_0 (x_364)
val x_366: unit = ()
val x_367: word64 = 0x0:w64
val x_368: word32 = 0x8:w32
val x_1451: (word32, word32) tuple =
  (sizeInBits_32 (*0x40:w32*), x_368 (*0x8:w32*))
val x_369: word64 = 0x7:w64
val x_370: word32 = 0x1:w32
val x_371: word64 = 0x0:w64
val x_372: word32 = 0x1:w32
val x_373: word32 = 0x1:w32
val x_374: word32 = 0x0:w32
val x_375: bool = con false
val x_376: word32 = 0x0:w32
val x_377: word32 = 0x0:w32
val x_378: word32 = 0x1:w32
val x_379: word64 = 0x1:w64
val x_380: word64 = 0x7:w64
val x_1452: (word64, word64) tuple = (x_379 (*0x1:w64*), x_380 (*0x7:w64*))
val x_381: unit = ()
val x_382: (unit) ref = prim Ref_ref[unit] (x_381 (*()*))
val x_383: exn = con Chr_0 (x_382)
val x_384: unit = ()
val x_1453: (unit) ref = prim Ref_ref[unit] (x_384 (*()*))
val x_385: list_0 = con nil_1
val tuple_29: unit = ()
val fromIntForLength_0: lambdas_281 =
  con fromIntForLengthEnv_0 (tuple_29 (*()*))
val x_386: unit = ()
val x_387: unit = ()
val tuple_30: unit = ()
val base_1: lambdas_279 = con baseEnv_1 (tuple_30 (*()*))
val x_388: unit = ()
val x_389: (word8) vector = "Sequence.Slice.base"
val x_390: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_389 (*"Sequence. ... base"*))
val x_391: exn = con Fail_0 (x_390)
val x_392: unit = ()
val x_393: word32 = 0x0:w32
val x_394: unit = ()
val x_395: (word8) vector = "Sequence.seq0"
val x_396: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_395 (*"Sequence.seq0"*))
val x_397: exn = con Fail_0 (x_396)
val x_398: word64 = 0x1:w64
val x_399: word64 = 0x0:w64
val x_1454: (word64, unit) tuple = (x_399 (*0x0:w64*), x_394 (*()*))
val x_400: word64 = 0x0:w64
val tuple_31: unit = ()
val loop_0: lambdas_276 = con loopEnv_0 (tuple_31 (*()*))
val x_401: unit = ()
val x_402: unit = ()
val x_403: word64 = 0x1:w64
val x_404: unit = ()
val x_405: word64 = 0x1:w64
val x_406: word64 = 0x0:w64
val x_407: word64 = 0x0:w64
val tuple_32: unit = ()
val length_1: lambdas_272 = con lengthEnv_1 (tuple_32 (*()*))
val x_408: unit = ()
val x_409: (word8) vector = "Sequence.length"
val x_410: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_409 (*"Sequence.length"*))
val x_411: exn = con Fail_0 (x_410)
val x_412: unit = ()
val x_413: unit = ()
val x_414: unit = ()
val x_415: word64 = 0x1:w64
val x_416: word64 = 0x0:w64
val x_1455: (word64, unit) tuple = (x_416 (*0x0:w64*), x_413 (*()*))
val tuple_33: unit = ()
val slice_0: lambdas_269 = con sliceEnv_0 (tuple_33 (*()*))
val x_417: t_28 = con NONE_0
val x_418: bool = con true
val x_419: unit = ()
val x_420: unit = ()
val tuple_34: unit = ()
val base_2: lambdas_267 = con baseEnv_2 (tuple_34 (*()*))
val x_421: unit = ()
val x_422: (word8) vector = "Sequence.Slice.base"
val x_423: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_422 (*"Sequence. ... base"*))
val x_424: exn = con Fail_0 (x_423)
val x_425: unit = ()
val tuple_35: unit = ()
val update_0: lambdas_265 = con updateEnv_0 (tuple_35 (*()*))
val x_426: unit = ()
val x_427: unit = ()
val x_428: unit = ()
val x_429: lambdas_263 = con xEnv_45 (x_428 (*()*))
val x_430: unit = ()
val x_431: lambdas_262 = con xEnv_46 (x_430 (*()*))
val x_432: word32 = 0x100:w32
val x_433: word32 = 0x2:w32
val x_434: word32 = 0xA:w32
val x_435: word32 = 0x10:w32
val x_436: word32 = 0x8:w32
val x_437: unit = ()
val radixToInt_0: lambdas_261 = con radixToIntEnv_0 (x_437 (*()*))
val tuple_36: unit = ()
val range_0: lambdas_260 = con rangeEnv_0 (tuple_36 (*()*))
val x_438: bool = con false
val x_439: t_0 = con NONE_1
val x_440: word32 = 0x0:w32
val x_441: word8 = 0x30:w8
val x_442: word8 = 0x31:w8
val x_1456: (word32, word8, word8) tuple =
  (x_440 (*0x0:w32*), x_441 (*0x30:w8*), x_442 (*0x31:w8*))
val x_443: unit = ()
val x_444: unit = ()
val x_445: word64 = 0x1:w64
val x_446: word64 = 0x0:w64
val x_1457: (word64, unit) tuple = (x_446 (*0x0:w64*), x_443 (*()*))
val x_447: word32 = 0x0:w32
val x_448: word8 = 0x30:w8
val x_449: word8 = 0x37:w8
val x_1458: (word32, word8, word8) tuple =
  (x_447 (*0x0:w32*), x_448 (*0x30:w8*), x_449 (*0x37:w8*))
val x_450: unit = ()
val x_451: unit = ()
val x_452: word64 = 0x1:w64
val x_453: word64 = 0x0:w64
val x_1459: (word64, unit) tuple = (x_453 (*0x0:w64*), x_450 (*()*))
val x_454: word32 = 0x0:w32
val x_455: word8 = 0x30:w8
val x_456: word8 = 0x39:w8
val x_1460: (word32, word8, word8) tuple =
  (x_454 (*0x0:w32*), x_455 (*0x30:w8*), x_456 (*0x39:w8*))
val x_457: unit = ()
val x_458: unit = ()
val x_459: word64 = 0x1:w64
val x_460: word64 = 0x0:w64
val x_1461: (word64, unit) tuple = (x_460 (*0x0:w64*), x_457 (*()*))
val x_461: word32 = 0x0:w32
val x_462: word8 = 0x30:w8
val x_463: word8 = 0x39:w8
val x_1462: (word32, word8, word8) tuple =
  (x_461 (*0x0:w32*), x_462 (*0x30:w8*), x_463 (*0x39:w8*))
val x_464: word32 = 0xA:w32
val x_465: word8 = 0x61:w8
val x_466: word8 = 0x66:w8
val x_1463: (word32, word8, word8) tuple =
  (x_464 (*0xA:w32*), x_465 (*0x61:w8*), x_466 (*0x66:w8*))
val x_467: word32 = 0xA:w32
val x_468: word8 = 0x41:w8
val x_469: word8 = 0x46:w8
val x_1464: (word32, word8, word8) tuple =
  (x_467 (*0xA:w32*), x_468 (*0x41:w8*), x_469 (*0x46:w8*))
val x_470: list_1 = con nil_2
val x_471: unit = ()
val x_472: t_0 = con NONE_1
val x_473: unit = ()
val x_474: word64 = 0x1:w64
val x_475: word64 = 0x0:w64
val x_1465: (word64, unit) tuple = (x_475 (*0x0:w64*), x_471 (*()*))
val x_476: unit = ()
val x_477: word8 = 0x20:w8
val x_478: bool = con true
val x_479: word8 = 0x9:w8
val x_480: bool = con true
val x_481: word8 = 0xD:w8
val x_482: bool = con true
val x_483: word8 = 0xA:w8
val x_484: bool = con true
val x_485: word8 = 0xB:w8
val x_486: bool = con true
val x_487: word8 = 0xC:w8
val x_488: unit = ()
val x_489: word64 = 0x1:w64
val x_490: word64 = 0x0:w64
val x_1466: (word64, unit) tuple = (x_490 (*0x0:w64*), x_476 (*()*))
val tuple_37: unit = ()
val digitToChar_0: lambdas_253 = con digitToCharEnv_0 (tuple_37 (*()*))
val x_491: (word8) vector = "0123456789ABCDEF"
val x_492: unit = ()
val x_493: unit = ()
val x_494: word32 = 0x1:w32
val x_495: word8 = 0x0:w8
val x_496: unit = ()
val x_497: bool = con false
val x_498: radix_0 = con DEC_1
val x_499: word32 = 0x1:w32
val x_500: word8 = 0x0:w8
val x_501: unit = ()
val x_502: bool = con false
val x_503: unit = ()
val x_504: unit = ()
val x_505: unit = ()
val x_506: bool = con true
val x_507: unit = ()
val x_508: unit = ()
val x_509: bool = con false
val x_510: bool = con false
val x_511: word32 = 0x1:w32
val x_512: word8 = 0x7E:w8
val x_513: t_0 = con NONE_1
val x_514: word32 = 0x1:w32
val x_515: word32 = 0x1:w32
val x_516: unit = ()
val x_517: unit = ()
val tuple_38: unit = ()
val st_0: lambdas_246 = con stEnv_0 (tuple_38 (*()*))
val x_518: word32 = 0x1:w32
val x_519: word32 = 0x1:w32
val x_520: (word8) vector = "Word.bswap"
val x_521: ((unit) ref, (word8) vector) tuple = (x_1453, x_520 (*"Word.bswap"*))
val x_522: exn = con Fail_0 (x_521)
val x_523: unit = ()
val x_524: lambdas_244 = con xEnv_47 (x_523 (*()*))
val x_525: word32 = 0x4:w32
val x_1467: (lambdas_244, word32) tuple =
  (x_524 (*con xEnv_47 (x_523)*), x_525 (*0x4:w32*))
val x_526: unit = ()
val x_527: lambdas_243 = con xEnv_48 (x_526 (*()*))
val x_528: word32 = 0x10:w32
val x_1468: (lambdas_243, word32) tuple =
  (x_527 (*con xEnv_48 (x_526)*), x_528 (*0x10:w32*))
val x_529: unit = ()
val x_530: lambdas_242 = con xEnv_49 (x_529 (*()*))
val x_531: word32 = 0x20:w32
val x_1469: (lambdas_242, word32) tuple =
  (x_530 (*con xEnv_49 (x_529)*), x_531 (*0x20:w32*))
val x_532: word32 = 0x8:w32
val x_1470: (lambdas_246, word32) tuple =
  (st_0 (*con stEnv_ ... e_38)*), x_532 (*0x8:w32*))
val x_533: word32 = 0x2:w32
val x_534: radix_0 = con BIN_1
val x_535: word32 = 0x8:w32
val x_536: radix_0 = con OCT_1
val x_537: word32 = 0xA:w32
val x_538: radix_0 = con DEC_1
val x_539: word32 = 0x10:w32
val x_540: radix_0 = con HEX_0
val x_541: unit = ()
val x_542: (word8) vector = "EmbedWord"
val x_543: ((unit) ref, (word8) vector) tuple = (x_1453, x_542 (*"EmbedWord"*))
val x_544: exn = con Fail_0 (x_543)
val x_545: unit = ()
val x_546: (word8) vector = "EmbedWord"
val x_547: ((unit) ref, (word8) vector) tuple = (x_1453, x_546 (*"EmbedWord"*))
val x_548: exn = con Fail_0 (x_547)
val x_549: unit = ()
val x_550: (word8) vector = "EmbedWord"
val x_551: ((unit) ref, (word8) vector) tuple = (x_1453, x_550 (*"EmbedWord"*))
val x_552: exn = con Fail_0 (x_551)
val x_553: unit = ()
val x_554: (word8) vector = "EmbedWord"
val x_555: ((unit) ref, (word8) vector) tuple = (x_1453, x_554 (*"EmbedWord"*))
val x_556: exn = con Fail_0 (x_555)
val x_557: unit = ()
val x_558: (word8) vector = "EmbedWord"
val x_559: ((unit) ref, (word8) vector) tuple = (x_1453, x_558 (*"EmbedWord"*))
val x_560: exn = con Fail_0 (x_559)
val x_561: unit = ()
val x_562: (word8) vector = "EmbedWord"
val x_563: ((unit) ref, (word8) vector) tuple = (x_1453, x_562 (*"EmbedWord"*))
val x_564: exn = con Fail_0 (x_563)
val x_565: unit = ()
val x_566: (word8) vector = "EmbedWord"
val x_567: ((unit) ref, (word8) vector) tuple = (x_1453, x_566 (*"EmbedWord"*))
val x_568: exn = con Fail_0 (x_567)
val x_569: unit = ()
val x_570: (word8) vector = "EmbedWord"
val x_571: ((unit) ref, (word8) vector) tuple = (x_1453, x_570 (*"EmbedWord"*))
val x_572: exn = con Fail_0 (x_571)
val x_573: unit = ()
val x_574: (word8) vector = "EmbedWord"
val x_575: ((unit) ref, (word8) vector) tuple = (x_1453, x_574 (*"EmbedWord"*))
val x_576: exn = con Fail_0 (x_575)
val x_577: unit = ()
val x_578: (word8) vector = "EmbedWord"
val x_579: ((unit) ref, (word8) vector) tuple = (x_1453, x_578 (*"EmbedWord"*))
val x_580: exn = con Fail_0 (x_579)
val x_581: unit = ()
val x_582: (word8) vector = "EmbedWord"
val x_583: ((unit) ref, (word8) vector) tuple = (x_1453, x_582 (*"EmbedWord"*))
val x_584: exn = con Fail_0 (x_583)
val x_585: unit = ()
val x_586: (word8) vector = "EmbedWord"
val x_587: ((unit) ref, (word8) vector) tuple = (x_1453, x_586 (*"EmbedWord"*))
val x_588: exn = con Fail_0 (x_587)
val x_589: unit = ()
val x_590: (word8) vector = "EmbedWord"
val x_591: ((unit) ref, (word8) vector) tuple = (x_1453, x_590 (*"EmbedWord"*))
val x_592: exn = con Fail_0 (x_591)
val x_593: unit = ()
val x_594: (word8) vector = "EmbedWord"
val x_595: ((unit) ref, (word8) vector) tuple = (x_1453, x_594 (*"EmbedWord"*))
val x_596: exn = con Fail_0 (x_595)
val x_597: unit = ()
val x_598: (word8) vector = "EmbedWord"
val x_599: ((unit) ref, (word8) vector) tuple = (x_1453, x_598 (*"EmbedWord"*))
val x_600: exn = con Fail_0 (x_599)
val x_601: unit = ()
val x_602: (word8) vector = "EmbedWord"
val x_603: ((unit) ref, (word8) vector) tuple = (x_1453, x_602 (*"EmbedWord"*))
val x_604: exn = con Fail_0 (x_603)
val x_605: unit = ()
val x_606: (word8) vector = "EmbedWord"
val x_607: ((unit) ref, (word8) vector) tuple = (x_1453, x_606 (*"EmbedWord"*))
val x_608: exn = con Fail_0 (x_607)
val x_609: unit = ()
val x_610: (word8) vector = "EmbedWord"
val x_611: ((unit) ref, (word8) vector) tuple = (x_1453, x_610 (*"EmbedWord"*))
val x_612: exn = con Fail_0 (x_611)
val x_613: unit = ()
val x_614: (word8) vector = "EmbedWord"
val x_615: ((unit) ref, (word8) vector) tuple = (x_1453, x_614 (*"EmbedWord"*))
val x_616: exn = con Fail_0 (x_615)
val x_617: unit = ()
val x_618: (word8) vector = "EmbedWord"
val x_619: ((unit) ref, (word8) vector) tuple = (x_1453, x_618 (*"EmbedWord"*))
val x_620: exn = con Fail_0 (x_619)
val x_621: unit = ()
val x_622: (word8) vector = "EmbedWord"
val x_623: ((unit) ref, (word8) vector) tuple = (x_1453, x_622 (*"EmbedWord"*))
val x_624: exn = con Fail_0 (x_623)
val x_625: unit = ()
val x_626: (word8) vector = "EmbedWord"
val x_627: ((unit) ref, (word8) vector) tuple = (x_1453, x_626 (*"EmbedWord"*))
val x_628: exn = con Fail_0 (x_627)
val x_629: unit = ()
val x_630: (word8) vector = "EmbedWord"
val x_631: ((unit) ref, (word8) vector) tuple = (x_1453, x_630 (*"EmbedWord"*))
val x_632: exn = con Fail_0 (x_631)
val x_633: unit = ()
val x_634: (word8) vector = "EmbedWord"
val x_635: ((unit) ref, (word8) vector) tuple = (x_1453, x_634 (*"EmbedWord"*))
val x_636: exn = con Fail_0 (x_635)
val x_637: unit = ()
val x_638: (word8) vector = "EmbedWord"
val x_639: ((unit) ref, (word8) vector) tuple = (x_1453, x_638 (*"EmbedWord"*))
val x_640: exn = con Fail_0 (x_639)
val x_641: unit = ()
val x_642: (word8) vector = "EmbedWord"
val x_643: ((unit) ref, (word8) vector) tuple = (x_1453, x_642 (*"EmbedWord"*))
val x_644: exn = con Fail_0 (x_643)
val x_645: unit = ()
val x_646: (word8) vector = "EmbedWord"
val x_647: ((unit) ref, (word8) vector) tuple = (x_1453, x_646 (*"EmbedWord"*))
val x_648: exn = con Fail_0 (x_647)
val x_649: unit = ()
val x_650: (word8) vector = "EmbedWord"
val x_651: ((unit) ref, (word8) vector) tuple = (x_1453, x_650 (*"EmbedWord"*))
val x_652: exn = con Fail_0 (x_651)
val x_653: unit = ()
val x_654: (word8) vector = "EmbedWord"
val x_655: ((unit) ref, (word8) vector) tuple = (x_1453, x_654 (*"EmbedWord"*))
val x_656: exn = con Fail_0 (x_655)
val x_657: unit = ()
val x_658: (word8) vector = "EmbedWord"
val x_659: ((unit) ref, (word8) vector) tuple = (x_1453, x_658 (*"EmbedWord"*))
val x_660: exn = con Fail_0 (x_659)
val x_661: unit = ()
val x_662: (word8) vector = "EmbedWord"
val x_663: ((unit) ref, (word8) vector) tuple = (x_1453, x_662 (*"EmbedWord"*))
val x_664: exn = con Fail_0 (x_663)
val x_665: unit = ()
val x_666: (word8) vector = "EmbedWord"
val x_667: ((unit) ref, (word8) vector) tuple = (x_1453, x_666 (*"EmbedWord"*))
val x_668: exn = con Fail_0 (x_667)
val x_669: unit = ()
val x_670: (word8) vector = "EmbedWord"
val x_671: ((unit) ref, (word8) vector) tuple = (x_1453, x_670 (*"EmbedWord"*))
val x_672: exn = con Fail_0 (x_671)
val x_673: unit = ()
val x_674: (word8) vector = "EmbedWord"
val x_675: ((unit) ref, (word8) vector) tuple = (x_1453, x_674 (*"EmbedWord"*))
val x_676: exn = con Fail_0 (x_675)
val x_677: unit = ()
val x_678: (word8) vector = "EmbedWord"
val x_679: ((unit) ref, (word8) vector) tuple = (x_1453, x_678 (*"EmbedWord"*))
val x_680: exn = con Fail_0 (x_679)
val x_681: unit = ()
val x_682: (word8) vector = "EmbedWord"
val x_683: ((unit) ref, (word8) vector) tuple = (x_1453, x_682 (*"EmbedWord"*))
val x_684: exn = con Fail_0 (x_683)
val x_685: unit = ()
val x_686: (word8) vector = "EmbedWord"
val x_687: ((unit) ref, (word8) vector) tuple = (x_1453, x_686 (*"EmbedWord"*))
val x_688: exn = con Fail_0 (x_687)
val x_689: unit = ()
val x_690: (word8) vector = "EmbedWord"
val x_691: ((unit) ref, (word8) vector) tuple = (x_1453, x_690 (*"EmbedWord"*))
val x_692: exn = con Fail_0 (x_691)
val x_693: unit = ()
val x_694: (word8) vector = "EmbedWord"
val x_695: ((unit) ref, (word8) vector) tuple = (x_1453, x_694 (*"EmbedWord"*))
val x_696: exn = con Fail_0 (x_695)
val x_697: unit = ()
val x_698: (word8) vector = "EmbedWord"
val x_699: ((unit) ref, (word8) vector) tuple = (x_1453, x_698 (*"EmbedWord"*))
val x_700: exn = con Fail_0 (x_699)
val x_701: unit = ()
val x_702: (word8) vector = "EmbedWord"
val x_703: ((unit) ref, (word8) vector) tuple = (x_1453, x_702 (*"EmbedWord"*))
val x_704: exn = con Fail_0 (x_703)
val x_705: unit = ()
val x_706: (word8) vector = "EmbedWord"
val x_707: ((unit) ref, (word8) vector) tuple = (x_1453, x_706 (*"EmbedWord"*))
val x_708: exn = con Fail_0 (x_707)
val x_709: unit = ()
val x_710: (word8) vector = "EmbedWord"
val x_711: ((unit) ref, (word8) vector) tuple = (x_1453, x_710 (*"EmbedWord"*))
val x_712: exn = con Fail_0 (x_711)
val x_713: unit = ()
val x_714: (word8) vector = "EmbedWord"
val x_715: ((unit) ref, (word8) vector) tuple = (x_1453, x_714 (*"EmbedWord"*))
val x_716: exn = con Fail_0 (x_715)
val x_717: unit = ()
val x_718: (word8) vector = "EmbedWord"
val x_719: ((unit) ref, (word8) vector) tuple = (x_1453, x_718 (*"EmbedWord"*))
val x_720: exn = con Fail_0 (x_719)
val x_721: unit = ()
val x_722: (word8) vector = "EmbedWord"
val x_723: ((unit) ref, (word8) vector) tuple = (x_1453, x_722 (*"EmbedWord"*))
val x_724: exn = con Fail_0 (x_723)
val x_725: unit = ()
val x_726: (word8) vector = "EmbedWord"
val x_727: ((unit) ref, (word8) vector) tuple = (x_1453, x_726 (*"EmbedWord"*))
val x_728: exn = con Fail_0 (x_727)
val x_729: unit = ()
val x_730: (word8) vector = "EmbedWord"
val x_731: ((unit) ref, (word8) vector) tuple = (x_1453, x_730 (*"EmbedWord"*))
val x_732: exn = con Fail_0 (x_731)
val x_733: unit = ()
val x_734: (word8) vector = "EmbedWord"
val x_735: ((unit) ref, (word8) vector) tuple = (x_1453, x_734 (*"EmbedWord"*))
val x_736: exn = con Fail_0 (x_735)
val x_737: unit = ()
val x_738: (word8) vector = "EmbedWord"
val x_739: ((unit) ref, (word8) vector) tuple = (x_1453, x_738 (*"EmbedWord"*))
val x_740: exn = con Fail_0 (x_739)
val x_741: unit = ()
val x_742: (word8) vector = "EmbedWord"
val x_743: ((unit) ref, (word8) vector) tuple = (x_1453, x_742 (*"EmbedWord"*))
val x_744: exn = con Fail_0 (x_743)
val x_745: unit = ()
val x_746: (word8) vector = "EmbedWord"
val x_747: ((unit) ref, (word8) vector) tuple = (x_1453, x_746 (*"EmbedWord"*))
val x_748: exn = con Fail_0 (x_747)
val x_749: unit = ()
val x_750: (word8) vector = "EmbedWord"
val x_751: ((unit) ref, (word8) vector) tuple = (x_1453, x_750 (*"EmbedWord"*))
val x_752: exn = con Fail_0 (x_751)
val x_753: unit = ()
val x_754: (word8) vector = "EmbedWord"
val x_755: ((unit) ref, (word8) vector) tuple = (x_1453, x_754 (*"EmbedWord"*))
val x_756: exn = con Fail_0 (x_755)
val x_757: unit = ()
val x_758: (word8) vector = "EmbedWord"
val x_759: ((unit) ref, (word8) vector) tuple = (x_1453, x_758 (*"EmbedWord"*))
val x_760: exn = con Fail_0 (x_759)
val x_761: unit = ()
val x_762: (word8) vector = "EmbedWord"
val x_763: ((unit) ref, (word8) vector) tuple = (x_1453, x_762 (*"EmbedWord"*))
val x_764: exn = con Fail_0 (x_763)
val x_765: unit = ()
val x_766: (word8) vector = "EmbedWord"
val x_767: ((unit) ref, (word8) vector) tuple = (x_1453, x_766 (*"EmbedWord"*))
val x_768: exn = con Fail_0 (x_767)
val x_769: unit = ()
val x_770: (word8) vector = "EmbedWord"
val x_771: ((unit) ref, (word8) vector) tuple = (x_1453, x_770 (*"EmbedWord"*))
val x_772: exn = con Fail_0 (x_771)
val x_773: word32 = 0x1:w32
val x_1471: (word32, word32) tuple = (x_432 (*0x100:w32*), x_773 (*0x1:w32*))
val x_774: word32 = 0x0:w32
val x_775: t_8 = con NONE_2
val x_776: word32 = 0x1:w32
val x_777: unit = ()
val x_778: unit = ()
val x_779: word64 = 0x1:w64
val x_780: word64 = 0x0:w64
val x_1472: (word64, unit) tuple = (x_780 (*0x0:w64*), x_777 (*()*))
val x_781: t_2 = con NONE_3
val x_782: unit = ()
val x_783: lambdas_239 = con xEnv_50 (x_782 (*()*))
val x_784: unit = ()
val x_785: list_7 = con nil_3
val x_786: (word8) vector = "Fail: "
val x_787: unit = ()
val tuple_39: unit = ()
val sub_0: lambdas_238 = con subEnv_0 (tuple_39 (*()*))
val tuple_40: unit = ()
val new_0: lambdas_237 = con newEnv_0 (tuple_40 (*()*))
val x_788: list_2 = con nil_4
val x_789: unit = ()
val x_790: unit = ()
val x_791: unit = ()
val toRep_0: lambdas_236 = con toRepEnv_0 (x_791 (*()*))
val x_792: unit = ()
val toRep_1: lambdas_235 = con toRepEnv_1 (x_792 (*()*))
val x_793: unit = ()
val fromRep_0: lambdas_234 = con fromRepEnv_0 (x_793 (*()*))
val tuple_41: unit = ()
val ::?_0: lambdas_233 = con ::?Env_0 (tuple_41 (*()*))
val x_794: word32 = 0xFFFFFFFF:w32
val x_795: (word8) vector = "acces"
val x_796: (word8) vector = "addrinuse"
val x_797: (word8) vector = "addrnotavail"
val x_798: (word8) vector = "afnosupport"
val x_799: (word8) vector = "again"
val x_800: (word8) vector = "already"
val x_801: (word8) vector = "badf"
val x_802: (word8) vector = "badmsg"
val x_803: (word8) vector = "busy"
val x_804: (word8) vector = "canceled"
val x_805: (word8) vector = "child"
val x_806: (word8) vector = "connaborted"
val x_807: (word8) vector = "connrefused"
val x_808: (word8) vector = "connreset"
val x_809: (word8) vector = "deadlk"
val x_810: (word8) vector = "destaddrreq"
val x_811: (word8) vector = "dom"
val x_812: (word8) vector = "dquot"
val x_813: (word8) vector = "exist"
val x_814: (word8) vector = "fault"
val x_815: (word8) vector = "fbig"
val x_816: (word8) vector = "hostunreach"
val x_817: (word8) vector = "idrm"
val x_818: (word8) vector = "ilseq"
val x_819: (word8) vector = "inprogress"
val x_820: (word8) vector = "intr"
val x_821: (word8) vector = "inval"
val x_822: (word8) vector = "io"
val x_823: (word8) vector = "isconn"
val x_824: (word8) vector = "isdir"
val x_825: (word8) vector = "loop"
val x_826: (word8) vector = "mfile"
val x_827: (word8) vector = "mlink"
val x_828: (word8) vector = "msgsize"
val x_829: (word8) vector = "multihop"
val x_830: (word8) vector = "nametoolong"
val x_831: (word8) vector = "netdown"
val x_832: (word8) vector = "netreset"
val x_833: (word8) vector = "netunreach"
val x_834: (word8) vector = "nfile"
val x_835: (word8) vector = "nobufs"
val x_836: (word8) vector = "nodata"
val x_837: (word8) vector = "nodev"
val x_838: (word8) vector = "noent"
val x_839: (word8) vector = "noexec"
val x_840: (word8) vector = "nolck"
val x_841: (word8) vector = "nolink"
val x_842: (word8) vector = "nomem"
val x_843: (word8) vector = "nomsg"
val x_844: (word8) vector = "noprotoopt"
val x_845: (word8) vector = "nospc"
val x_846: (word8) vector = "nosr"
val x_847: (word8) vector = "nostr"
val x_848: (word8) vector = "nosys"
val x_849: (word8) vector = "notconn"
val x_850: (word8) vector = "notdir"
val x_851: (word8) vector = "notempty"
val x_852: (word8) vector = "notsock"
val x_853: (word8) vector = "notsup"
val x_854: (word8) vector = "notty"
val x_855: (word8) vector = "nxio"
val x_856: (word8) vector = "opnotsupp"
val x_857: (word8) vector = "overflow"
val x_858: (word8) vector = "perm"
val x_859: (word8) vector = "pipe"
val x_860: (word8) vector = "proto"
val x_861: (word8) vector = "protonosupport"
val x_862: (word8) vector = "prototype"
val x_863: (word8) vector = "range"
val x_864: (word8) vector = "rofs"
val x_865: (word8) vector = "spipe"
val x_866: (word8) vector = "srch"
val x_867: (word8) vector = "stale"
val x_868: (word8) vector = "time"
val x_869: (word8) vector = "timedout"
val x_870: (word8) vector = "toobig"
val x_871: (word8) vector = "txtbsy"
val x_872: (word8) vector = "wouldblock"
val x_873: (word8) vector = "xdev"
val x_874: list_3 = con nil_5
val x_875: unit = ()
val x_1473: (unit) ref = prim Ref_ref[unit] (x_875 (*()*))
val x_876: t_2 = con NONE_3
val x_877: unit = ()
val x_878: lambdas_231 = con xEnv_51 (x_877 (*()*))
val x_879: unit = ()
val x_880: list_7 = con nil_3
val x_881: (word8) vector = ""
val x_882: list_7 = con nil_3
val x_883: (word8) vector = "]"
val x_884: ((word8) vector, list_7) tuple = (x_883 (*"]"*), x_882 (*con nil_3*))
val x_885: list_7 = con ::_1 (x_884)
val x_886: t_27 = con NONE_4
val x_887: (word8) vector = "<UNKNOWN>"
val x_888: (word8) vector = " ["
val x_889: (word8) vector = "SysErr: "
val x_890: unit = ()
val x_891: (word8) vector = "Unknown error"
val x_892: bool = con false
val x_893: bool = con true
val x_894: word32 = 0x1:w32
val x_895: word32 = 0x0:w32
val x_896: unit = ()
val x_897: unit = ()
val x_898: word64 = 0x1:w64
val x_899: word64 = 0x0:w64
val x_1474: (word64, unit) tuple = (x_899 (*0x0:w64*), x_896 (*()*))
val x_900: unit = ()
val x_901: unit = ()
val x_902: lambdas_227 = con xEnv_52 (x_901 (*()*))
val x_903: unit = ()
val x_904: lambdas_49 = con xEnv_53 (x_903 (*()*))
val x_905: bool = con true
val x_906: (word8) vector = "IEEEReal rounding mode not supported"
val x_907: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_906 (*"IEEEReal  ... rted"*))
val x_908: exn = con Fail_0 (x_907)
val x_909: word32 = 0x0:w32
val x_910: unit = ()
val x_911: t_9 = con TO_NEAREST_0
val x_912: t_9 = con TO_NEGINF_0
val x_913: t_9 = con TO_POSINF_0
val x_914: t_9 = con TO_ZERO_0
val x_915: (word8) vector = "IEEEReal.RoundingMode.fromInt"
val x_916: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_915 (*"IEEEReal. ... mInt"*))
val x_917: exn = con Fail_0 (x_916)
val x_918: unit = ()
val x_919: lambdas_225 = con xEnv_54 (x_918 (*()*))
val x_920: float_class_0 = con INF_0
val x_921: float_class_0 = con NAN_1
val x_922: float_class_0 = con ZERO_1
val x_923: float_class_0 = con SUBNORMAL_1
val x_924: float_class_0 = con NORMAL_1
val x_1475: (word32, word32) tuple =
  (precision_4 (*0x18:w32*), precision_4 (*0x18:w32*))
val x_925: unit = ()
val x_926: lambdas_222 = con xEnv_55 (x_925 (*()*))
val x_1476: (lambdas_222, lambdas_354) tuple =
  (x_926 (*con xEnv_55 (x_925)*), toReal32Unsafe_0 (*con toReal ... _222)*))
val x_927: unit = ()
val x_928: word32 = 0x1:w32
val x_929: t_9 = con TO_NEAREST_0
val x_930: unit = ()
val x_931: word32 = 0x0:w32
val x_932: t_9 = con TO_NEAREST_0
val x_933: unit = ()
val x_934: word32 = 0x1:w32
val x_935: t_9 = con TO_NEAREST_0
val x_936: unit = ()
val x_937: word32 = 0x0:w32
val x_938: t_9 = con TO_NEAREST_0
val x_939: unit = ()
val x_940: word32 = 0x1:w32
val x_941: t_9 = con TO_NEAREST_0
val x_942: unit = ()
val x_943: word32 = 0x0:w32
val x_944: t_9 = con TO_NEAREST_0
val x_945: unit = ()
val x_946: word32 = 0x1:w32
val x_947: t_9 = con TO_NEAREST_0
val x_948: unit = ()
val x_949: word32 = 0x0:w32
val x_950: t_9 = con TO_NEAREST_0
val x_951: unit = ()
val x_952: t_9 = con TO_NEAREST_0
val x_953: unit = ()
val x_954: word32 = 0x0:w32
val x_955: t_9 = con TO_NEAREST_0
val x_956: unit = ()
val x_957: t_9 = con TO_NEAREST_0
val x_958: unit = ()
val x_959: word32 = 0x0:w32
val x_960: t_9 = con TO_NEAREST_0
val x_961: unit = ()
val x_962: t_9 = con TO_NEAREST_0
val x_963: unit = ()
val x_964: word32 = 0x0:w32
val x_965: t_9 = con TO_NEAREST_0
val x_966: unit = ()
val x_967: t_9 = con TO_NEAREST_0
val x_968: unit = ()
val x_969: word32 = 0x0:w32
val x_970: t_9 = con TO_NEAREST_0
val x_971: unit = ()
val x_972: float_class_0 = con INF_0
val x_973: float_class_0 = con NAN_1
val x_974: float_class_0 = con ZERO_1
val x_975: float_class_0 = con SUBNORMAL_1
val x_976: float_class_0 = con NORMAL_1
val x_1477: (word32, word32) tuple =
  (precision_5 (*0x35:w32*), precision_4 (*0x18:w32*))
val x_977: unit = ()
val x_978: lambdas_168 = con xEnv_56 (x_977 (*()*))
val x_1478: (lambdas_168, lambdas_328) tuple =
  (x_978 (*con xEnv_56 (x_977)*), toReal32Unsafe_1 (*con toReal ... _246)*))
val x_979: unit = ()
val x_980: word32 = 0x1:w32
val x_981: t_9 = con TO_NEAREST_0
val x_982: unit = ()
val x_983: word32 = 0x0:w32
val x_984: t_9 = con TO_NEAREST_0
val x_985: unit = ()
val x_986: word32 = 0x1:w32
val x_987: t_9 = con TO_NEAREST_0
val x_988: unit = ()
val x_989: word32 = 0x0:w32
val x_990: t_9 = con TO_NEAREST_0
val x_991: unit = ()
val x_992: word32 = 0x1:w32
val x_993: t_9 = con TO_NEAREST_0
val x_994: unit = ()
val x_995: word32 = 0x0:w32
val x_996: t_9 = con TO_NEAREST_0
val x_997: unit = ()
val x_998: word32 = 0x1:w32
val x_999: t_9 = con TO_NEAREST_0
val x_1000: unit = ()
val x_1001: word32 = 0x0:w32
val x_1002: t_9 = con TO_NEAREST_0
val x_1003: unit = ()
val x_1004: t_9 = con TO_NEAREST_0
val x_1005: unit = ()
val x_1006: word32 = 0x0:w32
val x_1007: t_9 = con TO_NEAREST_0
val x_1008: unit = ()
val x_1009: t_9 = con TO_NEAREST_0
val x_1010: unit = ()
val x_1011: word32 = 0x0:w32
val x_1012: t_9 = con TO_NEAREST_0
val x_1013: unit = ()
val x_1014: t_9 = con TO_NEAREST_0
val x_1015: unit = ()
val x_1016: word32 = 0x0:w32
val x_1017: t_9 = con TO_NEAREST_0
val x_1018: unit = ()
val x_1019: t_9 = con TO_NEAREST_0
val x_1020: unit = ()
val x_1021: word32 = 0x0:w32
val x_1022: t_9 = con TO_NEAREST_0
val x_1023: unit = ()
val ticksPerSecond_0: intInf = 1000000000:ii
val x_1024: intInf = 1:ii
val x_1479: (intInf, intInf) tuple =
  (ticksPerSecond_0 (*1000000000:ii*), x_1024 (*1:ii*))
val x_1025: word64 = 0xFFFFFFFFFFFFFFFF:w64
val x_1026: bool = con false
val x_1027: word64 = 0x2:w64
val x_1028: intInf = 1000000000:ii
val x_1029: unit = ()
val x_1030: (unit) ref = prim Ref_ref[unit] (x_1029 (*()*))
val x_1031: exn = con BlockingNotSupported_0 (x_1030)
val x_1032: unit = ()
val x_1033: (unit) ref = prim Ref_ref[unit] (x_1032 (*()*))
val x_1034: exn = con ClosedStream_0 (x_1033)
val x_1035: unit = ()
val x_1480: (unit) ref = prim Ref_ref[unit] (x_1035 (*()*))
val x_1036: t_2 = con NONE_3
val x_1037: unit = ()
val x_1038: lambdas_98 = con xEnv_57 (x_1037 (*()*))
val x_1039: unit = ()
val x_1040: list_7 = con nil_3
val x_1041: (word8) vector = "\" failed with "
val x_1042: (word8) vector = " \""
val x_1043: (word8) vector = "Io: "
val x_1044: unit = ()
val x_1045: word64 = 0x0:w64
val x_1046: t_7 = con NONE_5
val x_1047: unit = ()
val x_1048: t_7 = con NONE_5
val x_1049: unit = ()
val x_1050: t_7 = con NONE_5
val x_1051: word32 = 0x1:w32
val x_1052: word64 = 0x0:w64
val tuple_42: unit = ()
val loop_1: lambdas_96 = con loopEnv_1 (tuple_42 (*()*))
val x_1053: word32 = 0xFFFFFFFF:w32
val x_1054: unit = ()
val x_1481: (word32, word32) tuple =
  (sizeInBits_64 (*0x20:w32*), sizeInBits_32 (*0x40:w32*))
val x_1055: word32 = 0x0:w32
val x_1056: bool = con false
val x_1057: list_8 = con nil_6
val x_1058: unit = ()
val x_1059: unit = ()
val x_1060: t_24 = con NONE_6
val x_1061: unit = ()
val x_1062: unit = ()
val x_1063: unit = ()
val x_1064: word32 = 0xFFFFFFFF:w32
val x_1065: t_26 = con NONE_7
val x_1066: bool = con false
val x_1067: unit = ()
val x_1068: word32 = 0x0:w32
val x_1069: unit = ()
val x_1070: unit = ()
val x_1071: unit = ()
val x_1072: lambdas_89 = con xEnv_58 (x_1071 (*()*))
val x_1073: list_10 = con nil_7
val x_1074: unit = ()
val x_1075: unit = ()
val x_1076: unit = ()
val x_1077: unit = ()
val x_1078: unit = ()
val x_1079: unit = ()
val x_1080: unit = ()
val x_1081: unit = ()
val x_1082: lambdas_88 = con xEnv_59 (x_1081 (*()*))
val x_1083: list_10 = con nil_7
val x_1084: unit = ()
val x_1085: unit = ()
val x_1086: t_26 = con NONE_7
val x_1087: unit = ()
val x_1088: unit = ()
val x_1089: unit = ()
val x_1090: unit = ()
val x_1091: unit = ()
val x_1092: unit = ()
val x_1093: unit = ()
val x_1094: unit = ()
val x_1095: unit = ()
val x_1096: lambdas_86 = con xEnv_60 (x_1095 (*()*))
val x_1097: list_10 = con nil_7
val x_1098: unit = ()
val x_1099: unit = ()
val x_1100: unit = ()
val x_1101: unit = ()
val x_1102: unit = ()
val x_1103: word32 = 0xFFFFFFFF:w32
val x_1104: unit = ()
val x_1105: unit = ()
val x_1106: lambdas_85 = con xEnv_61 (x_1105 (*()*))
val x_1107: list_9 = con nil_8
val x_1108: unit = ()
val x_1109: unit = ()
val x_1110: t_25 = con NONE_8
val x_1111: unit = ()
val x_1112: unit = ()
val x_1113: unit = ()
val x_1114: word32 = 0x0:w32
val someElem_0: word8 = 0x0:w8
val tuple_43: unit = ()
val liftExn_0: lambdas_83 = con liftExnEnv_0 (tuple_43 (*()*))
val tuple_44: unit = ()
val terminated_0: lambdas_80 = con terminatedEnv_0 (tuple_44 (*()*))
val x_1115: bool = con false
val x_1116: bool = con true
val tuple_45: unit = ()
val outstreamWriter_0: lambdas_79 = con outstreamWriterEnv_0 (tuple_45 (*()*))
val tuple_46: unit = ()
val outstreamName_0: lambdas_78 = con outstreamNameEnv_0 (tuple_46 (*()*))
val tuple_47: unit = ()
val flushBuf_0: lambdas_77 = con flushBufEnv_0 (tuple_47 (*()*))
val x_1117: word32 = 0x0:w32
val x_1118: word32 = 0x0:w32
val x_1119: unit = ()
val x_1120: word32 = 0x0:w32
val x_1121: (word8) vector = "partial write"
val x_1122: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1121 (*"partial write"*))
val x_1123: exn = con Fail_0 (x_1122)
val tuple_48: unit = ()
val flushOut_0: lambdas_75 = con flushOutEnv_0 (tuple_48 (*()*))
val x_1124: unit = ()
val x_1125: unit = ()
val x_1126: (word8) vector = "flushOut"
val x_1127: list_5 = con nil_9
val x_1128: unit = ()
val tuple_49: unit = ()
val loop_2: lambdas_73 = con loopEnv_2 (tuple_49 (*()*))
val x_1129: bool = con false
val x_1130: bool = con true
val x_1131: unit = ()
val x_1132: unit = ()
val x_1133: unit = ()
val x_1134: state_0 = con Closed_1
val tuple_50: unit = ()
val doit_0: lambdas_72 = con doitEnv_0 (tuple_50 (*()*))
val x_1135: unit = ()
val x_1136: (word8) vector = "closeOut"
val tuple_51: unit = ()
val get_0: lambdas_71 = con getEnv_0 (tuple_51 (*()*))
val x_1137: bool = con false
val x_1138: (word8) vector = "<stdout>"
val x_1139: buffer_mode_0 = con LINE_BUF_0
val x_1140: buffer_mode_0 = con BLOCK_BUF_0
val x_1141: bool = con true
val x_1142: bool = con false
val x_1143: unit = ()
val x_1144: whence_0 = con SEEK_SET_1
val x_1145: unit = ()
val x_1146: whence_0 = con SEEK_CUR_1
val x_1147: unit = ()
val x_1148: t_12 = con NONE_9
val x_1149: t_18 = con NONE_10
val x_1150: t_12 = con NONE_9
val x_1151: t_12 = con NONE_9
val x_1152: list_4 = con nil_10
val x_1153: (word32, list_4) tuple =
  (APPEND_0 (*0x400:w32*), x_1152 (*con nil_10*))
val x_1154: list_4 = con ::_2 (x_1153)
val x_1155: word64 = 0xFFFFFFFFFFFFFFFF:w64
val x_1156: t_25 = con NONE_8
val x_1157: bool = con false
val x_1158: unit = ()
val x_1159: word32 = 0x0:w32
val x_1160: unit = ()
val x_1161: unit = ()
val x_1162: unit = ()
val x_1163: lambdas_62 = con xEnv_62 (x_1162 (*()*))
val x_1164: list_9 = con nil_8
val x_1165: unit = ()
val x_1166: unit = ()
val x_1167: unit = ()
val x_1168: unit = ()
val x_1169: unit = ()
val x_1170: unit = ()
val x_1171: unit = ()
val x_1172: unit = ()
val x_1173: lambdas_61 = con xEnv_63 (x_1172 (*()*))
val x_1174: list_9 = con nil_8
val x_1175: unit = ()
val x_1176: unit = ()
val x_1177: t_25 = con NONE_8
val x_1178: unit = ()
val x_1179: unit = ()
val x_1180: unit = ()
val x_1181: unit = ()
val x_1182: unit = ()
val x_1183: unit = ()
val x_1184: unit = ()
val x_1185: unit = ()
val x_1186: unit = ()
val x_1187: lambdas_59 = con xEnv_64 (x_1186 (*()*))
val x_1188: list_9 = con nil_8
val x_1189: unit = ()
val x_1190: unit = ()
val x_1191: unit = ()
val x_1192: unit = ()
val x_1193: word64 = 0xFFFFFFFFFFFFFFFF:w64
val x_1194: t_25 = con NONE_8
val x_1195: bool = con false
val x_1196: unit = ()
val x_1197: word32 = 0x0:w32
val x_1198: unit = ()
val x_1199: unit = ()
val x_1200: unit = ()
val x_1201: lambdas_54 = con xEnv_65 (x_1200 (*()*))
val x_1202: list_9 = con nil_8
val x_1203: unit = ()
val x_1204: unit = ()
val x_1205: unit = ()
val x_1206: unit = ()
val x_1207: unit = ()
val x_1208: unit = ()
val x_1209: unit = ()
val x_1210: unit = ()
val x_1211: lambdas_53 = con xEnv_66 (x_1210 (*()*))
val x_1212: list_9 = con nil_8
val x_1213: unit = ()
val x_1214: unit = ()
val x_1215: t_25 = con NONE_8
val x_1216: unit = ()
val x_1217: unit = ()
val x_1218: unit = ()
val x_1219: unit = ()
val x_1220: unit = ()
val x_1221: unit = ()
val x_1222: unit = ()
val x_1223: unit = ()
val x_1224: unit = ()
val x_1225: lambdas_51 = con xEnv_67 (x_1224 (*()*))
val x_1226: list_9 = con nil_8
val x_1227: unit = ()
val x_1228: unit = ()
val x_1229: unit = ()
val x_1230: unit = ()
val x_1231: unit = ()
val x_1232: bool = con true
val x_1233: unit = ()
val x_1234: lambdas_50 = con xEnv_68 (x_1233 (*()*))
val x_1235: word32 = 0xFFFFFFFF:w32
val x_1236: t_26 = con NONE_7
val x_1237: bool = con false
val x_1238: unit = ()
val x_1239: word32 = 0x0:w32
val x_1240: unit = ()
val x_1241: unit = ()
val x_1242: unit = ()
val x_1243: lambdas_45 = con xEnv_69 (x_1242 (*()*))
val x_1244: list_10 = con nil_7
val x_1245: unit = ()
val x_1246: unit = ()
val x_1247: unit = ()
val x_1248: unit = ()
val x_1249: unit = ()
val x_1250: unit = ()
val x_1251: unit = ()
val x_1252: unit = ()
val x_1253: lambdas_44 = con xEnv_70 (x_1252 (*()*))
val x_1254: list_10 = con nil_7
val x_1255: unit = ()
val x_1256: unit = ()
val x_1257: t_26 = con NONE_7
val x_1258: unit = ()
val x_1259: unit = ()
val x_1260: unit = ()
val x_1261: unit = ()
val x_1262: unit = ()
val x_1263: unit = ()
val x_1264: unit = ()
val x_1265: unit = ()
val x_1266: unit = ()
val x_1267: lambdas_42 = con xEnv_71 (x_1266 (*()*))
val x_1268: list_10 = con nil_7
val x_1269: unit = ()
val x_1270: unit = ()
val x_1271: unit = ()
val x_1272: unit = ()
val x_1273: unit = ()
val x_1274: t_10 = con NONE_11
val x_1275: t_11 = con NONE_12
val x_1276: bool = con true
val x_1277: unit = ()
val x_1278: unit = ()
val x_1279: list_4 = con nil_10
val x_1280: bool = con false
val x_1281: unit = ()
val x_1282: unit = ()
val x_1283: list_4 = con nil_10
val x_1284: unit = ()
val x_1285: t_0 = con NONE_1
val x_1286: unit = ()
val x_1287: bool = con true
val x_1288: unit = ()
val x_1289: unit = ()
val x_1290: list_4 = con nil_10
val x_1291: bool = con false
val x_1292: unit = ()
val x_1293: unit = ()
val x_1294: list_4 = con nil_10
val x_1295: unit = ()
val x_1296: t_0 = con NONE_1
val x_1297: unit = ()
val x_1298: state_0 = con Active_1
val x_1299: bufferMode_0 = con NO_BUF_0
val x_1300: word32 = 0x0:w32
val x_1482: (word32) ref = prim Ref_ref[word32] (x_1300 (*0x0:w32*))
val x_1301: word32 = 0x0:w32
val x_1483: (word32) ref = prim Ref_ref[word32] (x_1301 (*0x0:w32*))
val x_1302: unit = ()
val x_1303: lambdas_39 = con xEnv_72 (x_1302 (*()*))
val x_1304: word32 = 0x1:w32
val x_1305: word32 = 0x0:w32
val x_1306: bool = con false
val tuple_52: unit = ()
val halt_0: lambdas_38 = con haltEnv_0 (tuple_52 (*()*))
val x_1307: (word8) vector = "MLton.Exit.halt"
val x_1308: (word8) vector = "MLton.Exit.exit"
val x_1309: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1308 (*"MLton.Exit.exit"*))
val x_1310: exn = con Fail_0 (x_1309)
val x_1311: bool = con true
val x_1312: word32 = 0x0:w32
val x_1313: word32 = 0x100:w32
val x_1314: bool = con false
val x_1315: unit = ()
val tuple_53: unit = ()
val loop_3: lambdas_37 = con loopEnv_3 (tuple_53 (*()*))
val x_1316: unit = ()
val x_1317: unit = ()
val x_1318: (word8) vector = "MLton.Exit.exit"
val x_1319: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1318 (*"MLton.Exit.exit"*))
val x_1320: exn = con Fail_0 (x_1319)
val x_1321: list_7 = con nil_3
val x_1322: (word8) vector = "exit must have 0 <= status < 256"
val x_1323: ((word8) vector, list_7) tuple =
  (x_1322 (*"exit must ...  256"*), x_1321 (*con nil_3*))
val x_1324: list_7 = con ::_1 (x_1323)
val x_1325: (word8) vector = "): "
val x_1326: ((word8) vector, list_7) tuple =
  (x_1325 (*"): "*), x_1324 (*con ::_1 (x_1323)*))
val x_1327: list_7 = con ::_1 (x_1326)
val x_1328: unit = ()
val x_1329: unit = ()
val x_1330: unit = ()
val x_1331: bool = con true
val x_1332: unit = ()
val x_1333: unit = ()
val x_1334: bool = con false
val x_1335: bool = con false
val x_1336: word32 = 0x1:w32
val x_1337: word8 = 0x7E:w8
val x_1338: t_0 = con NONE_1
val x_1339: word32 = 0x1:w32
val x_1340: word32 = 0x1:w32
val x_1341: unit = ()
val x_1342: unit = ()
val x_1343: (word8) vector = "MLton.Exit.exit("
val x_1344: (word8) vector = "Top-level suffix returned.\n"
val x_1345: (word8) vector = "Top-level suffix raised exception.\n"
val x_1346: (word8) vector = "MLton.Exit.wrapSuffix"
val x_1347: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1346 (*"MLton.Exi ... ffix"*))
val x_1348: exn = con Fail_0 (x_1347)
val x_1349: list_7 = con nil_3
val x_1350: (word8) vector = "\n"
val x_1351: ((word8) vector, list_7) tuple =
  (x_1350 (*"\n"*), x_1349 (*con nil_3*))
val x_1352: list_7 = con ::_1 (x_1351)
val x_1353: (word8) vector = "unhandled exception: "
val x_1354: (word8) vector = "Top-level handler returned.\n"
val x_1355: (word8) vector = "Top-level handler raised exception.\n"
val x_1356: (word8) vector = "MLton.Exn.wrapHandler"
val x_1357: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1356 (*"MLton.Exn ... dler"*))
val x_1358: exn = con Fail_0 (x_1357)
val x_1359: list_6 = con nil_11
val tuple_54: unit = ()
val make_0: lambdas_28 = con makeEnv_0 (tuple_54 (*()*))
val x_1360: bool = con false
val x_1361: bool = con false
val x_1362: unit = ()
val x_1363: unit = ()
val x_1364: (word8) vector = "setCurrent of freed profile data"
val x_1365: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1364 (*"setCurren ... data"*))
val x_1366: exn = con Fail_0 (x_1365)
val x_1367: unit = ()
val x_1368: bool = con false
val x_1369: bool = con true
val x_1370: unit = ()
val x_1371: unit = ()
val x_1372: unit = ()
val x_1373: unit = ()
val x_1374: unit = ()
val x_1375: (word8) vector = "mlmon.out"
val x_1376: unit = ()
val x_1377: (word8) vector = "write of freed profile data"
val x_1378: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1377 (*"write of  ... data"*))
val x_1379: exn = con Fail_0 (x_1378)
val x_1380: unit = ()
val x_1381: word64 = 0x0:w64
val x_1382: word64 = 0x0:w64
val x_1383: word64 = 0x0:w64
val x_1384: word8 = 0x0:w8
val x_1385: word64 = 0x1:w64
val x_1386: (word8) vector = "NullString.fromString"
val x_1387: ((unit) ref, (word8) vector) tuple =
  (x_1443, x_1386 (*"NullStrin ... ring"*))
val x_1388: exn = con Fail8_0 (x_1387)
val x_1389: unit = ()
val tuple_55: unit = ()
val loop_4: lambdas_23 = con loopEnv_4 (tuple_55 (*()*))
val x_1390: unit = ()
val x_1391: list_6 = con nil_11
val x_1392: unit = ()
val x_1393: unit = ()
val x_1394: (word8) vector = "one two"
val x_1395: (word8) vector = "output"
val x_1396: unit = ()
val x_1397: bool = con true
val x_1398: unit = ()
val x_1399: unit = ()
val x_1400: word32 = 0x0:w32
val x_1401: (word8) vector = "partial write"
val x_1402: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1401 (*"partial write"*))
val x_1403: exn = con Fail_0 (x_1402)
val x_1404: unit = ()
val x_1405: unit = ()
val x_1406: (word8) vector = "Sequence.length"
val x_1407: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1406 (*"Sequence.length"*))
val x_1408: exn = con Fail_0 (x_1407)
val x_1409: unit = ()
val x_1410: bool = con true
val x_1411: bool = con false
val x_1412: unit = ()
val x_1413: bool = con true
val x_1414: word64 = 0x1:w64
val x_1415: unit = ()
val x_1416: word64 = 0x1:w64
val x_1417: word64 = 0x0:w64
val x_1418: unit = ()
val x_1419: unit = ()
val x_1420: unit = ()
val x_1421: (word8) vector = "Sequence.length"
val x_1422: ((unit) ref, (word8) vector) tuple =
  (x_1453, x_1421 (*"Sequence.length"*))
val x_1423: exn = con Fail_0 (x_1422)
val x_1424: unit = ()
val x_1425: bool = con true
val x_1426: word64 = 0x1:w64
val x_1427: t_34 = con NONE_13
val x_1428: word8 = 0xA:w8
val x_1429: word64 = 0x1:w64
val x_1430: bool = con false
val x_1431: bool = con true
val x_1432: unit = ()
val x_1433: bool = con true
val x_1434: word64 = 0x1:w64
val x_1435: unit = ()
val x_1436: word64 = 0x1:w64
val x_1437: word64 = 0x0:w64
val x_1438: unit = ()
val x_1439: unit = ()
val x_1440: (word8) vector = "output"
val x_1441: unit = ()
val x_1442: (word8) vector = "toplevel handler not installed"


(* Functions: *)
fun noinline main_0 (): {returns = Some (unit), raises = None} = L_0 ()
  block L_0 ()
    case x_2 (*con xEnv_0 (x_1)*) of
      xEnv_0 => L_1
  block L_1 (x_1484: unit)
    val x_1486: lambdas_482 = con xEnv_232 (x_1484)
    val x_1485: (lambdas_482) ref = prim Ref_ref[lambdas_482] (x_1486)
    case x_5 (*con xEnv_1 (x_4)*) of
      xEnv_1 => L_2
  block L_2 (x_1487: unit)
    val x_1489: lambdas_480 = con xEnv_230 (x_1487)
    val x_1488: (lambdas_480) ref = prim Ref_ref[lambdas_480] (x_1489)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_3
  block L_3 (env_0: unit)
    call L_4 (zextdFromInt32ToWord32_1 (env_0, sizeInBits_7 (*0x8:w32*))) handle _ => L_5
  block L_4 (sizeInBitsWord_0: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_6
  block L_6 (env_1: unit)
    call L_7 (zextdFromInt32ToWord32_1 (env_1, sizeInBits_15 (*0x10:w32*))) handle _ => L_5
  block L_7 (sizeInBitsWord_1: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_8
  block L_8 (env_2: unit)
    call L_9 (zextdFromInt32ToWord32_1 (env_2, sizeInBits_31 (*0x20:w32*))) handle _ => L_5
  block L_9 (sizeInBitsWord_2: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_10
  block L_10 (env_3: unit)
    call L_11 (zextdFromInt32ToWord32_1 (env_3, sizeInBits_32 (*0x40:w32*))) handle _ => L_5
  block L_11 (sizeInBitsWord_3: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_12
  block L_12 (env_4: unit)
    call L_13 (zextdFromInt32ToWord32_1 (env_4, sizeInBits_40 (*0x8:w32*))) handle _ => L_5
  block L_13 (sizeInBitsWord_4: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_14
  block L_14 (env_5: unit)
    call L_15 (zextdFromInt32ToWord32_1 (env_5, sizeInBits_48 (*0x10:w32*))) handle _ => L_5
  block L_15 (sizeInBitsWord_5: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_16
  block L_16 (env_6: unit)
    call L_17 (zextdFromInt32ToWord32_1 (env_6, sizeInBits_64 (*0x20:w32*))) handle _ => L_5
  block L_17 (sizeInBitsWord_6: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _116)*) of
      zextdFromInt32ToWord32Env_0 => L_18
  block L_18 (env_7: unit)
    call L_19 (zextdFromInt32ToWord32_1 (env_7, sizeInBits_65 (*0x40:w32*))) handle _ => L_5
  block L_19 (sizeInBitsWord_7: word32)
    case fromWord_0 (*con fromWo ... _190)*) of
      fromWordEnv_0 => L_20
  block L_20 (env_8: unit)
    call L_21 (fromWord_2 (env_8, x_191 (*0x0:w64*))) handle _ => L_5
  block L_21 (null_0: cpointer)
    case x_260 (*con xEnv_33 (x_259)*) of
      xEnv_33 => L_22
  block L_22 (x_1490: unit)
    val x_1491: lambdas_482 = con xEnv_233 (x_1490)
    val _: unit = prim Ref_assign[lambdas_482] (x_1485, x_1491)
    case x_263 (*con xEnv_34 (x_262)*) of
      xEnv_34 => L_23
  block L_23 (x_1492: unit)
    val x_1493: lambdas_480 = con xEnv_231 (x_1492)
    val _: unit = prim Ref_assign[lambdas_480] (x_1488, x_1493)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_24
  block L_24 (env_9: unit)
    call L_25 (x_1494 (env_9, x_1444)) handle _ => L_5
  block L_25 (x_1495: bool)
    case x_1495 of
      true => L_27 | false => L_26
  block L_26 ()
    val x_1496: (word32, word32) tuple = (sizeInBitsWord_4, sizeInBitsWord_0)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_28
  block L_28 (env_10: unit)
    call L_29 (x_1494 (env_10, x_1496)) handle _ => L_5
  block L_27 ()
    goto L_29 (x_266 (*con true*))
  block L_29 (x_1497: bool)
    case x_1497 of
      true => L_31 | false => L_30
  block L_30 ()
    case notb_0 (*con notbEn ... _132)*) of
      notbEnv_0 => L_32
  block L_32 (env_11: unit)
    call L_33 (notb_4 (env_11, x_271 (*0x0:w8*))) handle _ => L_5
  block L_33 (maxWord'_0: word8)
    case zextdFromInt32ToInt8_0 (*con zextdF ... _112)*) of
      zextdFromInt32ToInt8Env_0 => L_34
  block L_34 (env_12: unit)
    call L_35 (zextdFromInt32ToInt8_1 (env_12, x_272 (*0x0:w32*))) handle _ => L_5
  block L_35 (zero_1: word8)
    case zextdFromInt32ToInt8_0 (*con zextdF ... _112)*) of
      zextdFromInt32ToInt8Env_0 => L_36
  block L_36 (env_13: unit)
    call L_37 (zextdFromInt32ToInt8_1 (env_13, x_273 (*0x1:w32*))) handle _ => L_5
  block L_37 (one_0: word8)
    val x_1498: (word32, word32) tuple = (sizeInBitsWord_4, x_278 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_38
  block L_38 (env_14: unit)
    call L_39 (-_3 (env_14, x_1498)) handle _ => L_5
  block L_39 (x_1499: word32)
    val x_1500: (word8, word32) tuple = (one_0, x_1499)
    case x_275 (*con xEnv_36 (x_274)*) of
      xEnv_36 => L_40
  block L_40 (env_15: unit)
    call L_41 (x_1501 (env_15, x_1500)) handle _ => L_5
  block L_41 (minInt'_0: word8)
    case idFromInt8ToWord8_0 (*con idFrom ... _104)*) of
      idFromInt8ToWord8Env_0 => L_42
  block L_42 (env_16: unit)
    call L_43 (idFromInt8ToWord8_1 (env_16, zero_1)) handle _ => L_5
  block L_43 (x_1502: word8)
    case notb_0 (*con notbEn ... _132)*) of
      notbEnv_0 => L_44
  block L_44 (env_17: unit)
    call L_45 (notb_4 (env_17, x_1502)) handle _ => L_5
  block L_45 (x_1503: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... _108)*) of
      idFromWord8ToInt8Env_0 => L_46
  block L_46 (env_18: unit)
    call L_47 (idFromWord8ToInt8_1 (env_18, x_1503)) handle _ => L_5
  block L_47 (x_1504: word8)
    val x_1505: (word8, word32) tuple = (x_1504, x_279 (*0x1:w32*))
    case x_277 (*con xEnv_37 (x_276)*) of
      xEnv_37 => L_48
  block L_48 (env_19: unit)
    call L_49 (x_1506 (env_19, x_1505)) handle _ => L_5
  block L_49 (maxInt'_0: word8)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_50
  block L_50 (env_20: unit)
    call L_51 (x_1494 (env_20, x_1445)) handle _ => L_5
  block L_51 (x_1507: bool)
    case x_1507 of
      true => L_53 | false => L_52
  block L_52 ()
    val x_1508: (word32, word32) tuple = (sizeInBitsWord_5, sizeInBitsWord_1)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_54
  block L_54 (env_21: unit)
    call L_55 (x_1494 (env_21, x_1508)) handle _ => L_5
  block L_53 ()
    goto L_55 (x_280 (*con true*))
  block L_55 (x_1509: bool)
    case x_1509 of
      true => L_57 | false => L_56
  block L_56 ()
    case notb_1 (*con notbEn ... _135)*) of
      notbEnv_1 => L_58
  block L_58 (env_22: unit)
    call L_59 (notb_5 (env_22, x_285 (*0x0:w16*))) handle _ => L_5
  block L_59 (maxWord'_1: word16)
    case zextdFromInt32ToInt16_0 (*con zextdF ... _113)*) of
      zextdFromInt32ToInt16Env_0 => L_60
  block L_60 (env_23: unit)
    call L_61 (zextdFromInt32ToInt16_1 (env_23, x_286 (*0x0:w32*))) handle _ => L_5
  block L_61 (zero_2: word16)
    case zextdFromInt32ToInt16_0 (*con zextdF ... _113)*) of
      zextdFromInt32ToInt16Env_0 => L_62
  block L_62 (env_24: unit)
    call L_63 (zextdFromInt32ToInt16_1 (env_24, x_287 (*0x1:w32*))) handle _ => L_5
  block L_63 (one_1: word16)
    val x_1510: (word32, word32) tuple = (sizeInBitsWord_5, x_292 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_64
  block L_64 (env_25: unit)
    call L_65 (-_3 (env_25, x_1510)) handle _ => L_5
  block L_65 (x_1511: word32)
    val x_1512: (word16, word32) tuple = (one_1, x_1511)
    case x_289 (*con xEnv_38 (x_288)*) of
      xEnv_38 => L_66
  block L_66 (env_26: unit)
    call L_67 (x_1513 (env_26, x_1512)) handle _ => L_5
  block L_67 (minInt'_1: word16)
    case idFromInt16ToWord16_0 (*con idFrom ... _105)*) of
      idFromInt16ToWord16Env_0 => L_68
  block L_68 (env_27: unit)
    call L_69 (idFromInt16ToWord16_1 (env_27, zero_2)) handle _ => L_5
  block L_69 (x_1514: word16)
    case notb_1 (*con notbEn ... _135)*) of
      notbEnv_1 => L_70
  block L_70 (env_28: unit)
    call L_71 (notb_5 (env_28, x_1514)) handle _ => L_5
  block L_71 (x_1515: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... _109)*) of
      idFromWord16ToInt16Env_0 => L_72
  block L_72 (env_29: unit)
    call L_73 (idFromWord16ToInt16_1 (env_29, x_1515)) handle _ => L_5
  block L_73 (x_1516: word16)
    val x_1517: (word16, word32) tuple = (x_1516, x_293 (*0x1:w32*))
    case x_291 (*con xEnv_39 (x_290)*) of
      xEnv_39 => L_74
  block L_74 (env_30: unit)
    call L_75 (x_1518 (env_30, x_1517)) handle _ => L_5
  block L_75 (maxInt'_1: word16)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_76
  block L_76 (env_31: unit)
    call L_77 (x_1494 (env_31, x_1446)) handle _ => L_5
  block L_77 (x_1519: bool)
    case x_1519 of
      true => L_79 | false => L_78
  block L_78 ()
    val x_1520: (word32, word32) tuple = (sizeInBitsWord_6, sizeInBitsWord_2)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_80
  block L_80 (env_32: unit)
    call L_81 (x_1494 (env_32, x_1520)) handle _ => L_5
  block L_79 ()
    goto L_81 (x_294 (*con true*))
  block L_81 (x_1521: bool)
    case x_1521 of
      true => L_83 | false => L_82
  block L_82 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_84
  block L_84 (env_33: unit)
    call L_85 (zextdFromWord32ToWord32_1 (env_33, x_299 (*0x0:w32*))) handle _ => L_5
  block L_85 (zero_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_86
  block L_86 (env_34: unit)
    call L_87 (zextdFromWord32ToWord32_1 (env_34, x_300 (*0x1:w32*))) handle _ => L_5
  block L_87 (one_2: word32)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_88
  block L_88 (env_35: unit)
    call L_89 (notb_6 (env_35, zero_3)) handle _ => L_5
  block L_89 (maxWord'_2: word32)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_90
  block L_90 (env_36: unit)
    call L_91 (zextdFromInt32ToInt32_1 (env_36, x_301 (*0x0:w32*))) handle _ => L_5
  block L_91 (zero_4: word32)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_92
  block L_92 (env_37: unit)
    call L_93 (zextdFromInt32ToInt32_1 (env_37, x_302 (*0x1:w32*))) handle _ => L_5
  block L_93 (one_3: word32)
    val x_1522: (word32, word32) tuple = (sizeInBitsWord_6, x_307 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_94
  block L_94 (env_38: unit)
    call L_95 (-_3 (env_38, x_1522)) handle _ => L_5
  block L_95 (x_1523: word32)
    val x_1524: (word32, word32) tuple = (one_3, x_1523)
    case x_304 (*con xEnv_40 (x_303)*) of
      xEnv_40 => L_96
  block L_96 (env_39: unit)
    call L_97 (x_1525 (env_39, x_1524)) handle _ => L_5
  block L_97 (minInt'_2: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_98
  block L_98 (env_40: unit)
    call L_99 (idFromInt32ToWord32_1 (env_40, zero_4)) handle _ => L_5
  block L_99 (x_1526: word32)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_100
  block L_100 (env_41: unit)
    call L_101 (notb_6 (env_41, x_1526)) handle _ => L_5
  block L_101 (x_1527: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_102
  block L_102 (env_42: unit)
    call L_103 (idFromWord32ToInt32_1 (env_42, x_1527)) handle _ => L_5
  block L_103 (x_1528: word32)
    val x_1529: (word32, word32) tuple = (x_1528, x_308 (*0x1:w32*))
    case x_306 (*con xEnv_41 (x_305)*) of
      xEnv_41 => L_104
  block L_104 (env_43: unit)
    call L_105 (x_1530 (env_43, x_1529)) handle _ => L_5
  block L_105 (maxInt'_2: word32)
    val tuple_56: (word32, word32, word32) tuple = (zero_4, minInt'_2, one_3)
    val quot_0: lambdas_35 = con quotEnv_1 (tuple_56)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_106
  block L_106 (env_44: unit)
    call L_107 (x_1494 (env_44, x_1447)) handle _ => L_5
  block L_107 (x_1531: bool)
    case x_1531 of
      true => L_109 | false => L_108
  block L_108 ()
    val x_1532: (word32, word32) tuple = (sizeInBitsWord_7, sizeInBitsWord_3)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_110
  block L_110 (env_45: unit)
    call L_111 (x_1494 (env_45, x_1532)) handle _ => L_5
  block L_109 ()
    goto L_111 (x_310 (*con true*))
  block L_111 (x_1533: bool)
    case x_1533 of
      true => L_113 | false => L_112
  block L_112 ()
    case zextdFromWord32ToWord64_0 (*con zextdF ... _120)*) of
      zextdFromWord32ToWord64Env_0 => L_114
  block L_114 (env_46: unit)
    call L_115 (zextdFromWord32ToWord64_1 (env_46, x_315 (*0x0:w32*))) handle _ => L_5
  block L_115 (zero_5: word64)
    case zextdFromWord32ToWord64_0 (*con zextdF ... _120)*) of
      zextdFromWord32ToWord64Env_0 => L_116
  block L_116 (env_47: unit)
    call L_117 (zextdFromWord32ToWord64_1 (env_47, x_316 (*0x1:w32*))) handle _ => L_5
  block L_117 (one_4: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_118
  block L_118 (env_48: unit)
    call L_119 (notb_7 (env_48, zero_5)) handle _ => L_5
  block L_119 (maxWord'_3: word64)
    case zextdFromInt32ToInt64_0 (*con zextdF ... _115)*) of
      zextdFromInt32ToInt64Env_0 => L_120
  block L_120 (env_49: unit)
    call L_121 (zextdFromInt32ToInt64_1 (env_49, x_317 (*0x0:w32*))) handle _ => L_5
  block L_121 (zero_6: word64)
    case zextdFromInt32ToInt64_0 (*con zextdF ... _115)*) of
      zextdFromInt32ToInt64Env_0 => L_122
  block L_122 (env_50: unit)
    call L_123 (zextdFromInt32ToInt64_1 (env_50, x_318 (*0x1:w32*))) handle _ => L_5
  block L_123 (one_5: word64)
    val x_1534: (word32, word32) tuple = (sizeInBitsWord_7, x_323 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_124
  block L_124 (env_51: unit)
    call L_125 (-_3 (env_51, x_1534)) handle _ => L_5
  block L_125 (x_1535: word32)
    val x_1536: (word64, word32) tuple = (one_5, x_1535)
    case x_320 (*con xEnv_42 (x_319)*) of
      xEnv_42 => L_126
  block L_126 (env_52: unit)
    call L_127 (x_1537 (env_52, x_1536)) handle _ => L_5
  block L_127 (minInt'_3: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_128
  block L_128 (env_53: unit)
    call L_129 (idFromInt64ToWord64_1 (env_53, zero_6)) handle _ => L_5
  block L_129 (x_1538: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_130
  block L_130 (env_54: unit)
    call L_131 (notb_7 (env_54, x_1538)) handle _ => L_5
  block L_131 (x_1539: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_132
  block L_132 (env_55: unit)
    call L_133 (idFromWord64ToInt64_1 (env_55, x_1539)) handle _ => L_5
  block L_133 (x_1540: word64)
    val x_1541: (word64, word32) tuple = (x_1540, x_324 (*0x1:w32*))
    case x_322 (*con xEnv_43 (x_321)*) of
      xEnv_43 => L_134
  block L_134 (env_56: unit)
    call L_135 (x_1542 (env_56, x_1541)) handle _ => L_5
  block L_135 (maxInt'_3: word64)
    val tuple_57: (word64, word64, word64) tuple = (zero_6, minInt'_3, one_5)
    val quot_1: lambdas_248 = con quotEnv_0 (tuple_57)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_136
  block L_136 (env_57: unit)
    call L_137 (valOf_2 (env_57, precision_0 (*con SOME_0 ... s_40)*))) handle _ => L_5
  block L_137 (x_1543: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_138
  block L_138 (env_58: unit)
    call L_139 (valOf_2 (env_58, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_139 (x_1544: word32)
    val x_1545: (word32, word32) tuple = (x_1544, x_1543)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_140
  block L_140 (env_59: unit)
    call L_141 (>=_6 (env_59, x_1545)) handle _ => L_5
  block L_141 (x_1546: bool)
    case x_1546 of
      true => L_143 | false => L_142
  block L_142 ()
    goto L_144 (maxInt'_3)
  block L_143 ()
    case sextdFromInt8ToInt64_0 (*con sextdF ... _123)*) of
      sextdFromInt8ToInt64Env_0 => L_145
  block L_145 (env_60: unit)
    call L_144 (sextdFromInt8ToInt64_1 (env_60, maxInt'_0)) handle _ => L_5
  block L_144 (x_1547: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_146
  block L_146 (env_61: unit)
    call L_147 (valOf_2 (env_61, precision_1 (*con SOME_0 ... s_48)*))) handle _ => L_5
  block L_147 (x_1548: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_148
  block L_148 (env_62: unit)
    call L_149 (valOf_2 (env_62, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_149 (x_1549: word32)
    val x_1550: (word32, word32) tuple = (x_1549, x_1548)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_150
  block L_150 (env_63: unit)
    call L_151 (>=_6 (env_63, x_1550)) handle _ => L_5
  block L_151 (x_1551: bool)
    case x_1551 of
      true => L_153 | false => L_152
  block L_152 ()
    goto L_154 (maxInt'_3)
  block L_153 ()
    case sextdFromInt16ToInt64_0 (*con sextdF ... _124)*) of
      sextdFromInt16ToInt64Env_0 => L_155
  block L_155 (env_64: unit)
    call L_154 (sextdFromInt16ToInt64_1 (env_64, maxInt'_1)) handle _ => L_5
  block L_154 (x_1552: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_156
  block L_156 (env_65: unit)
    call L_157 (valOf_2 (env_65, precision_2 (*con SOME_0 ... s_64)*))) handle _ => L_5
  block L_157 (x_1553: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_158
  block L_158 (env_66: unit)
    call L_159 (valOf_2 (env_66, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_159 (x_1554: word32)
    val x_1555: (word32, word32) tuple = (x_1554, x_1553)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_160
  block L_160 (env_67: unit)
    call L_161 (>=_6 (env_67, x_1555)) handle _ => L_5
  block L_161 (x_1556: bool)
    case x_1556 of
      true => L_163 | false => L_162
  block L_162 ()
    goto L_164 (maxInt'_3)
  block L_163 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_165
  block L_165 (env_68: unit)
    call L_164 (sextdFromInt32ToInt64_1 (env_68, maxInt'_2)) handle _ => L_5
  block L_164 (x_1557: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_166
  block L_166 (env_69: unit)
    call L_167 (valOf_2 (env_69, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_167 (x_1558: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_168
  block L_168 (env_70: unit)
    call L_169 (valOf_2 (env_70, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_169 (x_1559: word32)
    val x_1560: (word32, word32) tuple = (x_1559, x_1558)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_170
  block L_170 (env_71: unit)
    call L_171 (>=_6 (env_71, x_1560)) handle _ => L_5
  block L_171 (x_1561: bool)
    case x_1561 of
      true => L_173 | false => L_172
  block L_172 ()
    goto L_174 (maxInt'_3)
  block L_173 ()
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_175
  block L_175 (env_72: unit)
    call L_174 (sextdFromInt64ToInt64_1 (env_72, maxInt'_3)) handle _ => L_5
  block L_174 (x_1562: word64)
    val arrayAlloc_0: lambdas_484 = con arrayAllocEnv_0 (x_1557)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_176
  block L_176 (env_73: unit)
    call L_177 (valOf_3 (env_73, precision_0 (*con SOME_0 ... s_40)*))) handle _ => L_5
  block L_177 (x_1563: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_178
  block L_178 (env_74: unit)
    call L_179 (valOf_3 (env_74, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_179 (x_1564: word32)
    val x_1565: (word32, word32) tuple = (x_1564, x_1563)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_180
  block L_180 (env_75: unit)
    call L_181 (>=_6 (env_75, x_1565)) handle _ => L_5
  block L_181 (x_1566: bool)
    case x_1566 of
      true => L_183 | false => L_182
  block L_182 ()
    goto L_184 (maxInt'_3)
  block L_183 ()
    case sextdFromInt8ToInt64_0 (*con sextdF ... _123)*) of
      sextdFromInt8ToInt64Env_0 => L_185
  block L_185 (env_76: unit)
    call L_184 (sextdFromInt8ToInt64_1 (env_76, maxInt'_0)) handle _ => L_5
  block L_184 (x_1567: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_186
  block L_186 (env_77: unit)
    call L_187 (valOf_3 (env_77, precision_1 (*con SOME_0 ... s_48)*))) handle _ => L_5
  block L_187 (x_1568: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_188
  block L_188 (env_78: unit)
    call L_189 (valOf_3 (env_78, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_189 (x_1569: word32)
    val x_1570: (word32, word32) tuple = (x_1569, x_1568)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_190
  block L_190 (env_79: unit)
    call L_191 (>=_6 (env_79, x_1570)) handle _ => L_5
  block L_191 (x_1571: bool)
    case x_1571 of
      true => L_193 | false => L_192
  block L_192 ()
    goto L_194 (maxInt'_3)
  block L_193 ()
    case sextdFromInt16ToInt64_0 (*con sextdF ... _124)*) of
      sextdFromInt16ToInt64Env_0 => L_195
  block L_195 (env_80: unit)
    call L_194 (sextdFromInt16ToInt64_1 (env_80, maxInt'_1)) handle _ => L_5
  block L_194 (x_1572: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_196
  block L_196 (env_81: unit)
    call L_197 (valOf_3 (env_81, precision_2 (*con SOME_0 ... s_64)*))) handle _ => L_5
  block L_197 (x_1573: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_198
  block L_198 (env_82: unit)
    call L_199 (valOf_3 (env_82, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_199 (x_1574: word32)
    val x_1575: (word32, word32) tuple = (x_1574, x_1573)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_200
  block L_200 (env_83: unit)
    call L_201 (>=_6 (env_83, x_1575)) handle _ => L_5
  block L_201 (x_1576: bool)
    case x_1576 of
      true => L_203 | false => L_202
  block L_202 ()
    goto L_204 (maxInt'_3)
  block L_203 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_205
  block L_205 (env_84: unit)
    call L_204 (sextdFromInt32ToInt64_1 (env_84, maxInt'_2)) handle _ => L_5
  block L_204 (x_1577: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_206
  block L_206 (env_85: unit)
    call L_207 (valOf_3 (env_85, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_207 (x_1578: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_208
  block L_208 (env_86: unit)
    call L_209 (valOf_3 (env_86, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_209 (x_1579: word32)
    val x_1580: (word32, word32) tuple = (x_1579, x_1578)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_210
  block L_210 (env_87: unit)
    call L_211 (>=_6 (env_87, x_1580)) handle _ => L_5
  block L_211 (x_1581: bool)
    case x_1581 of
      true => L_213 | false => L_212
  block L_212 ()
    goto L_214 (maxInt'_3)
  block L_213 ()
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_215
  block L_215 (env_88: unit)
    call L_214 (sextdFromInt64ToInt64_1 (env_88, maxInt'_3)) handle _ => L_5
  block L_214 (x_1582: word64)
    val arrayAlloc_1: lambdas_27 = con arrayAllocEnv_1 (x_1577)
    val sequence_0: lambdas_26 = con sequenceEnv_0 (arrayAlloc_1)
    val tuple_58: (word32, word64) tuple = (sizeInBitsWord_3, zero_5)
    val sextdFromInt64_0: lambdas_491 = con sextdFromInt64Env_0 (tuple_58)
    call L_216 (quot_2 (tuple_56, x_1451)) handle _ => L_5
  block L_216 (x_1583: word32)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_217
  block L_217 (env_89: unit)
    call L_218 (zextdFromInt32ToWord64_1 (env_89, x_1583)) handle _ => L_5
  block L_218 (bytesPerMPLimb_0: word64)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_219
  block L_219 (env_90: unit)
    call L_220 (zextdFromInt32ToWord64_1 (env_90, bytes_0 (*0x18:w32*))) handle _ => L_5
  block L_220 (bytesPerSequenceMetaData_0: word64)
    val tuple_59: (word64, word64) tuple =
      (bytesPerMPLimb_0, bytesPerSequenceMetaData_0)
    val reserve_0: lambdas_492 = con reserveEnv_0 (tuple_59)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_221
  block L_221 (env_91: unit)
    call L_222 (idFromInt64ToWord64_1 (env_91, minInt'_3)) handle _ => L_5
  block L_222 (x_1584: word64)
    val x_1585: (word64, word32) tuple = (x_1584, x_370 (*0x1:w32*))
    case ~>>?_0 (*con ~>>?En ... _149)*) of
      ~>>?Env_0 => L_223
  block L_223 (env_92: unit)
    call L_224 (~>>?_1 (env_92, x_1585)) handle _ => L_5
  block L_224 (x_1586: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_225
  block L_225 (env_93: unit)
    call L_226 (idFromWord64ToInt64_1 (env_93, x_1586)) handle _ => L_5
  block L_226 (x_1587: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_227
  block L_227 (env_94: unit)
    call L_228 (zextdFromInt64ToWord64_1 (env_94, x_1587)) handle _ => L_5
  block L_228 (badObjptrWord_0: word64)
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_229
  block L_229 (env_95: unit)
    call L_230 (addTag_1 (env_95, badObjptrWord_0)) handle _ => L_5
  block L_230 (badObjptrWordTagged_0: word64)
    case x_167 (*con xEnv_23 (x_166)*) of
      xEnv_23 => L_231
  block L_231 (env_96: unit)
    call L_232 (x_1588 (env_96, x_1587)) handle _ => L_5
  block L_232 (x_1589: word64)
    call L_233 (sextdFromInt64_1 (tuple_58, x_1589)) handle _ => L_5
  block L_233 (negBadIntInf_0: intInf)
    val tuple_61:
      (word64, word32, word32, word32, lambdas_35, word32, word32, word32) tuple =
      (bytesPerSequenceMetaData_0,
       minInt'_2,
       one_3,
       zero_4,
       quot_0,
       sizeInBitsWord_2,
       zero_3,
       one_2)
    val messagers_0: (list_0) ref = prim Ref_ref[list_0] (x_385 (*con nil_1*))
    val exnMessage_0: lambdas_32 = con exnMessageEnv_0 (messagers_0)
    val tuple_60: (lambdas_27, lambdas_484, lambdas_26) tuple =
      (arrayAlloc_1, arrayAlloc_0, sequence_0)
    val concat_0: lambdas_31 = con concatEnv_0 (tuple_60)
    val new_1: lambdas_286 = con newEnv_1 (arrayAlloc_0)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_234
  block L_234 (env_97: unit)
    call L_235 (range_1 (env_97, x_1456)) handle _ => L_5
  block L_235 (x_1590: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_236
  block L_236 (env_98: unit)
    call L_237 (fromIntForLength_1 (env_98, x_432 (*0x100:w32*))) handle _ => L_5
  block L_237 (x_1591: word64)
    val x_1592: (word64, word64) tuple = (x_1591, x_1557)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_238
  block L_238 (env_99: unit)
    call L_239 (>_5 (env_99, x_1592)) handle _ => L_5
  block L_239 (x_1593: bool)
    case x_1593 of
      true => L_241 | false => L_240
  block L_240 ()
    val x_1594: (t_0) array = prim Array_alloc[t_0] (x_1591)
    val tuple_62: (word64, lambdas_1, (t_0) array) tuple =
      (x_1591, x_1590, x_1594)
    call L_242 (loop_5 (tuple_62, x_1457)) handle _ => L_5
  block L_242 (b_0: unit)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_243
  block L_243 (env_100: unit)
    call L_244 (range_1 (env_100, x_1458)) handle _ => L_5
  block L_244 (x_1595: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_245
  block L_245 (env_101: unit)
    call L_246 (fromIntForLength_1 (env_101, x_432 (*0x100:w32*))) handle _ => L_5
  block L_246 (x_1596: word64)
    val x_1597: (word64, word64) tuple = (x_1596, x_1557)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_247
  block L_247 (env_102: unit)
    call L_248 (>_5 (env_102, x_1597)) handle _ => L_5
  block L_248 (x_1598: bool)
    case x_1598 of
      true => L_250 | false => L_249
  block L_249 ()
    val x_1599: (t_0) array = prim Array_alloc[t_0] (x_1596)
    val tuple_63: (word64, lambdas_1, (t_0) array) tuple =
      (x_1596, x_1595, x_1599)
    call L_251 (loop_6 (tuple_63, x_1459)) handle _ => L_5
  block L_251 (b_1: unit)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_252
  block L_252 (env_103: unit)
    call L_253 (range_1 (env_103, x_1460)) handle _ => L_5
  block L_253 (x_1600: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_254
  block L_254 (env_104: unit)
    call L_255 (fromIntForLength_1 (env_104, x_432 (*0x100:w32*))) handle _ => L_5
  block L_255 (x_1601: word64)
    val x_1602: (word64, word64) tuple = (x_1601, x_1557)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_256
  block L_256 (env_105: unit)
    call L_257 (>_5 (env_105, x_1602)) handle _ => L_5
  block L_257 (x_1603: bool)
    case x_1603 of
      true => L_259 | false => L_258
  block L_258 ()
    val x_1604: (t_0) array = prim Array_alloc[t_0] (x_1601)
    val tuple_64: (word64, lambdas_1, (t_0) array) tuple =
      (x_1601, x_1600, x_1604)
    call L_260 (loop_7 (tuple_64, x_1461)) handle _ => L_5
  block L_260 (b_2: unit)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_261
  block L_261 (env_106: unit)
    call L_262 (range_1 (env_106, x_1462)) handle _ => L_5
  block L_262 (x_1605: lambdas_1)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_263
  block L_263 (env_107: unit)
    call L_264 (range_1 (env_107, x_1463)) handle _ => L_5
  block L_264 (x_1606: lambdas_1)
    case range_0 (*con rangeE ... e_36)*) of
      rangeEnv_0 => L_265
  block L_265 (env_108: unit)
    call L_266 (range_1 (env_108, x_1464)) handle _ => L_5
  block L_266 (x_1607: lambdas_1)
    val x_1613: (lambdas_1, list_1) tuple = (x_1607, x_470 (*con nil_2*))
    val x_1612: list_1 = con ::_4 (x_1613)
    val x_1611: (lambdas_1, list_1) tuple = (x_1606, x_1612)
    val x_1610: list_1 = con ::_4 (x_1611)
    val x_1609: (lambdas_1, list_1) tuple = (x_1605, x_1610)
    val x_1608: list_1 = con ::_4 (x_1609)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_267
  block L_267 (env_109: unit)
    call L_268 (fromIntForLength_1 (env_109, x_432 (*0x100:w32*))) handle _ => L_5
  block L_268 (x_1614: word64)
    val x_1615: (word64, word64) tuple = (x_1614, x_1557)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_269
  block L_269 (env_110: unit)
    call L_270 (>_5 (env_110, x_1615)) handle _ => L_5
  block L_270 (x_1616: bool)
    case x_1616 of
      true => L_272 | false => L_271
  block L_271 ()
    val x_1617: (t_0) array = prim Array_alloc[t_0] (x_1614)
    val tuple_65: (word64, list_1, (t_0) array) tuple = (x_1614, x_1608, x_1617)
    call L_273 (loop_8 (tuple_65, x_1465)) handle _ => L_5
  block L_273 (b_3: unit)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_274
  block L_274 (env_111: unit)
    call L_275 (fromIntForLength_1 (env_111, x_432 (*0x100:w32*))) handle _ => L_5
  block L_275 (x_1618: word64)
    val x_1619: (word64, word64) tuple = (x_1618, x_1557)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_276
  block L_276 (env_112: unit)
    call L_277 (>_5 (env_112, x_1619)) handle _ => L_5
  block L_277 (x_1620: bool)
    case x_1620 of
      true => L_279 | false => L_278
  block L_278 ()
    val x_1621: (bool) array = prim Array_alloc[bool] (x_1618)
    val tuple_66: (word64, (bool) array) tuple = (x_1618, x_1621)
    call L_280 (loop_9 (tuple_66, x_1466)) handle _ => L_5
  block L_280 (b_4: unit)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_281
  block L_281 (env_113: unit)
    call L_282 (zextdFromInt32ToInt32_1 (env_113, sizeInBits_40 (*0x8:w32*))) handle _ => L_5
  block L_282 (precision'_0: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_283
  block L_283 (env_114: unit)
    call L_284 (zextdFromWord32ToWord32_1 (env_114, sizeInBitsWord_4)) handle _ => L_5
  block L_284 (sizeInBitsWord_8: word32)
    val tuple_68: (word32, word8) tuple = (sizeInBitsWord_8, zero_1)
    val <<_0: lambdas_165 = con <<Env_7 (tuple_68)
    val tuple_67: (word32, word8) tuple = (sizeInBitsWord_8, zero_1)
    val >>_0: lambdas_164 = con >>Env_7 (tuple_67)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_285
  block L_285 (env_115: unit)
    call L_286 (zextdFromInt32ToInt32_1 (env_115, sizeInBits_48 (*0x10:w32*))) handle _ => L_5
  block L_286 (precision'_1: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_287
  block L_287 (env_116: unit)
    call L_288 (zextdFromWord32ToWord32_1 (env_116, sizeInBitsWord_5)) handle _ => L_5
  block L_288 (sizeInBitsWord_9: word32)
    val tuple_70: (word32, word16) tuple = (sizeInBitsWord_9, zero_2)
    val <<_1: lambdas_157 = con <<Env_6 (tuple_70)
    val tuple_69: (word32, word16) tuple = (sizeInBitsWord_9, zero_2)
    val >>_1: lambdas_156 = con >>Env_6 (tuple_69)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_289
  block L_289 (env_117: unit)
    call L_290 (zextdFromInt32ToInt32_1 (env_117, sizeInBits_64 (*0x20:w32*))) handle _ => L_5
  block L_290 (precision'_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_291
  block L_291 (env_118: unit)
    call L_292 (zextdFromWord32ToWord32_1 (env_118, sizeInBitsWord_6)) handle _ => L_5
  block L_292 (sizeInBitsWord_10: word32)
    val tuple_72: (word32, word32) tuple = (sizeInBitsWord_10, zero_4)
    val <<_2: lambdas_149 = con <<Env_5 (tuple_72)
    val tuple_71: (word32, word32) tuple = (sizeInBitsWord_10, zero_4)
    val >>_2: lambdas_148 = con >>Env_5 (tuple_71)
    val x_1622: (word32, word32) tuple = (precision'_2, x_494 (*0x1:w32*))
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_293
  block L_293 (env_119: unit)
    call L_294 (x_1623 (env_119, x_1622)) handle _ => L_5
  block L_294 (maxNumDigits_0: word32)
    val x_1625: (lambdas_286, word32) tuple = (new_1, maxNumDigits_0)
    val x_1624: lambdas_483 = con xEnv_234 (x_1625)
    call L_295 (x_1626 (x_1625, x_496 (*()*))) handle _ => L_5
  block L_295 (x_1627: (word8) array)
    val x_1628: (bool) ref = prim Ref_ref[bool] (x_497 (*con false*))
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_296
  block L_296 (env_120: unit)
    call L_297 (zextdFromInt32ToInt32_1 (env_120, sizeInBits_65 (*0x40:w32*))) handle _ => L_5
  block L_297 (precision'_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_298
  block L_298 (env_121: unit)
    call L_299 (zextdFromWord32ToWord32_1 (env_121, sizeInBitsWord_7)) handle _ => L_5
  block L_299 (sizeInBitsWord_11: word32)
    val tuple_74: (word32, word64) tuple = (sizeInBitsWord_11, zero_6)
    val <<_3: lambdas_141 = con <<Env_4 (tuple_74)
    val tuple_73: (word32, word64) tuple = (sizeInBitsWord_11, zero_6)
    val >>_3: lambdas_140 = con >>Env_4 (tuple_73)
    val x_1629: (word32, word32) tuple = (precision'_3, x_499 (*0x1:w32*))
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_300
  block L_300 (env_122: unit)
    call L_301 (x_1623 (env_122, x_1629)) handle _ => L_5
  block L_301 (maxNumDigits_1: word32)
    val x_1631: (lambdas_286, word32) tuple = (new_1, maxNumDigits_1)
    val x_1630: lambdas_251 = con xEnv_228 (x_1631)
    call L_302 (x_1632 (x_1631, x_501 (*()*))) handle _ => L_5
  block L_302 (x_1633: (word8) array)
    val x_1634: (bool) ref = prim Ref_ref[bool] (x_502 (*con false*))
    val tuple_75:
      (word32,
       lambdas_248,
       word64,
       word64,
       word64,
       (word8) array,
       lambdas_251,
       (bool) ref) tuple =
      (maxNumDigits_1, quot_1, one_5, minInt'_3, zero_6, x_1633, x_1630, x_1634)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_303
  block L_303 (env_123: unit)
    call L_304 (zextdFromInt32ToInt32_1 (env_123, sizeInBits_7 (*0x8:w32*))) handle _ => L_5
  block L_304 (wordSize_0: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_305
  block L_305 (env_124: unit)
    call L_306 (zextdFromWord32ToWord32_1 (env_124, sizeInBitsWord_0)) handle _ => L_5
  block L_306 (sizeInBitsWord_12: word32)
    val <<_4: lambdas_133 = con <<Env_3 (sizeInBitsWord_12)
    val >>_4: lambdas_132 = con >>Env_3 (sizeInBitsWord_12)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_307
  block L_307 (env_125: unit)
    call L_308 (zextdFromInt32ToInt32_1 (env_125, sizeInBits_15 (*0x10:w32*))) handle _ => L_5
  block L_308 (wordSize_1: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_309
  block L_309 (env_126: unit)
    call L_310 (zextdFromWord32ToWord32_1 (env_126, sizeInBitsWord_1)) handle _ => L_5
  block L_310 (sizeInBitsWord_13: word32)
    val <<_5: lambdas_125 = con <<Env_2 (sizeInBitsWord_13)
    val >>_5: lambdas_124 = con >>Env_2 (sizeInBitsWord_13)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_311
  block L_311 (env_127: unit)
    call L_312 (zextdFromInt32ToInt32_1 (env_127, sizeInBits_31 (*0x20:w32*))) handle _ => L_5
  block L_312 (wordSize_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_313
  block L_313 (env_128: unit)
    call L_314 (zextdFromWord32ToWord32_1 (env_128, sizeInBitsWord_2)) handle _ => L_5
  block L_314 (sizeInBitsWord_14: word32)
    val tuple_77: (word32, word32) tuple = (sizeInBitsWord_14, zero_3)
    val <<_6: lambdas_117 = con <<Env_1 (tuple_77)
    val tuple_76: (word32, word32) tuple = (sizeInBitsWord_14, zero_3)
    val >>_6: lambdas_116 = con >>Env_1 (tuple_76)
    case32 sizeInBitsWord_2 of
      0x8:w32 => L_318
    | 0x20:w32 => L_317
    | 0x40:w32 => L_316
    | 0x10:w32 => L_315
    | _ => L_319
  block L_319 ()
    goto L_5 (x_522 (*con Fail_0 (x_521)*))
  block L_315 ()
    val x_1636: lambdas_246 = #0 (x_1470)
    val x_1635: word32 = #1 (x_1470)
    case x_1636 of
      stEnv_0 => L_320
  block L_320 (x_1637: unit)
    val x_1639: lambdas_245 = con stEnv_1 (x_1637)
    val x_1638: (lambdas_245, word32) tuple = (x_1639, x_1635)
    goto L_321 (x_1638)
  block L_316 ()
    val x_1641: lambdas_242 = #0 (x_1469)
    val x_1640: word32 = #1 (x_1469)
    case x_1641 of
      xEnv_49 => L_322
  block L_322 (x_1642: unit)
    val x_1644: lambdas_245 = con xEnv_216 (x_1642)
    val x_1643: (lambdas_245, word32) tuple = (x_1644, x_1640)
    goto L_321 (x_1643)
  block L_317 ()
    val x_1646: lambdas_243 = #0 (x_1468)
    val x_1645: word32 = #1 (x_1468)
    case x_1646 of
      xEnv_48 => L_323
  block L_323 (x_1647: unit)
    val x_1649: lambdas_245 = con xEnv_214 (x_1647)
    val x_1648: (lambdas_245, word32) tuple = (x_1649, x_1645)
    goto L_321 (x_1648)
  block L_318 ()
    val x_1651: lambdas_244 = #0 (x_1467)
    val x_1650: word32 = #1 (x_1467)
    case x_1651 of
      xEnv_47 => L_324
  block L_324 (x_1652: unit)
    val x_1654: lambdas_245 = con xEnv_215 (x_1652)
    val x_1653: (lambdas_245, word32) tuple = (x_1654, x_1650)
    goto L_321 (x_1653)
  block L_321 (x_1655: (lambdas_245, word32) tuple)
    case zextdFromInt32ToInt32_0 (*con zextdF ... _114)*) of
      zextdFromInt32ToInt32Env_0 => L_325
  block L_325 (env_129: unit)
    call L_326 (zextdFromInt32ToInt32_1 (env_129, sizeInBits_32 (*0x40:w32*))) handle _ => L_5
  block L_326 (wordSize_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_327
  block L_327 (env_130: unit)
    call L_328 (zextdFromWord32ToWord32_1 (env_130, sizeInBitsWord_3)) handle _ => L_5
  block L_328 (sizeInBitsWord_15: word32)
    val tuple_79: (word32, word64) tuple = (sizeInBitsWord_15, zero_5)
    val <<_7: lambdas_109 = con <<Env_0 (tuple_79)
    val tuple_78: (word32, word64) tuple = (sizeInBitsWord_15, zero_5)
    val >>_7: lambdas_108 = con >>Env_0 (tuple_78)
    call L_329 (fmt_0 (tuple_75, x_534 (*con BIN_1*))) handle _ => L_5
  block L_329 (x_1656: lambdas_285)
    val x_1657: (word32, lambdas_285) tuple = (x_533 (*0x2:w32*), x_1656)
    call L_330 (mkBigCvt_0 (tuple_61, x_1657)) handle _ => L_5
  block L_330 (binCvt_0: lambdas_284)
    call L_331 (fmt_0 (tuple_75, x_536 (*con OCT_1*))) handle _ => L_5
  block L_331 (x_1658: lambdas_285)
    val x_1659: (word32, lambdas_285) tuple = (x_535 (*0x8:w32*), x_1658)
    call L_332 (mkBigCvt_0 (tuple_61, x_1659)) handle _ => L_5
  block L_332 (octCvt_0: lambdas_284)
    call L_333 (fmt_0 (tuple_75, x_538 (*con DEC_1*))) handle _ => L_5
  block L_333 (x_1660: lambdas_285)
    val x_1661: (word32, lambdas_285) tuple = (x_537 (*0xA:w32*), x_1660)
    call L_334 (mkBigCvt_0 (tuple_61, x_1661)) handle _ => L_5
  block L_334 (decCvt_0: lambdas_284)
    call L_335 (fmt_0 (tuple_75, x_540 (*con HEX_0*))) handle _ => L_5
  block L_335 (x_1662: lambdas_285)
    val x_1663: (word32, lambdas_285) tuple = (x_539 (*0x10:w32*), x_1662)
    call L_336 (mkBigCvt_0 (tuple_61, x_1663)) handle _ => L_5
  block L_336 (hexCvt_0: lambdas_284)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_337
  block L_337 (env_131: unit)
    call L_338 (sextdFromInt32ToInt32_1 (env_131, sizeInBits_33 (*0x1:w32*))) handle _ => L_5
  block L_338 (precision'_4: word32)
    val x_1664: (word32, word32) tuple = (precision'_4, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_339
  block L_339 (env_132: unit)
    call L_340 (<_5 (env_132, x_1664)) handle _ => L_5
  block L_340 (x_1665: bool)
    case x_1665 of
      true => L_342 | false => L_341
  block L_341 ()
    goto L_5 (x_544 (*con Fail_0 (x_543)*))
  block L_342 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_343
  block L_343 (env_133: unit)
    call L_344 (sextdFromInt32ToInt32_1 (env_133, sizeInBits_34 (*0x2:w32*))) handle _ => L_5
  block L_344 (precision'_5: word32)
    val x_1666: (word32, word32) tuple = (precision'_5, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_345
  block L_345 (env_134: unit)
    call L_346 (<_5 (env_134, x_1666)) handle _ => L_5
  block L_346 (x_1667: bool)
    case x_1667 of
      true => L_348 | false => L_347
  block L_347 ()
    goto L_5 (x_548 (*con Fail_0 (x_547)*))
  block L_348 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_349
  block L_349 (env_135: unit)
    call L_350 (sextdFromInt32ToInt32_1 (env_135, sizeInBits_35 (*0x3:w32*))) handle _ => L_5
  block L_350 (precision'_6: word32)
    val x_1668: (word32, word32) tuple = (precision'_6, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_351
  block L_351 (env_136: unit)
    call L_352 (<_5 (env_136, x_1668)) handle _ => L_5
  block L_352 (x_1669: bool)
    case x_1669 of
      true => L_354 | false => L_353
  block L_353 ()
    goto L_5 (x_552 (*con Fail_0 (x_551)*))
  block L_354 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_355
  block L_355 (env_137: unit)
    call L_356 (sextdFromInt32ToInt32_1 (env_137, sizeInBits_36 (*0x4:w32*))) handle _ => L_5
  block L_356 (precision'_7: word32)
    val x_1670: (word32, word32) tuple = (precision'_7, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_357
  block L_357 (env_138: unit)
    call L_358 (<_5 (env_138, x_1670)) handle _ => L_5
  block L_358 (x_1671: bool)
    case x_1671 of
      true => L_360 | false => L_359
  block L_359 ()
    goto L_5 (x_556 (*con Fail_0 (x_555)*))
  block L_360 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_361
  block L_361 (env_139: unit)
    call L_362 (sextdFromInt32ToInt32_1 (env_139, sizeInBits_37 (*0x5:w32*))) handle _ => L_5
  block L_362 (precision'_8: word32)
    val x_1672: (word32, word32) tuple = (precision'_8, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_363
  block L_363 (env_140: unit)
    call L_364 (<_5 (env_140, x_1672)) handle _ => L_5
  block L_364 (x_1673: bool)
    case x_1673 of
      true => L_366 | false => L_365
  block L_365 ()
    goto L_5 (x_560 (*con Fail_0 (x_559)*))
  block L_366 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_367
  block L_367 (env_141: unit)
    call L_368 (sextdFromInt32ToInt32_1 (env_141, sizeInBits_38 (*0x6:w32*))) handle _ => L_5
  block L_368 (precision'_9: word32)
    val x_1674: (word32, word32) tuple = (precision'_9, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_369
  block L_369 (env_142: unit)
    call L_370 (<_5 (env_142, x_1674)) handle _ => L_5
  block L_370 (x_1675: bool)
    case x_1675 of
      true => L_372 | false => L_371
  block L_371 ()
    goto L_5 (x_564 (*con Fail_0 (x_563)*))
  block L_372 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_373
  block L_373 (env_143: unit)
    call L_374 (sextdFromInt32ToInt32_1 (env_143, sizeInBits_39 (*0x7:w32*))) handle _ => L_5
  block L_374 (precision'_10: word32)
    val x_1676: (word32, word32) tuple = (precision'_10, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_375
  block L_375 (env_144: unit)
    call L_376 (<_5 (env_144, x_1676)) handle _ => L_5
  block L_376 (x_1677: bool)
    case x_1677 of
      true => L_378 | false => L_377
  block L_377 ()
    goto L_5 (x_568 (*con Fail_0 (x_567)*))
  block L_378 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_379
  block L_379 (env_145: unit)
    call L_380 (sextdFromInt32ToInt32_1 (env_145, sizeInBits_41 (*0x9:w32*))) handle _ => L_5
  block L_380 (precision'_11: word32)
    val x_1678: (word32, word32) tuple = (precision'_11, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_381
  block L_381 (env_146: unit)
    call L_382 (<_5 (env_146, x_1678)) handle _ => L_5
  block L_382 (x_1679: bool)
    case x_1679 of
      true => L_384 | false => L_383
  block L_383 ()
    goto L_5 (x_572 (*con Fail_0 (x_571)*))
  block L_384 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_385
  block L_385 (env_147: unit)
    call L_386 (sextdFromInt32ToInt32_1 (env_147, sizeInBits_42 (*0xA:w32*))) handle _ => L_5
  block L_386 (precision'_12: word32)
    val x_1680: (word32, word32) tuple = (precision'_12, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_387
  block L_387 (env_148: unit)
    call L_388 (<_5 (env_148, x_1680)) handle _ => L_5
  block L_388 (x_1681: bool)
    case x_1681 of
      true => L_390 | false => L_389
  block L_389 ()
    goto L_5 (x_576 (*con Fail_0 (x_575)*))
  block L_390 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_391
  block L_391 (env_149: unit)
    call L_392 (sextdFromInt32ToInt32_1 (env_149, sizeInBits_43 (*0xB:w32*))) handle _ => L_5
  block L_392 (precision'_13: word32)
    val x_1682: (word32, word32) tuple = (precision'_13, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_393
  block L_393 (env_150: unit)
    call L_394 (<_5 (env_150, x_1682)) handle _ => L_5
  block L_394 (x_1683: bool)
    case x_1683 of
      true => L_396 | false => L_395
  block L_395 ()
    goto L_5 (x_580 (*con Fail_0 (x_579)*))
  block L_396 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_397
  block L_397 (env_151: unit)
    call L_398 (sextdFromInt32ToInt32_1 (env_151, sizeInBits_44 (*0xC:w32*))) handle _ => L_5
  block L_398 (precision'_14: word32)
    val x_1684: (word32, word32) tuple = (precision'_14, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_399
  block L_399 (env_152: unit)
    call L_400 (<_5 (env_152, x_1684)) handle _ => L_5
  block L_400 (x_1685: bool)
    case x_1685 of
      true => L_402 | false => L_401
  block L_401 ()
    goto L_5 (x_584 (*con Fail_0 (x_583)*))
  block L_402 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_403
  block L_403 (env_153: unit)
    call L_404 (sextdFromInt32ToInt32_1 (env_153, sizeInBits_45 (*0xD:w32*))) handle _ => L_5
  block L_404 (precision'_15: word32)
    val x_1686: (word32, word32) tuple = (precision'_15, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_405
  block L_405 (env_154: unit)
    call L_406 (<_5 (env_154, x_1686)) handle _ => L_5
  block L_406 (x_1687: bool)
    case x_1687 of
      true => L_408 | false => L_407
  block L_407 ()
    goto L_5 (x_588 (*con Fail_0 (x_587)*))
  block L_408 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_409
  block L_409 (env_155: unit)
    call L_410 (sextdFromInt32ToInt32_1 (env_155, sizeInBits_46 (*0xE:w32*))) handle _ => L_5
  block L_410 (precision'_16: word32)
    val x_1688: (word32, word32) tuple = (precision'_16, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_411
  block L_411 (env_156: unit)
    call L_412 (<_5 (env_156, x_1688)) handle _ => L_5
  block L_412 (x_1689: bool)
    case x_1689 of
      true => L_414 | false => L_413
  block L_413 ()
    goto L_5 (x_592 (*con Fail_0 (x_591)*))
  block L_414 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_415
  block L_415 (env_157: unit)
    call L_416 (sextdFromInt32ToInt32_1 (env_157, sizeInBits_47 (*0xF:w32*))) handle _ => L_5
  block L_416 (precision'_17: word32)
    val x_1690: (word32, word32) tuple = (precision'_17, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_417
  block L_417 (env_158: unit)
    call L_418 (<_5 (env_158, x_1690)) handle _ => L_5
  block L_418 (x_1691: bool)
    case x_1691 of
      true => L_420 | false => L_419
  block L_419 ()
    goto L_5 (x_596 (*con Fail_0 (x_595)*))
  block L_420 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_421
  block L_421 (env_159: unit)
    call L_422 (sextdFromInt32ToInt32_1 (env_159, sizeInBits_49 (*0x11:w32*))) handle _ => L_5
  block L_422 (precision'_18: word32)
    val x_1692: (word32, word32) tuple = (precision'_18, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_423
  block L_423 (env_160: unit)
    call L_424 (<_5 (env_160, x_1692)) handle _ => L_5
  block L_424 (x_1693: bool)
    case x_1693 of
      true => L_426 | false => L_425
  block L_425 ()
    goto L_5 (x_600 (*con Fail_0 (x_599)*))
  block L_426 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_427
  block L_427 (env_161: unit)
    call L_428 (sextdFromInt32ToInt32_1 (env_161, sizeInBits_50 (*0x12:w32*))) handle _ => L_5
  block L_428 (precision'_19: word32)
    val x_1694: (word32, word32) tuple = (precision'_19, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_429
  block L_429 (env_162: unit)
    call L_430 (<_5 (env_162, x_1694)) handle _ => L_5
  block L_430 (x_1695: bool)
    case x_1695 of
      true => L_432 | false => L_431
  block L_431 ()
    goto L_5 (x_604 (*con Fail_0 (x_603)*))
  block L_432 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_433
  block L_433 (env_163: unit)
    call L_434 (sextdFromInt32ToInt32_1 (env_163, sizeInBits_51 (*0x13:w32*))) handle _ => L_5
  block L_434 (precision'_20: word32)
    val x_1696: (word32, word32) tuple = (precision'_20, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_435
  block L_435 (env_164: unit)
    call L_436 (<_5 (env_164, x_1696)) handle _ => L_5
  block L_436 (x_1697: bool)
    case x_1697 of
      true => L_438 | false => L_437
  block L_437 ()
    goto L_5 (x_608 (*con Fail_0 (x_607)*))
  block L_438 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_439
  block L_439 (env_165: unit)
    call L_440 (sextdFromInt32ToInt32_1 (env_165, sizeInBits_52 (*0x14:w32*))) handle _ => L_5
  block L_440 (precision'_21: word32)
    val x_1698: (word32, word32) tuple = (precision'_21, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_441
  block L_441 (env_166: unit)
    call L_442 (<_5 (env_166, x_1698)) handle _ => L_5
  block L_442 (x_1699: bool)
    case x_1699 of
      true => L_444 | false => L_443
  block L_443 ()
    goto L_5 (x_612 (*con Fail_0 (x_611)*))
  block L_444 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_445
  block L_445 (env_167: unit)
    call L_446 (sextdFromInt32ToInt32_1 (env_167, sizeInBits_53 (*0x15:w32*))) handle _ => L_5
  block L_446 (precision'_22: word32)
    val x_1700: (word32, word32) tuple = (precision'_22, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_447
  block L_447 (env_168: unit)
    call L_448 (<_5 (env_168, x_1700)) handle _ => L_5
  block L_448 (x_1701: bool)
    case x_1701 of
      true => L_450 | false => L_449
  block L_449 ()
    goto L_5 (x_616 (*con Fail_0 (x_615)*))
  block L_450 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_451
  block L_451 (env_169: unit)
    call L_452 (sextdFromInt32ToInt32_1 (env_169, sizeInBits_54 (*0x16:w32*))) handle _ => L_5
  block L_452 (precision'_23: word32)
    val x_1702: (word32, word32) tuple = (precision'_23, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_453
  block L_453 (env_170: unit)
    call L_454 (<_5 (env_170, x_1702)) handle _ => L_5
  block L_454 (x_1703: bool)
    case x_1703 of
      true => L_456 | false => L_455
  block L_455 ()
    goto L_5 (x_620 (*con Fail_0 (x_619)*))
  block L_456 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_457
  block L_457 (env_171: unit)
    call L_458 (sextdFromInt32ToInt32_1 (env_171, sizeInBits_55 (*0x17:w32*))) handle _ => L_5
  block L_458 (precision'_24: word32)
    val x_1704: (word32, word32) tuple = (precision'_24, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_459
  block L_459 (env_172: unit)
    call L_460 (<_5 (env_172, x_1704)) handle _ => L_5
  block L_460 (x_1705: bool)
    case x_1705 of
      true => L_462 | false => L_461
  block L_461 ()
    goto L_5 (x_624 (*con Fail_0 (x_623)*))
  block L_462 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_463
  block L_463 (env_173: unit)
    call L_464 (sextdFromInt32ToInt32_1 (env_173, sizeInBits_56 (*0x18:w32*))) handle _ => L_5
  block L_464 (precision'_25: word32)
    val x_1706: (word32, word32) tuple = (precision'_25, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_465
  block L_465 (env_174: unit)
    call L_466 (<_5 (env_174, x_1706)) handle _ => L_5
  block L_466 (x_1707: bool)
    case x_1707 of
      true => L_468 | false => L_467
  block L_467 ()
    goto L_5 (x_628 (*con Fail_0 (x_627)*))
  block L_468 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_469
  block L_469 (env_175: unit)
    call L_470 (sextdFromInt32ToInt32_1 (env_175, sizeInBits_57 (*0x19:w32*))) handle _ => L_5
  block L_470 (precision'_26: word32)
    val x_1708: (word32, word32) tuple = (precision'_26, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_471
  block L_471 (env_176: unit)
    call L_472 (<_5 (env_176, x_1708)) handle _ => L_5
  block L_472 (x_1709: bool)
    case x_1709 of
      true => L_474 | false => L_473
  block L_473 ()
    goto L_5 (x_632 (*con Fail_0 (x_631)*))
  block L_474 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_475
  block L_475 (env_177: unit)
    call L_476 (sextdFromInt32ToInt32_1 (env_177, sizeInBits_58 (*0x1A:w32*))) handle _ => L_5
  block L_476 (precision'_27: word32)
    val x_1710: (word32, word32) tuple = (precision'_27, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_477
  block L_477 (env_178: unit)
    call L_478 (<_5 (env_178, x_1710)) handle _ => L_5
  block L_478 (x_1711: bool)
    case x_1711 of
      true => L_480 | false => L_479
  block L_479 ()
    goto L_5 (x_636 (*con Fail_0 (x_635)*))
  block L_480 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_481
  block L_481 (env_179: unit)
    call L_482 (sextdFromInt32ToInt32_1 (env_179, sizeInBits_59 (*0x1B:w32*))) handle _ => L_5
  block L_482 (precision'_28: word32)
    val x_1712: (word32, word32) tuple = (precision'_28, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_483
  block L_483 (env_180: unit)
    call L_484 (<_5 (env_180, x_1712)) handle _ => L_5
  block L_484 (x_1713: bool)
    case x_1713 of
      true => L_486 | false => L_485
  block L_485 ()
    goto L_5 (x_640 (*con Fail_0 (x_639)*))
  block L_486 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_487
  block L_487 (env_181: unit)
    call L_488 (sextdFromInt32ToInt32_1 (env_181, sizeInBits_60 (*0x1C:w32*))) handle _ => L_5
  block L_488 (precision'_29: word32)
    val x_1714: (word32, word32) tuple = (precision'_29, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_489
  block L_489 (env_182: unit)
    call L_490 (<_5 (env_182, x_1714)) handle _ => L_5
  block L_490 (x_1715: bool)
    case x_1715 of
      true => L_492 | false => L_491
  block L_491 ()
    goto L_5 (x_644 (*con Fail_0 (x_643)*))
  block L_492 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_493
  block L_493 (env_183: unit)
    call L_494 (sextdFromInt32ToInt32_1 (env_183, sizeInBits_61 (*0x1D:w32*))) handle _ => L_5
  block L_494 (precision'_30: word32)
    val x_1716: (word32, word32) tuple = (precision'_30, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_495
  block L_495 (env_184: unit)
    call L_496 (<_5 (env_184, x_1716)) handle _ => L_5
  block L_496 (x_1717: bool)
    case x_1717 of
      true => L_498 | false => L_497
  block L_497 ()
    goto L_5 (x_648 (*con Fail_0 (x_647)*))
  block L_498 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_499
  block L_499 (env_185: unit)
    call L_500 (sextdFromInt32ToInt32_1 (env_185, sizeInBits_62 (*0x1E:w32*))) handle _ => L_5
  block L_500 (precision'_31: word32)
    val x_1718: (word32, word32) tuple = (precision'_31, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_501
  block L_501 (env_186: unit)
    call L_502 (<_5 (env_186, x_1718)) handle _ => L_5
  block L_502 (x_1719: bool)
    case x_1719 of
      true => L_504 | false => L_503
  block L_503 ()
    goto L_5 (x_652 (*con Fail_0 (x_651)*))
  block L_504 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_505
  block L_505 (env_187: unit)
    call L_506 (sextdFromInt32ToInt32_1 (env_187, sizeInBits_63 (*0x1F:w32*))) handle _ => L_5
  block L_506 (precision'_32: word32)
    val x_1720: (word32, word32) tuple = (precision'_32, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_507
  block L_507 (env_188: unit)
    call L_508 (<_5 (env_188, x_1720)) handle _ => L_5
  block L_508 (x_1721: bool)
    case x_1721 of
      true => L_510 | false => L_509
  block L_509 ()
    goto L_5 (x_656 (*con Fail_0 (x_655)*))
  block L_510 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_511
  block L_511 (env_189: unit)
    call L_512 (sextdFromInt32ToInt32_1 (env_189, sizeInBits_0 (*0x1:w32*))) handle _ => L_5
  block L_512 (wordSize_4: word32)
    val x_1722: (word32, word32) tuple = (wordSize_4, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_513
  block L_513 (env_190: unit)
    call L_514 (<_5 (env_190, x_1722)) handle _ => L_5
  block L_514 (x_1723: bool)
    case x_1723 of
      true => L_516 | false => L_515
  block L_515 ()
    goto L_5 (x_660 (*con Fail_0 (x_659)*))
  block L_516 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_517
  block L_517 (env_191: unit)
    call L_518 (sextdFromInt32ToInt32_1 (env_191, sizeInBits_1 (*0x2:w32*))) handle _ => L_5
  block L_518 (wordSize_5: word32)
    val x_1724: (word32, word32) tuple = (wordSize_5, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_519
  block L_519 (env_192: unit)
    call L_520 (<_5 (env_192, x_1724)) handle _ => L_5
  block L_520 (x_1725: bool)
    case x_1725 of
      true => L_522 | false => L_521
  block L_521 ()
    goto L_5 (x_664 (*con Fail_0 (x_663)*))
  block L_522 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_523
  block L_523 (env_193: unit)
    call L_524 (sextdFromInt32ToInt32_1 (env_193, sizeInBits_2 (*0x3:w32*))) handle _ => L_5
  block L_524 (wordSize_6: word32)
    val x_1726: (word32, word32) tuple = (wordSize_6, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_525
  block L_525 (env_194: unit)
    call L_526 (<_5 (env_194, x_1726)) handle _ => L_5
  block L_526 (x_1727: bool)
    case x_1727 of
      true => L_528 | false => L_527
  block L_527 ()
    goto L_5 (x_668 (*con Fail_0 (x_667)*))
  block L_528 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_529
  block L_529 (env_195: unit)
    call L_530 (sextdFromInt32ToInt32_1 (env_195, sizeInBits_3 (*0x4:w32*))) handle _ => L_5
  block L_530 (wordSize_7: word32)
    val x_1728: (word32, word32) tuple = (wordSize_7, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_531
  block L_531 (env_196: unit)
    call L_532 (<_5 (env_196, x_1728)) handle _ => L_5
  block L_532 (x_1729: bool)
    case x_1729 of
      true => L_534 | false => L_533
  block L_533 ()
    goto L_5 (x_672 (*con Fail_0 (x_671)*))
  block L_534 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_535
  block L_535 (env_197: unit)
    call L_536 (sextdFromInt32ToInt32_1 (env_197, sizeInBits_4 (*0x5:w32*))) handle _ => L_5
  block L_536 (wordSize_8: word32)
    val x_1730: (word32, word32) tuple = (wordSize_8, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_537
  block L_537 (env_198: unit)
    call L_538 (<_5 (env_198, x_1730)) handle _ => L_5
  block L_538 (x_1731: bool)
    case x_1731 of
      true => L_540 | false => L_539
  block L_539 ()
    goto L_5 (x_676 (*con Fail_0 (x_675)*))
  block L_540 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_541
  block L_541 (env_199: unit)
    call L_542 (sextdFromInt32ToInt32_1 (env_199, sizeInBits_5 (*0x6:w32*))) handle _ => L_5
  block L_542 (wordSize_9: word32)
    val x_1732: (word32, word32) tuple = (wordSize_9, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_543
  block L_543 (env_200: unit)
    call L_544 (<_5 (env_200, x_1732)) handle _ => L_5
  block L_544 (x_1733: bool)
    case x_1733 of
      true => L_546 | false => L_545
  block L_545 ()
    goto L_5 (x_680 (*con Fail_0 (x_679)*))
  block L_546 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_547
  block L_547 (env_201: unit)
    call L_548 (sextdFromInt32ToInt32_1 (env_201, sizeInBits_6 (*0x7:w32*))) handle _ => L_5
  block L_548 (wordSize_10: word32)
    val x_1734: (word32, word32) tuple = (wordSize_10, wordSize_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_549
  block L_549 (env_202: unit)
    call L_550 (<_5 (env_202, x_1734)) handle _ => L_5
  block L_550 (x_1735: bool)
    case x_1735 of
      true => L_552 | false => L_551
  block L_551 ()
    goto L_5 (x_684 (*con Fail_0 (x_683)*))
  block L_552 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_553
  block L_553 (env_203: unit)
    call L_554 (sextdFromInt32ToInt32_1 (env_203, sizeInBits_8 (*0x9:w32*))) handle _ => L_5
  block L_554 (wordSize_11: word32)
    val x_1736: (word32, word32) tuple = (wordSize_11, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_555
  block L_555 (env_204: unit)
    call L_556 (<_5 (env_204, x_1736)) handle _ => L_5
  block L_556 (x_1737: bool)
    case x_1737 of
      true => L_558 | false => L_557
  block L_557 ()
    goto L_5 (x_688 (*con Fail_0 (x_687)*))
  block L_558 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_559
  block L_559 (env_205: unit)
    call L_560 (sextdFromInt32ToInt32_1 (env_205, sizeInBits_9 (*0xA:w32*))) handle _ => L_5
  block L_560 (wordSize_12: word32)
    val x_1738: (word32, word32) tuple = (wordSize_12, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_561
  block L_561 (env_206: unit)
    call L_562 (<_5 (env_206, x_1738)) handle _ => L_5
  block L_562 (x_1739: bool)
    case x_1739 of
      true => L_564 | false => L_563
  block L_563 ()
    goto L_5 (x_692 (*con Fail_0 (x_691)*))
  block L_564 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_565
  block L_565 (env_207: unit)
    call L_566 (sextdFromInt32ToInt32_1 (env_207, sizeInBits_10 (*0xB:w32*))) handle _ => L_5
  block L_566 (wordSize_13: word32)
    val x_1740: (word32, word32) tuple = (wordSize_13, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_567
  block L_567 (env_208: unit)
    call L_568 (<_5 (env_208, x_1740)) handle _ => L_5
  block L_568 (x_1741: bool)
    case x_1741 of
      true => L_570 | false => L_569
  block L_569 ()
    goto L_5 (x_696 (*con Fail_0 (x_695)*))
  block L_570 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_571
  block L_571 (env_209: unit)
    call L_572 (sextdFromInt32ToInt32_1 (env_209, sizeInBits_11 (*0xC:w32*))) handle _ => L_5
  block L_572 (wordSize_14: word32)
    val x_1742: (word32, word32) tuple = (wordSize_14, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_573
  block L_573 (env_210: unit)
    call L_574 (<_5 (env_210, x_1742)) handle _ => L_5
  block L_574 (x_1743: bool)
    case x_1743 of
      true => L_576 | false => L_575
  block L_575 ()
    goto L_5 (x_700 (*con Fail_0 (x_699)*))
  block L_576 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_577
  block L_577 (env_211: unit)
    call L_578 (sextdFromInt32ToInt32_1 (env_211, sizeInBits_12 (*0xD:w32*))) handle _ => L_5
  block L_578 (wordSize_15: word32)
    val x_1744: (word32, word32) tuple = (wordSize_15, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_579
  block L_579 (env_212: unit)
    call L_580 (<_5 (env_212, x_1744)) handle _ => L_5
  block L_580 (x_1745: bool)
    case x_1745 of
      true => L_582 | false => L_581
  block L_581 ()
    goto L_5 (x_704 (*con Fail_0 (x_703)*))
  block L_582 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_583
  block L_583 (env_213: unit)
    call L_584 (sextdFromInt32ToInt32_1 (env_213, sizeInBits_13 (*0xE:w32*))) handle _ => L_5
  block L_584 (wordSize_16: word32)
    val x_1746: (word32, word32) tuple = (wordSize_16, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_585
  block L_585 (env_214: unit)
    call L_586 (<_5 (env_214, x_1746)) handle _ => L_5
  block L_586 (x_1747: bool)
    case x_1747 of
      true => L_588 | false => L_587
  block L_587 ()
    goto L_5 (x_708 (*con Fail_0 (x_707)*))
  block L_588 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_589
  block L_589 (env_215: unit)
    call L_590 (sextdFromInt32ToInt32_1 (env_215, sizeInBits_14 (*0xF:w32*))) handle _ => L_5
  block L_590 (wordSize_17: word32)
    val x_1748: (word32, word32) tuple = (wordSize_17, wordSize_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_591
  block L_591 (env_216: unit)
    call L_592 (<_5 (env_216, x_1748)) handle _ => L_5
  block L_592 (x_1749: bool)
    case x_1749 of
      true => L_594 | false => L_593
  block L_593 ()
    goto L_5 (x_712 (*con Fail_0 (x_711)*))
  block L_594 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_595
  block L_595 (env_217: unit)
    call L_596 (sextdFromInt32ToInt32_1 (env_217, sizeInBits_16 (*0x11:w32*))) handle _ => L_5
  block L_596 (wordSize_18: word32)
    val x_1750: (word32, word32) tuple = (wordSize_18, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_597
  block L_597 (env_218: unit)
    call L_598 (<_5 (env_218, x_1750)) handle _ => L_5
  block L_598 (x_1751: bool)
    case x_1751 of
      true => L_600 | false => L_599
  block L_599 ()
    goto L_5 (x_716 (*con Fail_0 (x_715)*))
  block L_600 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_601
  block L_601 (env_219: unit)
    call L_602 (sextdFromInt32ToInt32_1 (env_219, sizeInBits_17 (*0x12:w32*))) handle _ => L_5
  block L_602 (wordSize_19: word32)
    val x_1752: (word32, word32) tuple = (wordSize_19, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_603
  block L_603 (env_220: unit)
    call L_604 (<_5 (env_220, x_1752)) handle _ => L_5
  block L_604 (x_1753: bool)
    case x_1753 of
      true => L_606 | false => L_605
  block L_605 ()
    goto L_5 (x_720 (*con Fail_0 (x_719)*))
  block L_606 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_607
  block L_607 (env_221: unit)
    call L_608 (sextdFromInt32ToInt32_1 (env_221, sizeInBits_18 (*0x13:w32*))) handle _ => L_5
  block L_608 (wordSize_20: word32)
    val x_1754: (word32, word32) tuple = (wordSize_20, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_609
  block L_609 (env_222: unit)
    call L_610 (<_5 (env_222, x_1754)) handle _ => L_5
  block L_610 (x_1755: bool)
    case x_1755 of
      true => L_612 | false => L_611
  block L_611 ()
    goto L_5 (x_724 (*con Fail_0 (x_723)*))
  block L_612 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_613
  block L_613 (env_223: unit)
    call L_614 (sextdFromInt32ToInt32_1 (env_223, sizeInBits_19 (*0x14:w32*))) handle _ => L_5
  block L_614 (wordSize_21: word32)
    val x_1756: (word32, word32) tuple = (wordSize_21, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_615
  block L_615 (env_224: unit)
    call L_616 (<_5 (env_224, x_1756)) handle _ => L_5
  block L_616 (x_1757: bool)
    case x_1757 of
      true => L_618 | false => L_617
  block L_617 ()
    goto L_5 (x_728 (*con Fail_0 (x_727)*))
  block L_618 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_619
  block L_619 (env_225: unit)
    call L_620 (sextdFromInt32ToInt32_1 (env_225, sizeInBits_20 (*0x15:w32*))) handle _ => L_5
  block L_620 (wordSize_22: word32)
    val x_1758: (word32, word32) tuple = (wordSize_22, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_621
  block L_621 (env_226: unit)
    call L_622 (<_5 (env_226, x_1758)) handle _ => L_5
  block L_622 (x_1759: bool)
    case x_1759 of
      true => L_624 | false => L_623
  block L_623 ()
    goto L_5 (x_732 (*con Fail_0 (x_731)*))
  block L_624 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_625
  block L_625 (env_227: unit)
    call L_626 (sextdFromInt32ToInt32_1 (env_227, sizeInBits_21 (*0x16:w32*))) handle _ => L_5
  block L_626 (wordSize_23: word32)
    val x_1760: (word32, word32) tuple = (wordSize_23, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_627
  block L_627 (env_228: unit)
    call L_628 (<_5 (env_228, x_1760)) handle _ => L_5
  block L_628 (x_1761: bool)
    case x_1761 of
      true => L_630 | false => L_629
  block L_629 ()
    goto L_5 (x_736 (*con Fail_0 (x_735)*))
  block L_630 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_631
  block L_631 (env_229: unit)
    call L_632 (sextdFromInt32ToInt32_1 (env_229, sizeInBits_22 (*0x17:w32*))) handle _ => L_5
  block L_632 (wordSize_24: word32)
    val x_1762: (word32, word32) tuple = (wordSize_24, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_633
  block L_633 (env_230: unit)
    call L_634 (<_5 (env_230, x_1762)) handle _ => L_5
  block L_634 (x_1763: bool)
    case x_1763 of
      true => L_636 | false => L_635
  block L_635 ()
    goto L_5 (x_740 (*con Fail_0 (x_739)*))
  block L_636 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_637
  block L_637 (env_231: unit)
    call L_638 (sextdFromInt32ToInt32_1 (env_231, sizeInBits_23 (*0x18:w32*))) handle _ => L_5
  block L_638 (wordSize_25: word32)
    val x_1764: (word32, word32) tuple = (wordSize_25, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_639
  block L_639 (env_232: unit)
    call L_640 (<_5 (env_232, x_1764)) handle _ => L_5
  block L_640 (x_1765: bool)
    case x_1765 of
      true => L_642 | false => L_641
  block L_641 ()
    goto L_5 (x_744 (*con Fail_0 (x_743)*))
  block L_642 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_643
  block L_643 (env_233: unit)
    call L_644 (sextdFromInt32ToInt32_1 (env_233, sizeInBits_24 (*0x19:w32*))) handle _ => L_5
  block L_644 (wordSize_26: word32)
    val x_1766: (word32, word32) tuple = (wordSize_26, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_645
  block L_645 (env_234: unit)
    call L_646 (<_5 (env_234, x_1766)) handle _ => L_5
  block L_646 (x_1767: bool)
    case x_1767 of
      true => L_648 | false => L_647
  block L_647 ()
    goto L_5 (x_748 (*con Fail_0 (x_747)*))
  block L_648 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_649
  block L_649 (env_235: unit)
    call L_650 (sextdFromInt32ToInt32_1 (env_235, sizeInBits_25 (*0x1A:w32*))) handle _ => L_5
  block L_650 (wordSize_27: word32)
    val x_1768: (word32, word32) tuple = (wordSize_27, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_651
  block L_651 (env_236: unit)
    call L_652 (<_5 (env_236, x_1768)) handle _ => L_5
  block L_652 (x_1769: bool)
    case x_1769 of
      true => L_654 | false => L_653
  block L_653 ()
    goto L_5 (x_752 (*con Fail_0 (x_751)*))
  block L_654 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_655
  block L_655 (env_237: unit)
    call L_656 (sextdFromInt32ToInt32_1 (env_237, sizeInBits_26 (*0x1B:w32*))) handle _ => L_5
  block L_656 (wordSize_28: word32)
    val x_1770: (word32, word32) tuple = (wordSize_28, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_657
  block L_657 (env_238: unit)
    call L_658 (<_5 (env_238, x_1770)) handle _ => L_5
  block L_658 (x_1771: bool)
    case x_1771 of
      true => L_660 | false => L_659
  block L_659 ()
    goto L_5 (x_756 (*con Fail_0 (x_755)*))
  block L_660 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_661
  block L_661 (env_239: unit)
    call L_662 (sextdFromInt32ToInt32_1 (env_239, sizeInBits_27 (*0x1C:w32*))) handle _ => L_5
  block L_662 (wordSize_29: word32)
    val x_1772: (word32, word32) tuple = (wordSize_29, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_663
  block L_663 (env_240: unit)
    call L_664 (<_5 (env_240, x_1772)) handle _ => L_5
  block L_664 (x_1773: bool)
    case x_1773 of
      true => L_666 | false => L_665
  block L_665 ()
    goto L_5 (x_760 (*con Fail_0 (x_759)*))
  block L_666 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_667
  block L_667 (env_241: unit)
    call L_668 (sextdFromInt32ToInt32_1 (env_241, sizeInBits_28 (*0x1D:w32*))) handle _ => L_5
  block L_668 (wordSize_30: word32)
    val x_1774: (word32, word32) tuple = (wordSize_30, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_669
  block L_669 (env_242: unit)
    call L_670 (<_5 (env_242, x_1774)) handle _ => L_5
  block L_670 (x_1775: bool)
    case x_1775 of
      true => L_672 | false => L_671
  block L_671 ()
    goto L_5 (x_764 (*con Fail_0 (x_763)*))
  block L_672 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_673
  block L_673 (env_243: unit)
    call L_674 (sextdFromInt32ToInt32_1 (env_243, sizeInBits_29 (*0x1E:w32*))) handle _ => L_5
  block L_674 (wordSize_31: word32)
    val x_1776: (word32, word32) tuple = (wordSize_31, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_675
  block L_675 (env_244: unit)
    call L_676 (<_5 (env_244, x_1776)) handle _ => L_5
  block L_676 (x_1777: bool)
    case x_1777 of
      true => L_678 | false => L_677
  block L_677 ()
    goto L_5 (x_768 (*con Fail_0 (x_767)*))
  block L_678 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_679
  block L_679 (env_245: unit)
    call L_680 (sextdFromInt32ToInt32_1 (env_245, sizeInBits_30 (*0x1F:w32*))) handle _ => L_5
  block L_680 (wordSize_32: word32)
    val x_1778: (word32, word32) tuple = (wordSize_32, wordSize_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_681
  block L_681 (env_246: unit)
    call L_682 (<_5 (env_246, x_1778)) handle _ => L_5
  block L_682 (x_1779: bool)
    case x_1779 of
      true => L_684 | false => L_683
  block L_683 ()
    goto L_5 (x_772 (*con Fail_0 (x_771)*))
  block L_684 ()
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_685
  block L_685 (env_247: unit)
    call L_686 (x_1780 (env_247, x_1471)) handle _ => L_5
  block L_686 (maxOrd_0: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_687
  block L_687 (env_248: unit)
    call L_688 (idFromInt32ToWord32_1 (env_248, maxOrd_0)) handle _ => L_5
  block L_688 (x_1781: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_689
  block L_689 (env_249: unit)
    call L_690 (idFromInt32ToWord32_1 (env_249, x_774 (*0x0:w32*))) handle _ => L_5
  block L_690 (x_1782: word32)
    val x_1783: (word32, word32) tuple = (x_1781, x_1782)
    case <_0 (*con <Env_0 (x_143)*) of
      <Env_0 => L_691
  block L_691 (env_250: unit)
    call L_692 (<_6 (env_250, x_1783)) handle _ => L_5
  block L_692 (x_1784: bool)
    case x_1784 of
      true => L_694 | false => L_693
  block L_693 ()
    case x_429 (*con xEnv_45 (x_428)*) of
      xEnv_45 => L_695
  block L_695 (env_251: unit)
    call L_696 (x_1785 (env_251, x_774 (*0x0:w32*))) handle _ => L_5
  block L_696 (x_1786: word8)
    goto L_697 (x_1786)
  block L_694 ()
    goto L_698 (x_775 (*con NONE_2*))
  block L_698 (x_1787: t_8)
    case x_1787 of
      NONE_2 => L_699 | SOME_6 => L_697
  block L_697 (x_1788: word8)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_700
  block L_700 (env_252: unit)
    call L_701 (fromIntForLength_1 (env_252, x_776 (*0x1:w32*))) handle _ => L_5
  block L_701 (x_1789: word64)
    call L_702 (arrayAlloc_2 (x_1577, x_1789)) handle _ => L_5
  block L_702 (a_0: (word8) array)
    val tuple_80: (word64, (word8) array, word8) tuple = (x_1789, a_0, x_1788)
    call L_703 (loop_10 (tuple_80, x_1472)) handle _ => L_5
  block L_703 (b_5: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_704
  block L_704 (env_253: unit)
    call L_705 (x_1790 (env_253, a_0)) handle _ => L_5
  block L_705 (x_1791: (word8) vector)
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_706
  block L_706 (env_254: unit)
    call L_707 (x_1792 (env_254, messagers_0)) handle _ => L_5
  block L_707 (x_1793: list_0)
    val x_1796: lambdas_0 = con xEnv_247 (concat_0)
    val x_1795: (lambdas_0, list_0) tuple = (x_1796, x_1793)
    val x_1794: list_0 = con ::_3 (x_1795)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_1794)
    case new_0 (*con newEnv ... e_40)*) of
      newEnv_0 => L_708
  block L_708 (env_255: unit)
    call L_709 (new_2 (env_255, x_789 (*()*))) handle _ => L_5
  block L_709 (atExit_0: (list_2) ref)
    case new_0 (*con newEnv ... e_40)*) of
      newEnv_0 => L_710
  block L_710 (env_256: unit)
    call L_711 (new_2 (env_256, x_790 (*()*))) handle _ => L_5
  block L_711 (atLoadWorld_0: (list_2) ref)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_712
  block L_712 (env_257: unit)
    call L_713 (fromRep_1 (env_257, EACCES_0 (*0xD:w32*))) handle _ => L_5
  block L_713 (acces_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_714
  block L_714 (env_258: unit)
    call L_715 (fromRep_1 (env_258, EADDRINUSE_0 (*0x62:w32*))) handle _ => L_5
  block L_715 (addrinuse_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_716
  block L_716 (env_259: unit)
    call L_717 (fromRep_1 (env_259, EADDRNOTAVAIL_0 (*0x63:w32*))) handle _ => L_5
  block L_717 (addrnotavail_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_718
  block L_718 (env_260: unit)
    call L_719 (fromRep_1 (env_260, EAFNOSUPPORT_0 (*0x61:w32*))) handle _ => L_5
  block L_719 (afnosupport_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_720
  block L_720 (env_261: unit)
    call L_721 (fromRep_1 (env_261, EAGAIN_0 (*0xB:w32*))) handle _ => L_5
  block L_721 (again_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_722
  block L_722 (env_262: unit)
    call L_723 (fromRep_1 (env_262, EALREADY_0 (*0x72:w32*))) handle _ => L_5
  block L_723 (already_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_724
  block L_724 (env_263: unit)
    call L_725 (fromRep_1 (env_263, EBADF_0 (*0x9:w32*))) handle _ => L_5
  block L_725 (badf_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_726
  block L_726 (env_264: unit)
    call L_727 (fromRep_1 (env_264, EBADMSG_0 (*0x4A:w32*))) handle _ => L_5
  block L_727 (badmsg_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_728
  block L_728 (env_265: unit)
    call L_729 (fromRep_1 (env_265, EBUSY_0 (*0x10:w32*))) handle _ => L_5
  block L_729 (busy_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_730
  block L_730 (env_266: unit)
    call L_731 (fromRep_1 (env_266, ECANCELED_0 (*0x7D:w32*))) handle _ => L_5
  block L_731 (canceled_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_732
  block L_732 (env_267: unit)
    call L_733 (fromRep_1 (env_267, ECHILD_0 (*0xA:w32*))) handle _ => L_5
  block L_733 (child_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_734
  block L_734 (env_268: unit)
    call L_735 (fromRep_1 (env_268, ECONNABORTED_0 (*0x67:w32*))) handle _ => L_5
  block L_735 (connaborted_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_736
  block L_736 (env_269: unit)
    call L_737 (fromRep_1 (env_269, ECONNREFUSED_0 (*0x6F:w32*))) handle _ => L_5
  block L_737 (connrefused_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_738
  block L_738 (env_270: unit)
    call L_739 (fromRep_1 (env_270, ECONNRESET_0 (*0x68:w32*))) handle _ => L_5
  block L_739 (connreset_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_740
  block L_740 (env_271: unit)
    call L_741 (fromRep_1 (env_271, EDEADLK_0 (*0x23:w32*))) handle _ => L_5
  block L_741 (deadlk_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_742
  block L_742 (env_272: unit)
    call L_743 (fromRep_1 (env_272, EDESTADDRREQ_0 (*0x59:w32*))) handle _ => L_5
  block L_743 (destaddrreq_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_744
  block L_744 (env_273: unit)
    call L_745 (fromRep_1 (env_273, EDOM_0 (*0x21:w32*))) handle _ => L_5
  block L_745 (dom_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_746
  block L_746 (env_274: unit)
    call L_747 (fromRep_1 (env_274, EDQUOT_0 (*0x7A:w32*))) handle _ => L_5
  block L_747 (dquot_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_748
  block L_748 (env_275: unit)
    call L_749 (fromRep_1 (env_275, EEXIST_0 (*0x11:w32*))) handle _ => L_5
  block L_749 (exist_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_750
  block L_750 (env_276: unit)
    call L_751 (fromRep_1 (env_276, EFAULT_0 (*0xE:w32*))) handle _ => L_5
  block L_751 (fault_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_752
  block L_752 (env_277: unit)
    call L_753 (fromRep_1 (env_277, EFBIG_0 (*0x1B:w32*))) handle _ => L_5
  block L_753 (fbig_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_754
  block L_754 (env_278: unit)
    call L_755 (fromRep_1 (env_278, EHOSTUNREACH_0 (*0x71:w32*))) handle _ => L_5
  block L_755 (hostunreach_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_756
  block L_756 (env_279: unit)
    call L_757 (fromRep_1 (env_279, EIDRM_0 (*0x2B:w32*))) handle _ => L_5
  block L_757 (idrm_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_758
  block L_758 (env_280: unit)
    call L_759 (fromRep_1 (env_280, EILSEQ_0 (*0x54:w32*))) handle _ => L_5
  block L_759 (ilseq_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_760
  block L_760 (env_281: unit)
    call L_761 (fromRep_1 (env_281, EINPROGRESS_0 (*0x73:w32*))) handle _ => L_5
  block L_761 (inprogress_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_762
  block L_762 (env_282: unit)
    call L_763 (fromRep_1 (env_282, EINTR_0 (*0x4:w32*))) handle _ => L_5
  block L_763 (intr_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_764
  block L_764 (env_283: unit)
    call L_765 (fromRep_1 (env_283, EINVAL_0 (*0x16:w32*))) handle _ => L_5
  block L_765 (inval_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_766
  block L_766 (env_284: unit)
    call L_767 (fromRep_1 (env_284, EIO_0 (*0x5:w32*))) handle _ => L_5
  block L_767 (io_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_768
  block L_768 (env_285: unit)
    call L_769 (fromRep_1 (env_285, EISCONN_0 (*0x6A:w32*))) handle _ => L_5
  block L_769 (isconn_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_770
  block L_770 (env_286: unit)
    call L_771 (fromRep_1 (env_286, EISDIR_0 (*0x15:w32*))) handle _ => L_5
  block L_771 (isdir_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_772
  block L_772 (env_287: unit)
    call L_773 (fromRep_1 (env_287, ELOOP_0 (*0x28:w32*))) handle _ => L_5
  block L_773 (loop_11: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_774
  block L_774 (env_288: unit)
    call L_775 (fromRep_1 (env_288, EMFILE_0 (*0x18:w32*))) handle _ => L_5
  block L_775 (mfile_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_776
  block L_776 (env_289: unit)
    call L_777 (fromRep_1 (env_289, EMLINK_0 (*0x1F:w32*))) handle _ => L_5
  block L_777 (mlink_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_778
  block L_778 (env_290: unit)
    call L_779 (fromRep_1 (env_290, EMSGSIZE_0 (*0x5A:w32*))) handle _ => L_5
  block L_779 (msgsize_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_780
  block L_780 (env_291: unit)
    call L_781 (fromRep_1 (env_291, EMULTIHOP_0 (*0x48:w32*))) handle _ => L_5
  block L_781 (multihop_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_782
  block L_782 (env_292: unit)
    call L_783 (fromRep_1 (env_292, ENAMETOOLONG_0 (*0x24:w32*))) handle _ => L_5
  block L_783 (nametoolong_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_784
  block L_784 (env_293: unit)
    call L_785 (fromRep_1 (env_293, ENETDOWN_0 (*0x64:w32*))) handle _ => L_5
  block L_785 (netdown_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_786
  block L_786 (env_294: unit)
    call L_787 (fromRep_1 (env_294, ENETRESET_0 (*0x66:w32*))) handle _ => L_5
  block L_787 (netreset_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_788
  block L_788 (env_295: unit)
    call L_789 (fromRep_1 (env_295, ENETUNREACH_0 (*0x65:w32*))) handle _ => L_5
  block L_789 (netunreach_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_790
  block L_790 (env_296: unit)
    call L_791 (fromRep_1 (env_296, ENFILE_0 (*0x17:w32*))) handle _ => L_5
  block L_791 (nfile_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_792
  block L_792 (env_297: unit)
    call L_793 (fromRep_1 (env_297, ENOBUFS_0 (*0x69:w32*))) handle _ => L_5
  block L_793 (nobufs_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_794
  block L_794 (env_298: unit)
    call L_795 (fromRep_1 (env_298, ENODATA_0 (*0x3D:w32*))) handle _ => L_5
  block L_795 (nodata_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_796
  block L_796 (env_299: unit)
    call L_797 (fromRep_1 (env_299, ENODEV_0 (*0x13:w32*))) handle _ => L_5
  block L_797 (nodev_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_798
  block L_798 (env_300: unit)
    call L_799 (fromRep_1 (env_300, ENOENT_0 (*0x2:w32*))) handle _ => L_5
  block L_799 (noent_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_800
  block L_800 (env_301: unit)
    call L_801 (fromRep_1 (env_301, ENOEXEC_0 (*0x8:w32*))) handle _ => L_5
  block L_801 (noexec_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_802
  block L_802 (env_302: unit)
    call L_803 (fromRep_1 (env_302, ENOLCK_0 (*0x25:w32*))) handle _ => L_5
  block L_803 (nolck_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_804
  block L_804 (env_303: unit)
    call L_805 (fromRep_1 (env_303, ENOLINK_0 (*0x43:w32*))) handle _ => L_5
  block L_805 (nolink_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_806
  block L_806 (env_304: unit)
    call L_807 (fromRep_1 (env_304, ENOMEM_0 (*0xC:w32*))) handle _ => L_5
  block L_807 (nomem_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_808
  block L_808 (env_305: unit)
    call L_809 (fromRep_1 (env_305, ENOMSG_0 (*0x2A:w32*))) handle _ => L_5
  block L_809 (nomsg_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_810
  block L_810 (env_306: unit)
    call L_811 (fromRep_1 (env_306, ENOPROTOOPT_0 (*0x5C:w32*))) handle _ => L_5
  block L_811 (noprotoopt_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_812
  block L_812 (env_307: unit)
    call L_813 (fromRep_1 (env_307, ENOSPC_0 (*0x1C:w32*))) handle _ => L_5
  block L_813 (nospc_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_814
  block L_814 (env_308: unit)
    call L_815 (fromRep_1 (env_308, ENOSR_0 (*0x3F:w32*))) handle _ => L_5
  block L_815 (nosr_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_816
  block L_816 (env_309: unit)
    call L_817 (fromRep_1 (env_309, ENOSTR_0 (*0x3C:w32*))) handle _ => L_5
  block L_817 (nostr_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_818
  block L_818 (env_310: unit)
    call L_819 (fromRep_1 (env_310, ENOSYS_0 (*0x26:w32*))) handle _ => L_5
  block L_819 (nosys_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_820
  block L_820 (env_311: unit)
    call L_821 (fromRep_1 (env_311, ENOTCONN_0 (*0x6B:w32*))) handle _ => L_5
  block L_821 (notconn_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_822
  block L_822 (env_312: unit)
    call L_823 (fromRep_1 (env_312, ENOTDIR_0 (*0x14:w32*))) handle _ => L_5
  block L_823 (notdir_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_824
  block L_824 (env_313: unit)
    call L_825 (fromRep_1 (env_313, ENOTEMPTY_0 (*0x27:w32*))) handle _ => L_5
  block L_825 (notempty_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_826
  block L_826 (env_314: unit)
    call L_827 (fromRep_1 (env_314, ENOTSOCK_0 (*0x58:w32*))) handle _ => L_5
  block L_827 (notsock_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_828
  block L_828 (env_315: unit)
    call L_829 (fromRep_1 (env_315, ENOTSUP_0 (*0x5F:w32*))) handle _ => L_5
  block L_829 (notsup_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_830
  block L_830 (env_316: unit)
    call L_831 (fromRep_1 (env_316, ENOTTY_0 (*0x19:w32*))) handle _ => L_5
  block L_831 (notty_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_832
  block L_832 (env_317: unit)
    call L_833 (fromRep_1 (env_317, ENXIO_0 (*0x6:w32*))) handle _ => L_5
  block L_833 (nxio_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_834
  block L_834 (env_318: unit)
    call L_835 (fromRep_1 (env_318, EOPNOTSUPP_0 (*0x5F:w32*))) handle _ => L_5
  block L_835 (opnotsupp_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_836
  block L_836 (env_319: unit)
    call L_837 (fromRep_1 (env_319, EOVERFLOW_0 (*0x4B:w32*))) handle _ => L_5
  block L_837 (overflow_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_838
  block L_838 (env_320: unit)
    call L_839 (fromRep_1 (env_320, EPERM_0 (*0x1:w32*))) handle _ => L_5
  block L_839 (perm_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_840
  block L_840 (env_321: unit)
    call L_841 (fromRep_1 (env_321, EPIPE_0 (*0x20:w32*))) handle _ => L_5
  block L_841 (pipe_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_842
  block L_842 (env_322: unit)
    call L_843 (fromRep_1 (env_322, EPROTO_0 (*0x47:w32*))) handle _ => L_5
  block L_843 (proto_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_844
  block L_844 (env_323: unit)
    call L_845 (fromRep_1 (env_323, EPROTONOSUPPORT_0 (*0x5D:w32*))) handle _ => L_5
  block L_845 (protonosupport_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_846
  block L_846 (env_324: unit)
    call L_847 (fromRep_1 (env_324, EPROTOTYPE_0 (*0x5B:w32*))) handle _ => L_5
  block L_847 (prototype_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_848
  block L_848 (env_325: unit)
    call L_849 (fromRep_1 (env_325, ERANGE_0 (*0x22:w32*))) handle _ => L_5
  block L_849 (range_2: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_850
  block L_850 (env_326: unit)
    call L_851 (fromRep_1 (env_326, EROFS_0 (*0x1E:w32*))) handle _ => L_5
  block L_851 (rofs_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_852
  block L_852 (env_327: unit)
    call L_853 (fromRep_1 (env_327, ESPIPE_0 (*0x1D:w32*))) handle _ => L_5
  block L_853 (spipe_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_854
  block L_854 (env_328: unit)
    call L_855 (fromRep_1 (env_328, ESRCH_0 (*0x3:w32*))) handle _ => L_5
  block L_855 (srch_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_856
  block L_856 (env_329: unit)
    call L_857 (fromRep_1 (env_329, ESTALE_0 (*0x74:w32*))) handle _ => L_5
  block L_857 (stale_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_858
  block L_858 (env_330: unit)
    call L_859 (fromRep_1 (env_330, ETIME_0 (*0x3E:w32*))) handle _ => L_5
  block L_859 (time_1: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_860
  block L_860 (env_331: unit)
    call L_861 (fromRep_1 (env_331, ETIMEDOUT_0 (*0x6E:w32*))) handle _ => L_5
  block L_861 (timedout_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_862
  block L_862 (env_332: unit)
    call L_863 (fromRep_1 (env_332, E2BIG_0 (*0x7:w32*))) handle _ => L_5
  block L_863 (toobig_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_864
  block L_864 (env_333: unit)
    call L_865 (fromRep_1 (env_333, ETXTBSY_0 (*0x1A:w32*))) handle _ => L_5
  block L_865 (txtbsy_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_866
  block L_866 (env_334: unit)
    call L_867 (fromRep_1 (env_334, EWOULDBLOCK_0 (*0xB:w32*))) handle _ => L_5
  block L_867 (wouldblock_0: word32)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_868
  block L_868 (env_335: unit)
    call L_869 (fromRep_1 (env_335, EXDEV_0 (*0x12:w32*))) handle _ => L_5
  block L_869 (xdev_0: word32)
    val x_1876: (word32, (word8) vector) tuple = (acces_0, x_795 (*"acces"*))
    val x_1875: (word32, (word8) vector) tuple =
      (addrinuse_0, x_796 (*"addrinuse"*))
    val x_1874: (word32, (word8) vector) tuple =
      (addrnotavail_0, x_797 (*"addrnotavail"*))
    val x_1873: (word32, (word8) vector) tuple =
      (afnosupport_0, x_798 (*"afnosupport"*))
    val x_1872: (word32, (word8) vector) tuple = (again_0, x_799 (*"again"*))
    val x_1871: (word32, (word8) vector) tuple =
      (already_0, x_800 (*"already"*))
    val x_1870: (word32, (word8) vector) tuple = (badf_0, x_801 (*"badf"*))
    val x_1869: (word32, (word8) vector) tuple = (badmsg_0, x_802 (*"badmsg"*))
    val x_1868: (word32, (word8) vector) tuple = (busy_0, x_803 (*"busy"*))
    val x_1867: (word32, (word8) vector) tuple =
      (canceled_0, x_804 (*"canceled"*))
    val x_1866: (word32, (word8) vector) tuple = (child_0, x_805 (*"child"*))
    val x_1865: (word32, (word8) vector) tuple =
      (connaborted_0, x_806 (*"connaborted"*))
    val x_1864: (word32, (word8) vector) tuple =
      (connrefused_0, x_807 (*"connrefused"*))
    val x_1863: (word32, (word8) vector) tuple =
      (connreset_0, x_808 (*"connreset"*))
    val x_1862: (word32, (word8) vector) tuple = (deadlk_0, x_809 (*"deadlk"*))
    val x_1861: (word32, (word8) vector) tuple =
      (destaddrreq_0, x_810 (*"destaddrreq"*))
    val x_1860: (word32, (word8) vector) tuple = (dom_0, x_811 (*"dom"*))
    val x_1859: (word32, (word8) vector) tuple = (dquot_0, x_812 (*"dquot"*))
    val x_1858: (word32, (word8) vector) tuple = (exist_0, x_813 (*"exist"*))
    val x_1857: (word32, (word8) vector) tuple = (fault_0, x_814 (*"fault"*))
    val x_1856: (word32, (word8) vector) tuple = (fbig_0, x_815 (*"fbig"*))
    val x_1855: (word32, (word8) vector) tuple =
      (hostunreach_0, x_816 (*"hostunreach"*))
    val x_1854: (word32, (word8) vector) tuple = (idrm_0, x_817 (*"idrm"*))
    val x_1853: (word32, (word8) vector) tuple = (ilseq_0, x_818 (*"ilseq"*))
    val x_1852: (word32, (word8) vector) tuple =
      (inprogress_0, x_819 (*"inprogress"*))
    val x_1851: (word32, (word8) vector) tuple = (intr_0, x_820 (*"intr"*))
    val x_1850: (word32, (word8) vector) tuple = (inval_0, x_821 (*"inval"*))
    val x_1849: (word32, (word8) vector) tuple = (io_0, x_822 (*"io"*))
    val x_1848: (word32, (word8) vector) tuple = (isconn_0, x_823 (*"isconn"*))
    val x_1847: (word32, (word8) vector) tuple = (isdir_0, x_824 (*"isdir"*))
    val x_1846: (word32, (word8) vector) tuple = (loop_11, x_825 (*"loop"*))
    val x_1845: (word32, (word8) vector) tuple = (mfile_0, x_826 (*"mfile"*))
    val x_1844: (word32, (word8) vector) tuple = (mlink_0, x_827 (*"mlink"*))
    val x_1843: (word32, (word8) vector) tuple =
      (msgsize_0, x_828 (*"msgsize"*))
    val x_1842: (word32, (word8) vector) tuple =
      (multihop_0, x_829 (*"multihop"*))
    val x_1841: (word32, (word8) vector) tuple =
      (nametoolong_0, x_830 (*"nametoolong"*))
    val x_1840: (word32, (word8) vector) tuple =
      (netdown_0, x_831 (*"netdown"*))
    val x_1839: (word32, (word8) vector) tuple =
      (netreset_0, x_832 (*"netreset"*))
    val x_1838: (word32, (word8) vector) tuple =
      (netunreach_0, x_833 (*"netunreach"*))
    val x_1837: (word32, (word8) vector) tuple = (nfile_0, x_834 (*"nfile"*))
    val x_1836: (word32, (word8) vector) tuple = (nobufs_0, x_835 (*"nobufs"*))
    val x_1835: (word32, (word8) vector) tuple = (nodata_0, x_836 (*"nodata"*))
    val x_1834: (word32, (word8) vector) tuple = (nodev_0, x_837 (*"nodev"*))
    val x_1833: (word32, (word8) vector) tuple = (noent_0, x_838 (*"noent"*))
    val x_1832: (word32, (word8) vector) tuple = (noexec_0, x_839 (*"noexec"*))
    val x_1831: (word32, (word8) vector) tuple = (nolck_0, x_840 (*"nolck"*))
    val x_1830: (word32, (word8) vector) tuple = (nolink_0, x_841 (*"nolink"*))
    val x_1829: (word32, (word8) vector) tuple = (nomem_0, x_842 (*"nomem"*))
    val x_1828: (word32, (word8) vector) tuple = (nomsg_0, x_843 (*"nomsg"*))
    val x_1827: (word32, (word8) vector) tuple =
      (noprotoopt_0, x_844 (*"noprotoopt"*))
    val x_1826: (word32, (word8) vector) tuple = (nospc_0, x_845 (*"nospc"*))
    val x_1825: (word32, (word8) vector) tuple = (nosr_0, x_846 (*"nosr"*))
    val x_1824: (word32, (word8) vector) tuple = (nostr_0, x_847 (*"nostr"*))
    val x_1823: (word32, (word8) vector) tuple = (nosys_0, x_848 (*"nosys"*))
    val x_1822: (word32, (word8) vector) tuple =
      (notconn_0, x_849 (*"notconn"*))
    val x_1821: (word32, (word8) vector) tuple = (notdir_0, x_850 (*"notdir"*))
    val x_1820: (word32, (word8) vector) tuple =
      (notempty_0, x_851 (*"notempty"*))
    val x_1819: (word32, (word8) vector) tuple =
      (notsock_0, x_852 (*"notsock"*))
    val x_1818: (word32, (word8) vector) tuple = (notsup_0, x_853 (*"notsup"*))
    val x_1817: (word32, (word8) vector) tuple = (notty_0, x_854 (*"notty"*))
    val x_1816: (word32, (word8) vector) tuple = (nxio_0, x_855 (*"nxio"*))
    val x_1815: (word32, (word8) vector) tuple =
      (opnotsupp_0, x_856 (*"opnotsupp"*))
    val x_1814: (word32, (word8) vector) tuple =
      (overflow_0, x_857 (*"overflow"*))
    val x_1813: (word32, (word8) vector) tuple = (perm_0, x_858 (*"perm"*))
    val x_1812: (word32, (word8) vector) tuple = (pipe_0, x_859 (*"pipe"*))
    val x_1811: (word32, (word8) vector) tuple = (proto_0, x_860 (*"proto"*))
    val x_1810: (word32, (word8) vector) tuple =
      (protonosupport_0, x_861 (*"protonosupport"*))
    val x_1809: (word32, (word8) vector) tuple =
      (prototype_0, x_862 (*"prototype"*))
    val x_1808: (word32, (word8) vector) tuple = (range_2, x_863 (*"range"*))
    val x_1807: (word32, (word8) vector) tuple = (rofs_0, x_864 (*"rofs"*))
    val x_1806: (word32, (word8) vector) tuple = (spipe_0, x_865 (*"spipe"*))
    val x_1805: (word32, (word8) vector) tuple = (srch_0, x_866 (*"srch"*))
    val x_1804: (word32, (word8) vector) tuple = (stale_0, x_867 (*"stale"*))
    val x_1803: (word32, (word8) vector) tuple = (time_1, x_868 (*"time"*))
    val x_1802: (word32, (word8) vector) tuple =
      (timedout_0, x_869 (*"timedout"*))
    val x_1801: (word32, (word8) vector) tuple = (toobig_0, x_870 (*"toobig"*))
    val x_1800: (word32, (word8) vector) tuple = (txtbsy_0, x_871 (*"txtbsy"*))
    val x_1799: (word32, (word8) vector) tuple =
      (wouldblock_0, x_872 (*"wouldblock"*))
    val x_1798: (word32, (word8) vector) tuple = (xdev_0, x_873 (*"xdev"*))
    val x_1797: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1798, x_874 (*con nil_5*))
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_870
  block L_870 (env_336: unit)
    call L_871 (::?_1 (env_336, x_1797)) handle _ => L_5
  block L_871 (x_1877: list_3)
    val x_1878: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1799, x_1877)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_872
  block L_872 (env_337: unit)
    call L_873 (::?_1 (env_337, x_1878)) handle _ => L_5
  block L_873 (x_1879: list_3)
    val x_1880: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1800, x_1879)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_874
  block L_874 (env_338: unit)
    call L_875 (::?_1 (env_338, x_1880)) handle _ => L_5
  block L_875 (x_1881: list_3)
    val x_1882: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1801, x_1881)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_876
  block L_876 (env_339: unit)
    call L_877 (::?_1 (env_339, x_1882)) handle _ => L_5
  block L_877 (x_1883: list_3)
    val x_1884: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1802, x_1883)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_878
  block L_878 (env_340: unit)
    call L_879 (::?_1 (env_340, x_1884)) handle _ => L_5
  block L_879 (x_1885: list_3)
    val x_1886: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1803, x_1885)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_880
  block L_880 (env_341: unit)
    call L_881 (::?_1 (env_341, x_1886)) handle _ => L_5
  block L_881 (x_1887: list_3)
    val x_1888: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1804, x_1887)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_882
  block L_882 (env_342: unit)
    call L_883 (::?_1 (env_342, x_1888)) handle _ => L_5
  block L_883 (x_1889: list_3)
    val x_1890: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1805, x_1889)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_884
  block L_884 (env_343: unit)
    call L_885 (::?_1 (env_343, x_1890)) handle _ => L_5
  block L_885 (x_1891: list_3)
    val x_1892: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1806, x_1891)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_886
  block L_886 (env_344: unit)
    call L_887 (::?_1 (env_344, x_1892)) handle _ => L_5
  block L_887 (x_1893: list_3)
    val x_1894: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1807, x_1893)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_888
  block L_888 (env_345: unit)
    call L_889 (::?_1 (env_345, x_1894)) handle _ => L_5
  block L_889 (x_1895: list_3)
    val x_1896: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1808, x_1895)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_890
  block L_890 (env_346: unit)
    call L_891 (::?_1 (env_346, x_1896)) handle _ => L_5
  block L_891 (x_1897: list_3)
    val x_1898: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1809, x_1897)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_892
  block L_892 (env_347: unit)
    call L_893 (::?_1 (env_347, x_1898)) handle _ => L_5
  block L_893 (x_1899: list_3)
    val x_1900: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1810, x_1899)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_894
  block L_894 (env_348: unit)
    call L_895 (::?_1 (env_348, x_1900)) handle _ => L_5
  block L_895 (x_1901: list_3)
    val x_1902: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1811, x_1901)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_896
  block L_896 (env_349: unit)
    call L_897 (::?_1 (env_349, x_1902)) handle _ => L_5
  block L_897 (x_1903: list_3)
    val x_1904: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1812, x_1903)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_898
  block L_898 (env_350: unit)
    call L_899 (::?_1 (env_350, x_1904)) handle _ => L_5
  block L_899 (x_1905: list_3)
    val x_1906: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1813, x_1905)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_900
  block L_900 (env_351: unit)
    call L_901 (::?_1 (env_351, x_1906)) handle _ => L_5
  block L_901 (x_1907: list_3)
    val x_1908: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1814, x_1907)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_902
  block L_902 (env_352: unit)
    call L_903 (::?_1 (env_352, x_1908)) handle _ => L_5
  block L_903 (x_1909: list_3)
    val x_1910: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1815, x_1909)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_904
  block L_904 (env_353: unit)
    call L_905 (::?_1 (env_353, x_1910)) handle _ => L_5
  block L_905 (x_1911: list_3)
    val x_1912: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1816, x_1911)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_906
  block L_906 (env_354: unit)
    call L_907 (::?_1 (env_354, x_1912)) handle _ => L_5
  block L_907 (x_1913: list_3)
    val x_1914: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1817, x_1913)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_908
  block L_908 (env_355: unit)
    call L_909 (::?_1 (env_355, x_1914)) handle _ => L_5
  block L_909 (x_1915: list_3)
    val x_1916: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1818, x_1915)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_910
  block L_910 (env_356: unit)
    call L_911 (::?_1 (env_356, x_1916)) handle _ => L_5
  block L_911 (x_1917: list_3)
    val x_1918: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1819, x_1917)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_912
  block L_912 (env_357: unit)
    call L_913 (::?_1 (env_357, x_1918)) handle _ => L_5
  block L_913 (x_1919: list_3)
    val x_1920: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1820, x_1919)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_914
  block L_914 (env_358: unit)
    call L_915 (::?_1 (env_358, x_1920)) handle _ => L_5
  block L_915 (x_1921: list_3)
    val x_1922: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1821, x_1921)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_916
  block L_916 (env_359: unit)
    call L_917 (::?_1 (env_359, x_1922)) handle _ => L_5
  block L_917 (x_1923: list_3)
    val x_1924: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1822, x_1923)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_918
  block L_918 (env_360: unit)
    call L_919 (::?_1 (env_360, x_1924)) handle _ => L_5
  block L_919 (x_1925: list_3)
    val x_1926: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1823, x_1925)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_920
  block L_920 (env_361: unit)
    call L_921 (::?_1 (env_361, x_1926)) handle _ => L_5
  block L_921 (x_1927: list_3)
    val x_1928: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1824, x_1927)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_922
  block L_922 (env_362: unit)
    call L_923 (::?_1 (env_362, x_1928)) handle _ => L_5
  block L_923 (x_1929: list_3)
    val x_1930: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1825, x_1929)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_924
  block L_924 (env_363: unit)
    call L_925 (::?_1 (env_363, x_1930)) handle _ => L_5
  block L_925 (x_1931: list_3)
    val x_1932: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1826, x_1931)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_926
  block L_926 (env_364: unit)
    call L_927 (::?_1 (env_364, x_1932)) handle _ => L_5
  block L_927 (x_1933: list_3)
    val x_1934: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1827, x_1933)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_928
  block L_928 (env_365: unit)
    call L_929 (::?_1 (env_365, x_1934)) handle _ => L_5
  block L_929 (x_1935: list_3)
    val x_1936: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1828, x_1935)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_930
  block L_930 (env_366: unit)
    call L_931 (::?_1 (env_366, x_1936)) handle _ => L_5
  block L_931 (x_1937: list_3)
    val x_1938: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1829, x_1937)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_932
  block L_932 (env_367: unit)
    call L_933 (::?_1 (env_367, x_1938)) handle _ => L_5
  block L_933 (x_1939: list_3)
    val x_1940: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1830, x_1939)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_934
  block L_934 (env_368: unit)
    call L_935 (::?_1 (env_368, x_1940)) handle _ => L_5
  block L_935 (x_1941: list_3)
    val x_1942: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1831, x_1941)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_936
  block L_936 (env_369: unit)
    call L_937 (::?_1 (env_369, x_1942)) handle _ => L_5
  block L_937 (x_1943: list_3)
    val x_1944: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1832, x_1943)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_938
  block L_938 (env_370: unit)
    call L_939 (::?_1 (env_370, x_1944)) handle _ => L_5
  block L_939 (x_1945: list_3)
    val x_1946: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1833, x_1945)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_940
  block L_940 (env_371: unit)
    call L_941 (::?_1 (env_371, x_1946)) handle _ => L_5
  block L_941 (x_1947: list_3)
    val x_1948: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1834, x_1947)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_942
  block L_942 (env_372: unit)
    call L_943 (::?_1 (env_372, x_1948)) handle _ => L_5
  block L_943 (x_1949: list_3)
    val x_1950: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1835, x_1949)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_944
  block L_944 (env_373: unit)
    call L_945 (::?_1 (env_373, x_1950)) handle _ => L_5
  block L_945 (x_1951: list_3)
    val x_1952: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1836, x_1951)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_946
  block L_946 (env_374: unit)
    call L_947 (::?_1 (env_374, x_1952)) handle _ => L_5
  block L_947 (x_1953: list_3)
    val x_1954: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1837, x_1953)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_948
  block L_948 (env_375: unit)
    call L_949 (::?_1 (env_375, x_1954)) handle _ => L_5
  block L_949 (x_1955: list_3)
    val x_1956: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1838, x_1955)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_950
  block L_950 (env_376: unit)
    call L_951 (::?_1 (env_376, x_1956)) handle _ => L_5
  block L_951 (x_1957: list_3)
    val x_1958: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1839, x_1957)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_952
  block L_952 (env_377: unit)
    call L_953 (::?_1 (env_377, x_1958)) handle _ => L_5
  block L_953 (x_1959: list_3)
    val x_1960: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1840, x_1959)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_954
  block L_954 (env_378: unit)
    call L_955 (::?_1 (env_378, x_1960)) handle _ => L_5
  block L_955 (x_1961: list_3)
    val x_1962: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1841, x_1961)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_956
  block L_956 (env_379: unit)
    call L_957 (::?_1 (env_379, x_1962)) handle _ => L_5
  block L_957 (x_1963: list_3)
    val x_1964: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1842, x_1963)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_958
  block L_958 (env_380: unit)
    call L_959 (::?_1 (env_380, x_1964)) handle _ => L_5
  block L_959 (x_1965: list_3)
    val x_1966: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1843, x_1965)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_960
  block L_960 (env_381: unit)
    call L_961 (::?_1 (env_381, x_1966)) handle _ => L_5
  block L_961 (x_1967: list_3)
    val x_1968: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1844, x_1967)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_962
  block L_962 (env_382: unit)
    call L_963 (::?_1 (env_382, x_1968)) handle _ => L_5
  block L_963 (x_1969: list_3)
    val x_1970: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1845, x_1969)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_964
  block L_964 (env_383: unit)
    call L_965 (::?_1 (env_383, x_1970)) handle _ => L_5
  block L_965 (x_1971: list_3)
    val x_1972: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1846, x_1971)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_966
  block L_966 (env_384: unit)
    call L_967 (::?_1 (env_384, x_1972)) handle _ => L_5
  block L_967 (x_1973: list_3)
    val x_1974: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1847, x_1973)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_968
  block L_968 (env_385: unit)
    call L_969 (::?_1 (env_385, x_1974)) handle _ => L_5
  block L_969 (x_1975: list_3)
    val x_1976: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1848, x_1975)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_970
  block L_970 (env_386: unit)
    call L_971 (::?_1 (env_386, x_1976)) handle _ => L_5
  block L_971 (x_1977: list_3)
    val x_1978: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1849, x_1977)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_972
  block L_972 (env_387: unit)
    call L_973 (::?_1 (env_387, x_1978)) handle _ => L_5
  block L_973 (x_1979: list_3)
    val x_1980: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1850, x_1979)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_974
  block L_974 (env_388: unit)
    call L_975 (::?_1 (env_388, x_1980)) handle _ => L_5
  block L_975 (x_1981: list_3)
    val x_1982: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1851, x_1981)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_976
  block L_976 (env_389: unit)
    call L_977 (::?_1 (env_389, x_1982)) handle _ => L_5
  block L_977 (x_1983: list_3)
    val x_1984: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1852, x_1983)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_978
  block L_978 (env_390: unit)
    call L_979 (::?_1 (env_390, x_1984)) handle _ => L_5
  block L_979 (x_1985: list_3)
    val x_1986: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1853, x_1985)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_980
  block L_980 (env_391: unit)
    call L_981 (::?_1 (env_391, x_1986)) handle _ => L_5
  block L_981 (x_1987: list_3)
    val x_1988: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1854, x_1987)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_982
  block L_982 (env_392: unit)
    call L_983 (::?_1 (env_392, x_1988)) handle _ => L_5
  block L_983 (x_1989: list_3)
    val x_1990: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1855, x_1989)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_984
  block L_984 (env_393: unit)
    call L_985 (::?_1 (env_393, x_1990)) handle _ => L_5
  block L_985 (x_1991: list_3)
    val x_1992: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1856, x_1991)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_986
  block L_986 (env_394: unit)
    call L_987 (::?_1 (env_394, x_1992)) handle _ => L_5
  block L_987 (x_1993: list_3)
    val x_1994: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1857, x_1993)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_988
  block L_988 (env_395: unit)
    call L_989 (::?_1 (env_395, x_1994)) handle _ => L_5
  block L_989 (x_1995: list_3)
    val x_1996: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1858, x_1995)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_990
  block L_990 (env_396: unit)
    call L_991 (::?_1 (env_396, x_1996)) handle _ => L_5
  block L_991 (x_1997: list_3)
    val x_1998: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1859, x_1997)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_992
  block L_992 (env_397: unit)
    call L_993 (::?_1 (env_397, x_1998)) handle _ => L_5
  block L_993 (x_1999: list_3)
    val x_2000: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1860, x_1999)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_994
  block L_994 (env_398: unit)
    call L_995 (::?_1 (env_398, x_2000)) handle _ => L_5
  block L_995 (x_2001: list_3)
    val x_2002: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1861, x_2001)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_996
  block L_996 (env_399: unit)
    call L_997 (::?_1 (env_399, x_2002)) handle _ => L_5
  block L_997 (x_2003: list_3)
    val x_2004: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1862, x_2003)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_998
  block L_998 (env_400: unit)
    call L_999 (::?_1 (env_400, x_2004)) handle _ => L_5
  block L_999 (x_2005: list_3)
    val x_2006: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1863, x_2005)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1000
  block L_1000 (env_401: unit)
    call L_1001 (::?_1 (env_401, x_2006)) handle _ => L_5
  block L_1001 (x_2007: list_3)
    val x_2008: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1864, x_2007)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1002
  block L_1002 (env_402: unit)
    call L_1003 (::?_1 (env_402, x_2008)) handle _ => L_5
  block L_1003 (x_2009: list_3)
    val x_2010: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1865, x_2009)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1004
  block L_1004 (env_403: unit)
    call L_1005 (::?_1 (env_403, x_2010)) handle _ => L_5
  block L_1005 (x_2011: list_3)
    val x_2012: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1866, x_2011)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1006
  block L_1006 (env_404: unit)
    call L_1007 (::?_1 (env_404, x_2012)) handle _ => L_5
  block L_1007 (x_2013: list_3)
    val x_2014: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1867, x_2013)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1008
  block L_1008 (env_405: unit)
    call L_1009 (::?_1 (env_405, x_2014)) handle _ => L_5
  block L_1009 (x_2015: list_3)
    val x_2016: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1868, x_2015)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1010
  block L_1010 (env_406: unit)
    call L_1011 (::?_1 (env_406, x_2016)) handle _ => L_5
  block L_1011 (x_2017: list_3)
    val x_2018: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1869, x_2017)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1012
  block L_1012 (env_407: unit)
    call L_1013 (::?_1 (env_407, x_2018)) handle _ => L_5
  block L_1013 (x_2019: list_3)
    val x_2020: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1870, x_2019)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1014
  block L_1014 (env_408: unit)
    call L_1015 (::?_1 (env_408, x_2020)) handle _ => L_5
  block L_1015 (x_2021: list_3)
    val x_2022: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1871, x_2021)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1016
  block L_1016 (env_409: unit)
    call L_1017 (::?_1 (env_409, x_2022)) handle _ => L_5
  block L_1017 (x_2023: list_3)
    val x_2024: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1872, x_2023)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1018
  block L_1018 (env_410: unit)
    call L_1019 (::?_1 (env_410, x_2024)) handle _ => L_5
  block L_1019 (x_2025: list_3)
    val x_2026: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1873, x_2025)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1020
  block L_1020 (env_411: unit)
    call L_1021 (::?_1 (env_411, x_2026)) handle _ => L_5
  block L_1021 (x_2027: list_3)
    val x_2028: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1874, x_2027)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1022
  block L_1022 (env_412: unit)
    call L_1023 (::?_1 (env_412, x_2028)) handle _ => L_5
  block L_1023 (x_2029: list_3)
    val x_2030: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1875, x_2029)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1024
  block L_1024 (env_413: unit)
    call L_1025 (::?_1 (env_413, x_2030)) handle _ => L_5
  block L_1025 (x_2031: list_3)
    val x_2032: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1876, x_2031)
    case ::?_0 (*con ::?Env ... e_41)*) of
      ::?Env_0 => L_1026
  block L_1026 (env_414: unit)
    call L_1027 (::?_1 (env_414, x_2032)) handle _ => L_5
  block L_1027 (errorNames_0: list_3)
    val x_2033: (lambdas_31, list_3) tuple = (concat_0, errorNames_0)
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_1028
  block L_1028 (env_415: unit)
    call L_1029 (x_1792 (env_415, messagers_0)) handle _ => L_5
  block L_1029 (x_2034: list_0)
    val x_2037: lambdas_0 = con xEnv_248 (x_2033)
    val x_2036: (lambdas_0, list_0) tuple = (x_2037, x_2034)
    val x_2035: list_0 = con ::_3 (x_2036)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_2035)
    val tuple_82: (cpointer, lambdas_484) tuple = (null_0, arrayAlloc_0)
    val errorMsg_0: lambdas_226 = con errorMsgEnv_0 (tuple_82)
    val raiseSys_1: lambdas_48 = con raiseSysEnv_0 (errorMsg_0)
    val raiseSys_0: lambdas_57 = con raiseSysEnv_1 (errorMsg_0)
    val blocker_0: (lambdas_49) ref =
      prim Ref_ref[lambdas_49] (x_904 (*con xEnv_53 (x_903)*))
    val restartFlag_0: (bool) ref = prim Ref_ref[bool] (x_905 (*con true*))
    val tuple_81: (lambdas_226, word32) tuple = (errorMsg_0, inval_0)
    val setRoundingMode_0: lambdas_102 = con setRoundingModeEnv_0 (tuple_81)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1030
  block L_1030 (env_416: unit)
    call L_1031 (sextdFromInt32ToInt32_1 (env_416, realSize_0 (*0x20:w32*))) handle _ => L_5
  block L_1031 (realSize_2: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1032
  block L_1032 (env_417: unit)
    call L_1033 (sextdFromInt32ToInt32_1 (env_417, exponentBias_0 (*0x7F:w32*))) handle _ => L_5
  block L_1033 (exponentBias_2: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1034
  block L_1034 (env_418: unit)
    call L_1035 (sextdFromInt32ToInt32_1 (env_418, precision_4 (*0x18:w32*))) handle _ => L_5
  block L_1035 (precision_6: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1036
  block L_1036 (env_419: unit)
    call L_1037 (sextdFromInt32ToWord32_1 (env_419, realSize_2)) handle _ => L_5
  block L_1037 (x_2038: word32)
    val x_2039: (word32, word32) tuple = (x_2038, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1038
  block L_1038 (env_420: unit)
    call L_1039 (-_3 (env_420, x_2039)) handle _ => L_5
  block L_1039 (exponentSignificandBits_0: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1040
  block L_1040 (env_421: unit)
    call L_1041 (sextdFromInt32ToWord32_1 (env_421, precision_6)) handle _ => L_5
  block L_1041 (x_2040: word32)
    val x_2041: (word32, word32) tuple = (x_2040, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1042
  block L_1042 (env_422: unit)
    call L_1043 (-_3 (env_422, x_2041)) handle _ => L_5
  block L_1043 (significandBits_0: word32)
    val x_2042: (word32, word32) tuple =
      (exponentSignificandBits_0, significandBits_0)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1044
  block L_1044 (env_423: unit)
    call L_1045 (-_3 (env_423, x_2042)) handle _ => L_5
  block L_1045 (exponentBits_0: word32)
    val x_2043: (lambdas_117, word32) tuple = (<<_6, zero_3)
    call L_1046 (mkMask_0 (x_2043, one_2)) handle _ => L_5
  block L_1046 (x_2044: word32)
    val x_2045: (word32, word32) tuple = (x_2044, exponentSignificandBits_0)
    call L_1047 (<<_8 (tuple_77, x_2045)) handle _ => L_5
  block L_1047 (signMask_0: word32)
    call L_1048 (mkMask_0 (x_2043, exponentBits_0)) handle _ => L_5
  block L_1048 (x_2046: word32)
    val x_2047: (word32, word32) tuple = (x_2046, significandBits_0)
    call L_1049 (<<_8 (tuple_77, x_2047)) handle _ => L_5
  block L_1049 (exponentMask_0: word32)
    call L_1050 (mkMask_0 (x_2043, significandBits_0)) handle _ => L_5
  block L_1050 (significandMask_0: word32)
    val x_2048: (word32, word32, word32) tuple =
      (zero_3, significandMask_0, exponentMask_0)
    val class_0: lambdas_172 = con classEnv_1 (x_2048)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1051
  block L_1051 (env_424: unit)
    call L_1052 (x_2049 (env_424, x_1475)) handle _ => L_5
  block L_1052 (x_2050: bool)
    case x_2050 of
      true => L_1054 | false => L_1053
  block L_1053 ()
    val x_2052: lambdas_223 = con xEnv_210 (setRoundingMode_0)
    val x_2051: (lambdas_223, lambdas_354) tuple =
      (x_2052, toReal32Unsafe_0 (*con toReal ... _222)*))
    goto L_1055 (x_2051)
  block L_1054 ()
    val x_2054: lambdas_222 = #0 (x_1476)
    val x_2053: lambdas_354 = #1 (x_1476)
    case x_2054 of
      xEnv_55 => L_1056
  block L_1056 (x_2055: unit)
    val x_2057: lambdas_223 = con xEnv_211 (x_2055)
    val x_2056: (lambdas_223, lambdas_354) tuple = (x_2057, x_2053)
    goto L_1055 (x_2056)
  block L_1055 (x_2058: (lambdas_223, lambdas_354) tuple)
    case castFromWord_0 (*con castFr ... _251)*) of
      castFromWordEnv_0 => L_1057
  block L_1057 (env_425: unit)
    call L_1058 (castFromWord_2 (env_425, zero_3)) handle _ => L_5
  block L_1058 (zero_7: real32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1059
  block L_1059 (env_426: unit)
    call L_1060 (sextdFromInt32ToWord32_1 (env_426, exponentBias_2)) handle _ => L_5
  block L_1060 (x_2059: word32)
    val x_2060: (word32, word32) tuple = (x_2059, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1061
  block L_1061 (env_427: unit)
    call L_1062 (-_3 (env_427, x_2060)) handle _ => L_5
  block L_1062 (x_2061: word32)
    val x_2062: (word32, word32) tuple = (x_2061, significandBits_0)
    call L_1063 (<<_8 (tuple_77, x_2062)) handle _ => L_5
  block L_1063 (x_2063: word32)
    case castFromWord_0 (*con castFr ... _251)*) of
      castFromWordEnv_0 => L_1064
  block L_1064 (env_428: unit)
    call L_1065 (castFromWord_2 (env_428, x_2063)) handle _ => L_5
  block L_1065 (half_0: real32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1066
  block L_1066 (env_429: unit)
    call L_1067 (sextdFromInt32ToWord32_1 (env_429, exponentBias_2)) handle _ => L_5
  block L_1067 (x_2064: word32)
    val x_2065: (word32, word32) tuple = (x_2064, significandBits_0)
    call L_1068 (<<_8 (tuple_77, x_2065)) handle _ => L_5
  block L_1068 (x_2066: word32)
    case castFromWord_0 (*con castFr ... _251)*) of
      castFromWordEnv_0 => L_1069
  block L_1069 (env_430: unit)
    call L_1070 (castFromWord_2 (env_430, x_2066)) handle _ => L_5
  block L_1070 (one_6: real32)
    val x_2068: (lambdas_165, lambdas_164, word8) tuple =
      (<<_0, >>_0, maxInt'_0)
    val x_2067: (word32, word32) tuple = (precision_6, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1071
  block L_1071 (env_431: unit)
    call L_1072 (<_5 (env_431, x_2067)) handle _ => L_5
  block L_1072 (x_2069: bool)
    case x_2069 of
      true => L_1074 | false => L_1073
  block L_1073 ()
    call L_1075 (x_2070 (x_2068, x_931 (*0x0:w32*))) handle _ => L_5
  block L_1075 (maxInt'_4: word8)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1076
  block L_1076 (env_432: unit)
    call L_1077 (fromInt8Unsafe_2 (env_432, maxInt'_4)) handle _ => L_5
  block L_1077 (maxInt_0: real32)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1078
  block L_1078 (env_433: unit)
    call L_1079 (fromInt8Unsafe_2 (env_433, minInt'_0)) handle _ => L_5
  block L_1079 (minInt_0: real32)
    val x_2072:
      (real32, real32, lambdas_102, real32, word8, real32, word8) tuple =
      (minInt_0,
       maxInt_0,
       setRoundingMode_0,
       one_6,
       maxInt'_4,
       half_0,
       minInt'_0)
    val x_2071: lambdas_218 = con xEnv_205 (x_2072)
    goto L_1080 (x_2071)
  block L_1074 ()
    val x_2073: (word32, word32) tuple = (precision'_0, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1081
  block L_1081 (env_434: unit)
    call L_1082 (x_1780 (env_434, x_2073)) handle _ => L_5
  block L_1082 (x_2074: word32)
    val x_2075: (word32, word32) tuple = (x_2074, x_928 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1083
  block L_1083 (env_435: unit)
    call L_1084 (x_1780 (env_435, x_2075)) handle _ => L_5
  block L_1084 (trim_0: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1085
  block L_1085 (env_436: unit)
    call L_1086 (sextdFromInt32ToWord32_1 (env_436, trim_0)) handle _ => L_5
  block L_1086 (x_2076: word32)
    call L_1087 (x_2070 (x_2068, x_2076)) handle _ => L_5
  block L_1087 (maxInt'_5: word8)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1088
  block L_1088 (env_437: unit)
    call L_1089 (fromInt8Unsafe_2 (env_437, maxInt'_5)) handle _ => L_5
  block L_1089 (maxInt_1: real32)
    case fromInt8Unsafe_0 (*con fromIn ... _209)*) of
      fromInt8UnsafeEnv_0 => L_1090
  block L_1090 (env_438: unit)
    call L_1091 (fromInt8Unsafe_2 (env_438, minInt'_0)) handle _ => L_5
  block L_1091 (minInt_1: real32)
    val x_2078: (real32, real32, lambdas_102) tuple =
      (minInt_1, maxInt_1, setRoundingMode_0)
    val x_2077: lambdas_218 = con xEnv_206 (x_2078)
    goto L_1080 (x_2077)
  block L_1080 (x_2079: lambdas_218)
    val x_2081: (lambdas_157, lambdas_156, word16) tuple =
      (<<_1, >>_1, maxInt'_1)
    val x_2080: (word32, word32) tuple = (precision_6, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1092
  block L_1092 (env_439: unit)
    call L_1093 (<_5 (env_439, x_2080)) handle _ => L_5
  block L_1093 (x_2082: bool)
    case x_2082 of
      true => L_1095 | false => L_1094
  block L_1094 ()
    call L_1096 (x_2083 (x_2081, x_937 (*0x0:w32*))) handle _ => L_5
  block L_1096 (maxInt'_6: word16)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1097
  block L_1097 (env_440: unit)
    call L_1098 (fromInt16Unsafe_2 (env_440, maxInt'_6)) handle _ => L_5
  block L_1098 (maxInt_2: real32)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1099
  block L_1099 (env_441: unit)
    call L_1100 (fromInt16Unsafe_2 (env_441, minInt'_1)) handle _ => L_5
  block L_1100 (minInt_2: real32)
    val x_2085:
      (real32, real32, lambdas_102, real32, word16, real32, word16) tuple =
      (minInt_2,
       maxInt_2,
       setRoundingMode_0,
       one_6,
       maxInt'_6,
       half_0,
       minInt'_1)
    val x_2084: lambdas_212 = con xEnv_198 (x_2085)
    goto L_1101 (x_2084)
  block L_1095 ()
    val x_2086: (word32, word32) tuple = (precision'_1, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1102
  block L_1102 (env_442: unit)
    call L_1103 (x_1780 (env_442, x_2086)) handle _ => L_5
  block L_1103 (x_2087: word32)
    val x_2088: (word32, word32) tuple = (x_2087, x_934 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1104
  block L_1104 (env_443: unit)
    call L_1105 (x_1780 (env_443, x_2088)) handle _ => L_5
  block L_1105 (trim_1: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1106
  block L_1106 (env_444: unit)
    call L_1107 (sextdFromInt32ToWord32_1 (env_444, trim_1)) handle _ => L_5
  block L_1107 (x_2089: word32)
    call L_1108 (x_2083 (x_2081, x_2089)) handle _ => L_5
  block L_1108 (maxInt'_7: word16)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1109
  block L_1109 (env_445: unit)
    call L_1110 (fromInt16Unsafe_2 (env_445, maxInt'_7)) handle _ => L_5
  block L_1110 (maxInt_3: real32)
    case fromInt16Unsafe_0 (*con fromIn ... _210)*) of
      fromInt16UnsafeEnv_0 => L_1111
  block L_1111 (env_446: unit)
    call L_1112 (fromInt16Unsafe_2 (env_446, minInt'_1)) handle _ => L_5
  block L_1112 (minInt_3: real32)
    val x_2091: (real32, real32, lambdas_102) tuple =
      (minInt_3, maxInt_3, setRoundingMode_0)
    val x_2090: lambdas_212 = con xEnv_199 (x_2091)
    goto L_1101 (x_2090)
  block L_1101 (x_2092: lambdas_212)
    val x_2094: (lambdas_149, lambdas_148, word32) tuple =
      (<<_2, >>_2, maxInt'_2)
    val x_2093: (word32, word32) tuple = (precision_6, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1113
  block L_1113 (env_447: unit)
    call L_1114 (<_5 (env_447, x_2093)) handle _ => L_5
  block L_1114 (x_2095: bool)
    case x_2095 of
      true => L_1116 | false => L_1115
  block L_1115 ()
    call L_1117 (x_2096 (x_2094, x_943 (*0x0:w32*))) handle _ => L_5
  block L_1117 (maxInt'_8: word32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1118
  block L_1118 (env_448: unit)
    call L_1119 (fromInt32Unsafe_2 (env_448, maxInt'_8)) handle _ => L_5
  block L_1119 (maxInt_4: real32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1120
  block L_1120 (env_449: unit)
    call L_1121 (fromInt32Unsafe_2 (env_449, minInt'_2)) handle _ => L_5
  block L_1121 (minInt_4: real32)
    val x_2098:
      (real32, real32, lambdas_102, real32, word32, real32, word32) tuple =
      (minInt_4,
       maxInt_4,
       setRoundingMode_0,
       one_6,
       maxInt'_8,
       half_0,
       minInt'_2)
    val x_2097: lambdas_206 = con xEnv_191 (x_2098)
    goto L_1122 (x_2097)
  block L_1116 ()
    val x_2099: (word32, word32) tuple = (precision'_2, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1123
  block L_1123 (env_450: unit)
    call L_1124 (x_1780 (env_450, x_2099)) handle _ => L_5
  block L_1124 (x_2100: word32)
    val x_2101: (word32, word32) tuple = (x_2100, x_940 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1125
  block L_1125 (env_451: unit)
    call L_1126 (x_1780 (env_451, x_2101)) handle _ => L_5
  block L_1126 (trim_2: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1127
  block L_1127 (env_452: unit)
    call L_1128 (sextdFromInt32ToWord32_1 (env_452, trim_2)) handle _ => L_5
  block L_1128 (x_2102: word32)
    call L_1129 (x_2096 (x_2094, x_2102)) handle _ => L_5
  block L_1129 (maxInt'_9: word32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1130
  block L_1130 (env_453: unit)
    call L_1131 (fromInt32Unsafe_2 (env_453, maxInt'_9)) handle _ => L_5
  block L_1131 (maxInt_5: real32)
    case fromInt32Unsafe_0 (*con fromIn ... _211)*) of
      fromInt32UnsafeEnv_0 => L_1132
  block L_1132 (env_454: unit)
    call L_1133 (fromInt32Unsafe_2 (env_454, minInt'_2)) handle _ => L_5
  block L_1133 (minInt_5: real32)
    val x_2104: (real32, real32, lambdas_102) tuple =
      (minInt_5, maxInt_5, setRoundingMode_0)
    val x_2103: lambdas_206 = con xEnv_192 (x_2104)
    goto L_1122 (x_2103)
  block L_1122 (x_2105: lambdas_206)
    val x_2107: (lambdas_141, lambdas_140, word64) tuple =
      (<<_3, >>_3, maxInt'_3)
    val x_2106: (word32, word32) tuple = (precision_6, precision'_3)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1134
  block L_1134 (env_455: unit)
    call L_1135 (<_5 (env_455, x_2106)) handle _ => L_5
  block L_1135 (x_2108: bool)
    case x_2108 of
      true => L_1137 | false => L_1136
  block L_1136 ()
    call L_1138 (x_2109 (x_2107, x_949 (*0x0:w32*))) handle _ => L_5
  block L_1138 (maxInt'_10: word64)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1139
  block L_1139 (env_456: unit)
    call L_1140 (fromInt64Unsafe_2 (env_456, maxInt'_10)) handle _ => L_5
  block L_1140 (maxInt_6: real32)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1141
  block L_1141 (env_457: unit)
    call L_1142 (fromInt64Unsafe_2 (env_457, minInt'_3)) handle _ => L_5
  block L_1142 (minInt_6: real32)
    val x_2111:
      (real32, real32, lambdas_102, real32, word64, real32, word64) tuple =
      (minInt_6,
       maxInt_6,
       setRoundingMode_0,
       one_6,
       maxInt'_10,
       half_0,
       minInt'_3)
    val x_2110: lambdas_200 = con xEnv_184 (x_2111)
    goto L_1143 (x_2110)
  block L_1137 ()
    val x_2112: (word32, word32) tuple = (precision'_3, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1144
  block L_1144 (env_458: unit)
    call L_1145 (x_1780 (env_458, x_2112)) handle _ => L_5
  block L_1145 (x_2113: word32)
    val x_2114: (word32, word32) tuple = (x_2113, x_946 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1146
  block L_1146 (env_459: unit)
    call L_1147 (x_1780 (env_459, x_2114)) handle _ => L_5
  block L_1147 (trim_3: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1148
  block L_1148 (env_460: unit)
    call L_1149 (sextdFromInt32ToWord32_1 (env_460, trim_3)) handle _ => L_5
  block L_1149 (x_2115: word32)
    call L_1150 (x_2109 (x_2107, x_2115)) handle _ => L_5
  block L_1150 (maxInt'_11: word64)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1151
  block L_1151 (env_461: unit)
    call L_1152 (fromInt64Unsafe_2 (env_461, maxInt'_11)) handle _ => L_5
  block L_1152 (maxInt_7: real32)
    case fromInt64Unsafe_0 (*con fromIn ... _212)*) of
      fromInt64UnsafeEnv_0 => L_1153
  block L_1153 (env_462: unit)
    call L_1154 (fromInt64Unsafe_2 (env_462, minInt'_3)) handle _ => L_5
  block L_1154 (minInt_7: real32)
    val x_2117: (real32, real32, lambdas_102) tuple =
      (minInt_7, maxInt_7, setRoundingMode_0)
    val x_2116: lambdas_200 = con xEnv_185 (x_2117)
    goto L_1143 (x_2116)
  block L_1143 (x_2118: lambdas_200)
    val x_2120: (lambdas_133, lambdas_132, word8) tuple =
      (<<_4, >>_4, maxWord'_0)
    val x_2119: (word32, word32) tuple = (precision_6, wordSize_0)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1155
  block L_1155 (env_463: unit)
    call L_1156 (<=_4 (env_463, x_2119)) handle _ => L_5
  block L_1156 (x_2121: bool)
    case x_2121 of
      true => L_1158 | false => L_1157
  block L_1157 ()
    call L_1159 (x_2122 (x_2120, x_954 (*0x0:w32*))) handle _ => L_5
  block L_1159 (maxWord'_4: word8)
    case fromWord8Unsafe_0 (*con fromWo ... _214)*) of
      fromWord8UnsafeEnv_0 => L_1160
  block L_1160 (env_464: unit)
    call L_1161 (fromWord8Unsafe_2 (env_464, maxWord'_4)) handle _ => L_5
  block L_1161 (maxWord_0: real32)
    val x_2124:
      (lambdas_172, real32, real32, lambdas_102, real32, word8, real32) tuple =
      (class_0, zero_7, maxWord_0, setRoundingMode_0, one_6, maxWord'_4, half_0)
    val x_2123: lambdas_194 = con xEnv_177 (x_2124)
    goto L_1162 (x_2123)
  block L_1158 ()
    val x_2125: (word32, word32) tuple = (wordSize_0, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1163
  block L_1163 (env_465: unit)
    call L_1164 (x_1780 (env_465, x_2125)) handle _ => L_5
  block L_1164 (trim_4: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1165
  block L_1165 (env_466: unit)
    call L_1166 (sextdFromInt32ToWord32_1 (env_466, trim_4)) handle _ => L_5
  block L_1166 (x_2126: word32)
    call L_1167 (x_2122 (x_2120, x_2126)) handle _ => L_5
  block L_1167 (maxWord'_5: word8)
    case fromWord8Unsafe_0 (*con fromWo ... _214)*) of
      fromWord8UnsafeEnv_0 => L_1168
  block L_1168 (env_467: unit)
    call L_1169 (fromWord8Unsafe_2 (env_467, maxWord'_5)) handle _ => L_5
  block L_1169 (maxWord_1: real32)
    val x_2128:
      (lambdas_172, real32, real32, lambdas_102, real32, real32) tuple =
      (class_0, zero_7, maxWord_1, setRoundingMode_0, one_6, half_0)
    val x_2127: lambdas_194 = con xEnv_178 (x_2128)
    goto L_1162 (x_2127)
  block L_1162 (x_2129: lambdas_194)
    val x_2131: (lambdas_125, lambdas_124, word16) tuple =
      (<<_5, >>_5, maxWord'_1)
    val x_2130: (word32, word32) tuple = (precision_6, wordSize_1)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1170
  block L_1170 (env_468: unit)
    call L_1171 (<=_4 (env_468, x_2130)) handle _ => L_5
  block L_1171 (x_2132: bool)
    case x_2132 of
      true => L_1173 | false => L_1172
  block L_1172 ()
    call L_1174 (x_2133 (x_2131, x_959 (*0x0:w32*))) handle _ => L_5
  block L_1174 (maxWord'_6: word16)
    case fromWord16Unsafe_0 (*con fromWo ... _215)*) of
      fromWord16UnsafeEnv_0 => L_1175
  block L_1175 (env_469: unit)
    call L_1176 (fromWord16Unsafe_2 (env_469, maxWord'_6)) handle _ => L_5
  block L_1176 (maxWord_2: real32)
    val x_2135:
      (lambdas_172, real32, real32, lambdas_102, real32, word16, real32) tuple =
      (class_0, zero_7, maxWord_2, setRoundingMode_0, one_6, maxWord'_6, half_0)
    val x_2134: lambdas_188 = con xEnv_170 (x_2135)
    goto L_1177 (x_2134)
  block L_1173 ()
    val x_2136: (word32, word32) tuple = (wordSize_1, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1178
  block L_1178 (env_470: unit)
    call L_1179 (x_1780 (env_470, x_2136)) handle _ => L_5
  block L_1179 (trim_5: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1180
  block L_1180 (env_471: unit)
    call L_1181 (sextdFromInt32ToWord32_1 (env_471, trim_5)) handle _ => L_5
  block L_1181 (x_2137: word32)
    call L_1182 (x_2133 (x_2131, x_2137)) handle _ => L_5
  block L_1182 (maxWord'_7: word16)
    case fromWord16Unsafe_0 (*con fromWo ... _215)*) of
      fromWord16UnsafeEnv_0 => L_1183
  block L_1183 (env_472: unit)
    call L_1184 (fromWord16Unsafe_2 (env_472, maxWord'_7)) handle _ => L_5
  block L_1184 (maxWord_3: real32)
    val x_2139:
      (lambdas_172, real32, real32, lambdas_102, real32, real32) tuple =
      (class_0, zero_7, maxWord_3, setRoundingMode_0, one_6, half_0)
    val x_2138: lambdas_188 = con xEnv_171 (x_2139)
    goto L_1177 (x_2138)
  block L_1177 (x_2140: lambdas_188)
    val x_2142: (lambdas_117, lambdas_116, word32) tuple =
      (<<_6, >>_6, maxWord'_2)
    val x_2141: (word32, word32) tuple = (precision_6, wordSize_2)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1185
  block L_1185 (env_473: unit)
    call L_1186 (<=_4 (env_473, x_2141)) handle _ => L_5
  block L_1186 (x_2143: bool)
    case x_2143 of
      true => L_1188 | false => L_1187
  block L_1187 ()
    call L_1189 (x_2144 (x_2142, x_964 (*0x0:w32*))) handle _ => L_5
  block L_1189 (maxWord'_8: word32)
    case fromWord32Unsafe_0 (*con fromWo ... _216)*) of
      fromWord32UnsafeEnv_0 => L_1190
  block L_1190 (env_474: unit)
    call L_1191 (fromWord32Unsafe_2 (env_474, maxWord'_8)) handle _ => L_5
  block L_1191 (maxWord_4: real32)
    val x_2146:
      (lambdas_172, real32, real32, lambdas_102, real32, word32, real32, word32) tuple =
      (class_0,
       zero_7,
       maxWord_4,
       setRoundingMode_0,
       one_6,
       maxWord'_8,
       half_0,
       zero_3)
    val x_2145: lambdas_182 = con xEnv_163 (x_2146)
    goto L_1192 (x_2145)
  block L_1188 ()
    val x_2147: (word32, word32) tuple = (wordSize_2, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1193
  block L_1193 (env_475: unit)
    call L_1194 (x_1780 (env_475, x_2147)) handle _ => L_5
  block L_1194 (trim_6: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1195
  block L_1195 (env_476: unit)
    call L_1196 (sextdFromInt32ToWord32_1 (env_476, trim_6)) handle _ => L_5
  block L_1196 (x_2148: word32)
    call L_1197 (x_2144 (x_2142, x_2148)) handle _ => L_5
  block L_1197 (maxWord'_9: word32)
    case fromWord32Unsafe_0 (*con fromWo ... _216)*) of
      fromWord32UnsafeEnv_0 => L_1198
  block L_1198 (env_477: unit)
    call L_1199 (fromWord32Unsafe_2 (env_477, maxWord'_9)) handle _ => L_5
  block L_1199 (maxWord_5: real32)
    val x_2150:
      (lambdas_172, real32, real32, lambdas_102, real32, word32, real32) tuple =
      (class_0, zero_7, maxWord_5, setRoundingMode_0, one_6, zero_3, half_0)
    val x_2149: lambdas_182 = con xEnv_164 (x_2150)
    goto L_1192 (x_2149)
  block L_1192 (x_2151: lambdas_182)
    val x_2153: (lambdas_109, lambdas_108, word64) tuple =
      (<<_7, >>_7, maxWord'_3)
    val x_2152: (word32, word32) tuple = (precision_6, wordSize_3)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1200
  block L_1200 (env_478: unit)
    call L_1201 (<=_4 (env_478, x_2152)) handle _ => L_5
  block L_1201 (x_2154: bool)
    case x_2154 of
      true => L_1203 | false => L_1202
  block L_1202 ()
    call L_1204 (x_2155 (x_2153, x_969 (*0x0:w32*))) handle _ => L_5
  block L_1204 (maxWord'_10: word64)
    case fromWord64Unsafe_0 (*con fromWo ... _217)*) of
      fromWord64UnsafeEnv_0 => L_1205
  block L_1205 (env_479: unit)
    call L_1206 (fromWord64Unsafe_2 (env_479, maxWord'_10)) handle _ => L_5
  block L_1206 (maxWord_6: real32)
    val x_2157:
      (lambdas_172, real32, real32, lambdas_102, real32, word64, real32, word64) tuple =
      (class_0,
       zero_7,
       maxWord_6,
       setRoundingMode_0,
       one_6,
       maxWord'_10,
       half_0,
       zero_5)
    val x_2156: lambdas_176 = con xEnv_156 (x_2157)
    goto L_1207 (x_2156)
  block L_1203 ()
    val x_2158: (word32, word32) tuple = (wordSize_3, precision_6)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1208
  block L_1208 (env_480: unit)
    call L_1209 (x_1780 (env_480, x_2158)) handle _ => L_5
  block L_1209 (trim_7: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1210
  block L_1210 (env_481: unit)
    call L_1211 (sextdFromInt32ToWord32_1 (env_481, trim_7)) handle _ => L_5
  block L_1211 (x_2159: word32)
    call L_1212 (x_2155 (x_2153, x_2159)) handle _ => L_5
  block L_1212 (maxWord'_11: word64)
    case fromWord64Unsafe_0 (*con fromWo ... _217)*) of
      fromWord64UnsafeEnv_0 => L_1213
  block L_1213 (env_482: unit)
    call L_1214 (fromWord64Unsafe_2 (env_482, maxWord'_11)) handle _ => L_5
  block L_1214 (maxWord_7: real32)
    val x_2161:
      (lambdas_172, real32, real32, lambdas_102, real32, word64, real32) tuple =
      (class_0, zero_7, maxWord_7, setRoundingMode_0, one_6, zero_5, half_0)
    val x_2160: lambdas_176 = con xEnv_157 (x_2161)
    goto L_1207 (x_2160)
  block L_1207 (x_2162: lambdas_176)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1215
  block L_1215 (env_483: unit)
    call L_1216 (sextdFromInt32ToInt32_1 (env_483, realSize_1 (*0x40:w32*))) handle _ => L_5
  block L_1216 (realSize_3: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1217
  block L_1217 (env_484: unit)
    call L_1218 (sextdFromInt32ToInt32_1 (env_484, exponentBias_1 (*0x3FF:w32*))) handle _ => L_5
  block L_1218 (exponentBias_3: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1219
  block L_1219 (env_485: unit)
    call L_1220 (sextdFromInt32ToInt32_1 (env_485, precision_5 (*0x35:w32*))) handle _ => L_5
  block L_1220 (precision_7: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1221
  block L_1221 (env_486: unit)
    call L_1222 (sextdFromInt32ToWord32_1 (env_486, realSize_3)) handle _ => L_5
  block L_1222 (x_2163: word32)
    val x_2164: (word32, word32) tuple = (x_2163, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1223
  block L_1223 (env_487: unit)
    call L_1224 (-_3 (env_487, x_2164)) handle _ => L_5
  block L_1224 (exponentSignificandBits_1: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1225
  block L_1225 (env_488: unit)
    call L_1226 (sextdFromInt32ToWord32_1 (env_488, precision_7)) handle _ => L_5
  block L_1226 (x_2165: word32)
    val x_2166: (word32, word32) tuple = (x_2165, one_2)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1227
  block L_1227 (env_489: unit)
    call L_1228 (-_3 (env_489, x_2166)) handle _ => L_5
  block L_1228 (significandBits_1: word32)
    val x_2167: (word32, word32) tuple =
      (exponentSignificandBits_1, significandBits_1)
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_1229
  block L_1229 (env_490: unit)
    call L_1230 (-_3 (env_490, x_2167)) handle _ => L_5
  block L_1230 (exponentBits_1: word32)
    val x_2168: (lambdas_109, word64) tuple = (<<_7, zero_5)
    call L_1231 (mkMask_1 (x_2168, one_2)) handle _ => L_5
  block L_1231 (x_2169: word64)
    val x_2170: (word64, word32) tuple = (x_2169, exponentSignificandBits_1)
    call L_1232 (<<_9 (tuple_79, x_2170)) handle _ => L_5
  block L_1232 (signMask_1: word64)
    call L_1233 (mkMask_1 (x_2168, exponentBits_1)) handle _ => L_5
  block L_1233 (x_2171: word64)
    val x_2172: (word64, word32) tuple = (x_2171, significandBits_1)
    call L_1234 (<<_9 (tuple_79, x_2172)) handle _ => L_5
  block L_1234 (exponentMask_1: word64)
    call L_1235 (mkMask_1 (x_2168, significandBits_1)) handle _ => L_5
  block L_1235 (significandMask_1: word64)
    val x_2173: (word64, word64, word64) tuple =
      (zero_5, significandMask_1, exponentMask_1)
    val class_1: lambdas_101 = con classEnv_0 (x_2173)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1236
  block L_1236 (env_491: unit)
    call L_1237 (x_2049 (env_491, x_1477)) handle _ => L_5
  block L_1237 (x_2174: bool)
    case x_2174 of
      true => L_1239 | false => L_1238
  block L_1238 ()
    val x_2176: lambdas_169 = con xEnv_150 (setRoundingMode_0)
    val x_2175: (lambdas_169, lambdas_328) tuple =
      (x_2176, toReal32Unsafe_1 (*con toReal ... _246)*))
    goto L_1240 (x_2175)
  block L_1239 ()
    val x_2178: lambdas_168 = #0 (x_1478)
    val x_2177: lambdas_328 = #1 (x_1478)
    case x_2178 of
      xEnv_56 => L_1241
  block L_1241 (x_2179: unit)
    val x_2181: lambdas_169 = con xEnv_151 (x_2179)
    val x_2180: (lambdas_169, lambdas_328) tuple = (x_2181, x_2177)
    goto L_1240 (x_2180)
  block L_1240 (x_2182: (lambdas_169, lambdas_328) tuple)
    case castFromWord_1 (*con castFr ... _252)*) of
      castFromWordEnv_1 => L_1242
  block L_1242 (env_492: unit)
    call L_1243 (castFromWord_3 (env_492, zero_5)) handle _ => L_5
  block L_1243 (zero_8: real64)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_1244
  block L_1244 (env_493: unit)
    call L_1245 (sextdFromInt32ToWord64_1 (env_493, exponentBias_3)) handle _ => L_5
  block L_1245 (x_2183: word64)
    val x_2185: word64 = prim Word64_sub (x_2183, one_4)
    val x_2184: (word64, word32) tuple = (x_2185, significandBits_1)
    call L_1246 (<<_9 (tuple_79, x_2184)) handle _ => L_5
  block L_1246 (x_2186: word64)
    case castFromWord_1 (*con castFr ... _252)*) of
      castFromWordEnv_1 => L_1247
  block L_1247 (env_494: unit)
    call L_1248 (castFromWord_3 (env_494, x_2186)) handle _ => L_5
  block L_1248 (half_1: real64)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_1249
  block L_1249 (env_495: unit)
    call L_1250 (sextdFromInt32ToWord64_1 (env_495, exponentBias_3)) handle _ => L_5
  block L_1250 (x_2187: word64)
    val x_2188: (word64, word32) tuple = (x_2187, significandBits_1)
    call L_1251 (<<_9 (tuple_79, x_2188)) handle _ => L_5
  block L_1251 (x_2189: word64)
    case castFromWord_1 (*con castFr ... _252)*) of
      castFromWordEnv_1 => L_1252
  block L_1252 (env_496: unit)
    call L_1253 (castFromWord_3 (env_496, x_2189)) handle _ => L_5
  block L_1253 (one_7: real64)
    val x_2191: (lambdas_165, lambdas_164, word8) tuple =
      (<<_0, >>_0, maxInt'_0)
    val x_2190: (word32, word32) tuple = (precision_7, precision'_0)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1254
  block L_1254 (env_497: unit)
    call L_1255 (<_5 (env_497, x_2190)) handle _ => L_5
  block L_1255 (x_2192: bool)
    case x_2192 of
      true => L_1257 | false => L_1256
  block L_1256 ()
    call L_1258 (x_2193 (x_2191, x_983 (*0x0:w32*))) handle _ => L_5
  block L_1258 (maxInt'_12: word8)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1259
  block L_1259 (env_498: unit)
    call L_1260 (fromInt8Unsafe_3 (env_498, maxInt'_12)) handle _ => L_5
  block L_1260 (maxInt_8: real64)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1261
  block L_1261 (env_499: unit)
    call L_1262 (fromInt8Unsafe_3 (env_499, minInt'_0)) handle _ => L_5
  block L_1262 (minInt_8: real64)
    val x_2195:
      (real64, real64, lambdas_102, real64, word8, real64, word8) tuple =
      (minInt_8,
       maxInt_8,
       setRoundingMode_0,
       one_7,
       maxInt'_12,
       half_1,
       minInt'_0)
    val x_2194: lambdas_162 = con xEnv_145 (x_2195)
    goto L_1263 (x_2194)
  block L_1257 ()
    val x_2196: (word32, word32) tuple = (precision'_0, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1264
  block L_1264 (env_500: unit)
    call L_1265 (x_1780 (env_500, x_2196)) handle _ => L_5
  block L_1265 (x_2197: word32)
    val x_2198: (word32, word32) tuple = (x_2197, x_980 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1266
  block L_1266 (env_501: unit)
    call L_1267 (x_1780 (env_501, x_2198)) handle _ => L_5
  block L_1267 (trim_8: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1268
  block L_1268 (env_502: unit)
    call L_1269 (sextdFromInt32ToWord32_1 (env_502, trim_8)) handle _ => L_5
  block L_1269 (x_2199: word32)
    call L_1270 (x_2193 (x_2191, x_2199)) handle _ => L_5
  block L_1270 (maxInt'_13: word8)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1271
  block L_1271 (env_503: unit)
    call L_1272 (fromInt8Unsafe_3 (env_503, maxInt'_13)) handle _ => L_5
  block L_1272 (maxInt_9: real64)
    case fromInt8Unsafe_1 (*con fromIn ... _233)*) of
      fromInt8UnsafeEnv_1 => L_1273
  block L_1273 (env_504: unit)
    call L_1274 (fromInt8Unsafe_3 (env_504, minInt'_0)) handle _ => L_5
  block L_1274 (minInt_9: real64)
    val x_2201: (real64, real64, lambdas_102) tuple =
      (minInt_9, maxInt_9, setRoundingMode_0)
    val x_2200: lambdas_162 = con xEnv_146 (x_2201)
    goto L_1263 (x_2200)
  block L_1263 (x_2202: lambdas_162)
    val x_2204: (lambdas_157, lambdas_156, word16) tuple =
      (<<_1, >>_1, maxInt'_1)
    val x_2203: (word32, word32) tuple = (precision_7, precision'_1)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1275
  block L_1275 (env_505: unit)
    call L_1276 (<_5 (env_505, x_2203)) handle _ => L_5
  block L_1276 (x_2205: bool)
    case x_2205 of
      true => L_1278 | false => L_1277
  block L_1277 ()
    call L_1279 (x_2206 (x_2204, x_989 (*0x0:w32*))) handle _ => L_5
  block L_1279 (maxInt'_14: word16)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1280
  block L_1280 (env_506: unit)
    call L_1281 (fromInt16Unsafe_3 (env_506, maxInt'_14)) handle _ => L_5
  block L_1281 (maxInt_10: real64)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1282
  block L_1282 (env_507: unit)
    call L_1283 (fromInt16Unsafe_3 (env_507, minInt'_1)) handle _ => L_5
  block L_1283 (minInt_10: real64)
    val x_2208:
      (real64, real64, lambdas_102, real64, word16, real64, word16) tuple =
      (minInt_10,
       maxInt_10,
       setRoundingMode_0,
       one_7,
       maxInt'_14,
       half_1,
       minInt'_1)
    val x_2207: lambdas_154 = con xEnv_138 (x_2208)
    goto L_1284 (x_2207)
  block L_1278 ()
    val x_2209: (word32, word32) tuple = (precision'_1, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1285
  block L_1285 (env_508: unit)
    call L_1286 (x_1780 (env_508, x_2209)) handle _ => L_5
  block L_1286 (x_2210: word32)
    val x_2211: (word32, word32) tuple = (x_2210, x_986 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1287
  block L_1287 (env_509: unit)
    call L_1288 (x_1780 (env_509, x_2211)) handle _ => L_5
  block L_1288 (trim_9: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1289
  block L_1289 (env_510: unit)
    call L_1290 (sextdFromInt32ToWord32_1 (env_510, trim_9)) handle _ => L_5
  block L_1290 (x_2212: word32)
    call L_1291 (x_2206 (x_2204, x_2212)) handle _ => L_5
  block L_1291 (maxInt'_15: word16)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1292
  block L_1292 (env_511: unit)
    call L_1293 (fromInt16Unsafe_3 (env_511, maxInt'_15)) handle _ => L_5
  block L_1293 (maxInt_11: real64)
    case fromInt16Unsafe_1 (*con fromIn ... _234)*) of
      fromInt16UnsafeEnv_1 => L_1294
  block L_1294 (env_512: unit)
    call L_1295 (fromInt16Unsafe_3 (env_512, minInt'_1)) handle _ => L_5
  block L_1295 (minInt_11: real64)
    val x_2214: (real64, real64, lambdas_102) tuple =
      (minInt_11, maxInt_11, setRoundingMode_0)
    val x_2213: lambdas_154 = con xEnv_139 (x_2214)
    goto L_1284 (x_2213)
  block L_1284 (x_2215: lambdas_154)
    val x_2217: (lambdas_149, lambdas_148, word32) tuple =
      (<<_2, >>_2, maxInt'_2)
    val x_2216: (word32, word32) tuple = (precision_7, precision'_2)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1296
  block L_1296 (env_513: unit)
    call L_1297 (<_5 (env_513, x_2216)) handle _ => L_5
  block L_1297 (x_2218: bool)
    case x_2218 of
      true => L_1299 | false => L_1298
  block L_1298 ()
    call L_1300 (x_2219 (x_2217, x_995 (*0x0:w32*))) handle _ => L_5
  block L_1300 (maxInt'_16: word32)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1301
  block L_1301 (env_514: unit)
    call L_1302 (fromInt32Unsafe_3 (env_514, maxInt'_16)) handle _ => L_5
  block L_1302 (maxInt_12: real64)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1303
  block L_1303 (env_515: unit)
    call L_1304 (fromInt32Unsafe_3 (env_515, minInt'_2)) handle _ => L_5
  block L_1304 (minInt_12: real64)
    val x_2221:
      (real64, real64, lambdas_102, real64, word32, real64, word32) tuple =
      (minInt_12,
       maxInt_12,
       setRoundingMode_0,
       one_7,
       maxInt'_16,
       half_1,
       minInt'_2)
    val x_2220: lambdas_146 = con xEnv_131 (x_2221)
    goto L_1305 (x_2220)
  block L_1299 ()
    val x_2222: (word32, word32) tuple = (precision'_2, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1306
  block L_1306 (env_516: unit)
    call L_1307 (x_1780 (env_516, x_2222)) handle _ => L_5
  block L_1307 (x_2223: word32)
    val x_2224: (word32, word32) tuple = (x_2223, x_992 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1308
  block L_1308 (env_517: unit)
    call L_1309 (x_1780 (env_517, x_2224)) handle _ => L_5
  block L_1309 (trim_10: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1310
  block L_1310 (env_518: unit)
    call L_1311 (sextdFromInt32ToWord32_1 (env_518, trim_10)) handle _ => L_5
  block L_1311 (x_2225: word32)
    call L_1312 (x_2219 (x_2217, x_2225)) handle _ => L_5
  block L_1312 (maxInt'_17: word32)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1313
  block L_1313 (env_519: unit)
    call L_1314 (fromInt32Unsafe_3 (env_519, maxInt'_17)) handle _ => L_5
  block L_1314 (maxInt_13: real64)
    case fromInt32Unsafe_1 (*con fromIn ... _235)*) of
      fromInt32UnsafeEnv_1 => L_1315
  block L_1315 (env_520: unit)
    call L_1316 (fromInt32Unsafe_3 (env_520, minInt'_2)) handle _ => L_5
  block L_1316 (minInt_13: real64)
    val x_2227: (real64, real64, lambdas_102) tuple =
      (minInt_13, maxInt_13, setRoundingMode_0)
    val x_2226: lambdas_146 = con xEnv_132 (x_2227)
    goto L_1305 (x_2226)
  block L_1305 (x_2228: lambdas_146)
    val x_2230: (lambdas_141, lambdas_140, word64) tuple =
      (<<_3, >>_3, maxInt'_3)
    val x_2229: (word32, word32) tuple = (precision_7, precision'_3)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1317
  block L_1317 (env_521: unit)
    call L_1318 (<_5 (env_521, x_2229)) handle _ => L_5
  block L_1318 (x_2231: bool)
    case x_2231 of
      true => L_1320 | false => L_1319
  block L_1319 ()
    call L_1321 (x_2232 (x_2230, x_1001 (*0x0:w32*))) handle _ => L_5
  block L_1321 (maxInt'_18: word64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1322
  block L_1322 (env_522: unit)
    call L_1323 (fromInt64Unsafe_3 (env_522, maxInt'_18)) handle _ => L_5
  block L_1323 (maxInt_14: real64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1324
  block L_1324 (env_523: unit)
    call L_1325 (fromInt64Unsafe_3 (env_523, minInt'_3)) handle _ => L_5
  block L_1325 (minInt_14: real64)
    val x_2234:
      (real64, real64, lambdas_102, real64, word64, real64, word64) tuple =
      (minInt_14,
       maxInt_14,
       setRoundingMode_0,
       one_7,
       maxInt'_18,
       half_1,
       minInt'_3)
    val x_2233: lambdas_138 = con xEnv_124 (x_2234)
    goto L_1326 (x_2233)
  block L_1320 ()
    val x_2235: (word32, word32) tuple = (precision'_3, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1327
  block L_1327 (env_524: unit)
    call L_1328 (x_1780 (env_524, x_2235)) handle _ => L_5
  block L_1328 (x_2236: word32)
    val x_2237: (word32, word32) tuple = (x_2236, x_998 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1329
  block L_1329 (env_525: unit)
    call L_1330 (x_1780 (env_525, x_2237)) handle _ => L_5
  block L_1330 (trim_11: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1331
  block L_1331 (env_526: unit)
    call L_1332 (sextdFromInt32ToWord32_1 (env_526, trim_11)) handle _ => L_5
  block L_1332 (x_2238: word32)
    call L_1333 (x_2232 (x_2230, x_2238)) handle _ => L_5
  block L_1333 (maxInt'_19: word64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1334
  block L_1334 (env_527: unit)
    call L_1335 (fromInt64Unsafe_3 (env_527, maxInt'_19)) handle _ => L_5
  block L_1335 (maxInt_15: real64)
    case fromInt64Unsafe_1 (*con fromIn ... _236)*) of
      fromInt64UnsafeEnv_1 => L_1336
  block L_1336 (env_528: unit)
    call L_1337 (fromInt64Unsafe_3 (env_528, minInt'_3)) handle _ => L_5
  block L_1337 (minInt_15: real64)
    val x_2240: (real64, real64, lambdas_102) tuple =
      (minInt_15, maxInt_15, setRoundingMode_0)
    val x_2239: lambdas_138 = con xEnv_125 (x_2240)
    goto L_1326 (x_2239)
  block L_1326 (x_2241: lambdas_138)
    val x_2243: (lambdas_133, lambdas_132, word8) tuple =
      (<<_4, >>_4, maxWord'_0)
    val x_2242: (word32, word32) tuple = (precision_7, wordSize_0)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1338
  block L_1338 (env_529: unit)
    call L_1339 (<=_4 (env_529, x_2242)) handle _ => L_5
  block L_1339 (x_2244: bool)
    case x_2244 of
      true => L_1341 | false => L_1340
  block L_1340 ()
    call L_1342 (x_2245 (x_2243, x_1006 (*0x0:w32*))) handle _ => L_5
  block L_1342 (maxWord'_12: word8)
    case fromWord8Unsafe_1 (*con fromWo ... _238)*) of
      fromWord8UnsafeEnv_1 => L_1343
  block L_1343 (env_530: unit)
    call L_1344 (fromWord8Unsafe_3 (env_530, maxWord'_12)) handle _ => L_5
  block L_1344 (maxWord_8: real64)
    val x_2247:
      (lambdas_101, real64, real64, lambdas_102, real64, word8, real64) tuple =
      (class_1, zero_8, maxWord_8, setRoundingMode_0, one_7, maxWord'_12, half_1)
    val x_2246: lambdas_130 = con xEnv_117 (x_2247)
    goto L_1345 (x_2246)
  block L_1341 ()
    val x_2248: (word32, word32) tuple = (wordSize_0, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1346
  block L_1346 (env_531: unit)
    call L_1347 (x_1780 (env_531, x_2248)) handle _ => L_5
  block L_1347 (trim_12: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1348
  block L_1348 (env_532: unit)
    call L_1349 (sextdFromInt32ToWord32_1 (env_532, trim_12)) handle _ => L_5
  block L_1349 (x_2249: word32)
    call L_1350 (x_2245 (x_2243, x_2249)) handle _ => L_5
  block L_1350 (maxWord'_13: word8)
    case fromWord8Unsafe_1 (*con fromWo ... _238)*) of
      fromWord8UnsafeEnv_1 => L_1351
  block L_1351 (env_533: unit)
    call L_1352 (fromWord8Unsafe_3 (env_533, maxWord'_13)) handle _ => L_5
  block L_1352 (maxWord_9: real64)
    val x_2251:
      (lambdas_101, real64, real64, lambdas_102, real64, real64) tuple =
      (class_1, zero_8, maxWord_9, setRoundingMode_0, one_7, half_1)
    val x_2250: lambdas_130 = con xEnv_118 (x_2251)
    goto L_1345 (x_2250)
  block L_1345 (x_2252: lambdas_130)
    val x_2254: (lambdas_125, lambdas_124, word16) tuple =
      (<<_5, >>_5, maxWord'_1)
    val x_2253: (word32, word32) tuple = (precision_7, wordSize_1)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1353
  block L_1353 (env_534: unit)
    call L_1354 (<=_4 (env_534, x_2253)) handle _ => L_5
  block L_1354 (x_2255: bool)
    case x_2255 of
      true => L_1356 | false => L_1355
  block L_1355 ()
    call L_1357 (x_2256 (x_2254, x_1011 (*0x0:w32*))) handle _ => L_5
  block L_1357 (maxWord'_14: word16)
    case fromWord16Unsafe_1 (*con fromWo ... _239)*) of
      fromWord16UnsafeEnv_1 => L_1358
  block L_1358 (env_535: unit)
    call L_1359 (fromWord16Unsafe_3 (env_535, maxWord'_14)) handle _ => L_5
  block L_1359 (maxWord_10: real64)
    val x_2258:
      (lambdas_101, real64, real64, lambdas_102, real64, word16, real64) tuple =
      (class_1,
       zero_8,
       maxWord_10,
       setRoundingMode_0,
       one_7,
       maxWord'_14,
       half_1)
    val x_2257: lambdas_122 = con xEnv_110 (x_2258)
    goto L_1360 (x_2257)
  block L_1356 ()
    val x_2259: (word32, word32) tuple = (wordSize_1, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1361
  block L_1361 (env_536: unit)
    call L_1362 (x_1780 (env_536, x_2259)) handle _ => L_5
  block L_1362 (trim_13: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1363
  block L_1363 (env_537: unit)
    call L_1364 (sextdFromInt32ToWord32_1 (env_537, trim_13)) handle _ => L_5
  block L_1364 (x_2260: word32)
    call L_1365 (x_2256 (x_2254, x_2260)) handle _ => L_5
  block L_1365 (maxWord'_15: word16)
    case fromWord16Unsafe_1 (*con fromWo ... _239)*) of
      fromWord16UnsafeEnv_1 => L_1366
  block L_1366 (env_538: unit)
    call L_1367 (fromWord16Unsafe_3 (env_538, maxWord'_15)) handle _ => L_5
  block L_1367 (maxWord_11: real64)
    val x_2262:
      (lambdas_101, real64, real64, lambdas_102, real64, real64) tuple =
      (class_1, zero_8, maxWord_11, setRoundingMode_0, one_7, half_1)
    val x_2261: lambdas_122 = con xEnv_111 (x_2262)
    goto L_1360 (x_2261)
  block L_1360 (x_2263: lambdas_122)
    val x_2265: (lambdas_117, lambdas_116, word32) tuple =
      (<<_6, >>_6, maxWord'_2)
    val x_2264: (word32, word32) tuple = (precision_7, wordSize_2)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1368
  block L_1368 (env_539: unit)
    call L_1369 (<=_4 (env_539, x_2264)) handle _ => L_5
  block L_1369 (x_2266: bool)
    case x_2266 of
      true => L_1371 | false => L_1370
  block L_1370 ()
    call L_1372 (x_2267 (x_2265, x_1016 (*0x0:w32*))) handle _ => L_5
  block L_1372 (maxWord'_16: word32)
    case fromWord32Unsafe_1 (*con fromWo ... _240)*) of
      fromWord32UnsafeEnv_1 => L_1373
  block L_1373 (env_540: unit)
    call L_1374 (fromWord32Unsafe_3 (env_540, maxWord'_16)) handle _ => L_5
  block L_1374 (maxWord_12: real64)
    val x_2269:
      (lambdas_101, real64, real64, lambdas_102, real64, word32, real64, word32) tuple =
      (class_1,
       zero_8,
       maxWord_12,
       setRoundingMode_0,
       one_7,
       maxWord'_16,
       half_1,
       zero_3)
    val x_2268: lambdas_114 = con xEnv_103 (x_2269)
    goto L_1375 (x_2268)
  block L_1371 ()
    val x_2270: (word32, word32) tuple = (wordSize_2, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1376
  block L_1376 (env_541: unit)
    call L_1377 (x_1780 (env_541, x_2270)) handle _ => L_5
  block L_1377 (trim_14: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1378
  block L_1378 (env_542: unit)
    call L_1379 (sextdFromInt32ToWord32_1 (env_542, trim_14)) handle _ => L_5
  block L_1379 (x_2271: word32)
    call L_1380 (x_2267 (x_2265, x_2271)) handle _ => L_5
  block L_1380 (maxWord'_17: word32)
    case fromWord32Unsafe_1 (*con fromWo ... _240)*) of
      fromWord32UnsafeEnv_1 => L_1381
  block L_1381 (env_543: unit)
    call L_1382 (fromWord32Unsafe_3 (env_543, maxWord'_17)) handle _ => L_5
  block L_1382 (maxWord_13: real64)
    val x_2273:
      (lambdas_101, real64, real64, lambdas_102, real64, word32, real64) tuple =
      (class_1, zero_8, maxWord_13, setRoundingMode_0, one_7, zero_3, half_1)
    val x_2272: lambdas_114 = con xEnv_104 (x_2273)
    goto L_1375 (x_2272)
  block L_1375 (x_2274: lambdas_114)
    val x_2276: (lambdas_109, lambdas_108, word64) tuple =
      (<<_7, >>_7, maxWord'_3)
    val x_2275: (word32, word32) tuple = (precision_7, wordSize_3)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1383
  block L_1383 (env_544: unit)
    call L_1384 (<=_4 (env_544, x_2275)) handle _ => L_5
  block L_1384 (x_2277: bool)
    case x_2277 of
      true => L_1386 | false => L_1385
  block L_1385 ()
    call L_1387 (x_2278 (x_2276, x_1021 (*0x0:w32*))) handle _ => L_5
  block L_1387 (maxWord'_18: word64)
    case fromWord64Unsafe_1 (*con fromWo ... _241)*) of
      fromWord64UnsafeEnv_1 => L_1388
  block L_1388 (env_545: unit)
    call L_1389 (fromWord64Unsafe_3 (env_545, maxWord'_18)) handle _ => L_5
  block L_1389 (maxWord_14: real64)
    val x_2280:
      (lambdas_101, real64, real64, lambdas_102, real64, word64, real64, word64) tuple =
      (class_1,
       zero_8,
       maxWord_14,
       setRoundingMode_0,
       one_7,
       maxWord'_18,
       half_1,
       zero_5)
    val x_2279: lambdas_106 = con xEnv_96 (x_2280)
    goto L_1390 (x_2279)
  block L_1386 ()
    val x_2281: (word32, word32) tuple = (wordSize_3, precision_7)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1391
  block L_1391 (env_546: unit)
    call L_1392 (x_1780 (env_546, x_2281)) handle _ => L_5
  block L_1392 (trim_15: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _127)*) of
      sextdFromInt32ToWord32Env_0 => L_1393
  block L_1393 (env_547: unit)
    call L_1394 (sextdFromInt32ToWord32_1 (env_547, trim_15)) handle _ => L_5
  block L_1394 (x_2282: word32)
    call L_1395 (x_2278 (x_2276, x_2282)) handle _ => L_5
  block L_1395 (maxWord'_19: word64)
    case fromWord64Unsafe_1 (*con fromWo ... _241)*) of
      fromWord64UnsafeEnv_1 => L_1396
  block L_1396 (env_548: unit)
    call L_1397 (fromWord64Unsafe_3 (env_548, maxWord'_19)) handle _ => L_5
  block L_1397 (maxWord_15: real64)
    val x_2284:
      (lambdas_101, real64, real64, lambdas_102, real64, word64, real64) tuple =
      (class_1, zero_8, maxWord_15, setRoundingMode_0, one_7, zero_5, half_1)
    val x_2283: lambdas_106 = con xEnv_97 (x_2284)
    goto L_1390 (x_2283)
  block L_1390 (x_2285: lambdas_106)
    case areSmall_0 (*con areSma ... e_25)*) of
      areSmallEnv_0 => L_1398
  block L_1398 (env_549: unit)
    call L_1399 (areSmall_1 (env_549, x_1479)) handle _ => L_5
  block L_1399 (x_2286: bool)
    case x_2286 of
      true => L_1401 | false => L_1400
  block L_1400 ()
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_1402
  block L_1402 (env_550: unit)
    call L_1403 (numLimbs_1 (env_550, ticksPerSecond_0 (*1000000000:ii*))) handle _ => L_5
  block L_1403 (nlimbs_0: word64)
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_1404
  block L_1404 (env_551: unit)
    call L_1405 (numLimbs_1 (env_551, x_1024 (*1:ii*))) handle _ => L_5
  block L_1405 (dlimbs_0: word64)
    val x_2287: (word64, word64) tuple = (nlimbs_0, dlimbs_0)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_1406
  block L_1406 (env_552: unit)
    call L_1407 (<_7 (env_552, x_2287)) handle _ => L_5
  block L_1407 (x_2288: bool)
    case x_2288 of
      true => L_1409 | false => L_1408
  block L_1408 ()
    val x_2289: (word64, word64) tuple = (nlimbs_0, dlimbs_0)
    case x_170 (*con xEnv_24 (x_169)*) of
      xEnv_24 => L_1410
  block L_1410 (env_553: unit)
    call L_1411 (x_2290 (env_553, x_2289)) handle _ => L_5
  block L_1411 (x_2291: word64)
    val x_2292: (word64, word64) tuple = (x_2291, x_1027 (*0x2:w64*))
    call L_1412 (reserve_1 (tuple_59, x_2292)) handle _ => L_5
  block L_1412 (x_2293: word64)
    goto L_1413 (x_1028 (*1000000000:ii*))
  block L_1409 ()
    goto L_1413 (zero_0 (*0:ii*))
  block L_1401 ()
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_1414
  block L_1414 (env_554: unit)
    call L_1415 (dropTagCoerce_1 (env_554, ticksPerSecond_0 (*1000000000:ii*))) handle _ => L_5
  block L_1415 (numw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_1416
  block L_1416 (env_555: unit)
    call L_1417 (zextdFromWord64ToInt64_1 (env_555, numw_0)) handle _ => L_5
  block L_1417 (numi_0: word64)
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_1418
  block L_1418 (env_556: unit)
    call L_1419 (dropTagCoerce_1 (env_556, x_1024 (*1:ii*))) handle _ => L_5
  block L_1419 (denw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_1420
  block L_1420 (env_557: unit)
    call L_1421 (zextdFromWord64ToInt64_1 (env_557, denw_0)) handle _ => L_5
  block L_1421 (deni_0: word64)
    val x_2294: (word64, word64) tuple = (numw_0, badObjptrWord_0)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_1422
  block L_1422 (env_558: unit)
    call L_1423 (x_2295 (env_558, x_2294)) handle _ => L_5
  block L_1423 (x_2296: bool)
    case x_2296 of
      true => L_1425 | false => L_1424
  block L_1424 ()
    goto L_1426 (x_1026 (*con false*))
  block L_1425 ()
    val x_2297: (word64, word64) tuple =
      (deni_0, x_1025 (*0xFFFFFFFF ... F:w64*))
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_1427
  block L_1427 (env_559: unit)
    call L_1426 (x_2295 (env_559, x_2297)) handle _ => L_5
  block L_1426 (x_2298: bool)
    case x_2298 of
      true => L_1429 | false => L_1428
  block L_1428 ()
    val x_2299: (word64, word64) tuple = (numi_0, deni_0)
    call L_1430 (quot_3 (tuple_57, x_2299)) handle _ => L_5
  block L_1430 (ansi_0: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_1431
  block L_1431 (env_560: unit)
    call L_1432 (zextdFromInt64ToWord64_1 (env_560, ansi_0)) handle _ => L_5
  block L_1432 (answ_0: word64)
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_1433
  block L_1433 (env_561: unit)
    call L_1434 (addTag_1 (env_561, answ_0)) handle _ => L_5
  block L_1434 (ans_4: word64)
    case fromWord_1 (*con fromWo ... _200)*) of
      fromWordEnv_1 => L_1435
  block L_1435 (env_562: unit)
    call L_1413 (fromWord_3 (env_562, ans_4)) handle _ => L_5
  block L_1429 ()
    goto L_1413 (negBadIntInf_0)
  block L_1413 (x_2300: intInf)
    val x_2301: (lambdas_31, lambdas_32) tuple = (concat_0, exnMessage_0)
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_1436
  block L_1436 (env_563: unit)
    call L_1437 (x_1792 (env_563, messagers_0)) handle _ => L_5
  block L_1437 (x_2302: list_0)
    val x_2307: lambdas_0 = con xEnv_246 (x_2301)
    val x_2306: (lambdas_0, list_0) tuple = (x_2307, x_2302)
    val x_2305: list_0 = con ::_3 (x_2306)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_2305)
    val x_2304: (lambdas_492, intInf, lambdas_491) tuple =
      (reserve_0, x_2300, sextdFromInt64_0)
    val x_2303: lambdas_95 = con xEnv_241 (x_2304)
    case zextdFromWord64ToInt32_0 (*con zextdF ... _121)*) of
      zextdFromWord64ToInt32Env_0 => L_1438
  block L_1438 (env_564: unit)
    call L_1439 (zextdFromWord64ToInt32_1 (env_564, x_1052 (*0x0:w64*))) handle _ => L_5
  block L_1439 (empty_0: word32)
    val x_2310: lambdas_486 = con xEnv_239 (empty_0)
    val x_2309: (lambdas_226, lambdas_95) tuple = (errorMsg_0, x_2303)
    val x_2308: lambdas_69 = con xEnv_240 (x_2309)
    val tuple_83: (word32, (bool) ref, (lambdas_49) ref, lambdas_48) tuple =
      (intr_0, restartFlag_0, blocker_0, raiseSys_1)
    val setfl_0: lambdas_487 = con setflEnv_0 (tuple_83)
    val lseek_0: lambdas_67 = con lseekEnv_0 (raiseSys_0)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1440
  block L_1440 (env_565: unit)
    call L_1441 (sextdFromInt32ToInt64_1 (env_565, x_1114 (*0x0:w32*))) handle _ => L_5
  block L_1441 (pos0_0: word64)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1442
  block L_1442 (env_566: unit)
    call L_1443 (sextdFromInt32ToInt32_1 (env_566, bufSize_0 (*0x1000:w32*))) handle _ => L_5
  block L_1443 (chunkSize_0: word32)
    val openOutstreams_0: (list_5) ref =
      prim Ref_ref[list_5] (x_1127 (*con nil_9*))
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1444
  block L_1444 (env_567: unit)
    call L_1445 (x_2311 (env_567, atExit_0)) handle _ => L_5
  block L_1445 (x_2312: list_2)
    val x_2315: lambdas_3 = con xEnv_243 (openOutstreams_0)
    val x_2314: (lambdas_3, list_2) tuple = (x_2315, x_2312)
    val x_2313: list_2 = con ::_5 (x_2314)
    val _: unit = prim Ref_assign[list_2] (atExit_0, x_2313)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_1446
  block L_1446 (env_568: unit)
    call L_1447 (toRep_2 (env_568, x_1051 (*0x1:w32*))) handle _ => L_5
  block L_1447 (x_2316: word32)
    val x_2318: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_ProcEnv_isatty} (x_2316)
    val x_2317: (word32, word32) tuple = (x_2318, zero_4)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_1448
  block L_1448 (env_569: unit)
    call L_1449 (x_1494 (env_569, x_2317)) handle _ => L_5
  block L_1449 (x_2319: bool)
    case x_2319 of
      true => L_1451 | false => L_1450
  block L_1450 ()
    goto L_1452 (x_1140 (*con BLOCK_BUF_0*))
  block L_1451 ()
    goto L_1452 (x_1139 (*con LINE_BUF_0*))
  block L_1452 (x_2320: buffer_mode_0)
    val closed_0: (bool) ref = prim Ref_ref[bool] (x_1142 (*con false*))
    call L_1453 (x_2321 (x_2309, x_1051 (*0x1:w32*))) handle _ => L_5
  block L_1453 (x_2322: stat_0)
    case x_2322 of
      T_2 => L_1454
  block L_1454 (x_2323:
                  (time_0,
                   time_0,
                   word64,
                   word32,
                   word64,
                   word32,
                   time_0,
                   word32,
                   word64,
                   word32) tuple)
    val #_0: word32 = #5 (x_2323)
    val x_2325: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Word32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_ST_isReg} (#_0)
    val x_2324: (word32, word32) tuple = (x_2325, zero_4)
    case x_101 (*con xEnv_17 (x_100)*) of
      xEnv_17 => L_1455
  block L_1455 (env_570: unit)
    call L_1456 (x_1494 (env_570, x_2324)) handle _ => L_5
  block L_1456 (x_2326: bool)
    case x_2326 of
      true => L_1458 | false => L_1457
  block L_1457 ()
    val x_2328: (word64) ref = prim Ref_ref[word64] (pos0_0)
    val x_2327: (t_12, t_12, (word64) ref, t_18, t_12) tuple =
      (x_1150 (*con NONE_9*),
       x_1148 (*con NONE_9*),
       x_2328,
       x_1149 (*con NONE_10*),
       x_1151 (*con NONE_9*))
    goto L_1459 (x_2327)
  block L_1458 ()
    val pos_0: (word64) ref = prim Ref_ref[word64] (pos0_0)
    val tuple_86: ((bool) ref, lambdas_67, (word64) ref) tuple =
      (closed_0, lseek_0, pos_0)
    val setPos_0: lambdas_7 = con setPosEnv_0 (tuple_86)
    val tuple_85: ((bool) ref, lambdas_69) tuple = (closed_0, x_2308)
    val tuple_84: (word64, lambdas_67, (word64) ref) tuple =
      (pos0_0, lseek_0, pos_0)
    call L_1460 (verifyPos_0 (tuple_84, x_1147 (*()*))) handle _ => L_5
  block L_1460 (x_2329: word64)
    val x_2337: lambdas_4 = con getPosEnv_1 (pos_0)
    val x_2333: t_12 = con SOME_9 (x_2337)
    val x_2332: t_18 = con SOME_14 (setPos_0)
    val x_2336: lambdas_4 = con endPosEnv_1 (tuple_85)
    val x_2334: t_12 = con SOME_9 (x_2336)
    val x_2335: lambdas_4 = con verifyPosEnv_1 (tuple_84)
    val x_2331: t_12 = con SOME_9 (x_2335)
    val x_2330: (t_12, t_12, (word64) ref, t_18, t_12) tuple =
      (x_2334, x_2333, pos_0, x_2332, x_2331)
    goto L_1459 (x_2330)
  block L_1459 (x_2338: (t_12, t_12, (word64) ref, t_18, t_12) tuple)
    val verifyPos_1: t_12 = #4 (x_2338)
    val setPos_1: t_18 = #3 (x_2338)
    val pos_1: (word64) ref = #2 (x_2338)
    val getPos_0: t_12 = #1 (x_2338)
    val endPos_0: t_12 = #0 (x_2338)
    val incPos_0: lambdas_489 = con incPosEnv_0 (pos_1)
    val blocking_0: (bool) ref = prim Ref_ref[bool] (x_1141 (*con true*))
    call L_1461 (x_2339 (empty_0, x_1154 (*con ::_2 (x_1153)*))) handle _ => L_5
  block L_1461 (appendFlgs_0: word32)
    val tuple_88:
      (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple =
      (intr_0, restartFlag_0, blocker_0, raiseSys_0, incPos_0)
    val putV_0: lambdas_488 = con putVEnv_0 (tuple_88)
    val tuple_87:
      (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple =
      (intr_0, restartFlag_0, blocker_0, raiseSys_0, incPos_0)
    val putA_0: lambdas_490 = con putAEnv_0 (tuple_87)
    val x_2340:
      (lambdas_48, (lambdas_49) ref, (bool) ref, word32, (bool) ref) tuple =
      (raiseSys_1, blocker_0, restartFlag_0, intr_0, closed_0)
    val close_0: lambdas_10 = con closeEnv_0 (x_2340)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_1462
  block L_1462 (env_571: unit)
    call L_1463 (toRep_2 (env_571, x_1051 (*0x1:w32*))) handle _ => L_5
  block L_1463 (x_2341: word32)
    val x_2349: t_0 = con SOME_0 (x_2341)
    val x_2363:
      (lambdas_490, lambdas_487, lambdas_486, word32, (bool) ref, (bool) ref) tuple =
      (putA_0, setfl_0, x_2310, appendFlgs_0, blocking_0, closed_0)
    val x_2351: lambdas_5 = con xEnv_238 (x_2363)
    val x_2359: t_14 = con SOME_10 (x_2351)
    val x_2362:
      (word32,
       lambdas_490,
       lambdas_487,
       lambdas_486,
       word32,
       (bool) ref,
       (bool) ref) tuple =
      (again_0, putA_0, setfl_0, x_2310, appendFlgs_0, blocking_0, closed_0)
    val x_2350: lambdas_6 = con xEnv_237 (x_2362)
    val x_2358: t_15 = con SOME_11 (x_2350)
    val x_2361:
      (lambdas_488, lambdas_487, lambdas_486, word32, (bool) ref, (bool) ref) tuple =
      (putV_0, setfl_0, x_2310, appendFlgs_0, blocking_0, closed_0)
    val x_2353: lambdas_8 = con xEnv_236 (x_2361)
    val x_2357: t_20 = con SOME_15 (x_2353)
    val x_2360:
      (word32,
       lambdas_488,
       lambdas_487,
       lambdas_486,
       word32,
       (bool) ref,
       (bool) ref) tuple =
      (again_0, putV_0, setfl_0, x_2310, appendFlgs_0, blocking_0, closed_0)
    val x_2352: lambdas_9 = con xEnv_235 (x_2360)
    val x_2356: t_21 = con SOME_16 (x_2352)
    val x_2355:
      (t_10,
       t_11,
       word32,
       lambdas_10,
       t_12,
       t_12,
       t_0,
       (word8) vector,
       t_18,
       t_12,
       t_14,
       t_15,
       t_20,
       t_21) tuple =
      (x_1274 (*con NONE_11*),
       x_1275 (*con NONE_12*),
       chunkSize_0,
       close_0,
       endPos_0,
       getPos_0,
       x_2349,
       x_1138 (*"<stdout>"*),
       setPos_1,
       verifyPos_1,
       x_2359,
       x_2358,
       x_2357,
       x_2356)
    val x_2354: writer_0 = con WR_0 (x_2355)
    val x_2346: t_20 = con SOME_15 (x_2353)
    val x_2345: t_21 = con SOME_16 (x_2352)
    val x_2348: t_14 = con SOME_10 (x_2351)
    val x_2347: t_15 = con SOME_11 (x_2350)
    val x_2344:
      (t_10,
       t_11,
       word32,
       lambdas_10,
       t_12,
       t_12,
       t_0,
       (word8) vector,
       t_18,
       t_12,
       t_14,
       t_15,
       t_20,
       t_21) tuple =
      (x_1274 (*con NONE_11*),
       x_1275 (*con NONE_12*),
       chunkSize_0,
       close_0,
       endPos_0,
       getPos_0,
       x_2349,
       x_1138 (*"<stdout>"*),
       setPos_1,
       verifyPos_1,
       x_2348,
       x_2347,
       x_2346,
       x_2345)
    val x_2343: writer_0 = con WR_0 (x_2344)
    val x_2342: (state_0) ref = prim Ref_ref[state_0] (x_1298 (*con Active_1*))
    case x_2320 of
      NO_BUF_1 => L_1466 | BLOCK_BUF_0 => L_1465 | LINE_BUF_0 => L_1464
  block L_1464 ()
    val x_2364: (word32, word8) tuple = (chunkSize_0, someElem_0 (*0x0:w8*))
    call L_1467 (new_3 (arrayAlloc_0, x_2364)) handle _ => L_5
  block L_1467 (x_2365: (word8) array)
    val x_2368: ((word8) array, (word32) ref) tuple = (x_2365, x_1483)
    val x_2367: buf_0 = con Buf_0 (x_2368)
    val x_2366: bufferMode_0 = con LINE_BUF_1 (x_2367)
    goto L_1468 (x_2366)
  block L_1465 ()
    val x_2369: (word32, word8) tuple = (chunkSize_0, someElem_0 (*0x0:w8*))
    call L_1469 (new_3 (arrayAlloc_0, x_2369)) handle _ => L_5
  block L_1469 (x_2370: (word8) array)
    val x_2373: ((word8) array, (word32) ref) tuple = (x_2370, x_1482)
    val x_2372: buf_0 = con Buf_0 (x_2373)
    val x_2371: bufferMode_0 = con BLOCK_BUF_1 (x_2372)
    goto L_1468 (x_2371)
  block L_1466 ()
    goto L_1468 (x_1299 (*con NO_BUF_0*))
  block L_1468 (x_2374: bufferMode_0)
    val x_2378: (bufferMode_0) ref = prim Ref_ref[bufferMode_0] (x_2374)
    val x_2377: (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple =
      (x_2343, x_2378, x_2342, x_2354)
    val x_2376: outstream_0 = con Out_0 (x_2377)
    val x_2375: (outstream_0, bool) tuple = (x_2376, x_1137 (*con false*))
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1470
  block L_1470 (env_572: unit)
    call L_1471 (x_2379 (env_572, openOutstreams_0)) handle _ => L_5
  block L_1471 (x_2380: list_5)
    val x_2384: ((outstream_0, bool) tuple, list_5) tuple = (x_2375, x_2380)
    val x_2383: list_5 = con ::_7 (x_2384)
    val _: unit = prim Ref_assign[list_5] (openOutstreams_0, x_2383)
    val x_2382: (outstream_0) ref = prim Ref_ref[outstream_0] (x_2376)
    val x_2381: t_22 = con T_5 (x_2382)
    case x_1303 (*con xEnv_72 (x_1302)*) of
      xEnv_72 => L_1472
  block L_1472 (env_573: unit)
    call L_1473 (x_2385 (env_573, x_1304 (*0x1:w32*))) handle _ => L_5
  block L_1473 (failure_0: word32)
    case x_1303 (*con xEnv_72 (x_1302)*) of
      xEnv_72 => L_1474
  block L_1474 (env_574: unit)
    call L_1475 (x_2385 (env_574, x_1305 (*0x0:w32*))) handle _ => L_5
  block L_1475 (success_0: word32)
    val exiting_0: (bool) ref = prim Ref_ref[bool] (x_1306 (*con false*))
    val tuple_91:
      ((bool) ref,
       (list_2) ref,
       (bool) ref,
       lambdas_483,
       (word8) array,
       word32,
       word32,
       word32,
       lambdas_35,
       word32,
       lambdas_31) tuple =
      (exiting_0,
       atExit_0,
       x_1628,
       x_1624,
       x_1627,
       zero_4,
       minInt'_2,
       one_3,
       quot_0,
       maxNumDigits_0,
       concat_0)
    val exit_0: lambdas_30 = con exitEnv_0 (tuple_91)
    val tuple_90: (lambdas_30, word32, word32) tuple =
      (exit_0, success_0, failure_0)
    val tuple_89: (lambdas_32, lambdas_31, lambdas_30, word32) tuple =
      (exnMessage_0, concat_0, exit_0, failure_0)
    val all_0: (list_6) ref = prim Ref_ref[list_6] (x_1359 (*con nil_11*))
    case make_0 (*con makeEn ... e_54)*) of
      makeEnv_0 => L_1476
  block L_1476 (env_575: unit)
    call L_1477 (make_1 (env_575, null_0)) handle _ => L_5
  block L_1477 (x_2386: t_23)
    val r_0: (t_23) ref = prim Ref_ref[t_23] (x_2386)
    val current_0: lambdas_25 = con currentEnv_0 (r_0)
    val tuple_92: (lambdas_25, (t_23) ref) tuple = (current_0, r_0)
    val init_0: lambdas_22 = con initEnv_0 (tuple_92)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1478
  block L_1478 (env_576: unit)
    call L_1479 (not_1 (env_576, isOn_0 (*con false*))) handle _ => L_5
  block L_1479 (x_2387: bool)
    case x_2387 of
      true => L_1481 | false => L_1480
  block L_1480 ()
    val x_2388:
      ((list_6) ref, lambdas_27, lambdas_26, (word8) vector, lambdas_25) tuple =
      (all_0, arrayAlloc_1, sequence_0, x_1791, current_0)
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1482
  block L_1482 (env_577: unit)
    call L_1483 (x_2311 (env_577, atExit_0)) handle _ => L_5
  block L_1483 (x_2389: list_2)
    val x_2393: lambdas_3 = con xEnv_244 (x_2388)
    val x_2392: (lambdas_3, list_2) tuple = (x_2393, x_2389)
    val x_2391: list_2 = con ::_5 (x_2392)
    val _: unit = prim Ref_assign[list_2] (atExit_0, x_2391)
    val x_2390: (lambdas_22, (list_6) ref) tuple = (init_0, all_0)
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1484
  block L_1484 (env_578: unit)
    call L_1485 (x_2311 (env_578, atLoadWorld_0)) handle _ => L_5
  block L_1485 (x_2394: list_2)
    val x_2397: lambdas_3 = con xEnv_242 (x_2390)
    val x_2396: (lambdas_3, list_2) tuple = (x_2397, x_2394)
    val x_2395: list_2 = con ::_5 (x_2396)
    val _: unit = prim Ref_assign[list_2] (atLoadWorld_0, x_2395)
    call L_1486 (init_1 (tuple_92, x_1393 (*()*))) handle _ => L_5
  block L_1481 ()
    goto L_1486 (x_1372 (*()*))
  block L_1486 (x_2398: unit)
    val x_2400: lambdas_482 = con defaultTopLevelHandlerEnv_1 (tuple_89)
    val _: unit = prim Ref_assign[lambdas_482] (x_1485, x_2400)
    val x_2399: lambdas_480 = con defaultTopLevelSuffixEnv_1 (tuple_90)
    val _: unit = prim Ref_assign[lambdas_480] (x_1488, x_2399)
    case get_0 (*con getEnv ... e_51)*) of
      getEnv_0 => L_1487
  block L_1487 (env_579: unit)
    call L_1488 (get_1 (env_579, x_2381)) handle _ => L_5
  block L_1488 (x_2401: outstream_0)
    case x_2401 of
      Out_0 => L_1489
  block L_1489 (x_2402:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_2405: (state_0) ref = #2 (x_2402)
    val x_2404: (bufferMode_0) ref = #1 (x_2402)
    val x_2403: writer_0 = #0 (x_2402)
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_1490
  block L_1490 (env_580: unit)
    call L_1491 (x_2406 (env_580, x_2405)) handle _ => L_5
  block L_1491 (x_2407: state_0)
    case terminated_0 (*con termin ... e_44)*) of
      terminatedEnv_0 => L_1492
  block L_1492 (env_581: unit)
    call L_1493 (terminated_1 (env_581, x_2407)) handle _ => L_5
  block L_1493 (x_2408: bool)
    case x_2408 of
      true => L_1495 | false => L_1494
  block L_1494 ()
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_1496
  block L_1496 (env_582: unit)
    call L_1497 (x_2409 (env_582, x_2404)) handle _ => L_1498
  block L_1497 (x_2410: bufferMode_0)
    case x_2410 of
      NO_BUF_0 => L_1501 | BLOCK_BUF_1 => L_1500 | LINE_BUF_1 => L_1499
  block L_1499 (x_2411: buf_0)
    case x_2411 of
      Buf_0 => L_1502
  block L_1502 (x_2412: ((word8) array, (word32) ref) tuple)
    val x_2414: (word32) ref = #1 (x_2412)
    val x_2413: (word8) array = #0 (x_2412)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1503
  block L_1503 (env_583: unit)
    call L_1504 (x_2415 (env_583, x_2414)) handle _ => L_1498
  block L_1504 (curSize_0: word32)
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_1505
  block L_1505 (env_584: unit)
    call L_1506 (x_2416 (env_584, x_1394 (*"one two"*))) handle _ => L_1507
  block L_1506 (x_2417: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_1508
  block L_1508 (env_585: unit)
    call L_1509 (x_2418 (env_585, x_2417)) handle _ => L_1507
  block L_1507 (x_2419: exn)
    case x_2419 of
      Overflow_0 => L_1510 | _ => L_1511
  block L_1511 ()
    call L_1509 (x_2420 (x_2419, x_1420 (*()*))) handle _ => L_1498
  block L_1510 (x_2421: (unit) ref)
    val x_2422: bool = prim MLton_equal[(unit) ref] (x_2421, x_62)
    case x_2422 of
      true => L_1513 | false => L_1512
  block L_1512 ()
    call L_1509 (x_2420 (x_2419, x_1424 (*()*))) handle _ => L_1498
  block L_1513 ()
    goto L_1498 (x_1423 (*con Fail_0 (x_1422)*))
  block L_1509 (x_2423: word32)
    val x_2424: (word32, word32) tuple = (curSize_0, x_2423)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1514
  block L_1514 (env_586: unit)
    call L_1515 (x_1623 (env_586, x_2424)) handle _ => L_1498
  block L_1515 (newSize_0: word32)
    case length_1 (*con length ... e_32)*) of
      lengthEnv_1 => L_1516
  block L_1516 (env_587: unit)
    call L_1517 (length_2 (env_587, x_2413)) handle _ => L_1498
  block L_1517 (x_2425: word32)
    val x_2426: (word32, word32) tuple = (newSize_0, x_2425)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_1518
  block L_1518 (env_588: unit)
    call L_1519 (>=_6 (env_588, x_2426)) handle _ => L_1498
  block L_1519 (x_2427: bool)
    case x_2427 of
      true => L_1521 | false => L_1520
  block L_1520 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1522
  block L_1522 (env_589: unit)
    call L_1523 (full_2 (env_589, x_1394 (*"one two"*))) handle _ => L_1498
  block L_1523 (x_2428: t_19)
    case x_2428 of
      T_4 => L_1524
  block L_1524 (x_2429: (word64, (word8) vector, word64) tuple)
    val x_2433: word64 = #2 (x_2429)
    val x_2432: (word8) vector = #1 (x_2429)
    val x_2431: word64 = #0 (x_2429)
    val x_2430: (word64, word64) tuple = (x_2431, x_1426 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1525
  block L_1525 (env_590: unit)
    call L_1526 (-!_2 (env_590, x_2430)) handle _ => L_1498
  block L_1526 (len_0: word64)
    val x_2434: (word64, word64) tuple = (x_2433, len_0)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1527
  block L_1527 (env_591: unit)
    call L_1528 (+!_2 (env_591, x_2434)) handle _ => L_1498
  block L_1528 (max_0: word64)
    val tuple_93: (word64, word64, (word8) vector) tuple =
      (max_0, x_2433, x_2432)
    call L_1529 (loop_12 (tuple_93, x_2433)) handle _ => L_1498
  block L_1529 (x_2435: t_34)
    case x_2435 of
      NONE_13 => L_1531 | SOME_24 => L_1530
  block L_1530 (x_2436: (word64, word8) tuple)
    goto L_1532 (x_1431 (*con true*))
  block L_1531 ()
    goto L_1532 (x_1430 (*con false*))
  block L_1521 ()
    goto L_1532 (x_1425 (*con true*))
  block L_1532 (x_2437: bool)
    case x_2437 of
      true => L_1534 | false => L_1533
  block L_1533 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1535
  block L_1535 (env_592: unit)
    call L_1536 (full_2 (env_592, x_1394 (*"one two"*))) handle _ => L_1498
  block L_1536 (x_2438: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1537
  block L_1537 (env_593: unit)
    call L_1538 (sextdFromInt32ToInt64_1 (env_593, curSize_0)) handle _ => L_1539
  block L_1538 (x_2439: word64)
    case x_2438 of
      T_4 => L_1540
  block L_1540 (x_2440: (word64, (word8) vector, word64) tuple)
    val x_2443: word64 = #2 (x_2440)
    val x_2442: (word8) vector = #1 (x_2440)
    val x_2441: word64 = #0 (x_2440)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1541
  block L_1541 (env_594: unit)
    call L_1542 (x_2444 (env_594, x_2413)) handle _ => L_1539
  block L_1542 (x_2445: word64)
    val x_2446: (word64, word64) tuple = (x_2439, x_2445)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1543
  block L_1543 (env_595: unit)
    call L_1544 (>_5 (env_595, x_2446)) handle _ => L_1539
  block L_1544 (x_2447: bool)
    case x_2447 of
      true => L_1546 | false => L_1545
  block L_1545 ()
    val x_2448: (word64, word64) tuple = (x_2439, x_2441)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1547
  block L_1547 (env_596: unit)
    call L_1548 (+!_2 (env_596, x_2448)) handle _ => L_1539
  block L_1548 (x_2449: word64)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1549
  block L_1549 (env_597: unit)
    call L_1550 (x_2444 (env_597, x_2413)) handle _ => L_1539
  block L_1550 (x_2450: word64)
    val x_2451: (word64, word64) tuple = (x_2449, x_2450)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1551
  block L_1551 (env_598: unit)
    call L_1552 (>_5 (env_598, x_2451)) handle _ => L_1539
  block L_1546 ()
    goto L_1552 (x_1433 (*con true*))
  block L_1552 (x_2452: bool)
    case x_2452 of
      true => L_1554 | false => L_1553
  block L_1553 ()
    val x_2453: (word64, word64) tuple = (x_2441, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_1555
  block L_1555 (env_599: unit)
    call L_1556 (<_7 (env_599, x_2453)) handle _ => L_1539
  block L_1556 (x_2454: bool)
    case x_2454 of
      true => L_1558 | false => L_1557
  block L_1557 ()
    val x_2455: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (x_2413, x_2439, x_2442, x_2443, x_2441)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_1559
  block L_1559 (env_600: unit)
    call L_1560 (x_2456 (env_600, x_2455)) handle _ => L_1539
  block L_1558 ()
    val x_2457: (word64, word64) tuple = (x_2441, x_1434 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1561
  block L_1561 (env_601: unit)
    call L_1562 (-!_2 (env_601, x_2457)) handle _ => L_1539
  block L_1562 (len_1: word64)
    val tuple_94:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_1, x_2439, x_2443, x_2442, x_2413)
    call L_1560 (loop_13 (tuple_94, x_1437 (*0x0:w64*))) handle _ => L_1539
  block L_1554 ()
    goto L_1539 (x_69 (*con Subscr ... x_68)*))
  block L_1539 (x_2458: exn)
    case x_2458 of
      Overflow_0 => L_1563 | _ => L_1564
  block L_1564 ()
    call L_1560 (x_2459 (x_2458, x_1438 (*()*))) handle _ => L_1498
  block L_1563 (x_2460: (unit) ref)
    val x_2461: bool = prim MLton_equal[(unit) ref] (x_2460, x_62)
    case x_2461 of
      true => L_1566 | false => L_1565
  block L_1565 ()
    call L_1560 (x_2459 (x_2458, x_1439 (*()*))) handle _ => L_1498
  block L_1560 (x_2462: unit)
    val x_2463: ((word32) ref, word32) tuple = (x_2414, newSize_0)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_1567
  block L_1567 (env_602: unit)
    call L_1568 (x_2464 (env_602, x_2463)) handle _ => L_1498
  block L_1566 ()
    goto L_1498 (x_69 (*con Subscr ... x_68)*))
  block L_1534 ()
    val x_2465: (writer_0, buf_0) tuple = (x_2403, x_2411)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_1569
  block L_1569 (env_603: unit)
    call L_1570 (flushBuf_1 (env_603, x_2465)) handle _ => L_1498
  block L_1570 (x_2466: unit)
    call L_1568 (put_0 (x_2403, x_1432 (*()*))) handle _ => L_1498
  block L_1500 (x_2467: buf_0)
    case x_2467 of
      Buf_0 => L_1571
  block L_1571 (x_2468: ((word8) array, (word32) ref) tuple)
    val x_2470: (word32) ref = #1 (x_2468)
    val x_2469: (word8) array = #0 (x_2468)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1572
  block L_1572 (env_604: unit)
    call L_1573 (x_2415 (env_604, x_2470)) handle _ => L_1498
  block L_1573 (curSize_1: word32)
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_1574
  block L_1574 (env_605: unit)
    call L_1575 (x_2416 (env_605, x_1394 (*"one two"*))) handle _ => L_1576
  block L_1575 (x_2471: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_1577
  block L_1577 (env_606: unit)
    call L_1578 (x_2418 (env_606, x_2471)) handle _ => L_1576
  block L_1576 (x_2472: exn)
    case x_2472 of
      Overflow_0 => L_1579 | _ => L_1580
  block L_1580 ()
    call L_1578 (x_2473 (x_2472, x_1405 (*()*))) handle _ => L_1498
  block L_1579 (x_2474: (unit) ref)
    val x_2475: bool = prim MLton_equal[(unit) ref] (x_2474, x_62)
    case x_2475 of
      true => L_1582 | false => L_1581
  block L_1581 ()
    call L_1578 (x_2473 (x_2472, x_1409 (*()*))) handle _ => L_1498
  block L_1582 ()
    goto L_1498 (x_1408 (*con Fail_0 (x_1407)*))
  block L_1578 (x_2476: word32)
    val x_2477: (word32, word32) tuple = (curSize_1, x_2476)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1583
  block L_1583 (env_607: unit)
    call L_1584 (x_1623 (env_607, x_2477)) handle _ => L_1498
  block L_1584 (newSize_1: word32)
    case length_1 (*con length ... e_32)*) of
      lengthEnv_1 => L_1585
  block L_1585 (env_608: unit)
    call L_1586 (length_2 (env_608, x_2469)) handle _ => L_1498
  block L_1586 (x_2478: word32)
    val x_2479: (word32, word32) tuple = (newSize_1, x_2478)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_1587
  block L_1587 (env_609: unit)
    call L_1588 (>=_6 (env_609, x_2479)) handle _ => L_1498
  block L_1588 (x_2480: bool)
    case x_2480 of
      true => L_1590 | false => L_1589
  block L_1589 ()
    goto L_1591 (x_1411 (*con false*))
  block L_1590 ()
    goto L_1591 (x_1410 (*con true*))
  block L_1591 (x_2481: bool)
    case x_2481 of
      true => L_1593 | false => L_1592
  block L_1592 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1594
  block L_1594 (env_610: unit)
    call L_1595 (full_2 (env_610, x_1394 (*"one two"*))) handle _ => L_1498
  block L_1595 (x_2482: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1596
  block L_1596 (env_611: unit)
    call L_1597 (sextdFromInt32ToInt64_1 (env_611, curSize_1)) handle _ => L_1598
  block L_1597 (x_2483: word64)
    case x_2482 of
      T_4 => L_1599
  block L_1599 (x_2484: (word64, (word8) vector, word64) tuple)
    val x_2487: word64 = #2 (x_2484)
    val x_2486: (word8) vector = #1 (x_2484)
    val x_2485: word64 = #0 (x_2484)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1600
  block L_1600 (env_612: unit)
    call L_1601 (x_2444 (env_612, x_2469)) handle _ => L_1598
  block L_1601 (x_2488: word64)
    val x_2489: (word64, word64) tuple = (x_2483, x_2488)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1602
  block L_1602 (env_613: unit)
    call L_1603 (>_5 (env_613, x_2489)) handle _ => L_1598
  block L_1603 (x_2490: bool)
    case x_2490 of
      true => L_1605 | false => L_1604
  block L_1604 ()
    val x_2491: (word64, word64) tuple = (x_2483, x_2485)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1606
  block L_1606 (env_614: unit)
    call L_1607 (+!_2 (env_614, x_2491)) handle _ => L_1598
  block L_1607 (x_2492: word64)
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_1608
  block L_1608 (env_615: unit)
    call L_1609 (x_2444 (env_615, x_2469)) handle _ => L_1598
  block L_1609 (x_2493: word64)
    val x_2494: (word64, word64) tuple = (x_2492, x_2493)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1610
  block L_1610 (env_616: unit)
    call L_1611 (>_5 (env_616, x_2494)) handle _ => L_1598
  block L_1605 ()
    goto L_1611 (x_1413 (*con true*))
  block L_1611 (x_2495: bool)
    case x_2495 of
      true => L_1613 | false => L_1612
  block L_1612 ()
    val x_2496: (word64, word64) tuple = (x_2485, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_1614
  block L_1614 (env_617: unit)
    call L_1615 (<_7 (env_617, x_2496)) handle _ => L_1598
  block L_1615 (x_2497: bool)
    case x_2497 of
      true => L_1617 | false => L_1616
  block L_1616 ()
    val x_2498: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (x_2469, x_2483, x_2486, x_2487, x_2485)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_1618
  block L_1618 (env_618: unit)
    call L_1619 (x_2456 (env_618, x_2498)) handle _ => L_1598
  block L_1617 ()
    val x_2499: (word64, word64) tuple = (x_2485, x_1414 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1620
  block L_1620 (env_619: unit)
    call L_1621 (-!_2 (env_619, x_2499)) handle _ => L_1598
  block L_1621 (len_2: word64)
    val tuple_95:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_2, x_2483, x_2487, x_2486, x_2469)
    call L_1619 (loop_14 (tuple_95, x_1417 (*0x0:w64*))) handle _ => L_1598
  block L_1613 ()
    goto L_1598 (x_69 (*con Subscr ... x_68)*))
  block L_1598 (x_2500: exn)
    case x_2500 of
      Overflow_0 => L_1622 | _ => L_1623
  block L_1623 ()
    call L_1619 (x_2501 (x_2500, x_1418 (*()*))) handle _ => L_1498
  block L_1622 (x_2502: (unit) ref)
    val x_2503: bool = prim MLton_equal[(unit) ref] (x_2502, x_62)
    case x_2503 of
      true => L_1625 | false => L_1624
  block L_1624 ()
    call L_1619 (x_2501 (x_2500, x_1419 (*()*))) handle _ => L_1498
  block L_1619 (x_2504: unit)
    val x_2505: ((word32) ref, word32) tuple = (x_2470, newSize_1)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_1626
  block L_1626 (env_620: unit)
    call L_1568 (x_2464 (env_620, x_2505)) handle _ => L_1498
  block L_1625 ()
    goto L_1498 (x_69 (*con Subscr ... x_68)*))
  block L_1593 ()
    val x_2506: (writer_0, buf_0) tuple = (x_2403, x_2467)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_1627
  block L_1627 (env_621: unit)
    call L_1628 (flushBuf_1 (env_621, x_2506)) handle _ => L_1498
  block L_1628 (x_2507: unit)
    call L_1568 (put_0 (x_2403, x_1412 (*()*))) handle _ => L_1498
  block L_1501 ()
    call L_1568 (put_0 (x_2403, x_1404 (*()*))) handle _ => L_1498
  block L_1498 (x_2508: exn)
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_1629
  block L_1629 (env_622: unit)
    call L_1630 (outstreamName_1 (env_622, x_2401)) handle _ => L_5
  block L_1630 (x_2509: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_1631
  block L_1631 (env_623: unit)
    call L_1632 (liftExn_1 (env_623, x_2509)) handle _ => L_5
  block L_1632 (x_2510: lambdas_82)
    case x_2510 of
      xEnv_87 => L_1633
  block L_1633 (env_624: (word8) vector)
    call L_1634 (x_2511 (env_624, x_1440 (*"output"*))) handle _ => L_5
  block L_1634 (x_2512: lambdas_81)
    case x_2512 of
      xEnv_86 => L_1635
  block L_1635 (env_625: ((word8) vector, (word8) vector) tuple)
    call L_1568 (x_2513 (env_625, x_2508)) handle _ => L_5
  block L_1495 ()
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_1636
  block L_1636 (env_626: unit)
    call L_1637 (outstreamName_1 (env_626, x_2401)) handle _ => L_5
  block L_1637 (x_2514: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_1638
  block L_1638 (env_627: unit)
    call L_1639 (liftExn_1 (env_627, x_2514)) handle _ => L_5
  block L_1639 (x_2515: lambdas_82)
    case x_2515 of
      xEnv_87 => L_1640
  block L_1640 (env_628: (word8) vector)
    call L_1641 (x_2511 (env_628, x_1395 (*"output"*))) handle _ => L_5
  block L_1641 (x_2516: lambdas_81)
    case x_2516 of
      xEnv_86 => L_1642
  block L_1642 (env_629: ((word8) vector, (word8) vector) tuple)
    call L_1568 (x_2513 (env_629, x_1034 (*con Closed ... 1033)*))) handle _ => L_5
  block L_1568 (x_2517: unit)
    case get_0 (*con getEnv ... e_51)*) of
      getEnv_0 => L_1643
  block L_1643 (env_630: unit)
    call L_1644 (get_1 (env_630, x_2381)) handle _ => L_5
  block L_1644 (x_2518: outstream_0)
    case flushOut_0 (*con flushO ... e_48)*) of
      flushOutEnv_0 => L_1645
  block L_1645 (env_631: unit)
    call L_1646 (flushOut_1 (env_631, x_2518)) handle _ => L_5
  block L_1646 (x_2519: unit)
    val x_2520: lambdas_480 = prim Ref_deref[lambdas_480] (x_1488)
    case x_2520 of
      xEnv_231 => L_1649
    | xEnv_230 => L_1648
    | defaultTopLevelSuffixEnv_1 => L_1647
  block L_1647 (env_632: (lambdas_30, word32, word32) tuple)
    call L_1650 (defaultTopLevelSuffix_0 (env_632, x_1441 (*()*))) handle _ => L_5
  block L_1648 (env_633: unit)
    call L_1650 (x_2521 (env_633, x_1441 (*()*))) handle _ => L_5
  block L_1649 (env_634: unit)
    call L_1650 (x_2522 (env_634, x_1441 (*()*))) handle _ => L_5
  block L_699 ()
    goto L_5 (x_383 (*con Chr_0 (x_382)*))
  block L_279 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_272 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_259 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_250 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_241 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_113 ()
    goto L_5 (x_313 (*con Fail8_0 (x_312)*))
  block L_83 ()
    goto L_5 (x_297 (*con Fail8_0 (x_296)*))
  block L_57 ()
    goto L_5 (x_283 (*con Fail8_0 (x_282)*))
  block L_31 ()
    goto L_5 (x_269 (*con Fail8_0 (x_268)*))
  block L_5 (x_2523: exn)
    val x_2524: lambdas_482 = prim Ref_deref[lambdas_482] (x_1485)
    case x_2524 of
      xEnv_233 => L_1653
    | xEnv_232 => L_1652
    | defaultTopLevelHandlerEnv_1 => L_1651
  block L_1651 (env_635: (lambdas_32, lambdas_31, lambdas_30, word32) tuple)
    call L_1650 (defaultTopLevelHandler_0 (env_635, x_2523)) handle _ => L_1654
  block L_1652 (env_636: unit)
    call L_1650 (x_2525 (env_636, x_2523)) handle _ => L_1654
  block L_1653 (env_637: unit)
    call L_1650 (x_2526 (env_637, x_2523)) handle _ => L_1654
  block L_1654 (x_2527: exn)
    val _: unit = prim MLton_bug (x_1442 (*"toplevel  ... lled"*))
    bug
  block L_1650 (x_2528: unit)
    return (x_2528)
fun x_2459 (env_638: exn, unit_0: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1655 ()
  block L_1655 ()
    raise (env_638)
fun loop_13 (env_639:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_2529: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_1656 ()
  block L_1656 ()
    val len_3: word64 = #0 (env_639)
    val x_2534: word64 = #1 (env_639)
    val x_2533: word64 = #2 (env_639)
    val x_2532: (word8) vector = #3 (env_639)
    val x_2531: (word8) array = #4 (env_639)
    val x_2530: (word64, word64) tuple = (x_2529, len_3)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_1657
  block L_1657 (env_640: unit)
    call L_1658 (>_6 (env_640, x_2530)) handle _ => raise
  block L_1658 (x_2535: bool)
    case x_2535 of
      true => L_1660 | false => L_1659
  block L_1659 ()
    val x_2536: (word64, word64) tuple = (x_2534, x_2529)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1661
  block L_1661 (env_641: unit)
    call L_1662 (+!_2 (env_641, x_2536)) handle _ => raise
  block L_1662 (x_2537: word64)
    val x_2538: (word64, word64) tuple = (x_2533, x_2529)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1663
  block L_1663 (env_642: unit)
    call L_1664 (+!_2 (env_642, x_2538)) handle _ => raise
  block L_1664 (x_2539: word64)
    val x_2540: ((word8) vector, word64) tuple = (x_2532, x_2539)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1665
  block L_1665 (env_643: unit)
    call L_1666 (x_2541 (env_643, x_2540)) handle _ => raise
  block L_1666 (x_2542: word8)
    val x_2543: ((word8) array, word64, word8) tuple = (x_2531, x_2537, x_2542)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_1667
  block L_1667 (env_644: unit)
    call L_1668 (x_2544 (env_644, x_2543)) handle _ => raise
  block L_1668 (x_2545: unit)
    val x_2546: (word64, word64) tuple = (x_2529, x_1436 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1669
  block L_1669 (env_645: unit)
    call L_1670 (+!_2 (env_645, x_2546)) handle _ => raise
  block L_1670 (x_2547: word64)
    call tail loop_13 (env_639, x_2547)
  block L_1660 ()
    return (x_1435 (*()*))
fun loop_12 (env_646: (word64, word64, (word8) vector) tuple, x_2548: word64):
  {returns = Some (t_34), raises = Some (exn)} =
L_1671 ()
  block L_1671 ()
    val max_1: word64 = #0 (env_646)
    val x_2551: word64 = #1 (env_646)
    val x_2550: (word8) vector = #2 (env_646)
    val x_2549: (word64, word64) tuple = (x_2548, max_1)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_1672
  block L_1672 (env_647: unit)
    call L_1673 (>_6 (env_647, x_2549)) handle _ => raise
  block L_1673 (x_2552: bool)
    case x_2552 of
      true => L_1675 | false => L_1674
  block L_1674 ()
    val x_2553: (word64, word64) tuple = (x_2548, x_2551)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1676
  block L_1676 (env_648: unit)
    call L_1677 (-!_2 (env_648, x_2553)) handle _ => raise
  block L_1677 (x_2554: word64)
    val x_2555: ((word8) vector, word64) tuple = (x_2550, x_2548)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1678
  block L_1678 (env_649: unit)
    call L_1679 (x_2541 (env_649, x_2555)) handle _ => raise
  block L_1679 (x_2556: word8)
    val z_0: (word64, word8) tuple = (x_2554, x_2556)
    val x_2557: (word8, word8) tuple = (x_2556, x_1428 (*0xA:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_1680
  block L_1680 (env_650: unit)
    call L_1681 (x_2558 (env_650, x_2557)) handle _ => raise
  block L_1681 (x_2559: bool)
    case x_2559 of
      true => L_1683 | false => L_1682
  block L_1682 ()
    val x_2560: (word64, word64) tuple = (x_2548, x_1429 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1684
  block L_1684 (env_651: unit)
    call L_1685 (+!_2 (env_651, x_2560)) handle _ => raise
  block L_1685 (x_2561: word64)
    call tail loop_12 (env_646, x_2561)
  block L_1683 ()
    val x_2562: t_34 = con SOME_24 (z_0)
    return (x_2562)
  block L_1675 ()
    return (x_1427 (*con NONE_13*))
fun x_2420 (env_652: exn, unit_1: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_1686 ()
  block L_1686 ()
    raise (env_652)
fun x_2501 (env_653: exn, unit_2: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1687 ()
  block L_1687 ()
    raise (env_653)
fun loop_14 (env_654:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_2563: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_1688 ()
  block L_1688 ()
    val len_4: word64 = #0 (env_654)
    val x_2568: word64 = #1 (env_654)
    val x_2567: word64 = #2 (env_654)
    val x_2566: (word8) vector = #3 (env_654)
    val x_2565: (word8) array = #4 (env_654)
    val x_2564: (word64, word64) tuple = (x_2563, len_4)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_1689
  block L_1689 (env_655: unit)
    call L_1690 (>_6 (env_655, x_2564)) handle _ => raise
  block L_1690 (x_2569: bool)
    case x_2569 of
      true => L_1692 | false => L_1691
  block L_1691 ()
    val x_2570: (word64, word64) tuple = (x_2568, x_2563)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1693
  block L_1693 (env_656: unit)
    call L_1694 (+!_2 (env_656, x_2570)) handle _ => raise
  block L_1694 (x_2571: word64)
    val x_2572: (word64, word64) tuple = (x_2567, x_2563)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1695
  block L_1695 (env_657: unit)
    call L_1696 (+!_2 (env_657, x_2572)) handle _ => raise
  block L_1696 (x_2573: word64)
    val x_2574: ((word8) vector, word64) tuple = (x_2566, x_2573)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1697
  block L_1697 (env_658: unit)
    call L_1698 (x_2541 (env_658, x_2574)) handle _ => raise
  block L_1698 (x_2575: word8)
    val x_2576: ((word8) array, word64, word8) tuple = (x_2565, x_2571, x_2575)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_1699
  block L_1699 (env_659: unit)
    call L_1700 (x_2544 (env_659, x_2576)) handle _ => raise
  block L_1700 (x_2577: unit)
    val x_2578: (word64, word64) tuple = (x_2563, x_1416 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1701
  block L_1701 (env_660: unit)
    call L_1702 (+!_2 (env_660, x_2578)) handle _ => raise
  block L_1702 (x_2579: word64)
    call tail loop_14 (env_654, x_2579)
  block L_1692 ()
    return (x_1415 (*()*))
fun x_2473 (env_661: exn, unit_3: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_1703 ()
  block L_1703 ()
    raise (env_661)
fun put_0 (env_662: writer_0, x_2580: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1704 ()
  block L_1704 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1705
  block L_1705 (env_663: unit)
    call L_1706 (full_2 (env_663, x_1394 (*"one two"*))) handle _ => raise
  block L_1706 (x_2581: t_19)
    case env_662 of
      WR_0 => L_1707
  block L_1707 (x_2582:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_1: t_20 = #12 (x_2582)
    case #_1 of
      NONE_19 => L_1709 | SOME_15 => L_1708
  block L_1708 (x_2583: lambdas_8)
    case base_1 (*con baseEn ... e_30)*) of
      baseEnv_1 => L_1710
  block L_1710 (env_664: unit)
    call L_1711 (base_3 (env_664, x_2581)) handle _ => raise
  block L_1711 (x_2584: ((word8) vector, word32, word32) tuple)
    val sz_0: word32 = #2 (x_2584)
    val i_0: word32 = #1 (x_2584)
    val b_6: (word8) vector = #0 (x_2584)
    val x_2585: (word32, word32) tuple = (i_0, sz_0)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1712
  block L_1712 (env_665: unit)
    call L_1713 (x_1623 (env_665, x_2585)) handle _ => raise
  block L_1713 (max_2: word32)
    val tuple_96: (word32, (word8) vector, lambdas_8) tuple =
      (max_2, b_6, x_2583)
    call tail loop_15 (tuple_96, i_0)
  block L_1709 ()
    raise (x_1031 (*con Blocki ... 1030)*))
fun loop_15 (env_666: (word32, (word8) vector, lambdas_8) tuple, x_2586: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1714 ()
  block L_1714 ()
    val max_3: word32 = #0 (env_666)
    val b_7: (word8) vector = #1 (env_666)
    val x_2588: lambdas_8 = #2 (env_666)
    val x_2587: (word32, word32) tuple = (x_2586, max_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1715
  block L_1715 (env_667: unit)
    call L_1716 (x_2049 (env_667, x_2587)) handle _ => raise
  block L_1716 (x_2589: bool)
    case x_2589 of
      true => L_1718 | false => L_1717
  block L_1717 ()
    val x_2590: (word32, word32) tuple = (max_3, x_2586)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1719
  block L_1719 (env_668: unit)
    call L_1720 (x_1780 (env_668, x_2590)) handle _ => raise
  block L_1720 (x_2591: word32)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1721
  block L_1721 (env_669: unit)
    call L_1722 (full_2 (env_669, b_7)) handle _ => raise
  block L_1722 (x_2592: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1723
  block L_1723 (env_670: unit)
    call L_1724 (sextdFromInt32ToInt64_1 (env_670, x_2586)) handle _ => L_1725
  block L_1724 (x_2593: word64)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_1726
  block L_1726 (env_671: unit)
    call L_1727 (sextdFromInt32ToInt64_1 (env_671, x_2591)) handle _ => L_1725
  block L_1727 (x_2594: word64)
    case x_2592 of
      T_4 => L_1728
  block L_1728 (x_2595: (word64, (word8) vector, word64) tuple)
    val x_2599: word64 = #2 (x_2595)
    val x_2598: (word8) vector = #1 (x_2595)
    val x_2597: word64 = #0 (x_2595)
    val x_2596: (word64, word64) tuple = (x_2593, x_2597)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1729
  block L_1729 (env_672: unit)
    call L_1730 (>_5 (env_672, x_2596)) handle _ => L_1725
  block L_1730 (x_2600: bool)
    case x_2600 of
      true => L_1732 | false => L_1731
  block L_1731 ()
    val x_2601: (word64, word64) tuple = (x_2597, x_2593)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_1733
  block L_1733 (env_673: unit)
    call L_1734 (-!_2 (env_673, x_2601)) handle _ => L_1725
  block L_1734 (x_2602: word64)
    val x_2603: (word64, word64) tuple = (x_2594, x_2602)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_1735
  block L_1735 (env_674: unit)
    call L_1736 (>_5 (env_674, x_2603)) handle _ => L_1725
  block L_1732 ()
    goto L_1736 (x_1397 (*con true*))
  block L_1736 (x_2604: bool)
    case x_2604 of
      true => L_1738 | false => L_1737
  block L_1737 ()
    val x_2605: (word64, word64) tuple = (x_2599, x_2593)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1739
  block L_1739 (env_675: unit)
    call L_1740 (+!_2 (env_675, x_2605)) handle _ => L_1725
  block L_1740 (x_2606: word64)
    val x_2608: (word64, (word8) vector, word64) tuple =
      (x_2594, x_2598, x_2606)
    val x_2607: t_19 = con T_4 (x_2608)
    goto L_1741 (x_2607)
  block L_1738 ()
    goto L_1725 (x_69 (*con Subscr ... x_68)*))
  block L_1725 (x_2609: exn)
    case x_2609 of
      Overflow_0 => L_1742 | _ => L_1743
  block L_1743 ()
    call L_1741 (x_2610 (x_2609, x_1398 (*()*))) handle _ => raise
  block L_1742 (x_2611: (unit) ref)
    val x_2612: bool = prim MLton_equal[(unit) ref] (x_2611, x_62)
    case x_2612 of
      true => L_1745 | false => L_1744
  block L_1744 ()
    call L_1741 (x_2610 (x_2609, x_1399 (*()*))) handle _ => raise
  block L_1741 (x_2613: t_19)
    case x_2588 of
      xEnv_236 => L_1746
  block L_1746 (env_676:
                  (lambdas_488,
                   lambdas_487,
                   lambdas_486,
                   word32,
                   (bool) ref,
                   (bool) ref) tuple)
    call L_1747 (x_2614 (env_676, x_2613)) handle _ => raise
  block L_1747 (j_0: word32)
    val x_2615: (word32, word32) tuple = (j_0, x_1400 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1748
  block L_1748 (env_677: unit)
    call L_1749 (x_2049 (env_677, x_2615)) handle _ => raise
  block L_1749 (x_2616: bool)
    case x_2616 of
      true => L_1751 | false => L_1750
  block L_1750 ()
    val x_2617: (word32, word32) tuple = (x_2586, j_0)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_1752
  block L_1752 (env_678: unit)
    call L_1753 (x_1623 (env_678, x_2617)) handle _ => raise
  block L_1753 (x_2618: word32)
    call tail loop_15 (env_666, x_2618)
  block L_1751 ()
    raise (x_1403 (*con Fail_0 (x_1402)*))
  block L_1745 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_1718 ()
    return (x_1396 (*()*))
fun x_2610 (env_679: exn, unit_4: unit):
  {returns = Some (t_19), raises = Some (exn)} =
L_1754 ()
  block L_1754 ()
    raise (env_679)
fun x_2619 (env_680: (lambdas_22, (list_6) ref) tuple, x_2620: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1755 ()
  block L_1755 ()
    val init_2: lambdas_22 = #0 (env_680)
    val all_1: (list_6) ref = #1 (env_680)
    val _: unit = prim Ref_assign[list_6] (all_1, x_1391 (*con nil_11*))
    case init_2 of
      initEnv_0 => L_1756
  block L_1756 (env_681: (lambdas_25, (t_23) ref) tuple)
    call tail init_1 (env_681, x_1392 (*()*))
fun x_2621 (env_682:
              ((list_6) ref, lambdas_27, lambdas_26, (word8) vector, lambdas_25) tuple,
            x_2622: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1757 ()
  block L_1757 ()
    val all_2: (list_6) ref = #0 (env_682)
    val arrayAlloc_3: lambdas_27 = #1 (env_682)
    val sequence_1: lambdas_26 = #2 (env_682)
    val x_2623: (word8) vector = #3 (env_682)
    val current_1: lambdas_25 = #4 (env_682)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1758
  block L_1758 (env_683: unit)
    call L_1759 (gcState_1 (env_683, x_1373 (*()*))) handle _ => raise
  block L_1759 (x_2624: cpointer)
    val _: unit =
      prim CFunction {args = (cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileDone} (x_2624)
    case current_1 of
      currentEnv_0 => L_1760
  block L_1760 (env_684: (t_23) ref)
    call L_1761 (current_2 (env_684, x_1374 (*()*))) handle _ => raise
  block L_1761 (x_2625: t_23)
    case x_2625 of
      T_6 => L_1762
  block L_1762 (x_2626: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2628: cpointer = #2 (x_2626)
    val x_2627: (bool) ref = #1 (x_2626)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1763
  block L_1763 (env_685: unit)
    call L_1764 (not_1 (env_685, isOn_0 (*con false*))) handle _ => raise
  block L_1764 (x_2629: bool)
    case x_2629 of
      true => L_1766 | false => L_1765
  block L_1765 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1767
  block L_1767 (env_686: unit)
    call L_1768 (x_2630 (env_686, x_2627)) handle _ => raise
  block L_1768 (x_2631: bool)
    case x_2631 of
      true => L_1770 | false => L_1769
  block L_1769 ()
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1771
  block L_1771 (env_687: unit)
    call L_1772 (gcState_1 (env_687, x_1380 (*()*))) handle _ => raise
  block L_1772 (x_2632: cpointer)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1773
  block L_1773 (env_688: unit)
    call L_1774 (full_2 (env_688, x_1375 (*"mlmon.out"*))) handle _ => raise
  block L_1774 (x_2633: t_19)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1775
  block L_1775 (env_689: unit)
    call L_1776 (full_2 (env_689, x_2623)) handle _ => raise
  block L_1776 (x_2634: t_19)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_1777
  block L_1777 (env_690: unit)
    call L_1778 (length_3 (env_690, x_2633)) handle _ => raise
  block L_1778 (x_2635: word64)
    val x_2636: (word64, word64) tuple = (x_2635, x_1381 (*0x0:w64*))
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_1779
  block L_1779 (env_691: unit)
    call L_1780 (x_2295 (env_691, x_2636)) handle _ => raise
  block L_1780 (x_2637: bool)
    case x_2637 of
      true => L_1782 | false => L_1781
  block L_1781 ()
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_1783
  block L_1783 (env_692: unit)
    call L_1784 (length_3 (env_692, x_2634)) handle _ => raise
  block L_1784 (x_2638: word64)
    val x_2639: (word64, word64) tuple = (x_2638, x_1382 (*0x0:w64*))
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_1785
  block L_1785 (env_693: unit)
    call L_1786 (x_2295 (env_693, x_2639)) handle _ => raise
  block L_1786 (x_2640: bool)
    case x_2640 of
      true => L_1788 | false => L_1787
  block L_1787 ()
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_1789
  block L_1789 (env_694: unit)
    call L_1790 (base_4 (env_694, x_2633)) handle _ => raise
  block L_1790 (x_2641: ((word8) vector, word64, word64) tuple)
    val len1_0: word64 = #2 (x_2641)
    val start1_0: word64 = #1 (x_2641)
    val seq1_0: (word8) vector = #0 (x_2641)
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_1791
  block L_1791 (env_695: unit)
    call L_1792 (base_4 (env_695, x_2634)) handle _ => raise
  block L_1792 (x_2642: ((word8) vector, word64, word64) tuple)
    val len2_0: word64 = #2 (x_2642)
    val start2_0: word64 = #1 (x_2642)
    val seq2_0: (word8) vector = #0 (x_2642)
    val x_2643: (word64, word64) tuple = (len1_0, len2_0)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_1793
  block L_1793 (env_696: unit)
    call L_1794 (+!_2 (env_696, x_2643)) handle _ => raise
  block L_1794 (n_0: word64)
    case arrayAlloc_3 of
      arrayAllocEnv_1 => L_1795
  block L_1795 (env_697: word64)
    call L_1796 (arrayAlloc_2 (env_697, n_0)) handle _ => raise
  block L_1796 (a_1: (word8) array)
    val x_2644: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_1, x_1383 (*0x0:w64*), seq1_0, start1_0, len1_0)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_1797
  block L_1797 (env_698: unit)
    call L_1798 (x_2456 (env_698, x_2644)) handle _ => raise
  block L_1798 (x_2645: unit)
    val x_2646: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_1, len1_0, seq2_0, start2_0, len2_0)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_1799
  block L_1799 (env_699: unit)
    call L_1800 (x_2456 (env_699, x_2646)) handle _ => raise
  block L_1800 (x_2647: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_1801
  block L_1801 (env_700: unit)
    call L_1802 (x_1790 (env_700, a_1)) handle _ => raise
  block L_1788 ()
    case sequence_1 of
      sequenceEnv_0 => L_1803
  block L_1803 (env_701: lambdas_27)
    call L_1802 (sequence_2 (env_701, x_2633)) handle _ => raise
  block L_1782 ()
    case sequence_1 of
      sequenceEnv_0 => L_1804
  block L_1804 (env_702: lambdas_27)
    call L_1802 (sequence_2 (env_702, x_2634)) handle _ => raise
  block L_1802 (x_2648: (word8) vector)
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_1805
  block L_1805 (env_703: unit)
    call L_1806 (x_2416 (env_703, x_2648)) handle _ => raise
  block L_1806 (x_2649: word64)
    val x_2650: (word64, word64) tuple = (x_2649, x_1385 (*0x1:w64*))
    case x_170 (*con xEnv_24 (x_169)*) of
      xEnv_24 => L_1807
  block L_1807 (env_704: unit)
    call L_1808 (x_2290 (env_704, x_2650)) handle _ => raise
  block L_1808 (x_2651: word64)
    val x_2652: ((word8) vector, word64) tuple = (x_2648, x_2651)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_1809
  block L_1809 (env_705: unit)
    call L_1810 (x_2541 (env_705, x_2652)) handle _ => raise
  block L_1810 (x_2653: word8)
    val x_2654: (word8, word8) tuple = (x_1384 (*0x0:w8*), x_2653)
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_1811
  block L_1811 (env_706: unit)
    call L_1812 (x_2558 (env_706, x_2654)) handle _ => raise
  block L_1812 (x_2655: bool)
    case x_2655 of
      true => L_1814 | false => L_1813
  block L_1813 ()
    raise (x_1388 (*con Fail8_0 (x_1387)*))
  block L_1814 ()
    val x_2656: unit =
      prim CFunction {args = (cpointer, cpointer, (word8) vector),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer, Objptr),
                                   res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileWrite} (x_2632, x_2628, x_2648)
    goto L_1815 (x_2656)
  block L_1770 ()
    raise (x_1379 (*con Fail_0 (x_1378)*))
  block L_1766 ()
    goto L_1815 (x_1376 (*()*))
  block L_1815 (x_2657: unit)
    val x_2659: list_6 = prim Ref_deref[list_6] (all_2)
    val x_2658: (list_6, unit) tuple = (x_2659, x_1389 (*()*))
    case loop_4 (*con loopEn ... e_55)*) of
      loopEnv_4 => L_1816
  block L_1816 (env_707: unit)
    call tail loop_16 (env_707, x_2658)
fun loop_16 (env_708: unit, x_2660: (list_6, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_1817 ()
  block L_1817 ()
    val b_8: unit = #1 (x_2660)
    val l_0: list_6 = #0 (x_2660)
    case l_0 of
      nil_11 => L_1819 | ::_8 => L_1818
  block L_1818 (x_2661: (t_23, list_6) tuple)
    val x_2663: list_6 = #1 (x_2661)
    val x_2662: t_23 = #0 (x_2661)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1820
  block L_1820 (env_709: unit)
    call L_1821 (gcState_1 (env_709, x_1390 (*()*))) handle _ => raise
  block L_1821 (x_2664: cpointer)
    case x_2662 of
      T_6 => L_1822
  block L_1822 (x_2665: ((bool) ref, (bool) ref, cpointer) tuple)
    val #_2: cpointer = #2 (x_2665)
    val x_2667: unit =
      prim CFunction {args = (cpointer, cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileFree} (x_2664, #_2)
    val x_2666: (list_6, unit) tuple = (x_2663, x_2667)
    case loop_4 (*con loopEn ... e_55)*) of
      loopEnv_4 => L_1823
  block L_1823 (env_710: unit)
    call tail loop_16 (env_710, x_2666)
  block L_1819 ()
    return (b_8)
fun init_1 (env_711: (lambdas_25, (t_23) ref) tuple, x_2668: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1824 ()
  block L_1824 ()
    val current_3: lambdas_25 = #0 (env_711)
    val r_1: (t_23) ref = #1 (env_711)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1825
  block L_1825 (env_712: unit)
    call L_1826 (gcState_1 (env_712, x_1362 (*()*))) handle _ => raise
  block L_1826 (x_2669: cpointer)
    val x_2670: cpointer =
      prim CFunction {args = (cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer), res = Some CPointer},
                      return = cpointer,
                      symbolScope = private,
                      target = GC_getProfileCurrent} (x_2669)
    case make_0 (*con makeEn ... e_54)*) of
      makeEnv_0 => L_1827
  block L_1827 (env_713: unit)
    call L_1828 (make_1 (env_713, x_2670)) handle _ => raise
  block L_1828 (x_2671: t_23)
    case x_2671 of
      T_6 => L_1829
  block L_1829 (x_2672: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2675: cpointer = #2 (x_2672)
    val x_2674: (bool) ref = #1 (x_2672)
    val x_2673: (bool) ref = #0 (x_2672)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1830
  block L_1830 (env_714: unit)
    call L_1831 (not_1 (env_714, isOn_0 (*con false*))) handle _ => raise
  block L_1831 (x_2676: bool)
    case x_2676 of
      true => L_1833 | false => L_1832
  block L_1832 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1834
  block L_1834 (env_715: unit)
    call L_1835 (x_2630 (env_715, x_2674)) handle _ => raise
  block L_1835 (x_2677: bool)
    case x_2677 of
      true => L_1837 | false => L_1836
  block L_1836 ()
    case current_3 of
      currentEnv_0 => L_1838
  block L_1838 (env_716: (t_23) ref)
    call L_1839 (current_2 (env_716, x_1367 (*()*))) handle _ => raise
  block L_1839 (x_2678: t_23)
    case x_2678 of
      T_6 => L_1840
  block L_1840 (x_2679: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2681: (bool) ref = #0 (x_2679)
    val x_2680: ((bool) ref, bool) tuple = (x_2681, x_1368 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1841
  block L_1841 (env_717: unit)
    call L_1842 (x_2682 (env_717, x_2680)) handle _ => raise
  block L_1842 (x_2683: unit)
    val x_2684: ((bool) ref, bool) tuple = (x_2673, x_1369 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1843
  block L_1843 (env_718: unit)
    call L_1844 (x_2682 (env_718, x_2684)) handle _ => raise
  block L_1844 (x_2685: unit)
    val _: unit = prim Ref_assign[t_23] (r_1, x_2671)
    case gcState_0 (*con gcStat ... _188)*) of
      gcStateEnv_0 => L_1845
  block L_1845 (env_719: unit)
    call L_1846 (gcState_1 (env_719, x_1370 (*()*))) handle _ => raise
  block L_1846 (x_2686: cpointer)
    val _: unit =
      prim CFunction {args = (cpointer, cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_setProfileCurrent} (x_2686, x_2675)
    return (x_1371 (*()*))
  block L_1837 ()
    raise (x_1366 (*con Fail_0 (x_1365)*))
  block L_1833 ()
    return (x_1363 (*()*))
fun current_2 (env_720: (t_23) ref, x_2687: unit):
  {returns = Some (t_23), raises = Some (exn)} =
L_1847 ()
  block L_1847 ()
    val x_2688: t_23 = prim Ref_deref[t_23] (env_720)
    return (x_2688)
fun make_1 (env_721: unit, x_2689: cpointer):
  {returns = Some (t_23), raises = Some (exn)} =
L_1848 ()
  block L_1848 ()
    val x_2693: (bool) ref = prim Ref_ref[bool] (x_1360 (*con false*))
    val x_2692: (bool) ref = prim Ref_ref[bool] (x_1361 (*con false*))
    val x_2691: ((bool) ref, (bool) ref, cpointer) tuple =
      (x_2693, x_2692, x_2689)
    val x_2690: t_23 = con T_6 (x_2691)
    return (x_2690)
fun defaultTopLevelHandler_0 (env_722:
                                (lambdas_32, lambdas_31, lambdas_30, word32) tuple,
                              x_2694: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_1849 ()
  block L_1849 ()
    val exnMessage_1: lambdas_32 = #0 (env_722)
    val concat_1: lambdas_31 = #1 (env_722)
    val exit_1: lambdas_30 = #2 (env_722)
    val failure_1: word32 = #3 (env_722)
    case exnMessage_1 of
      exnMessageEnv_0 => L_1850
  block L_1850 (env_723: (list_0) ref)
    call L_1851 (exnMessage_2 (env_723, x_2694)) handle _ => L_1852
  block L_1851 (x_2695: (word8) vector)
    val x_2699: ((word8) vector, list_7) tuple =
      (x_2695, x_1352 (*con ::_1 (x_1351)*))
    val x_2698: list_7 = con ::_1 (x_2699)
    val x_2697: ((word8) vector, list_7) tuple =
      (x_1353 (*"unhandled ... on: "*), x_2698)
    val x_2696: list_7 = con ::_1 (x_2697)
    case concat_1 of
      concatEnv_0 => L_1853
  block L_1853 (env_724: (lambdas_27, lambdas_484, lambdas_26) tuple)
    call L_1854 (concat_2 (env_724, x_2696)) handle _ => L_1852
  block L_1854 (x_2700: (word8) vector)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1855
  block L_1855 (env_725: unit)
    call L_1856 (print_1 (env_725, x_2700)) handle _ => L_1852
  block L_1856 (x_2701: unit)
    case exit_1 of
      exitEnv_0 => L_1857
  block L_1857 (env_726:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_483,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_35,
                   word32,
                   lambdas_31) tuple)
    call L_1858 (exit_2 (env_726, failure_1)) handle _ => L_1852
  block L_1858 (x_2702: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1859
  block L_1859 (env_727: unit)
    call L_1860 (print_1 (env_727, x_1354 (*"Top-level ... d.\n"*))) handle _ => L_1852
  block L_1860 (x_2703: unit)
    case exit_1 of
      exitEnv_0 => L_1861
  block L_1861 (env_728:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_483,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_35,
                   word32,
                   lambdas_31) tuple)
    call L_1862 (exit_2 (env_728, failure_1)) handle _ => L_1852
  block L_1852 (x_2704: exn)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1863
  block L_1863 (env_729: unit)
    call L_1864 (print_1 (env_729, x_1355 (*"Top-level ... n.\n"*))) handle _ => raise
  block L_1864 (x_2705: unit)
    case halt_0 (*con haltEn ... e_52)*) of
      haltEnv_0 => L_1865
  block L_1865 (env_730: unit)
    call L_1866 (halt_1 (env_730, failure_1)) handle _ => raise
  block L_1866 (x_2706: unit)
    raise (x_1358 (*con Fail_0 (x_1357)*))
  block L_1862 (x_2707: unit)
    return (x_2707)
fun defaultTopLevelSuffix_0 (env_731: (lambdas_30, word32, word32) tuple,
                             x_2708: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1867 ()
  block L_1867 ()
    val exit_3: lambdas_30 = #0 (env_731)
    val success_1: word32 = #1 (env_731)
    val failure_2: word32 = #2 (env_731)
    case exit_3 of
      exitEnv_0 => L_1868
  block L_1868 (env_732:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_483,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_35,
                   word32,
                   lambdas_31) tuple)
    call L_1869 (exit_2 (env_732, success_1)) handle _ => L_1870
  block L_1869 (x_2709: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1871
  block L_1871 (env_733: unit)
    call L_1872 (print_1 (env_733, x_1344 (*"Top-level ... d.\n"*))) handle _ => L_1870
  block L_1872 (x_2710: unit)
    case exit_3 of
      exitEnv_0 => L_1873
  block L_1873 (env_734:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_483,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_35,
                   word32,
                   lambdas_31) tuple)
    call L_1874 (exit_2 (env_734, failure_2)) handle _ => L_1870
  block L_1870 (x_2711: exn)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_1875
  block L_1875 (env_735: unit)
    call L_1876 (print_1 (env_735, x_1345 (*"Top-level ... n.\n"*))) handle _ => raise
  block L_1876 (x_2712: unit)
    case halt_0 (*con haltEn ... e_52)*) of
      haltEnv_0 => L_1877
  block L_1877 (env_736: unit)
    call L_1878 (halt_1 (env_736, failure_2)) handle _ => raise
  block L_1878 (x_2713: unit)
    raise (x_1348 (*con Fail_0 (x_1347)*))
  block L_1874 (x_2714: unit)
    return (x_2714)
fun exit_2 (env_737:
              ((bool) ref,
               (list_2) ref,
               (bool) ref,
               lambdas_483,
               (word8) array,
               word32,
               word32,
               word32,
               lambdas_35,
               word32,
               lambdas_31) tuple,
            x_2715: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1879 ()
  block L_1879 ()
    val exiting_1: (bool) ref = #0 (env_737)
    val atExit_1: (list_2) ref = #1 (env_737)
    val x_2718: (bool) ref = #2 (env_737)
    val x_2717: lambdas_483 = #3 (env_737)
    val x_2716: (word8) array = #4 (env_737)
    val zero_9: word32 = #5 (env_737)
    val minInt'_4: word32 = #6 (env_737)
    val one_8: word32 = #7 (env_737)
    val quot_4: lambdas_35 = #8 (env_737)
    val maxNumDigits_2: word32 = #9 (env_737)
    val concat_3: lambdas_31 = #10 (env_737)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1880
  block L_1880 (env_738: unit)
    call L_1881 (x_2630 (env_738, exiting_1)) handle _ => raise
  block L_1881 (x_2719: bool)
    case x_2719 of
      true => L_1883 | false => L_1882
  block L_1882 ()
    val x_2720: ((bool) ref, bool) tuple = (exiting_1, x_1311 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1884
  block L_1884 (env_739: unit)
    call L_1885 (x_2682 (env_739, x_2720)) handle _ => raise
  block L_1885 (x_2721: unit)
    case toRep_0 (*con toRepE ... _791)*) of
      toRepEnv_0 => L_1886
  block L_1886 (env_740: unit)
    call L_1887 (toRep_3 (env_740, x_2715)) handle _ => raise
  block L_1887 (x_2722: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1888
  block L_1888 (env_741: unit)
    call L_1889 (sextdFromInt32ToInt32_1 (env_741, x_2722)) handle _ => raise
  block L_1889 (x_2723: word32)
    val x_2724: (word32, word32) tuple = (x_1312 (*0x0:w32*), x_2723)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1890
  block L_1890 (env_742: unit)
    call L_1891 (<=_4 (env_742, x_2724)) handle _ => raise
  block L_1891 (x_2725: bool)
    case x_2725 of
      true => L_1893 | false => L_1892
  block L_1892 ()
    goto L_1894 (x_1314 (*con false*))
  block L_1893 ()
    val x_2726: (word32, word32) tuple = (x_2723, x_1313 (*0x100:w32*))
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1895
  block L_1895 (env_743: unit)
    call L_1894 (<_5 (env_743, x_2726)) handle _ => raise
  block L_1894 (x_2727: bool)
    case x_2727 of
      true => L_1897 | false => L_1896
  block L_1896 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_1898
  block L_1898 (env_744: unit)
    call L_1899 (atomicBegin_1 (env_744, x_1328 (*()*))) handle _ => raise
  block L_1899 (x_2728: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_1900
  block L_1900 (env_745: unit)
    call L_1901 (x_2630 (env_745, x_2718)) handle _ => raise
  block L_1901 (b_9: bool)
    case b_9 of
      true => L_1903 | false => L_1902
  block L_1902 ()
    val x_2729: ((bool) ref, bool) tuple = (x_2718, x_1331 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1904
  block L_1904 (env_746: unit)
    call L_1905 (x_2682 (env_746, x_2729)) handle _ => raise
  block L_1905 (x_2730: unit)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_1906
  block L_1906 (env_747: unit)
    call L_1907 (atomicEnd_1 (env_747, x_1332 (*()*))) handle _ => raise
  block L_1907 (x_2731: unit)
    goto L_1908 (x_2716)
  block L_1903 ()
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_1909
  block L_1909 (env_748: unit)
    call L_1910 (atomicEnd_1 (env_748, x_1329 (*()*))) handle _ => raise
  block L_1910 (x_2732: unit)
    case x_2717 of
      xEnv_234 => L_1911
  block L_1911 (env_749: (lambdas_286, word32) tuple)
    call L_1908 (x_1626 (env_749, x_1330 (*()*))) handle _ => raise
  block L_1908 (x_2733: (word8) array)
    val x_2734: ((bool) ref, bool) tuple = (x_2718, b_9)
    case radixToInt_0 (*con radixT ... _437)*) of
      radixToIntEnv_0 => L_1912
  block L_1912 (env_750: unit)
    call L_1913 (radixToInt_1 (env_750, x_498 (*con DEC_1*))) handle _ => L_1914
  block L_1913 (x_2735: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1915
  block L_1915 (env_751: unit)
    call L_1916 (sextdFromInt32ToInt32_1 (env_751, x_2735)) handle _ => L_1914
  block L_1916 (radix_1: word32)
    val tuple_97:
      (word32, word32, word32, word32, (word8) array, lambdas_35, word32) tuple =
      (radix_1, zero_9, minInt'_4, one_8, x_2733, quot_4, x_2723)
    val x_2736: (word32, word32) tuple = (x_2723, zero_9)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1917
  block L_1917 (env_752: unit)
    call L_1918 (<_5 (env_752, x_2736)) handle _ => L_1914
  block L_1918 (x_2737: bool)
    case x_2737 of
      true => L_1920 | false => L_1919
  block L_1919 ()
    case ~!_0 (*con ~!Env_0 (x_154)*) of
      ~!Env_0 => L_1921
  block L_1921 (env_753: unit)
    call L_1922 (~!_2 (env_753, x_2723)) handle _ => L_1914
  block L_1920 ()
    goto L_1922 (x_2723)
  block L_1922 (x_2738: word32)
    val x_2739: (word32, word32) tuple = (maxNumDigits_2, x_1340 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1923
  block L_1923 (env_754: unit)
    call L_1924 (x_1780 (env_754, x_2739)) handle _ => L_1914
  block L_1924 (x_2740: word32)
    val x_2741: (word32, word32) tuple = (x_2738, x_2740)
    call L_1925 (loop_17 (tuple_97, x_2741)) handle _ => L_1914
  block L_1914 (x_2742: exn)
    call L_1926 (x_2743 (x_2734, x_1342 (*()*))) handle _ => raise
  block L_1926 (x_2744: unit)
    raise (x_2742)
  block L_1925 (x_2745: (word8) vector)
    goto L_1927 (x_2745)
  block L_1927 (x_2746: (word8) vector)
    call L_1928 (x_2743 (x_2734, x_1341 (*()*))) handle _ => raise
  block L_1928 (x_2747: unit)
    val x_2751: ((word8) vector, list_7) tuple =
      (x_2746, x_1327 (*con ::_1 (x_1326)*))
    val x_2750: list_7 = con ::_1 (x_2751)
    val x_2749: ((word8) vector, list_7) tuple =
      (x_1343 (*"MLton.Exit.exit("*), x_2750)
    val x_2748: list_7 = con ::_1 (x_2749)
    case concat_3 of
      concatEnv_0 => L_1929
  block L_1929 (env_755: (lambdas_27, lambdas_484, lambdas_26) tuple)
    call L_1930 (concat_2 (env_755, x_2748)) handle _ => raise
  block L_1930 (x_2752: (word8) vector)
    val x_2754: ((unit) ref, (word8) vector) tuple = (x_1453, x_2752)
    val x_2753: exn = con Fail_0 (x_2754)
    raise (x_2753)
  block L_1897 ()
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1931
  block L_1931 (env_756: unit)
    call L_1932 (x_2311 (env_756, atExit_1)) handle _ => raise
  block L_1932 (x_2755: list_2)
    val x_2756: (list_2, unit) tuple = (x_2755, x_1315 (*()*))
    case loop_3 (*con loopEn ... e_53)*) of
      loopEnv_3 => L_1933
  block L_1933 (env_757: unit)
    call L_1934 (loop_18 (env_757, x_2756)) handle _ => raise
  block L_1934 (x_2757: unit)
    case halt_0 (*con haltEn ... e_52)*) of
      haltEnv_0 => L_1935
  block L_1935 (env_758: unit)
    call L_1936 (halt_1 (env_758, x_2715)) handle _ => raise
  block L_1936 (x_2758: unit)
    raise (x_1320 (*con Fail_0 (x_1319)*))
  block L_1883 ()
    raise (x_1310 (*con Fail_0 (x_1309)*))
fun loop_17 (env_759:
               (word32,
                word32,
                word32,
                word32,
                (word8) array,
                lambdas_35,
                word32) tuple,
             x_2759: (word32, word32) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_1937 ()
  block L_1937 ()
    val radix_2: word32 = #0 (env_759)
    val zero_10: word32 = #1 (env_759)
    val minInt'_5: word32 = #2 (env_759)
    val one_9: word32 = #3 (env_759)
    val x_2762: (word8) array = #4 (env_759)
    val quot_5: lambdas_35 = #5 (env_759)
    val x_2761: word32 = #6 (env_759)
    val i_1: word32 = #1 (x_2759)
    val q_0: word32 = #0 (x_2759)
    val x_2760: (word32, word32) tuple = (radix_2, zero_10)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1938
  block L_1938 (env_760: unit)
    call L_1939 (x_2049 (env_760, x_2760)) handle _ => raise
  block L_1939 (x_2763: bool)
    case x_2763 of
      true => L_1941 | false => L_1940
  block L_1940 ()
    val x_2764: (word32, word32) tuple = (q_0, minInt'_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1942
  block L_1942 (env_761: unit)
    call L_1943 (x_2049 (env_761, x_2764)) handle _ => raise
  block L_1943 (x_2765: bool)
    case x_2765 of
      true => L_1945 | false => L_1944
  block L_1944 ()
    goto L_1946 (x_1335 (*con false*))
  block L_1945 ()
    case x_156 (*con xEnv_20 (x_155)*) of
      xEnv_20 => L_1947
  block L_1947 (env_762: unit)
    call L_1948 (x_2766 (env_762, one_9)) handle _ => raise
  block L_1948 (x_2767: word32)
    val x_2768: (word32, word32) tuple = (radix_2, x_2767)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1949
  block L_1949 (env_763: unit)
    call L_1946 (x_2049 (env_763, x_2768)) handle _ => raise
  block L_1946 (x_2769: bool)
    case x_2769 of
      true => L_1951 | false => L_1950
  block L_1950 ()
    val x_2770: (word32, word32) tuple = (q_0, radix_2)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_1952
  block L_1952 (env_764: unit)
    call L_1953 (remUnsafe_1 (env_764, x_2770)) handle _ => raise
  block L_1951 ()
    goto L_1953 (zero_10)
  block L_1953 (x_2771: word32)
    case ~!_0 (*con ~!Env_0 (x_154)*) of
      ~!Env_0 => L_1954
  block L_1954 (env_765: unit)
    call L_1955 (~!_2 (env_765, x_2771)) handle _ => raise
  block L_1955 (x_2772: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_1956
  block L_1956 (env_766: unit)
    call L_1957 (sextdFromInt32ToInt32_1 (env_766, x_2772)) handle _ => raise
  block L_1957 (x_2773: word32)
    case digitToChar_0 (*con digitT ... e_37)*) of
      digitToCharEnv_0 => L_1958
  block L_1958 (env_767: unit)
    call L_1959 (digitToChar_1 (env_767, x_2773)) handle _ => raise
  block L_1959 (x_2774: word8)
    val x_2775: ((word8) array, word32, word8) tuple = (x_2762, i_1, x_2774)
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_1960
  block L_1960 (env_768: unit)
    call L_1961 (update_1 (env_768, x_2775)) handle _ => raise
  block L_1961 (x_2776: unit)
    val x_2777: (word32, word32) tuple = (q_0, radix_2)
    case quot_5 of
      quotEnv_1 => L_1962
  block L_1962 (env_769: (word32, word32, word32) tuple)
    call L_1963 (quot_2 (env_769, x_2777)) handle _ => raise
  block L_1963 (q_1: word32)
    val x_2778: (word32, word32) tuple = (q_1, zero_10)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_1964
  block L_1964 (env_770: unit)
    call L_1965 (x_2049 (env_770, x_2778)) handle _ => raise
  block L_1965 (x_2779: bool)
    case x_2779 of
      true => L_1967 | false => L_1966
  block L_1966 ()
    val x_2780: (word32, word32) tuple = (i_1, x_1339 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1968
  block L_1968 (env_771: unit)
    call L_1969 (x_1780 (env_771, x_2780)) handle _ => raise
  block L_1969 (x_2781: word32)
    val x_2782: (word32, word32) tuple = (q_1, x_2781)
    call tail loop_17 (env_759, x_2782)
  block L_1967 ()
    val x_2783: (word32, word32) tuple = (x_2761, zero_10)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_1970
  block L_1970 (env_772: unit)
    call L_1971 (<_5 (env_772, x_2783)) handle _ => raise
  block L_1971 (x_2784: bool)
    case x_2784 of
      true => L_1973 | false => L_1972
  block L_1972 ()
    goto L_1974 (i_1)
  block L_1973 ()
    val x_2785: (word32, word32) tuple = (i_1, x_1336 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_1975
  block L_1975 (env_773: unit)
    call L_1976 (x_1780 (env_773, x_2785)) handle _ => raise
  block L_1976 (i_2: word32)
    val x_2786: ((word8) array, word32, word8) tuple =
      (x_2762, i_2, x_1337 (*0x7E:w8*))
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_1977
  block L_1977 (env_774: unit)
    call L_1978 (update_1 (env_774, x_2786)) handle _ => raise
  block L_1978 (x_2787: unit)
    goto L_1974 (i_2)
  block L_1974 (x_2788: word32)
    val x_2789: ((word8) array, word32, t_0) tuple =
      (x_2762, x_2788, x_1338 (*con NONE_1*))
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_1979
  block L_1979 (env_775: unit)
    call L_1980 (slice_1 (env_775, x_2789)) handle _ => raise
  block L_1980 (x_2790: t_13)
    case vector_0 (*con vector ... e_19)*) of
      vectorEnv_0 => L_1981
  block L_1981 (env_776: unit)
    call tail vector_1 (env_776, x_2790)
  block L_1941 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_2743 (env_777: ((bool) ref, bool) tuple, x_2791: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1982 ()
  block L_1982 ()
    val x_2792: (bool) ref = #0 (env_777)
    val b_10: bool = #1 (env_777)
    case b_10 of
      true => L_1984 | false => L_1983
  block L_1983 ()
    val x_2793: ((bool) ref, bool) tuple = (x_2792, x_1334 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_1985
  block L_1985 (env_778: unit)
    call tail x_2682 (env_778, x_2793)
  block L_1984 ()
    return (x_1333 (*()*))
fun loop_18 (env_779: unit, x_2794: (list_2, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_1986 ()
  block L_1986 ()
    val b_11: unit = #1 (x_2794)
    val l_1: list_2 = #0 (x_2794)
    case l_1 of
      nil_4 => L_1988 | ::_5 => L_1987
  block L_1987 (x_2795: (lambdas_3, list_2) tuple)
    val x_2797: list_2 = #1 (x_2795)
    val x_2796: lambdas_3 = #0 (x_2795)
    case x_2796 of
      xEnv_244 => L_1991 | xEnv_243 => L_1990 | xEnv_242 => L_1989
  block L_1989 (env_780: (lambdas_22, (list_6) ref) tuple)
    call L_1992 (x_2619 (env_780, x_1316 (*()*))) handle _ => L_1993
  block L_1990 (env_781: (list_5) ref)
    call L_1992 (x_2798 (env_781, x_1316 (*()*))) handle _ => L_1993
  block L_1991 (env_782:
                  ((list_6) ref,
                   lambdas_27,
                   lambdas_26,
                   (word8) vector,
                   lambdas_25) tuple)
    call L_1992 (x_2621 (env_782, x_1316 (*()*))) handle _ => L_1993
  block L_1993 (x_2799: exn)
    goto L_1992 (x_1317 (*()*))
  block L_1992 (x_2800: unit)
    val x_2801: (list_2, unit) tuple = (x_2797, x_2800)
    case loop_3 (*con loopEn ... e_53)*) of
      loopEnv_3 => L_1994
  block L_1994 (env_783: unit)
    call tail loop_18 (env_783, x_2801)
  block L_1988 ()
    return (b_11)
fun halt_1 (env_784: unit, x_2802: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1995 ()
  block L_1995 ()
    case toRep_0 (*con toRepE ... _791)*) of
      toRepEnv_0 => L_1996
  block L_1996 (env_785: unit)
    call L_1997 (toRep_3 (env_785, x_2802)) handle _ => raise
  block L_1997 (x_2803: word32)
    val _: unit = prim MLton_halt (x_2803)
    case bug_0 (*con bugEnv_0 (x_189)*) of
      bugEnv_0 => L_1998
  block L_1998 (env_786: unit)
    call tail bug_1 (env_786, x_1307 (*"MLton.Exit.halt"*))
fun x_2385 (env_787: unit, x_2804: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_1999 ()
  block L_1999 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2000
  block L_2000 (env_788: unit)
    call tail sextdFromInt32ToInt32_1 (env_788, x_2804)
fun x_2805 (env_789:
              (word32,
               lambdas_488,
               lambdas_487,
               lambdas_486,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2806: t_19):
  {returns = Some (t_0), raises = Some (exn)} =
L_2001 ()
  block L_2001 ()
    val again_1: word32 = #0 (env_789)
    val putV_1: lambdas_488 = #1 (env_789)
    val setfl_1: lambdas_487 = #2 (env_789)
    val x_2807: lambdas_486 = #3 (env_789)
    val appendFlgs_1: word32 = #4 (env_789)
    val blocking_1: (bool) ref = #5 (env_789)
    val closed_1: (bool) ref = #6 (env_789)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2002
  block L_2002 (env_790: unit)
    call L_2003 (x_2630 (env_790, closed_1)) handle _ => L_2004
  block L_2003 (x_2808: bool)
    case x_2808 of
      true => L_2006 | false => L_2005
  block L_2005 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2007
  block L_2007 (env_791: unit)
    call L_2008 (x_2630 (env_791, blocking_1)) handle _ => L_2004
  block L_2008 (x_2809: bool)
    case x_2809 of
      true => L_2010 | false => L_2009
  block L_2009 ()
    val x_2810: ((bool) ref, bool) tuple = (blocking_1, x_1291 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_2011
  block L_2011 (env_792: unit)
    call L_2012 (x_2682 (env_792, x_2810)) handle _ => L_2004
  block L_2012 (x_2811: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2013
  block L_2013 (env_793: unit)
    call L_2014 (x_2630 (env_793, blocking_1)) handle _ => L_2004
  block L_2014 (x_2812: bool)
    case x_2812 of
      true => L_2016 | false => L_2015
  block L_2015 ()
    val x_2816: (word32, list_4) tuple = (appendFlgs_1, x_1294 (*con nil_10*))
    val x_2815: list_4 = con ::_2 (x_2816)
    val x_2814: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2815)
    val x_2813: list_4 = con ::_2 (x_2814)
    case x_2807 of
      xEnv_239 => L_2017
  block L_2017 (env_794: word32)
    call L_2018 (x_2339 (env_794, x_2813)) handle _ => L_2004
  block L_2016 ()
    goto L_2018 (appendFlgs_1)
  block L_2018 (x_2817: word32)
    val x_2818: (word32, word32) tuple = (x_1051 (*0x1:w32*), x_2817)
    case setfl_1 of
      setflEnv_0 => L_2019
  block L_2019 (env_795:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_48) tuple)
    call L_2020 (setfl_2 (env_795, x_2818)) handle _ => L_2004
  block L_2010 ()
    goto L_2020 (x_1293 (*()*))
  block L_2020 (x_2819: unit)
    val x_2820: (word32, t_19) tuple = (x_1051 (*0x1:w32*), x_2806)
    case putV_1 of
      putVEnv_0 => L_2021
  block L_2021 (env_796:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple)
    call L_2022 (putV_2 (env_796, x_2820)) handle _ => L_2004
  block L_2022 (x_2821: word32)
    val x_2822: t_0 = con SOME_0 (x_2821)
    return (x_2822)
  block L_2006 ()
    goto L_2004 (x_1034 (*con Closed ... 1033)*))
  block L_2004 (x_2823: exn)
    case x_2823 of
      SysErr_0 => L_2023 | _ => L_2024
  block L_2024 ()
    call tail x_2824 (x_2823, x_1295 (*()*))
  block L_2023 (x_2825: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_2828: ((word8) vector, t_0) tuple = #1 (x_2825)
    val x_2827: (unit) ref = #0 (x_2825)
    val x_2826: bool = prim MLton_equal[(unit) ref] (x_2827, x_1473)
    case x_2826 of
      true => L_2026 | false => L_2025
  block L_2025 ()
    call tail x_2824 (x_2823, x_1297 (*()*))
  block L_2026 ()
    val x_2831: t_0 = #1 (x_2828)
    val x_2830: t_0 = con SOME_0 (again_1)
    val x_2829: (t_0, t_0) tuple = (x_2831, x_2830)
    case x_93 (*con xEnv_13 (x_92)*) of
      xEnv_13 => L_2027
  block L_2027 (env_797: unit)
    call L_2028 (x_2832 (env_797, x_2829)) handle _ => raise
  block L_2028 (x_2833: bool)
    case x_2833 of
      true => L_2030 | false => L_2029
  block L_2029 ()
    raise (x_2823)
  block L_2030 ()
    return (x_1296 (*con NONE_1*))
fun x_2824 (env_798: exn, unit_5: unit):
  {returns = Some (t_0), raises = Some (exn)} =
L_2031 ()
  block L_2031 ()
    raise (env_798)
fun x_2614 (env_799:
              (lambdas_488,
               lambdas_487,
               lambdas_486,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2834: t_19):
  {returns = Some (word32), raises = Some (exn)} =
L_2032 ()
  block L_2032 ()
    val putV_3: lambdas_488 = #0 (env_799)
    val setfl_3: lambdas_487 = #1 (env_799)
    val x_2835: lambdas_486 = #2 (env_799)
    val appendFlgs_2: word32 = #3 (env_799)
    val blocking_2: (bool) ref = #4 (env_799)
    val closed_2: (bool) ref = #5 (env_799)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2033
  block L_2033 (env_800: unit)
    call L_2034 (x_2630 (env_800, closed_2)) handle _ => raise
  block L_2034 (x_2836: bool)
    case x_2836 of
      true => L_2036 | false => L_2035
  block L_2035 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2037
  block L_2037 (env_801: unit)
    call L_2038 (x_2630 (env_801, blocking_2)) handle _ => raise
  block L_2038 (x_2837: bool)
    case x_2837 of
      true => L_2040 | false => L_2039
  block L_2039 ()
    val x_2838: ((bool) ref, bool) tuple = (blocking_2, x_1287 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_2041
  block L_2041 (env_802: unit)
    call L_2042 (x_2682 (env_802, x_2838)) handle _ => raise
  block L_2042 (x_2839: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2043
  block L_2043 (env_803: unit)
    call L_2044 (x_2630 (env_803, blocking_2)) handle _ => raise
  block L_2044 (x_2840: bool)
    case x_2840 of
      true => L_2046 | false => L_2045
  block L_2045 ()
    val x_2844: (word32, list_4) tuple = (appendFlgs_2, x_1290 (*con nil_10*))
    val x_2843: list_4 = con ::_2 (x_2844)
    val x_2842: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2843)
    val x_2841: list_4 = con ::_2 (x_2842)
    case x_2835 of
      xEnv_239 => L_2047
  block L_2047 (env_804: word32)
    call L_2048 (x_2339 (env_804, x_2841)) handle _ => raise
  block L_2046 ()
    goto L_2048 (appendFlgs_2)
  block L_2048 (x_2845: word32)
    val x_2846: (word32, word32) tuple = (x_1051 (*0x1:w32*), x_2845)
    case setfl_3 of
      setflEnv_0 => L_2049
  block L_2049 (env_805:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_48) tuple)
    call L_2050 (setfl_2 (env_805, x_2846)) handle _ => raise
  block L_2040 ()
    goto L_2050 (x_1289 (*()*))
  block L_2050 (x_2847: unit)
    val x_2848: (word32, t_19) tuple = (x_1051 (*0x1:w32*), x_2834)
    case putV_3 of
      putVEnv_0 => L_2051
  block L_2051 (env_806:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple)
    call tail putV_2 (env_806, x_2848)
  block L_2036 ()
    raise (x_1034 (*con Closed ... 1033)*))
fun x_2849 (env_807:
              (word32,
               lambdas_490,
               lambdas_487,
               lambdas_486,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2850: t_13):
  {returns = Some (t_0), raises = Some (exn)} =
L_2052 ()
  block L_2052 ()
    val again_2: word32 = #0 (env_807)
    val putA_1: lambdas_490 = #1 (env_807)
    val setfl_4: lambdas_487 = #2 (env_807)
    val x_2851: lambdas_486 = #3 (env_807)
    val appendFlgs_3: word32 = #4 (env_807)
    val blocking_3: (bool) ref = #5 (env_807)
    val closed_3: (bool) ref = #6 (env_807)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2053
  block L_2053 (env_808: unit)
    call L_2054 (x_2630 (env_808, closed_3)) handle _ => L_2055
  block L_2054 (x_2852: bool)
    case x_2852 of
      true => L_2057 | false => L_2056
  block L_2056 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2058
  block L_2058 (env_809: unit)
    call L_2059 (x_2630 (env_809, blocking_3)) handle _ => L_2055
  block L_2059 (x_2853: bool)
    case x_2853 of
      true => L_2061 | false => L_2060
  block L_2060 ()
    val x_2854: ((bool) ref, bool) tuple = (blocking_3, x_1280 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_2062
  block L_2062 (env_810: unit)
    call L_2063 (x_2682 (env_810, x_2854)) handle _ => L_2055
  block L_2063 (x_2855: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2064
  block L_2064 (env_811: unit)
    call L_2065 (x_2630 (env_811, blocking_3)) handle _ => L_2055
  block L_2065 (x_2856: bool)
    case x_2856 of
      true => L_2067 | false => L_2066
  block L_2066 ()
    val x_2860: (word32, list_4) tuple = (appendFlgs_3, x_1283 (*con nil_10*))
    val x_2859: list_4 = con ::_2 (x_2860)
    val x_2858: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2859)
    val x_2857: list_4 = con ::_2 (x_2858)
    case x_2851 of
      xEnv_239 => L_2068
  block L_2068 (env_812: word32)
    call L_2069 (x_2339 (env_812, x_2857)) handle _ => L_2055
  block L_2067 ()
    goto L_2069 (appendFlgs_3)
  block L_2069 (x_2861: word32)
    val x_2862: (word32, word32) tuple = (x_1051 (*0x1:w32*), x_2861)
    case setfl_4 of
      setflEnv_0 => L_2070
  block L_2070 (env_813:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_48) tuple)
    call L_2071 (setfl_2 (env_813, x_2862)) handle _ => L_2055
  block L_2061 ()
    goto L_2071 (x_1282 (*()*))
  block L_2071 (x_2863: unit)
    val x_2864: (word32, t_13) tuple = (x_1051 (*0x1:w32*), x_2850)
    case putA_1 of
      putAEnv_0 => L_2072
  block L_2072 (env_814:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple)
    call L_2073 (putA_2 (env_814, x_2864)) handle _ => L_2055
  block L_2073 (x_2865: word32)
    val x_2866: t_0 = con SOME_0 (x_2865)
    return (x_2866)
  block L_2057 ()
    goto L_2055 (x_1034 (*con Closed ... 1033)*))
  block L_2055 (x_2867: exn)
    case x_2867 of
      SysErr_0 => L_2074 | _ => L_2075
  block L_2075 ()
    call tail x_2868 (x_2867, x_1284 (*()*))
  block L_2074 (x_2869: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_2872: ((word8) vector, t_0) tuple = #1 (x_2869)
    val x_2871: (unit) ref = #0 (x_2869)
    val x_2870: bool = prim MLton_equal[(unit) ref] (x_2871, x_1473)
    case x_2870 of
      true => L_2077 | false => L_2076
  block L_2076 ()
    call tail x_2868 (x_2867, x_1286 (*()*))
  block L_2077 ()
    val x_2875: t_0 = #1 (x_2872)
    val x_2874: t_0 = con SOME_0 (again_2)
    val x_2873: (t_0, t_0) tuple = (x_2875, x_2874)
    case x_93 (*con xEnv_13 (x_92)*) of
      xEnv_13 => L_2078
  block L_2078 (env_815: unit)
    call L_2079 (x_2832 (env_815, x_2873)) handle _ => raise
  block L_2079 (x_2876: bool)
    case x_2876 of
      true => L_2081 | false => L_2080
  block L_2080 ()
    raise (x_2867)
  block L_2081 ()
    return (x_1285 (*con NONE_1*))
fun x_2868 (env_816: exn, unit_6: unit):
  {returns = Some (t_0), raises = Some (exn)} =
L_2082 ()
  block L_2082 ()
    raise (env_816)
fun x_2877 (env_817:
              (lambdas_490,
               lambdas_487,
               lambdas_486,
               word32,
               (bool) ref,
               (bool) ref) tuple,
            x_2878: t_13):
  {returns = Some (word32), raises = Some (exn)} =
L_2083 ()
  block L_2083 ()
    val putA_3: lambdas_490 = #0 (env_817)
    val setfl_5: lambdas_487 = #1 (env_817)
    val x_2879: lambdas_486 = #2 (env_817)
    val appendFlgs_4: word32 = #3 (env_817)
    val blocking_4: (bool) ref = #4 (env_817)
    val closed_4: (bool) ref = #5 (env_817)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2084
  block L_2084 (env_818: unit)
    call L_2085 (x_2630 (env_818, closed_4)) handle _ => raise
  block L_2085 (x_2880: bool)
    case x_2880 of
      true => L_2087 | false => L_2086
  block L_2086 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2088
  block L_2088 (env_819: unit)
    call L_2089 (x_2630 (env_819, blocking_4)) handle _ => raise
  block L_2089 (x_2881: bool)
    case x_2881 of
      true => L_2091 | false => L_2090
  block L_2090 ()
    val x_2882: ((bool) ref, bool) tuple = (blocking_4, x_1276 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_2092
  block L_2092 (env_820: unit)
    call L_2093 (x_2682 (env_820, x_2882)) handle _ => raise
  block L_2093 (x_2883: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2094
  block L_2094 (env_821: unit)
    call L_2095 (x_2630 (env_821, blocking_4)) handle _ => raise
  block L_2095 (x_2884: bool)
    case x_2884 of
      true => L_2097 | false => L_2096
  block L_2096 ()
    val x_2888: (word32, list_4) tuple = (appendFlgs_4, x_1279 (*con nil_10*))
    val x_2887: list_4 = con ::_2 (x_2888)
    val x_2886: (word32, list_4) tuple = (NONBLOCK_0 (*0x800:w32*), x_2887)
    val x_2885: list_4 = con ::_2 (x_2886)
    case x_2879 of
      xEnv_239 => L_2098
  block L_2098 (env_822: word32)
    call L_2099 (x_2339 (env_822, x_2885)) handle _ => raise
  block L_2097 ()
    goto L_2099 (appendFlgs_4)
  block L_2099 (x_2889: word32)
    val x_2890: (word32, word32) tuple = (x_1051 (*0x1:w32*), x_2889)
    case setfl_5 of
      setflEnv_0 => L_2100
  block L_2100 (env_823:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_48) tuple)
    call L_2101 (setfl_2 (env_823, x_2890)) handle _ => raise
  block L_2091 ()
    goto L_2101 (x_1278 (*()*))
  block L_2101 (x_2891: unit)
    val x_2892: (word32, t_13) tuple = (x_1051 (*0x1:w32*), x_2878)
    case putA_3 of
      putAEnv_0 => L_2102
  block L_2102 (env_824:
                  (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple)
    call tail putA_2 (env_824, x_2892)
  block L_2087 ()
    raise (x_1034 (*con Closed ... 1033)*))
fun close_1 (env_825:
               (lambdas_48, (lambdas_49) ref, (bool) ref, word32, (bool) ref) tuple,
             x_2893: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_2103 ()
  block L_2103 ()
    val raiseSys_2: lambdas_48 = #0 (env_825)
    val blocker_1: (lambdas_49) ref = #1 (env_825)
    val restartFlag_1: (bool) ref = #2 (env_825)
    val intr_1: word32 = #3 (env_825)
    val closed_5: (bool) ref = #4 (env_825)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2104
  block L_2104 (env_826: unit)
    call L_2105 (x_2630 (env_826, closed_5)) handle _ => raise
  block L_2105 (x_2894: bool)
    case x_2894 of
      true => L_2107 | false => L_2106
  block L_2106 ()
    val x_2895: ((bool) ref, bool) tuple = (closed_5, x_1232 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_2108
  block L_2108 (env_827: unit)
    call L_2109 (x_2682 (env_827, x_2895)) handle _ => raise
  block L_2109 (x_2896: unit)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2110
  block L_2110 (env_828: unit)
    call L_2111 (sextdFromInt32ToInt32_1 (env_828, x_1235 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2111 (x_2897: word32)
    val tuple_98:
      (word32, (bool) ref, word32, (lambdas_49) ref, lambdas_48) tuple =
      (intr_1, restartFlag_1, x_2897, blocker_1, raiseSys_2)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2112
  block L_2112 (env_829: unit)
    call L_2113 (atomicBegin_1 (env_829, x_1264 (*()*))) handle _ => raise
  block L_2113 (x_2898: unit)
    case x_1234 (*con xEnv_68 (x_1233)*) of
      xEnv_68 => L_2114
  block L_2114 (env_830: unit)
    call L_2115 (x_2899 (env_830, x_1265 (*()*))) handle _ => L_2116
  block L_2116 (x_2900: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2117
  block L_2117 (env_831: unit)
    call L_2118 (atomicEnd_1 (env_831, x_1269 (*()*))) handle _ => raise
  block L_2118 (x_2901: unit)
    raise (x_2900)
  block L_2115 (return_0: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2119
  block L_2119 (env_832: unit)
    call L_2120 (x_2902 (env_832, return_0)) handle _ => raise
  block L_2120 (return_1: word32)
    val x_2903: (word32, word32) tuple = (x_2897, return_1)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2121
  block L_2121 (env_833: unit)
    call L_2122 (x_2049 (env_833, x_2903)) handle _ => raise
  block L_2122 (x_2904: bool)
    case x_2904 of
      true => L_2124 | false => L_2123
  block L_2123 ()
    case x_1267 (*con xEnv_71 (x_1266)*) of
      xEnv_71 => L_2125
  block L_2125 (env_834: unit)
    call L_2126 (x_2905 (env_834, return_1)) handle _ => L_2127
  block L_2127 (x_2906: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2128
  block L_2128 (env_835: unit)
    call L_2129 (atomicEnd_1 (env_835, x_1272 (*()*))) handle _ => raise
  block L_2129 (x_2907: unit)
    raise (x_2906)
  block L_2126 (x_2908: word32)
    goto L_2130 (x_2908)
  block L_2130 (x_2909: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2131
  block L_2131 (env_836: unit)
    call L_2132 (atomicEnd_1 (env_836, x_1271 (*()*))) handle _ => raise
  block L_2132 (x_2910: unit)
    return (x_1273 (*()*))
  block L_2124 ()
    val x_2911: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2133
  block L_2133 (env_837: unit)
    call L_2134 (fromRep_1 (env_837, x_2911)) handle _ => raise
  block L_2134 (e_0: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2135
  block L_2135 (env_838: unit)
    call L_2136 (atomicEnd_1 (env_838, x_1270 (*()*))) handle _ => raise
  block L_2136 (x_2912: unit)
    val x_2913: (word32, list_10) tuple = (e_0, x_1268 (*con nil_7*))
    call L_2137 (errUnblocked_0 (tuple_98, x_2913)) handle _ => raise
  block L_2137 (x_2914: word32)
    return (x_1273 (*()*))
  block L_2107 ()
    return (x_1231 (*()*))
fun x_2905 (env_839: unit, x_2915: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2138 ()
  block L_2138 ()
    return (x_2915)
fun errUnblocked_0 (env_840:
                      (word32, (bool) ref, word32, (lambdas_49) ref, lambdas_48) tuple,
                    x_2916: (word32, list_10) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2139 ()
  block L_2139 ()
    val intr_2: word32 = #0 (env_840)
    val restartFlag_2: (bool) ref = #1 (env_840)
    val x_2917: word32 = #2 (env_840)
    val blocker_2: (lambdas_49) ref = #3 (env_840)
    val raiseSys_3: lambdas_48 = #4 (env_840)
    val handlers_0: list_10 = #1 (x_2916)
    val errno_0: word32 = #0 (x_2916)
    call L_2140 (loop_19 (errno_0, handlers_0)) handle _ => raise
  block L_2140 (x_2918: t_26)
    case x_2918 of
      NONE_7 => L_2142 | SOME_19 => L_2141
  block L_2141 (x_2919: (word32, lambdas_2) tuple)
    bug
  block L_2142 ()
    val x_2920: (word32, word32) tuple = (errno_0, intr_2)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2143
  block L_2143 (env_841: unit)
    call L_2144 (x_2049 (env_841, x_2920)) handle _ => raise
  block L_2144 (x_2921: bool)
    case x_2921 of
      true => L_2146 | false => L_2145
  block L_2145 ()
    goto L_2147 (x_1237 (*con false*))
  block L_2146 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2148
  block L_2148 (env_842: unit)
    call L_2147 (x_2630 (env_842, restartFlag_2)) handle _ => raise
  block L_2147 (x_2922: bool)
    case x_2922 of
      true => L_2150 | false => L_2149
  block L_2149 ()
    case raiseSys_3 of
      raiseSysEnv_0 => L_2151
  block L_2151 (env_843: lambdas_226)
    call tail raiseSys_4 (env_843, errno_0)
  block L_2150 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2152
  block L_2152 (env_844: unit)
    call L_2153 (atomicState_1 (env_844, x_1238 (*()*))) handle _ => raise
  block L_2153 (x_2923: word32)
    val x_2924: (word32, word32) tuple = (x_2923, x_1239 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2154
  block L_2154 (env_845: unit)
    call L_2155 (x_2049 (env_845, x_2924)) handle _ => raise
  block L_2155 (x_2925: bool)
    case x_2925 of
      true => L_2157 | false => L_2156
  block L_2156 ()
    val x_2926: lambdas_49 = prim Ref_deref[lambdas_49] (blocker_2)
    case x_2926 of
      xEnv_53 => L_2158
  block L_2158 (env_846: unit)
    call L_2159 (x_2927 (env_846, x_1249 (*()*))) handle _ => raise
  block L_2159 (finish_0: lambdas_227)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2160
  block L_2160 (env_847: unit)
    call L_2161 (atomicBegin_1 (env_847, x_1250 (*()*))) handle _ => L_2162
  block L_2161 (x_2928: unit)
    case x_1234 (*con xEnv_68 (x_1233)*) of
      xEnv_68 => L_2163
  block L_2163 (env_848: unit)
    call L_2164 (x_2899 (env_848, x_1251 (*()*))) handle _ => L_2165
  block L_2165 (x_2929: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2166
  block L_2166 (env_849: unit)
    call L_2167 (atomicEnd_1 (env_849, x_1255 (*()*))) handle _ => L_2162
  block L_2167 (x_2930: unit)
    goto L_2162 (x_2929)
  block L_2164 (return_2: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2168
  block L_2168 (env_850: unit)
    call L_2169 (x_2902 (env_850, return_2)) handle _ => L_2162
  block L_2169 (return_3: word32)
    val x_2931: (word32, word32) tuple = (x_2917, return_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2170
  block L_2170 (env_851: unit)
    call L_2171 (x_2049 (env_851, x_2931)) handle _ => L_2162
  block L_2171 (x_2932: bool)
    case x_2932 of
      true => L_2173 | false => L_2172
  block L_2172 ()
    case x_1253 (*con xEnv_70 (x_1252)*) of
      xEnv_70 => L_2174
  block L_2174 (env_852: unit)
    call L_2175 (x_2933 (env_852, return_3)) handle _ => L_2176
  block L_2176 (x_2934: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2177
  block L_2177 (env_853: unit)
    call L_2178 (atomicEnd_1 (env_853, x_1260 (*()*))) handle _ => L_2162
  block L_2178 (x_2935: unit)
    goto L_2162 (x_2934)
  block L_2175 (x_2936: word32)
    goto L_2179 (x_2936)
  block L_2179 (x_2937: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2180
  block L_2180 (env_854: unit)
    call L_2181 (atomicEnd_1 (env_854, x_1259 (*()*))) handle _ => L_2162
  block L_2181 (x_2938: unit)
    goto L_2182 (x_2937)
  block L_2173 ()
    val x_2939: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2183
  block L_2183 (env_855: unit)
    call L_2184 (fromRep_1 (env_855, x_2939)) handle _ => L_2162
  block L_2184 (e_1: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2185
  block L_2185 (env_856: unit)
    call L_2186 (atomicEnd_1 (env_856, x_1256 (*()*))) handle _ => L_2162
  block L_2186 (x_2940: unit)
    call L_2187 (loop_20 (e_1, x_1254 (*con nil_7*))) handle _ => L_2162
  block L_2187 (x_2941: t_26)
    case x_2941 of
      NONE_7 => L_2189 | SOME_19 => L_2188
  block L_2188 (x_2942: (word32, lambdas_2) tuple)
    bug
  block L_2189 ()
    case raiseSys_3 of
      raiseSysEnv_0 => L_2190
  block L_2190 (env_857: lambdas_226)
    call L_2182 (raiseSys_4 (env_857, e_1)) handle _ => L_2162
  block L_2162 (x_2943: exn)
    case finish_0 of
      xEnv_52 => L_2191
  block L_2191 (env_858: unit)
    call L_2192 (x_2944 (env_858, x_1262 (*()*))) handle _ => raise
  block L_2192 (x_2945: unit)
    raise (x_2943)
  block L_2182 (x_2946: word32)
    goto L_2193 (x_2946)
  block L_2193 (x_2947: word32)
    case finish_0 of
      xEnv_52 => L_2194
  block L_2194 (env_859: unit)
    call L_2195 (x_2944 (env_859, x_1261 (*()*))) handle _ => raise
  block L_2195 (x_2948: unit)
    return (x_2947)
  block L_2157 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2196
  block L_2196 (env_860: unit)
    call L_2197 (atomicBegin_1 (env_860, x_1240 (*()*))) handle _ => raise
  block L_2197 (x_2949: unit)
    case x_1234 (*con xEnv_68 (x_1233)*) of
      xEnv_68 => L_2198
  block L_2198 (env_861: unit)
    call L_2199 (x_2899 (env_861, x_1241 (*()*))) handle _ => L_2200
  block L_2200 (x_2950: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2201
  block L_2201 (env_862: unit)
    call L_2202 (atomicEnd_1 (env_862, x_1245 (*()*))) handle _ => raise
  block L_2202 (x_2951: unit)
    raise (x_2950)
  block L_2199 (return_4: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2203
  block L_2203 (env_863: unit)
    call L_2204 (x_2902 (env_863, return_4)) handle _ => raise
  block L_2204 (return_5: word32)
    val x_2952: (word32, word32) tuple = (x_2917, return_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2205
  block L_2205 (env_864: unit)
    call L_2206 (x_2049 (env_864, x_2952)) handle _ => raise
  block L_2206 (x_2953: bool)
    case x_2953 of
      true => L_2208 | false => L_2207
  block L_2207 ()
    case x_1243 (*con xEnv_69 (x_1242)*) of
      xEnv_69 => L_2209
  block L_2209 (env_865: unit)
    call L_2210 (x_2954 (env_865, return_5)) handle _ => L_2211
  block L_2211 (x_2955: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2212
  block L_2212 (env_866: unit)
    call L_2213 (atomicEnd_1 (env_866, x_1248 (*()*))) handle _ => raise
  block L_2213 (x_2956: unit)
    raise (x_2955)
  block L_2210 (x_2957: word32)
    goto L_2214 (x_2957)
  block L_2214 (x_2958: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2215
  block L_2215 (env_867: unit)
    call L_2216 (atomicEnd_1 (env_867, x_1247 (*()*))) handle _ => raise
  block L_2216 (x_2959: unit)
    return (x_2958)
  block L_2208 ()
    val x_2960: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2217
  block L_2217 (env_868: unit)
    call L_2218 (fromRep_1 (env_868, x_2960)) handle _ => raise
  block L_2218 (e_2: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2219
  block L_2219 (env_869: unit)
    call L_2220 (atomicEnd_1 (env_869, x_1246 (*()*))) handle _ => raise
  block L_2220 (x_2961: unit)
    val x_2962: (word32, list_10) tuple = (e_2, x_1244 (*con nil_7*))
    call tail errUnblocked_0 (env_840, x_2962)
fun loop_20 (env_870: word32, x_2963: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2221 ()
  block L_2221 ()
    case x_2963 of
      nil_7 => L_2223 | ::_11 => L_2222
  block L_2222 (x_2964: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_2967: list_10 = #1 (x_2964)
    val x_2966: (word32, lambdas_2) tuple = #0 (x_2964)
    val e'_0: word32 = #0 (x_2966)
    val x_2965: (word32, word32) tuple = (env_870, e'_0)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2224
  block L_2224 (env_871: unit)
    call L_2225 (x_2049 (env_871, x_2965)) handle _ => raise
  block L_2225 (x_2968: bool)
    case x_2968 of
      true => L_2227 | false => L_2226
  block L_2226 ()
    call tail loop_20 (env_870, x_2967)
  block L_2227 ()
    val x_2969: t_26 = con SOME_19 (x_2966)
    return (x_2969)
  block L_2223 ()
    return (x_1257 (*con NONE_7*))
fun x_2933 (env_872: unit, x_2970: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2228 ()
  block L_2228 ()
    return (x_2970)
fun x_2954 (env_873: unit, x_2971: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2229 ()
  block L_2229 ()
    return (x_2971)
fun loop_19 (env_874: word32, x_2972: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2230 ()
  block L_2230 ()
    case x_2972 of
      nil_7 => L_2232 | ::_11 => L_2231
  block L_2231 (x_2973: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_2976: list_10 = #1 (x_2973)
    val x_2975: (word32, lambdas_2) tuple = #0 (x_2973)
    val e'_1: word32 = #0 (x_2975)
    val x_2974: (word32, word32) tuple = (env_874, e'_1)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2233
  block L_2233 (env_875: unit)
    call L_2234 (x_2049 (env_875, x_2974)) handle _ => raise
  block L_2234 (x_2977: bool)
    case x_2977 of
      true => L_2236 | false => L_2235
  block L_2235 ()
    call tail loop_19 (env_874, x_2976)
  block L_2236 ()
    val x_2978: t_26 = con SOME_19 (x_2975)
    return (x_2978)
  block L_2232 ()
    return (x_1236 (*con NONE_7*))
fun x_2899 (env_876: unit, x_2979: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_2237 ()
  block L_2237 ()
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_2238
  block L_2238 (env_877: unit)
    call L_2239 (toRep_2 (env_877, x_1051 (*0x1:w32*))) handle _ => raise
  block L_2239 (x_2980: word32)
    val x_2981: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_IO_close} (x_2980)
    return (x_2981)
fun putA_2 (env_878:
              (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple,
            x_2982: (word32, t_13) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2240 ()
  block L_2240 ()
    val intr_3: word32 = #0 (env_878)
    val restartFlag_3: (bool) ref = #1 (env_878)
    val blocker_3: (lambdas_49) ref = #2 (env_878)
    val raiseSys_5: lambdas_57 = #3 (env_878)
    val incPos_1: lambdas_489 = #4 (env_878)
    val sl_0: t_13 = #1 (x_2982)
    val fd_0: word32 = #0 (x_2982)
    case base_2 (*con baseEn ... e_34)*) of
      baseEnv_2 => L_2241
  block L_2241 (env_879: unit)
    call L_2242 (base_5 (env_879, sl_0)) handle _ => raise
  block L_2242 (x_2983: ((word8) array, word32, word32) tuple)
    val sz_1: word32 = #2 (x_2983)
    val i_3: word32 = #1 (x_2983)
    val buf_1: (word8) array = #0 (x_2983)
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_2243
  block L_2243 (env_880: unit)
    call L_2244 (sextdFromInt64ToInt64_1 (env_880,
                                          x_1193 (*0xFFFFFFFF ... F:w64*))) handle _ => raise
  block L_2244 (x_2984: word64)
    val x_2986: ((word8) array, word32, word32, word32) tuple =
      (buf_1, sz_1, i_3, fd_0)
    val x_2985: lambdas_58 = con xEnv_83 (x_2986)
    val tuple_99:
      (word32, (bool) ref, lambdas_58, word64, (lambdas_49) ref, lambdas_57) tuple =
      (intr_3, restartFlag_3, x_2985, x_2984, blocker_3, raiseSys_5)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2245
  block L_2245 (env_881: unit)
    call L_2246 (atomicBegin_1 (env_881, x_1222 (*()*))) handle _ => raise
  block L_2246 (x_2987: unit)
    call L_2247 (x_2988 (x_2986, x_1223 (*()*))) handle _ => L_2248
  block L_2248 (x_2989: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2249
  block L_2249 (env_882: unit)
    call L_2250 (atomicEnd_1 (env_882, x_1227 (*()*))) handle _ => raise
  block L_2250 (x_2990: unit)
    raise (x_2989)
  block L_2247 (return_6: word64)
    val x_2991: (word64, word64) tuple = (x_2984, return_6)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2251
  block L_2251 (env_883: unit)
    call L_2252 (x_2295 (env_883, x_2991)) handle _ => raise
  block L_2252 (x_2992: bool)
    case x_2992 of
      true => L_2254 | false => L_2253
  block L_2253 ()
    case x_1225 (*con xEnv_67 (x_1224)*) of
      xEnv_67 => L_2255
  block L_2255 (env_884: unit)
    call L_2256 (x_2993 (env_884, return_6)) handle _ => L_2257
  block L_2257 (x_2994: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2258
  block L_2258 (env_885: unit)
    call L_2259 (atomicEnd_1 (env_885, x_1230 (*()*))) handle _ => raise
  block L_2259 (x_2995: unit)
    raise (x_2994)
  block L_2256 (x_2996: word64)
    goto L_2260 (x_2996)
  block L_2260 (x_2997: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2261
  block L_2261 (env_886: unit)
    call L_2262 (atomicEnd_1 (env_886, x_1229 (*()*))) handle _ => raise
  block L_2262 (x_2998: unit)
    goto L_2263 (x_2997)
  block L_2254 ()
    val x_2999: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2264
  block L_2264 (env_887: unit)
    call L_2265 (fromRep_1 (env_887, x_2999)) handle _ => raise
  block L_2265 (e_3: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2266
  block L_2266 (env_888: unit)
    call L_2267 (atomicEnd_1 (env_888, x_1228 (*()*))) handle _ => raise
  block L_2267 (x_3000: unit)
    val x_3001: (word32, list_9) tuple = (e_3, x_1226 (*con nil_8*))
    call L_2263 (errUnblocked_1 (tuple_99, x_3001)) handle _ => raise
  block L_2263 (x_3002: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_2268
  block L_2268 (env_889: unit)
    call L_2269 (x_2418 (env_889, x_3002)) handle _ => raise
  block L_2269 (bytesWrote_0: word32)
    case incPos_1 of
      incPosEnv_0 => L_2270
  block L_2270 (env_890: (word64) ref)
    call tail incPos_2 (env_890, bytesWrote_0)
fun x_2993 (env_891: unit, x_3003: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2271 ()
  block L_2271 ()
    return (x_3003)
fun errUnblocked_1 (env_892:
                      (word32,
                       (bool) ref,
                       lambdas_58,
                       word64,
                       (lambdas_49) ref,
                       lambdas_57) tuple,
                    x_3004: (word32, list_9) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_2272 ()
  block L_2272 ()
    val intr_4: word32 = #0 (env_892)
    val restartFlag_4: (bool) ref = #1 (env_892)
    val x_3006: lambdas_58 = #2 (env_892)
    val x_3005: word64 = #3 (env_892)
    val blocker_4: (lambdas_49) ref = #4 (env_892)
    val raiseSys_6: lambdas_57 = #5 (env_892)
    val handlers_1: list_9 = #1 (x_3004)
    val errno_1: word32 = #0 (x_3004)
    call L_2273 (loop_21 (errno_1, handlers_1)) handle _ => raise
  block L_2273 (x_3007: t_25)
    case x_3007 of
      NONE_8 => L_2275 | SOME_18 => L_2274
  block L_2274 (x_3008: (word32, lambdas_2) tuple)
    bug
  block L_2275 ()
    val x_3009: (word32, word32) tuple = (errno_1, intr_4)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2276
  block L_2276 (env_893: unit)
    call L_2277 (x_2049 (env_893, x_3009)) handle _ => raise
  block L_2277 (x_3010: bool)
    case x_3010 of
      true => L_2279 | false => L_2278
  block L_2278 ()
    goto L_2280 (x_1195 (*con false*))
  block L_2279 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2281
  block L_2281 (env_894: unit)
    call L_2280 (x_2630 (env_894, restartFlag_4)) handle _ => raise
  block L_2280 (x_3011: bool)
    case x_3011 of
      true => L_2283 | false => L_2282
  block L_2282 ()
    case raiseSys_6 of
      raiseSysEnv_1 => L_2284
  block L_2284 (env_895: lambdas_226)
    call tail raiseSys_7 (env_895, errno_1)
  block L_2283 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2285
  block L_2285 (env_896: unit)
    call L_2286 (atomicState_1 (env_896, x_1196 (*()*))) handle _ => raise
  block L_2286 (x_3012: word32)
    val x_3013: (word32, word32) tuple = (x_3012, x_1197 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2287
  block L_2287 (env_897: unit)
    call L_2288 (x_2049 (env_897, x_3013)) handle _ => raise
  block L_2288 (x_3014: bool)
    case x_3014 of
      true => L_2290 | false => L_2289
  block L_2289 ()
    val x_3015: lambdas_49 = prim Ref_deref[lambdas_49] (blocker_4)
    case x_3015 of
      xEnv_53 => L_2291
  block L_2291 (env_898: unit)
    call L_2292 (x_2927 (env_898, x_1207 (*()*))) handle _ => raise
  block L_2292 (finish_1: lambdas_227)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2293
  block L_2293 (env_899: unit)
    call L_2294 (atomicBegin_1 (env_899, x_1208 (*()*))) handle _ => L_2295
  block L_2294 (x_3016: unit)
    case x_3006 of
      xEnv_83 => L_2296
  block L_2296 (env_900: ((word8) array, word32, word32, word32) tuple)
    call L_2297 (x_2988 (env_900, x_1209 (*()*))) handle _ => L_2298
  block L_2298 (x_3017: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2299
  block L_2299 (env_901: unit)
    call L_2300 (atomicEnd_1 (env_901, x_1213 (*()*))) handle _ => L_2295
  block L_2300 (x_3018: unit)
    goto L_2295 (x_3017)
  block L_2297 (return_7: word64)
    val x_3019: (word64, word64) tuple = (x_3005, return_7)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2301
  block L_2301 (env_902: unit)
    call L_2302 (x_2295 (env_902, x_3019)) handle _ => L_2295
  block L_2302 (x_3020: bool)
    case x_3020 of
      true => L_2304 | false => L_2303
  block L_2303 ()
    case x_1211 (*con xEnv_66 (x_1210)*) of
      xEnv_66 => L_2305
  block L_2305 (env_903: unit)
    call L_2306 (x_3021 (env_903, return_7)) handle _ => L_2307
  block L_2307 (x_3022: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2308
  block L_2308 (env_904: unit)
    call L_2309 (atomicEnd_1 (env_904, x_1218 (*()*))) handle _ => L_2295
  block L_2309 (x_3023: unit)
    goto L_2295 (x_3022)
  block L_2306 (x_3024: word64)
    goto L_2310 (x_3024)
  block L_2310 (x_3025: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2311
  block L_2311 (env_905: unit)
    call L_2312 (atomicEnd_1 (env_905, x_1217 (*()*))) handle _ => L_2295
  block L_2312 (x_3026: unit)
    goto L_2313 (x_3025)
  block L_2304 ()
    val x_3027: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2314
  block L_2314 (env_906: unit)
    call L_2315 (fromRep_1 (env_906, x_3027)) handle _ => L_2295
  block L_2315 (e_4: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2316
  block L_2316 (env_907: unit)
    call L_2317 (atomicEnd_1 (env_907, x_1214 (*()*))) handle _ => L_2295
  block L_2317 (x_3028: unit)
    call L_2318 (loop_22 (e_4, x_1212 (*con nil_8*))) handle _ => L_2295
  block L_2318 (x_3029: t_25)
    case x_3029 of
      NONE_8 => L_2320 | SOME_18 => L_2319
  block L_2319 (x_3030: (word32, lambdas_2) tuple)
    bug
  block L_2320 ()
    case raiseSys_6 of
      raiseSysEnv_1 => L_2321
  block L_2321 (env_908: lambdas_226)
    call L_2313 (raiseSys_7 (env_908, e_4)) handle _ => L_2295
  block L_2295 (x_3031: exn)
    case finish_1 of
      xEnv_52 => L_2322
  block L_2322 (env_909: unit)
    call L_2323 (x_2944 (env_909, x_1220 (*()*))) handle _ => raise
  block L_2323 (x_3032: unit)
    raise (x_3031)
  block L_2313 (x_3033: word64)
    goto L_2324 (x_3033)
  block L_2324 (x_3034: word64)
    case finish_1 of
      xEnv_52 => L_2325
  block L_2325 (env_910: unit)
    call L_2326 (x_2944 (env_910, x_1219 (*()*))) handle _ => raise
  block L_2326 (x_3035: unit)
    return (x_3034)
  block L_2290 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2327
  block L_2327 (env_911: unit)
    call L_2328 (atomicBegin_1 (env_911, x_1198 (*()*))) handle _ => raise
  block L_2328 (x_3036: unit)
    case x_3006 of
      xEnv_83 => L_2329
  block L_2329 (env_912: ((word8) array, word32, word32, word32) tuple)
    call L_2330 (x_2988 (env_912, x_1199 (*()*))) handle _ => L_2331
  block L_2331 (x_3037: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2332
  block L_2332 (env_913: unit)
    call L_2333 (atomicEnd_1 (env_913, x_1203 (*()*))) handle _ => raise
  block L_2333 (x_3038: unit)
    raise (x_3037)
  block L_2330 (return_8: word64)
    val x_3039: (word64, word64) tuple = (x_3005, return_8)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2334
  block L_2334 (env_914: unit)
    call L_2335 (x_2295 (env_914, x_3039)) handle _ => raise
  block L_2335 (x_3040: bool)
    case x_3040 of
      true => L_2337 | false => L_2336
  block L_2336 ()
    case x_1201 (*con xEnv_65 (x_1200)*) of
      xEnv_65 => L_2338
  block L_2338 (env_915: unit)
    call L_2339 (x_3041 (env_915, return_8)) handle _ => L_2340
  block L_2340 (x_3042: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2341
  block L_2341 (env_916: unit)
    call L_2342 (atomicEnd_1 (env_916, x_1206 (*()*))) handle _ => raise
  block L_2342 (x_3043: unit)
    raise (x_3042)
  block L_2339 (x_3044: word64)
    goto L_2343 (x_3044)
  block L_2343 (x_3045: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2344
  block L_2344 (env_917: unit)
    call L_2345 (atomicEnd_1 (env_917, x_1205 (*()*))) handle _ => raise
  block L_2345 (x_3046: unit)
    return (x_3045)
  block L_2337 ()
    val x_3047: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2346
  block L_2346 (env_918: unit)
    call L_2347 (fromRep_1 (env_918, x_3047)) handle _ => raise
  block L_2347 (e_5: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2348
  block L_2348 (env_919: unit)
    call L_2349 (atomicEnd_1 (env_919, x_1204 (*()*))) handle _ => raise
  block L_2349 (x_3048: unit)
    val x_3049: (word32, list_9) tuple = (e_5, x_1202 (*con nil_8*))
    call tail errUnblocked_1 (env_892, x_3049)
fun loop_22 (env_920: word32, x_3050: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2350 ()
  block L_2350 ()
    case x_3050 of
      nil_8 => L_2352 | ::_10 => L_2351
  block L_2351 (x_3051: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3054: list_9 = #1 (x_3051)
    val x_3053: (word32, lambdas_2) tuple = #0 (x_3051)
    val e'_2: word32 = #0 (x_3053)
    val x_3052: (word32, word32) tuple = (env_920, e'_2)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2353
  block L_2353 (env_921: unit)
    call L_2354 (x_2049 (env_921, x_3052)) handle _ => raise
  block L_2354 (x_3055: bool)
    case x_3055 of
      true => L_2356 | false => L_2355
  block L_2355 ()
    call tail loop_22 (env_920, x_3054)
  block L_2356 ()
    val x_3056: t_25 = con SOME_18 (x_3053)
    return (x_3056)
  block L_2352 ()
    return (x_1215 (*con NONE_8*))
fun x_3021 (env_922: unit, x_3057: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2357 ()
  block L_2357 ()
    return (x_3057)
fun x_3041 (env_923: unit, x_3058: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2358 ()
  block L_2358 ()
    return (x_3058)
fun loop_21 (env_924: word32, x_3059: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2359 ()
  block L_2359 ()
    case x_3059 of
      nil_8 => L_2361 | ::_10 => L_2360
  block L_2360 (x_3060: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3063: list_9 = #1 (x_3060)
    val x_3062: (word32, lambdas_2) tuple = #0 (x_3060)
    val e'_3: word32 = #0 (x_3062)
    val x_3061: (word32, word32) tuple = (env_924, e'_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2362
  block L_2362 (env_925: unit)
    call L_2363 (x_2049 (env_925, x_3061)) handle _ => raise
  block L_2363 (x_3064: bool)
    case x_3064 of
      true => L_2365 | false => L_2364
  block L_2364 ()
    call tail loop_21 (env_924, x_3063)
  block L_2365 ()
    val x_3065: t_25 = con SOME_18 (x_3062)
    return (x_3065)
  block L_2361 ()
    return (x_1194 (*con NONE_8*))
fun x_2988 (env_926: ((word8) array, word32, word32, word32) tuple, x_3066: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2366 ()
  block L_2366 ()
    val buf_2: (word8) array = #0 (env_926)
    val sz_2: word32 = #1 (env_926)
    val i_4: word32 = #2 (env_926)
    val fd_1: word32 = #3 (env_926)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_2367
  block L_2367 (env_927: unit)
    call L_2368 (toRep_2 (env_927, fd_1)) handle _ => raise
  block L_2368 (x_3067: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2369
  block L_2369 (env_928: unit)
    call L_2370 (sextdFromInt32ToInt32_1 (env_928, i_4)) handle _ => raise
  block L_2370 (x_3068: word32)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_2371
  block L_2371 (env_929: unit)
    call L_2372 (sextdFromInt32ToWord64_1 (env_929, sz_2)) handle _ => raise
  block L_2372 (x_3069: word64)
    val x_3070: word64 =
      prim CFunction {args = (word32, (word8) array, word32, word64),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Objptr, Int32, Word64),
                                   res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_IO_writeChar8Arr} (x_3067,
                                                        buf_2,
                                                        x_3068,
                                                        x_3069)
    return (x_3070)
fun putV_2 (env_930:
              (word32, (bool) ref, (lambdas_49) ref, lambdas_57, lambdas_489) tuple,
            x_3071: (word32, t_19) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2373 ()
  block L_2373 ()
    val intr_5: word32 = #0 (env_930)
    val restartFlag_5: (bool) ref = #1 (env_930)
    val blocker_5: (lambdas_49) ref = #2 (env_930)
    val raiseSys_8: lambdas_57 = #3 (env_930)
    val incPos_3: lambdas_489 = #4 (env_930)
    val sl_1: t_19 = #1 (x_3071)
    val fd_2: word32 = #0 (x_3071)
    case base_1 (*con baseEn ... e_30)*) of
      baseEnv_1 => L_2374
  block L_2374 (env_931: unit)
    call L_2375 (base_3 (env_931, sl_1)) handle _ => raise
  block L_2375 (x_3072: ((word8) vector, word32, word32) tuple)
    val sz_3: word32 = #2 (x_3072)
    val i_5: word32 = #1 (x_3072)
    val buf_3: (word8) vector = #0 (x_3072)
    case sextdFromInt64ToInt64_0 (*con sextdF ... _130)*) of
      sextdFromInt64ToInt64Env_0 => L_2376
  block L_2376 (env_932: unit)
    call L_2377 (sextdFromInt64ToInt64_1 (env_932,
                                          x_1155 (*0xFFFFFFFF ... F:w64*))) handle _ => raise
  block L_2377 (x_3073: word64)
    val x_3075: ((word8) vector, word32, word32, word32) tuple =
      (buf_3, sz_3, i_5, fd_2)
    val x_3074: lambdas_65 = con xEnv_84 (x_3075)
    val tuple_100:
      (word32, (bool) ref, lambdas_65, word64, (lambdas_49) ref, lambdas_57) tuple =
      (intr_5, restartFlag_5, x_3074, x_3073, blocker_5, raiseSys_8)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2378
  block L_2378 (env_933: unit)
    call L_2379 (atomicBegin_1 (env_933, x_1184 (*()*))) handle _ => raise
  block L_2379 (x_3076: unit)
    call L_2380 (x_3077 (x_3075, x_1185 (*()*))) handle _ => L_2381
  block L_2381 (x_3078: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2382
  block L_2382 (env_934: unit)
    call L_2383 (atomicEnd_1 (env_934, x_1189 (*()*))) handle _ => raise
  block L_2383 (x_3079: unit)
    raise (x_3078)
  block L_2380 (return_9: word64)
    val x_3080: (word64, word64) tuple = (x_3073, return_9)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2384
  block L_2384 (env_935: unit)
    call L_2385 (x_2295 (env_935, x_3080)) handle _ => raise
  block L_2385 (x_3081: bool)
    case x_3081 of
      true => L_2387 | false => L_2386
  block L_2386 ()
    case x_1187 (*con xEnv_64 (x_1186)*) of
      xEnv_64 => L_2388
  block L_2388 (env_936: unit)
    call L_2389 (x_3082 (env_936, return_9)) handle _ => L_2390
  block L_2390 (x_3083: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2391
  block L_2391 (env_937: unit)
    call L_2392 (atomicEnd_1 (env_937, x_1192 (*()*))) handle _ => raise
  block L_2392 (x_3084: unit)
    raise (x_3083)
  block L_2389 (x_3085: word64)
    goto L_2393 (x_3085)
  block L_2393 (x_3086: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2394
  block L_2394 (env_938: unit)
    call L_2395 (atomicEnd_1 (env_938, x_1191 (*()*))) handle _ => raise
  block L_2395 (x_3087: unit)
    goto L_2396 (x_3086)
  block L_2387 ()
    val x_3088: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2397
  block L_2397 (env_939: unit)
    call L_2398 (fromRep_1 (env_939, x_3088)) handle _ => raise
  block L_2398 (e_6: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2399
  block L_2399 (env_940: unit)
    call L_2400 (atomicEnd_1 (env_940, x_1190 (*()*))) handle _ => raise
  block L_2400 (x_3089: unit)
    val x_3090: (word32, list_9) tuple = (e_6, x_1188 (*con nil_8*))
    call L_2396 (errUnblocked_2 (tuple_100, x_3090)) handle _ => raise
  block L_2396 (x_3091: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_2401
  block L_2401 (env_941: unit)
    call L_2402 (x_2418 (env_941, x_3091)) handle _ => raise
  block L_2402 (bytesWrote_1: word32)
    case incPos_3 of
      incPosEnv_0 => L_2403
  block L_2403 (env_942: (word64) ref)
    call tail incPos_2 (env_942, bytesWrote_1)
fun x_3082 (env_943: unit, x_3092: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2404 ()
  block L_2404 ()
    return (x_3092)
fun errUnblocked_2 (env_944:
                      (word32,
                       (bool) ref,
                       lambdas_65,
                       word64,
                       (lambdas_49) ref,
                       lambdas_57) tuple,
                    x_3093: (word32, list_9) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_2405 ()
  block L_2405 ()
    val intr_6: word32 = #0 (env_944)
    val restartFlag_6: (bool) ref = #1 (env_944)
    val x_3095: lambdas_65 = #2 (env_944)
    val x_3094: word64 = #3 (env_944)
    val blocker_6: (lambdas_49) ref = #4 (env_944)
    val raiseSys_9: lambdas_57 = #5 (env_944)
    val handlers_2: list_9 = #1 (x_3093)
    val errno_2: word32 = #0 (x_3093)
    call L_2406 (loop_23 (errno_2, handlers_2)) handle _ => raise
  block L_2406 (x_3096: t_25)
    case x_3096 of
      NONE_8 => L_2408 | SOME_18 => L_2407
  block L_2407 (x_3097: (word32, lambdas_2) tuple)
    bug
  block L_2408 ()
    val x_3098: (word32, word32) tuple = (errno_2, intr_6)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2409
  block L_2409 (env_945: unit)
    call L_2410 (x_2049 (env_945, x_3098)) handle _ => raise
  block L_2410 (x_3099: bool)
    case x_3099 of
      true => L_2412 | false => L_2411
  block L_2411 ()
    goto L_2413 (x_1157 (*con false*))
  block L_2412 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2414
  block L_2414 (env_946: unit)
    call L_2413 (x_2630 (env_946, restartFlag_6)) handle _ => raise
  block L_2413 (x_3100: bool)
    case x_3100 of
      true => L_2416 | false => L_2415
  block L_2415 ()
    case raiseSys_9 of
      raiseSysEnv_1 => L_2417
  block L_2417 (env_947: lambdas_226)
    call tail raiseSys_7 (env_947, errno_2)
  block L_2416 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2418
  block L_2418 (env_948: unit)
    call L_2419 (atomicState_1 (env_948, x_1158 (*()*))) handle _ => raise
  block L_2419 (x_3101: word32)
    val x_3102: (word32, word32) tuple = (x_3101, x_1159 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2420
  block L_2420 (env_949: unit)
    call L_2421 (x_2049 (env_949, x_3102)) handle _ => raise
  block L_2421 (x_3103: bool)
    case x_3103 of
      true => L_2423 | false => L_2422
  block L_2422 ()
    val x_3104: lambdas_49 = prim Ref_deref[lambdas_49] (blocker_6)
    case x_3104 of
      xEnv_53 => L_2424
  block L_2424 (env_950: unit)
    call L_2425 (x_2927 (env_950, x_1169 (*()*))) handle _ => raise
  block L_2425 (finish_2: lambdas_227)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2426
  block L_2426 (env_951: unit)
    call L_2427 (atomicBegin_1 (env_951, x_1170 (*()*))) handle _ => L_2428
  block L_2427 (x_3105: unit)
    case x_3095 of
      xEnv_84 => L_2429
  block L_2429 (env_952: ((word8) vector, word32, word32, word32) tuple)
    call L_2430 (x_3077 (env_952, x_1171 (*()*))) handle _ => L_2431
  block L_2431 (x_3106: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2432
  block L_2432 (env_953: unit)
    call L_2433 (atomicEnd_1 (env_953, x_1175 (*()*))) handle _ => L_2428
  block L_2433 (x_3107: unit)
    goto L_2428 (x_3106)
  block L_2430 (return_10: word64)
    val x_3108: (word64, word64) tuple = (x_3094, return_10)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2434
  block L_2434 (env_954: unit)
    call L_2435 (x_2295 (env_954, x_3108)) handle _ => L_2428
  block L_2435 (x_3109: bool)
    case x_3109 of
      true => L_2437 | false => L_2436
  block L_2436 ()
    case x_1173 (*con xEnv_63 (x_1172)*) of
      xEnv_63 => L_2438
  block L_2438 (env_955: unit)
    call L_2439 (x_3110 (env_955, return_10)) handle _ => L_2440
  block L_2440 (x_3111: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2441
  block L_2441 (env_956: unit)
    call L_2442 (atomicEnd_1 (env_956, x_1180 (*()*))) handle _ => L_2428
  block L_2442 (x_3112: unit)
    goto L_2428 (x_3111)
  block L_2439 (x_3113: word64)
    goto L_2443 (x_3113)
  block L_2443 (x_3114: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2444
  block L_2444 (env_957: unit)
    call L_2445 (atomicEnd_1 (env_957, x_1179 (*()*))) handle _ => L_2428
  block L_2445 (x_3115: unit)
    goto L_2446 (x_3114)
  block L_2437 ()
    val x_3116: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2447
  block L_2447 (env_958: unit)
    call L_2448 (fromRep_1 (env_958, x_3116)) handle _ => L_2428
  block L_2448 (e_7: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2449
  block L_2449 (env_959: unit)
    call L_2450 (atomicEnd_1 (env_959, x_1176 (*()*))) handle _ => L_2428
  block L_2450 (x_3117: unit)
    call L_2451 (loop_24 (e_7, x_1174 (*con nil_8*))) handle _ => L_2428
  block L_2451 (x_3118: t_25)
    case x_3118 of
      NONE_8 => L_2453 | SOME_18 => L_2452
  block L_2452 (x_3119: (word32, lambdas_2) tuple)
    bug
  block L_2453 ()
    case raiseSys_9 of
      raiseSysEnv_1 => L_2454
  block L_2454 (env_960: lambdas_226)
    call L_2446 (raiseSys_7 (env_960, e_7)) handle _ => L_2428
  block L_2428 (x_3120: exn)
    case finish_2 of
      xEnv_52 => L_2455
  block L_2455 (env_961: unit)
    call L_2456 (x_2944 (env_961, x_1182 (*()*))) handle _ => raise
  block L_2456 (x_3121: unit)
    raise (x_3120)
  block L_2446 (x_3122: word64)
    goto L_2457 (x_3122)
  block L_2457 (x_3123: word64)
    case finish_2 of
      xEnv_52 => L_2458
  block L_2458 (env_962: unit)
    call L_2459 (x_2944 (env_962, x_1181 (*()*))) handle _ => raise
  block L_2459 (x_3124: unit)
    return (x_3123)
  block L_2423 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2460
  block L_2460 (env_963: unit)
    call L_2461 (atomicBegin_1 (env_963, x_1160 (*()*))) handle _ => raise
  block L_2461 (x_3125: unit)
    case x_3095 of
      xEnv_84 => L_2462
  block L_2462 (env_964: ((word8) vector, word32, word32, word32) tuple)
    call L_2463 (x_3077 (env_964, x_1161 (*()*))) handle _ => L_2464
  block L_2464 (x_3126: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2465
  block L_2465 (env_965: unit)
    call L_2466 (atomicEnd_1 (env_965, x_1165 (*()*))) handle _ => raise
  block L_2466 (x_3127: unit)
    raise (x_3126)
  block L_2463 (return_11: word64)
    val x_3128: (word64, word64) tuple = (x_3094, return_11)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2467
  block L_2467 (env_966: unit)
    call L_2468 (x_2295 (env_966, x_3128)) handle _ => raise
  block L_2468 (x_3129: bool)
    case x_3129 of
      true => L_2470 | false => L_2469
  block L_2469 ()
    case x_1163 (*con xEnv_62 (x_1162)*) of
      xEnv_62 => L_2471
  block L_2471 (env_967: unit)
    call L_2472 (x_3130 (env_967, return_11)) handle _ => L_2473
  block L_2473 (x_3131: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2474
  block L_2474 (env_968: unit)
    call L_2475 (atomicEnd_1 (env_968, x_1168 (*()*))) handle _ => raise
  block L_2475 (x_3132: unit)
    raise (x_3131)
  block L_2472 (x_3133: word64)
    goto L_2476 (x_3133)
  block L_2476 (x_3134: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2477
  block L_2477 (env_969: unit)
    call L_2478 (atomicEnd_1 (env_969, x_1167 (*()*))) handle _ => raise
  block L_2478 (x_3135: unit)
    return (x_3134)
  block L_2470 ()
    val x_3136: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2479
  block L_2479 (env_970: unit)
    call L_2480 (fromRep_1 (env_970, x_3136)) handle _ => raise
  block L_2480 (e_8: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2481
  block L_2481 (env_971: unit)
    call L_2482 (atomicEnd_1 (env_971, x_1166 (*()*))) handle _ => raise
  block L_2482 (x_3137: unit)
    val x_3138: (word32, list_9) tuple = (e_8, x_1164 (*con nil_8*))
    call tail errUnblocked_2 (env_944, x_3138)
fun loop_24 (env_972: word32, x_3139: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2483 ()
  block L_2483 ()
    case x_3139 of
      nil_8 => L_2485 | ::_10 => L_2484
  block L_2484 (x_3140: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3143: list_9 = #1 (x_3140)
    val x_3142: (word32, lambdas_2) tuple = #0 (x_3140)
    val e'_4: word32 = #0 (x_3142)
    val x_3141: (word32, word32) tuple = (env_972, e'_4)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2486
  block L_2486 (env_973: unit)
    call L_2487 (x_2049 (env_973, x_3141)) handle _ => raise
  block L_2487 (x_3144: bool)
    case x_3144 of
      true => L_2489 | false => L_2488
  block L_2488 ()
    call tail loop_24 (env_972, x_3143)
  block L_2489 ()
    val x_3145: t_25 = con SOME_18 (x_3142)
    return (x_3145)
  block L_2485 ()
    return (x_1177 (*con NONE_8*))
fun x_3110 (env_974: unit, x_3146: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2490 ()
  block L_2490 ()
    return (x_3146)
fun x_3130 (env_975: unit, x_3147: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2491 ()
  block L_2491 ()
    return (x_3147)
fun loop_23 (env_976: word32, x_3148: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2492 ()
  block L_2492 ()
    case x_3148 of
      nil_8 => L_2494 | ::_10 => L_2493
  block L_2493 (x_3149: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3152: list_9 = #1 (x_3149)
    val x_3151: (word32, lambdas_2) tuple = #0 (x_3149)
    val e'_5: word32 = #0 (x_3151)
    val x_3150: (word32, word32) tuple = (env_976, e'_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2495
  block L_2495 (env_977: unit)
    call L_2496 (x_2049 (env_977, x_3150)) handle _ => raise
  block L_2496 (x_3153: bool)
    case x_3153 of
      true => L_2498 | false => L_2497
  block L_2497 ()
    call tail loop_23 (env_976, x_3152)
  block L_2498 ()
    val x_3154: t_25 = con SOME_18 (x_3151)
    return (x_3154)
  block L_2494 ()
    return (x_1156 (*con NONE_8*))
fun x_3077 (env_978: ((word8) vector, word32, word32, word32) tuple,
            x_3155: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2499 ()
  block L_2499 ()
    val buf_4: (word8) vector = #0 (env_978)
    val sz_4: word32 = #1 (env_978)
    val i_6: word32 = #2 (env_978)
    val fd_3: word32 = #3 (env_978)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_2500
  block L_2500 (env_979: unit)
    call L_2501 (toRep_2 (env_979, fd_3)) handle _ => raise
  block L_2501 (x_3156: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2502
  block L_2502 (env_980: unit)
    call L_2503 (sextdFromInt32ToInt32_1 (env_980, i_6)) handle _ => raise
  block L_2503 (x_3157: word32)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _128)*) of
      sextdFromInt32ToWord64Env_0 => L_2504
  block L_2504 (env_981: unit)
    call L_2505 (sextdFromInt32ToWord64_1 (env_981, sz_4)) handle _ => raise
  block L_2505 (x_3158: word64)
    val x_3159: word64 =
      prim CFunction {args = (word32, (word8) vector, word32, word64),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Objptr, Int32, Word64),
                                   res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_IO_writeChar8Vec} (x_3156,
                                                        buf_4,
                                                        x_3157,
                                                        x_3158)
    return (x_3159)
fun incPos_2 (env_982: (word64) ref, x_3160: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2506 ()
  block L_2506 ()
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_2507
  block L_2507 (env_983: unit)
    call L_2508 (x_3161 (env_983, env_982)) handle _ => raise
  block L_2508 (x_3162: word64)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_2509
  block L_2509 (env_984: unit)
    call L_2510 (sextdFromInt32ToInt64_1 (env_984, x_3160)) handle _ => raise
  block L_2510 (x_3163: word64)
    val x_3164: (word64, word64) tuple = (x_3162, x_3163)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_2511
  block L_2511 (env_985: unit)
    call L_2512 (x_3165 (env_985, x_3164)) handle _ => raise
  block L_2512 (x_3166: word64)
    val x_3167: ((word64) ref, word64) tuple = (env_982, x_3166)
    case x_89 (*con xEnv_11 (x_88)*) of
      xEnv_11 => L_2513
  block L_2513 (env_986: unit)
    call L_2514 (x_3168 (env_986, x_3167)) handle _ => raise
  block L_2514 (x_3169: unit)
    return (x_3160)
fun verifyPos_0 (env_987: (word64, lambdas_67, (word64) ref) tuple, x_3170: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2515 ()
  block L_2515 ()
    val pos0_1: word64 = #0 (env_987)
    val lseek_1: lambdas_67 = #1 (env_987)
    val pos_2: (word64) ref = #2 (env_987)
    val x_3171: (word32, word64, whence_0) tuple =
      (x_1051 (*0x1:w32*), pos0_1, x_1146 (*con SEEK_CUR_1*))
    case lseek_1 of
      lseekEnv_0 => L_2516
  block L_2516 (env_988: lambdas_57)
    call L_2517 (lseek_2 (env_988, x_3171)) handle _ => raise
  block L_2517 (curPos_0: word64)
    val x_3172: ((word64) ref, word64) tuple = (pos_2, curPos_0)
    case x_89 (*con xEnv_11 (x_88)*) of
      xEnv_11 => L_2518
  block L_2518 (env_989: unit)
    call L_2519 (x_3168 (env_989, x_3172)) handle _ => raise
  block L_2519 (x_3173: unit)
    return (curPos_0)
fun endPos_1 (env_990: ((bool) ref, lambdas_69) tuple, x_3174: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2520 ()
  block L_2520 ()
    val closed_6: (bool) ref = #0 (env_990)
    val x_3175: lambdas_69 = #1 (env_990)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2521
  block L_2521 (env_991: unit)
    call L_2522 (x_2630 (env_991, closed_6)) handle _ => raise
  block L_2522 (x_3176: bool)
    case x_3176 of
      true => L_2524 | false => L_2523
  block L_2523 ()
    case x_3175 of
      xEnv_240 => L_2525
  block L_2525 (env_992: (lambdas_226, lambdas_95) tuple)
    call L_2526 (x_2321 (env_992, x_1051 (*0x1:w32*))) handle _ => raise
  block L_2526 (x_3177: stat_0)
    case x_3177 of
      T_2 => L_2527
  block L_2527 (x_3178:
                  (time_0,
                   time_0,
                   word64,
                   word32,
                   word64,
                   word32,
                   time_0,
                   word32,
                   word64,
                   word32) tuple)
    val #_3: word64 = #8 (x_3178)
    return (#_3)
  block L_2524 ()
    raise (x_1034 (*con Closed ... 1033)*))
fun setPos_2 (env_993: ((bool) ref, lambdas_67, (word64) ref) tuple,
              x_3179: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_2528 ()
  block L_2528 ()
    val closed_7: (bool) ref = #0 (env_993)
    val lseek_3: lambdas_67 = #1 (env_993)
    val pos_3: (word64) ref = #2 (env_993)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2529
  block L_2529 (env_994: unit)
    call L_2530 (x_2630 (env_994, closed_7)) handle _ => raise
  block L_2530 (x_3180: bool)
    case x_3180 of
      true => L_2532 | false => L_2531
  block L_2531 ()
    val x_3181: (word32, word64, whence_0) tuple =
      (x_1051 (*0x1:w32*), x_3179, x_1144 (*con SEEK_SET_1*))
    case lseek_3 of
      lseekEnv_0 => L_2533
  block L_2533 (env_995: lambdas_57)
    call L_2534 (lseek_2 (env_995, x_3181)) handle _ => raise
  block L_2534 (x_3182: word64)
    val x_3183: ((word64) ref, word64) tuple = (pos_3, x_3182)
    case x_89 (*con xEnv_11 (x_88)*) of
      xEnv_11 => L_2535
  block L_2535 (env_996: unit)
    call tail x_3168 (env_996, x_3183)
  block L_2532 ()
    raise (x_1034 (*con Closed ... 1033)*))
fun getPos_1 (env_997: (word64) ref, x_3184: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_2536 ()
  block L_2536 ()
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_2537
  block L_2537 (env_998: unit)
    call tail x_3161 (env_998, env_997)
fun get_1 (env_999: unit, x_3185: t_22):
  {returns = Some (outstream_0), raises = Some (exn)} =
L_2538 ()
  block L_2538 ()
    case x_3185 of
      T_5 => L_2539
  block L_2539 (x_3186: (outstream_0) ref)
    val x_3187: outstream_0 = prim Ref_deref[outstream_0] (x_3186)
    return (x_3187)
fun x_2798 (env_1000: (list_5) ref, x_3188: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_2540 ()
  block L_2540 ()
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_2541
  block L_2541 (env_1001: unit)
    call L_2542 (x_2379 (env_1001, env_1000)) handle _ => raise
  block L_2542 (x_3189: list_5)
    val x_3190: (list_5, unit) tuple = (x_3189, x_1128 (*()*))
    case loop_2 (*con loopEn ... e_49)*) of
      loopEnv_2 => L_2543
  block L_2543 (env_1002: unit)
    call tail loop_25 (env_1002, x_3190)
fun loop_25 (env_1003: unit, x_3191: (list_5, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_2544 ()
  block L_2544 ()
    val b_12: unit = #1 (x_3191)
    val l_2: list_5 = #0 (x_3191)
    case l_2 of
      nil_9 => L_2546 | ::_7 => L_2545
  block L_2545 (x_3192: ((outstream_0, bool) tuple, list_5) tuple)
    val x_3196: list_5 = #1 (x_3192)
    val x_3194: (outstream_0, bool) tuple = #0 (x_3192)
    val x_3195: bool = #1 (x_3194)
    val x_3193: outstream_0 = #0 (x_3194)
    case x_3195 of
      true => L_2548 | false => L_2547
  block L_2547 ()
    case flushOut_0 (*con flushO ... e_48)*) of
      flushOutEnv_0 => L_2549
  block L_2549 (env_1004: unit)
    call L_2550 (flushOut_1 (env_1004, x_3193)) handle _ => raise
  block L_2548 ()
    case x_3193 of
      Out_0 => L_2551
  block L_2551 (x_3197:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_3198: (state_0) ref = #2 (x_3197)
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_2552
  block L_2552 (env_1005: unit)
    call L_2553 (x_2406 (env_1005, x_3198)) handle _ => raise
  block L_2553 (x_3199: state_0)
    case x_3199 of
      Closed_1 => L_2554 | _ => L_2555
  block L_2555 ()
    goto L_2556 (x_1129 (*con false*))
  block L_2554 ()
    goto L_2556 (x_1130 (*con true*))
  block L_2556 (x_3200: bool)
    case x_3200 of
      true => L_2558 | false => L_2557
  block L_2557 ()
    case flushOut_0 (*con flushO ... e_48)*) of
      flushOutEnv_0 => L_2559
  block L_2559 (env_1006: unit)
    call L_2560 (flushOut_1 (env_1006, x_3193)) handle _ => L_2561
  block L_2560 (x_3201: unit)
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_2562
  block L_2562 (env_1007: unit)
    call L_2563 (x_2406 (env_1007, x_3198)) handle _ => L_2561
  block L_2563 (x_3202: state_0)
    case terminated_0 (*con termin ... e_44)*) of
      terminatedEnv_0 => L_2564
  block L_2564 (env_1008: unit)
    call L_2565 (terminated_1 (env_1008, x_3202)) handle _ => L_2561
  block L_2565 (x_3203: bool)
    case x_3203 of
      true => L_2567 | false => L_2566
  block L_2566 ()
    case outstreamWriter_0 (*con outstr ... e_45)*) of
      outstreamWriterEnv_0 => L_2568
  block L_2568 (env_1009: unit)
    call L_2569 (outstreamWriter_1 (env_1009, x_3193)) handle _ => L_2561
  block L_2569 (x_3204: writer_0)
    case x_3204 of
      WR_0 => L_2570
  block L_2570 (x_3205:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_4: lambdas_10 = #3 (x_3205)
    case #_4 of
      closeEnv_0 => L_2571
  block L_2571 (env_1010:
                  (lambdas_48, (lambdas_49) ref, (bool) ref, word32, (bool) ref) tuple)
    call L_2572 (close_1 (env_1010, x_1133 (*()*))) handle _ => L_2561
  block L_2567 ()
    goto L_2572 (x_1132 (*()*))
  block L_2572 (x_3206: unit)
    val _: unit = prim Ref_assign[state_0] (x_3198, x_1134 (*con Closed_1*))
    case x_3193 of
      Out_0 => L_2573
  block L_2573 (x_3207:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_3208: (bufferMode_0) ref = #1 (x_3207)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2574
  block L_2574 (env_1011: unit)
    call L_2575 (x_2409 (env_1011, x_3208)) handle _ => L_2561
  block L_2575 (x_3209: bufferMode_0)
    case x_3209 of
      BLOCK_BUF_1 => L_2578 | NO_BUF_0 => L_2577 | LINE_BUF_1 => L_2576
  block L_2576 (x_3210: buf_0)
    case doit_0 (*con doitEn ... e_50)*) of
      doitEnv_0 => L_2579
  block L_2579 (env_1012: unit)
    call L_2550 (doit_1 (env_1012, x_3210)) handle _ => L_2561
  block L_2577 ()
    goto L_2550 (x_1135 (*()*))
  block L_2578 (x_3211: buf_0)
    case doit_0 (*con doitEn ... e_50)*) of
      doitEnv_0 => L_2580
  block L_2580 (env_1013: unit)
    call L_2550 (doit_1 (env_1013, x_3211)) handle _ => L_2561
  block L_2561 (x_3212: exn)
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_2581
  block L_2581 (env_1014: unit)
    call L_2582 (outstreamName_1 (env_1014, x_3193)) handle _ => raise
  block L_2582 (x_3213: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_2583
  block L_2583 (env_1015: unit)
    call L_2584 (liftExn_1 (env_1015, x_3213)) handle _ => raise
  block L_2584 (x_3214: lambdas_82)
    case x_3214 of
      xEnv_87 => L_2585
  block L_2585 (env_1016: (word8) vector)
    call L_2586 (x_2511 (env_1016, x_1136 (*"closeOut"*))) handle _ => raise
  block L_2586 (x_3215: lambdas_81)
    case x_3215 of
      xEnv_86 => L_2587
  block L_2587 (env_1017: ((word8) vector, (word8) vector) tuple)
    call L_2550 (x_2513 (env_1017, x_3212)) handle _ => raise
  block L_2558 ()
    goto L_2550 (x_1131 (*()*))
  block L_2550 (x_3216: unit)
    val x_3217: (list_5, unit) tuple = (x_3196, x_3216)
    case loop_2 (*con loopEn ... e_49)*) of
      loopEnv_2 => L_2588
  block L_2588 (env_1018: unit)
    call tail loop_25 (env_1018, x_3217)
  block L_2546 ()
    return (b_12)
fun doit_1 (env_1019: unit, x_3218: buf_0):
  {returns = Some (unit), raises = Some (exn)} =
L_2589 ()
  block L_2589 ()
    case x_3218 of
      Buf_0 => L_2590
  block L_2590 (x_3219: ((word8) array, (word32) ref) tuple)
    val x_3221: (word32) ref = #1 (x_3219)
    val x_3220: (word8) array = #0 (x_3219)
    case length_1 (*con length ... e_32)*) of
      lengthEnv_1 => L_2591
  block L_2591 (env_1020: unit)
    call L_2592 (length_2 (env_1020, x_3220)) handle _ => raise
  block L_2592 (x_3222: word32)
    val x_3223: ((word32) ref, word32) tuple = (x_3221, x_3222)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_2593
  block L_2593 (env_1021: unit)
    call tail x_2464 (env_1021, x_3223)
fun flushOut_1 (env_1022: unit, x_3224: outstream_0):
  {returns = Some (unit), raises = Some (exn)} =
L_2594 ()
  block L_2594 ()
    case x_3224 of
      Out_0 => L_2595
  block L_2595 (x_3225:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val x_3228: (state_0) ref = #2 (x_3225)
    val x_3227: (bufferMode_0) ref = #1 (x_3225)
    val x_3226: writer_0 = #0 (x_3225)
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_2596
  block L_2596 (env_1023: unit)
    call L_2597 (x_2406 (env_1023, x_3228)) handle _ => raise
  block L_2597 (x_3229: state_0)
    case terminated_0 (*con termin ... e_44)*) of
      terminatedEnv_0 => L_2598
  block L_2598 (env_1024: unit)
    call L_2599 (terminated_1 (env_1024, x_3229)) handle _ => raise
  block L_2599 (x_3230: bool)
    case x_3230 of
      true => L_2601 | false => L_2600
  block L_2600 ()
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2602
  block L_2602 (env_1025: unit)
    call L_2603 (x_2409 (env_1025, x_3227)) handle _ => raise
  block L_2603 (x_3231: bufferMode_0)
    case x_3231 of
      NO_BUF_0 => L_2606 | BLOCK_BUF_1 => L_2605 | LINE_BUF_1 => L_2604
  block L_2604 (x_3232: buf_0)
    val x_3233: (writer_0, buf_0) tuple = (x_3226, x_3232)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_2607
  block L_2607 (env_1026: unit)
    call tail flushBuf_1 (env_1026, x_3233)
  block L_2605 (x_3234: buf_0)
    val x_3235: (writer_0, buf_0) tuple = (x_3226, x_3234)
    case flushBuf_0 (*con flushB ... e_47)*) of
      flushBufEnv_0 => L_2608
  block L_2608 (env_1027: unit)
    call L_2609 (flushBuf_1 (env_1027, x_3235)) handle _ => L_2610
  block L_2610 (x_3236: exn)
    case outstreamName_0 (*con outstr ... e_46)*) of
      outstreamNameEnv_0 => L_2611
  block L_2611 (env_1028: unit)
    call L_2612 (outstreamName_1 (env_1028, x_3224)) handle _ => raise
  block L_2612 (x_3237: (word8) vector)
    case liftExn_0 (*con liftEx ... e_43)*) of
      liftExnEnv_0 => L_2613
  block L_2613 (env_1029: unit)
    call L_2614 (liftExn_1 (env_1029, x_3237)) handle _ => raise
  block L_2614 (x_3238: lambdas_82)
    case x_3238 of
      xEnv_87 => L_2615
  block L_2615 (env_1030: (word8) vector)
    call L_2616 (x_2511 (env_1030, x_1126 (*"flushOut"*))) handle _ => raise
  block L_2616 (x_3239: lambdas_81)
    case x_3239 of
      xEnv_86 => L_2617
  block L_2617 (env_1031: ((word8) vector, (word8) vector) tuple)
    call tail x_2513 (env_1031, x_3236)
  block L_2609 (x_3240: unit)
    return (x_3240)
  block L_2606 ()
    return (x_1125 (*()*))
  block L_2601 ()
    return (x_1124 (*()*))
fun flushBuf_1 (env_1032: unit, x_3241: (writer_0, buf_0) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_2618 ()
  block L_2618 ()
    val x_3243: buf_0 = #1 (x_3241)
    val x_3242: writer_0 = #0 (x_3241)
    case x_3243 of
      Buf_0 => L_2619
  block L_2619 (x_3244: ((word8) array, (word32) ref) tuple)
    val x_3246: (word32) ref = #1 (x_3244)
    val x_3245: (word8) array = #0 (x_3244)
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_2620
  block L_2620 (env_1033: unit)
    call L_2621 (x_2415 (env_1033, x_3246)) handle _ => raise
  block L_2621 (size'_0: word32)
    val x_3247: ((word32) ref, word32) tuple = (x_3246, x_1117 (*0x0:w32*))
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_2622
  block L_2622 (env_1034: unit)
    call L_2623 (x_2464 (env_1034, x_3247)) handle _ => raise
  block L_2623 (x_3248: unit)
    val x_3250: t_0 = con SOME_0 (size'_0)
    val x_3249: ((word8) array, word32, t_0) tuple =
      (x_3245, x_1118 (*0x0:w32*), x_3250)
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_2624
  block L_2624 (env_1035: unit)
    call L_2625 (slice_1 (env_1035, x_3249)) handle _ => raise
  block L_2625 (x_3251: t_13)
    case x_3242 of
      WR_0 => L_2626
  block L_2626 (x_3252:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_5: t_14 = #10 (x_3252)
    case #_5 of
      NONE_17 => L_2628 | SOME_10 => L_2627
  block L_2627 (x_3253: lambdas_5)
    case base_2 (*con baseEn ... e_34)*) of
      baseEnv_2 => L_2629
  block L_2629 (env_1036: unit)
    call L_2630 (base_5 (env_1036, x_3251)) handle _ => raise
  block L_2630 (x_3254: ((word8) array, word32, word32) tuple)
    val sz_5: word32 = #2 (x_3254)
    val i_7: word32 = #1 (x_3254)
    val b_13: (word8) array = #0 (x_3254)
    val x_3255: (word32, word32) tuple = (i_7, sz_5)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_2631
  block L_2631 (env_1037: unit)
    call L_2632 (x_1623 (env_1037, x_3255)) handle _ => raise
  block L_2632 (max_4: word32)
    val tuple_101: (word32, (word8) array, lambdas_5) tuple =
      (max_4, b_13, x_3253)
    call tail loop_26 (tuple_101, i_7)
  block L_2628 ()
    raise (x_1031 (*con Blocki ... 1030)*))
fun loop_26 (env_1038: (word32, (word8) array, lambdas_5) tuple, x_3256: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_2633 ()
  block L_2633 ()
    val max_5: word32 = #0 (env_1038)
    val b_14: (word8) array = #1 (env_1038)
    val x_3258: lambdas_5 = #2 (env_1038)
    val x_3257: (word32, word32) tuple = (x_3256, max_5)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2634
  block L_2634 (env_1039: unit)
    call L_2635 (x_2049 (env_1039, x_3257)) handle _ => raise
  block L_2635 (x_3259: bool)
    case x_3259 of
      true => L_2637 | false => L_2636
  block L_2636 ()
    val x_3260: (word32, word32) tuple = (max_5, x_3256)
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_2638
  block L_2638 (env_1040: unit)
    call L_2639 (x_1780 (env_1040, x_3260)) handle _ => raise
  block L_2639 (x_3261: word32)
    val x_3263: t_0 = con SOME_0 (x_3261)
    val x_3262: ((word8) array, word32, t_0) tuple = (b_14, x_3256, x_3263)
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_2640
  block L_2640 (env_1041: unit)
    call L_2641 (slice_1 (env_1041, x_3262)) handle _ => raise
  block L_2641 (x_3264: t_13)
    case x_3258 of
      xEnv_238 => L_2642
  block L_2642 (env_1042:
                  (lambdas_490,
                   lambdas_487,
                   lambdas_486,
                   word32,
                   (bool) ref,
                   (bool) ref) tuple)
    call L_2643 (x_2877 (env_1042, x_3264)) handle _ => raise
  block L_2643 (j_1: word32)
    val x_3265: (word32, word32) tuple = (j_1, x_1120 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2644
  block L_2644 (env_1043: unit)
    call L_2645 (x_2049 (env_1043, x_3265)) handle _ => raise
  block L_2645 (x_3266: bool)
    case x_3266 of
      true => L_2647 | false => L_2646
  block L_2646 ()
    val x_3267: (word32, word32) tuple = (x_3256, j_1)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_2648
  block L_2648 (env_1044: unit)
    call L_2649 (x_1623 (env_1044, x_3267)) handle _ => raise
  block L_2649 (x_3268: word32)
    call tail loop_26 (env_1038, x_3268)
  block L_2647 ()
    raise (x_1123 (*con Fail_0 (x_1122)*))
  block L_2637 ()
    return (x_1119 (*()*))
fun outstreamName_1 (env_1045: unit, x_3269: outstream_0):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_2650 ()
  block L_2650 ()
    case outstreamWriter_0 (*con outstr ... e_45)*) of
      outstreamWriterEnv_0 => L_2651
  block L_2651 (env_1046: unit)
    call L_2652 (outstreamWriter_1 (env_1046, x_3269)) handle _ => raise
  block L_2652 (x_3270: writer_0)
    case x_3270 of
      WR_0 => L_2653
  block L_2653 (x_3271:
                  (t_10,
                   t_11,
                   word32,
                   lambdas_10,
                   t_12,
                   t_12,
                   t_0,
                   (word8) vector,
                   t_18,
                   t_12,
                   t_14,
                   t_15,
                   t_20,
                   t_21) tuple)
    val #_6: (word8) vector = #7 (x_3271)
    return (#_6)
fun outstreamWriter_1 (env_1047: unit, x_3272: outstream_0):
  {returns = Some (writer_0), raises = Some (exn)} =
L_2654 ()
  block L_2654 ()
    case x_3272 of
      Out_0 => L_2655
  block L_2655 (x_3273:
                  (writer_0, (bufferMode_0) ref, (state_0) ref, writer_0) tuple)
    val #_7: writer_0 = #3 (x_3273)
    return (#_7)
fun terminated_1 (env_1048: unit, x_3274: state_0):
  {returns = Some (bool), raises = Some (exn)} =
L_2656 ()
  block L_2656 ()
    case x_3274 of
      Active_1 => L_2657 | _ => L_2658
  block L_2658 ()
    goto L_2659 (x_1115 (*con false*))
  block L_2657 ()
    goto L_2659 (x_1116 (*con true*))
  block L_2659 (x_3275: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_2660
  block L_2660 (env_1049: unit)
    call tail not_1 (env_1049, x_3275)
fun liftExn_1 (env_1050: unit, x_3276: (word8) vector):
  {returns = Some (lambdas_82), raises = Some (exn)} =
L_2661 ()
  block L_2661 ()
    val x_3277: lambdas_82 = con xEnv_87 (x_3276)
    return (x_3277)
fun x_2511 (env_1051: (word8) vector, x_3278: (word8) vector):
  {returns = Some (lambdas_81), raises = Some (exn)} =
L_2662 ()
  block L_2662 ()
    val x_3280: ((word8) vector, (word8) vector) tuple = (env_1051, x_3278)
    val x_3279: lambdas_81 = con xEnv_86 (x_3280)
    return (x_3279)
fun x_2513 (env_1052: ((word8) vector, (word8) vector) tuple, x_3281: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_2663 ()
  block L_2663 ()
    val x_3285: (word8) vector = #0 (env_1052)
    val x_3286: (word8) vector = #1 (env_1052)
    val x_3284: (exn, (word8) vector, (word8) vector) tuple =
      (x_3281, x_3286, x_3285)
    val x_3283:
      ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple =
      (x_1480, x_3284)
    val x_3282: exn = con Io_0 (x_3283)
    raise (x_3282)
fun lseek_2 (env_1053: lambdas_57, x_3287: (word32, word64, whence_0) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_2664 ()
  block L_2664 ()
    val w_0: whence_0 = #2 (x_3287)
    val n_1: word64 = #1 (x_3287)
    val fd_4: word32 = #0 (x_3287)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_2665
  block L_2665 (env_1054: unit)
    call L_2666 (sextdFromInt32ToInt64_1 (env_1054, x_1103 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2666 (x_3288: word64)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2667
  block L_2667 (env_1055: unit)
    call L_2668 (atomicBegin_1 (env_1055, x_1104 (*()*))) handle _ => raise
  block L_2668 (x_3289: unit)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_2669
  block L_2669 (env_1056: unit)
    call L_2670 (toRep_2 (env_1056, fd_4)) handle _ => L_2671
  block L_2671 (x_3290: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2672
  block L_2672 (env_1057: unit)
    call L_2673 (atomicEnd_1 (env_1057, x_1108 (*()*))) handle _ => raise
  block L_2673 (x_3291: unit)
    raise (x_3290)
  block L_2670 (x_3292: word32)
    case w_0 of
      SEEK_SET_1 => L_2676 | SEEK_END_1 => L_2675 | SEEK_CUR_1 => L_2674
  block L_2674 ()
    goto L_2677 (SEEK_CUR_0 (*0x1:w32*))
  block L_2675 ()
    goto L_2677 (SEEK_END_0 (*0x2:w32*))
  block L_2676 ()
    goto L_2677 (SEEK_SET_0 (*0x0:w32*))
  block L_2677 (x_3293: word32)
    val x_3295: word64 =
      prim CFunction {args = (word32, word64, word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Int64, Int32),
                                   res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_IO_lseek} (x_3292, n_1, x_3293)
    val x_3294: (word64, word64) tuple = (x_3288, x_3295)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2678
  block L_2678 (env_1058: unit)
    call L_2679 (x_2295 (env_1058, x_3294)) handle _ => raise
  block L_2679 (x_3296: bool)
    case x_3296 of
      true => L_2681 | false => L_2680
  block L_2680 ()
    case x_1106 (*con xEnv_61 (x_1105)*) of
      xEnv_61 => L_2682
  block L_2682 (env_1059: unit)
    call L_2683 (x_3297 (env_1059, x_3295)) handle _ => L_2684
  block L_2684 (x_3298: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2685
  block L_2685 (env_1060: unit)
    call L_2686 (atomicEnd_1 (env_1060, x_1113 (*()*))) handle _ => raise
  block L_2686 (x_3299: unit)
    raise (x_3298)
  block L_2683 (x_3300: word64)
    goto L_2687 (x_3300)
  block L_2687 (x_3301: word64)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2688
  block L_2688 (env_1061: unit)
    call L_2689 (atomicEnd_1 (env_1061, x_1112 (*()*))) handle _ => raise
  block L_2689 (x_3302: unit)
    return (x_3301)
  block L_2681 ()
    val x_3303: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2690
  block L_2690 (env_1062: unit)
    call L_2691 (fromRep_1 (env_1062, x_3303)) handle _ => raise
  block L_2691 (e_9: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2692
  block L_2692 (env_1063: unit)
    call L_2693 (atomicEnd_1 (env_1063, x_1109 (*()*))) handle _ => raise
  block L_2693 (x_3304: unit)
    call L_2694 (loop_27 (e_9, x_1107 (*con nil_8*))) handle _ => raise
  block L_2694 (x_3305: t_25)
    case x_3305 of
      NONE_8 => L_2696 | SOME_18 => L_2695
  block L_2695 (x_3306: (word32, lambdas_2) tuple)
    bug
  block L_2696 ()
    case env_1053 of
      raiseSysEnv_1 => L_2697
  block L_2697 (env_1064: lambdas_226)
    call tail raiseSys_7 (env_1064, e_9)
fun loop_27 (env_1065: word32, x_3307: list_9):
  {returns = Some (t_25), raises = Some (exn)} =
L_2698 ()
  block L_2698 ()
    case x_3307 of
      nil_8 => L_2700 | ::_10 => L_2699
  block L_2699 (x_3308: ((word32, lambdas_2) tuple, list_9) tuple)
    val x_3311: list_9 = #1 (x_3308)
    val x_3310: (word32, lambdas_2) tuple = #0 (x_3308)
    val e'_6: word32 = #0 (x_3310)
    val x_3309: (word32, word32) tuple = (env_1065, e'_6)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2701
  block L_2701 (env_1066: unit)
    call L_2702 (x_2049 (env_1066, x_3309)) handle _ => raise
  block L_2702 (x_3312: bool)
    case x_3312 of
      true => L_2704 | false => L_2703
  block L_2703 ()
    call tail loop_27 (env_1065, x_3311)
  block L_2704 ()
    val x_3313: t_25 = con SOME_18 (x_3310)
    return (x_3313)
  block L_2700 ()
    return (x_1110 (*con NONE_8*))
fun x_3297 (env_1067: unit, x_3314: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_2705 ()
  block L_2705 ()
    return (x_3314)
fun setfl_2 (env_1068: (word32, (bool) ref, (lambdas_49) ref, lambdas_48) tuple,
             x_3315: (word32, word32) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_2706 ()
  block L_2706 ()
    val intr_7: word32 = #0 (env_1068)
    val restartFlag_7: (bool) ref = #1 (env_1068)
    val blocker_7: (lambdas_49) ref = #2 (env_1068)
    val raiseSys_10: lambdas_48 = #3 (env_1068)
    val flags_0: word32 = #1 (x_3315)
    val fd_5: word32 = #0 (x_3315)
    val x_3317: (word32, word32) tuple = (flags_0, fd_5)
    val x_3316: lambdas_92 = con xEnv_88 (x_3317)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2707
  block L_2707 (env_1069: unit)
    call L_2708 (sextdFromInt32ToInt32_1 (env_1069, x_1064 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2708 (x_3318: word32)
    val tuple_102:
      (word32, (bool) ref, lambdas_92, word32, (lambdas_49) ref, lambdas_48) tuple =
      (intr_7, restartFlag_7, x_3316, x_3318, blocker_7, raiseSys_10)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2709
  block L_2709 (env_1070: unit)
    call L_2710 (atomicBegin_1 (env_1070, x_1093 (*()*))) handle _ => raise
  block L_2710 (x_3319: unit)
    call L_2711 (x_3320 (x_3317, x_1094 (*()*))) handle _ => L_2712
  block L_2712 (x_3321: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2713
  block L_2713 (env_1071: unit)
    call L_2714 (atomicEnd_1 (env_1071, x_1098 (*()*))) handle _ => raise
  block L_2714 (x_3322: unit)
    raise (x_3321)
  block L_2711 (return_12: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2715
  block L_2715 (env_1072: unit)
    call L_2716 (x_2902 (env_1072, return_12)) handle _ => raise
  block L_2716 (return_13: word32)
    val x_3323: (word32, word32) tuple = (x_3318, return_13)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2717
  block L_2717 (env_1073: unit)
    call L_2718 (x_2049 (env_1073, x_3323)) handle _ => raise
  block L_2718 (x_3324: bool)
    case x_3324 of
      true => L_2720 | false => L_2719
  block L_2719 ()
    case x_1096 (*con xEnv_60 (x_1095)*) of
      xEnv_60 => L_2721
  block L_2721 (env_1074: unit)
    call L_2722 (x_3325 (env_1074, return_13)) handle _ => L_2723
  block L_2723 (x_3326: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2724
  block L_2724 (env_1075: unit)
    call L_2725 (atomicEnd_1 (env_1075, x_1101 (*()*))) handle _ => raise
  block L_2725 (x_3327: unit)
    raise (x_3326)
  block L_2722 (x_3328: word32)
    goto L_2726 (x_3328)
  block L_2726 (x_3329: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2727
  block L_2727 (env_1076: unit)
    call L_2728 (atomicEnd_1 (env_1076, x_1100 (*()*))) handle _ => raise
  block L_2728 (x_3330: unit)
    return (x_1102 (*()*))
  block L_2720 ()
    val x_3331: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2729
  block L_2729 (env_1077: unit)
    call L_2730 (fromRep_1 (env_1077, x_3331)) handle _ => raise
  block L_2730 (e_10: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2731
  block L_2731 (env_1078: unit)
    call L_2732 (atomicEnd_1 (env_1078, x_1099 (*()*))) handle _ => raise
  block L_2732 (x_3332: unit)
    val x_3333: (word32, list_10) tuple = (e_10, x_1097 (*con nil_7*))
    call L_2733 (errUnblocked_3 (tuple_102, x_3333)) handle _ => raise
  block L_2733 (x_3334: word32)
    return (x_1102 (*()*))
fun x_3325 (env_1079: unit, x_3335: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2734 ()
  block L_2734 ()
    return (x_3335)
fun errUnblocked_3 (env_1080:
                      (word32,
                       (bool) ref,
                       lambdas_92,
                       word32,
                       (lambdas_49) ref,
                       lambdas_48) tuple,
                    x_3336: (word32, list_10) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2735 ()
  block L_2735 ()
    val intr_8: word32 = #0 (env_1080)
    val restartFlag_8: (bool) ref = #1 (env_1080)
    val x_3338: lambdas_92 = #2 (env_1080)
    val x_3337: word32 = #3 (env_1080)
    val blocker_8: (lambdas_49) ref = #4 (env_1080)
    val raiseSys_11: lambdas_48 = #5 (env_1080)
    val handlers_3: list_10 = #1 (x_3336)
    val errno_3: word32 = #0 (x_3336)
    call L_2736 (loop_28 (errno_3, handlers_3)) handle _ => raise
  block L_2736 (x_3339: t_26)
    case x_3339 of
      NONE_7 => L_2738 | SOME_19 => L_2737
  block L_2737 (x_3340: (word32, lambdas_2) tuple)
    bug
  block L_2738 ()
    val x_3341: (word32, word32) tuple = (errno_3, intr_8)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2739
  block L_2739 (env_1081: unit)
    call L_2740 (x_2049 (env_1081, x_3341)) handle _ => raise
  block L_2740 (x_3342: bool)
    case x_3342 of
      true => L_2742 | false => L_2741
  block L_2741 ()
    goto L_2743 (x_1066 (*con false*))
  block L_2742 ()
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_2744
  block L_2744 (env_1082: unit)
    call L_2743 (x_2630 (env_1082, restartFlag_8)) handle _ => raise
  block L_2743 (x_3343: bool)
    case x_3343 of
      true => L_2746 | false => L_2745
  block L_2745 ()
    case raiseSys_11 of
      raiseSysEnv_0 => L_2747
  block L_2747 (env_1083: lambdas_226)
    call tail raiseSys_4 (env_1083, errno_3)
  block L_2746 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_2748
  block L_2748 (env_1084: unit)
    call L_2749 (atomicState_1 (env_1084, x_1067 (*()*))) handle _ => raise
  block L_2749 (x_3344: word32)
    val x_3345: (word32, word32) tuple = (x_3344, x_1068 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2750
  block L_2750 (env_1085: unit)
    call L_2751 (x_2049 (env_1085, x_3345)) handle _ => raise
  block L_2751 (x_3346: bool)
    case x_3346 of
      true => L_2753 | false => L_2752
  block L_2752 ()
    val x_3347: lambdas_49 = prim Ref_deref[lambdas_49] (blocker_8)
    case x_3347 of
      xEnv_53 => L_2754
  block L_2754 (env_1086: unit)
    call L_2755 (x_2927 (env_1086, x_1078 (*()*))) handle _ => raise
  block L_2755 (finish_3: lambdas_227)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2756
  block L_2756 (env_1087: unit)
    call L_2757 (atomicBegin_1 (env_1087, x_1079 (*()*))) handle _ => L_2758
  block L_2757 (x_3348: unit)
    case x_3338 of
      xEnv_88 => L_2759
  block L_2759 (env_1088: (word32, word32) tuple)
    call L_2760 (x_3320 (env_1088, x_1080 (*()*))) handle _ => L_2761
  block L_2761 (x_3349: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2762
  block L_2762 (env_1089: unit)
    call L_2763 (atomicEnd_1 (env_1089, x_1084 (*()*))) handle _ => L_2758
  block L_2763 (x_3350: unit)
    goto L_2758 (x_3349)
  block L_2760 (return_14: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2764
  block L_2764 (env_1090: unit)
    call L_2765 (x_2902 (env_1090, return_14)) handle _ => L_2758
  block L_2765 (return_15: word32)
    val x_3351: (word32, word32) tuple = (x_3337, return_15)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2766
  block L_2766 (env_1091: unit)
    call L_2767 (x_2049 (env_1091, x_3351)) handle _ => L_2758
  block L_2767 (x_3352: bool)
    case x_3352 of
      true => L_2769 | false => L_2768
  block L_2768 ()
    case x_1082 (*con xEnv_59 (x_1081)*) of
      xEnv_59 => L_2770
  block L_2770 (env_1092: unit)
    call L_2771 (x_3353 (env_1092, return_15)) handle _ => L_2772
  block L_2772 (x_3354: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2773
  block L_2773 (env_1093: unit)
    call L_2774 (atomicEnd_1 (env_1093, x_1089 (*()*))) handle _ => L_2758
  block L_2774 (x_3355: unit)
    goto L_2758 (x_3354)
  block L_2771 (x_3356: word32)
    goto L_2775 (x_3356)
  block L_2775 (x_3357: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2776
  block L_2776 (env_1094: unit)
    call L_2777 (atomicEnd_1 (env_1094, x_1088 (*()*))) handle _ => L_2758
  block L_2777 (x_3358: unit)
    goto L_2778 (x_3357)
  block L_2769 ()
    val x_3359: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2779
  block L_2779 (env_1095: unit)
    call L_2780 (fromRep_1 (env_1095, x_3359)) handle _ => L_2758
  block L_2780 (e_11: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2781
  block L_2781 (env_1096: unit)
    call L_2782 (atomicEnd_1 (env_1096, x_1085 (*()*))) handle _ => L_2758
  block L_2782 (x_3360: unit)
    call L_2783 (loop_29 (e_11, x_1083 (*con nil_7*))) handle _ => L_2758
  block L_2783 (x_3361: t_26)
    case x_3361 of
      NONE_7 => L_2785 | SOME_19 => L_2784
  block L_2784 (x_3362: (word32, lambdas_2) tuple)
    bug
  block L_2785 ()
    case raiseSys_11 of
      raiseSysEnv_0 => L_2786
  block L_2786 (env_1097: lambdas_226)
    call L_2778 (raiseSys_4 (env_1097, e_11)) handle _ => L_2758
  block L_2758 (x_3363: exn)
    case finish_3 of
      xEnv_52 => L_2787
  block L_2787 (env_1098: unit)
    call L_2788 (x_2944 (env_1098, x_1091 (*()*))) handle _ => raise
  block L_2788 (x_3364: unit)
    raise (x_3363)
  block L_2778 (x_3365: word32)
    goto L_2789 (x_3365)
  block L_2789 (x_3366: word32)
    case finish_3 of
      xEnv_52 => L_2790
  block L_2790 (env_1099: unit)
    call L_2791 (x_2944 (env_1099, x_1090 (*()*))) handle _ => raise
  block L_2791 (x_3367: unit)
    return (x_3366)
  block L_2753 ()
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2792
  block L_2792 (env_1100: unit)
    call L_2793 (atomicBegin_1 (env_1100, x_1069 (*()*))) handle _ => raise
  block L_2793 (x_3368: unit)
    case x_3338 of
      xEnv_88 => L_2794
  block L_2794 (env_1101: (word32, word32) tuple)
    call L_2795 (x_3320 (env_1101, x_1070 (*()*))) handle _ => L_2796
  block L_2796 (x_3369: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2797
  block L_2797 (env_1102: unit)
    call L_2798 (atomicEnd_1 (env_1102, x_1074 (*()*))) handle _ => raise
  block L_2798 (x_3370: unit)
    raise (x_3369)
  block L_2795 (return_16: word32)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2799
  block L_2799 (env_1103: unit)
    call L_2800 (x_2902 (env_1103, return_16)) handle _ => raise
  block L_2800 (return_17: word32)
    val x_3371: (word32, word32) tuple = (x_3337, return_17)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2801
  block L_2801 (env_1104: unit)
    call L_2802 (x_2049 (env_1104, x_3371)) handle _ => raise
  block L_2802 (x_3372: bool)
    case x_3372 of
      true => L_2804 | false => L_2803
  block L_2803 ()
    case x_1072 (*con xEnv_58 (x_1071)*) of
      xEnv_58 => L_2805
  block L_2805 (env_1105: unit)
    call L_2806 (x_3373 (env_1105, return_17)) handle _ => L_2807
  block L_2807 (x_3374: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2808
  block L_2808 (env_1106: unit)
    call L_2809 (atomicEnd_1 (env_1106, x_1077 (*()*))) handle _ => raise
  block L_2809 (x_3375: unit)
    raise (x_3374)
  block L_2806 (x_3376: word32)
    goto L_2810 (x_3376)
  block L_2810 (x_3377: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2811
  block L_2811 (env_1107: unit)
    call L_2812 (atomicEnd_1 (env_1107, x_1076 (*()*))) handle _ => raise
  block L_2812 (x_3378: unit)
    return (x_3377)
  block L_2804 ()
    val x_3379: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2813
  block L_2813 (env_1108: unit)
    call L_2814 (fromRep_1 (env_1108, x_3379)) handle _ => raise
  block L_2814 (e_12: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2815
  block L_2815 (env_1109: unit)
    call L_2816 (atomicEnd_1 (env_1109, x_1075 (*()*))) handle _ => raise
  block L_2816 (x_3380: unit)
    val x_3381: (word32, list_10) tuple = (e_12, x_1073 (*con nil_7*))
    call tail errUnblocked_3 (env_1080, x_3381)
fun loop_29 (env_1110: word32, x_3382: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2817 ()
  block L_2817 ()
    case x_3382 of
      nil_7 => L_2819 | ::_11 => L_2818
  block L_2818 (x_3383: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_3386: list_10 = #1 (x_3383)
    val x_3385: (word32, lambdas_2) tuple = #0 (x_3383)
    val e'_7: word32 = #0 (x_3385)
    val x_3384: (word32, word32) tuple = (env_1110, e'_7)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2820
  block L_2820 (env_1111: unit)
    call L_2821 (x_2049 (env_1111, x_3384)) handle _ => raise
  block L_2821 (x_3387: bool)
    case x_3387 of
      true => L_2823 | false => L_2822
  block L_2822 ()
    call tail loop_29 (env_1110, x_3386)
  block L_2823 ()
    val x_3388: t_26 = con SOME_19 (x_3385)
    return (x_3388)
  block L_2819 ()
    return (x_1086 (*con NONE_7*))
fun x_3353 (env_1112: unit, x_3389: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2824 ()
  block L_2824 ()
    return (x_3389)
fun x_3373 (env_1113: unit, x_3390: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2825 ()
  block L_2825 ()
    return (x_3390)
fun loop_28 (env_1114: word32, x_3391: list_10):
  {returns = Some (t_26), raises = Some (exn)} =
L_2826 ()
  block L_2826 ()
    case x_3391 of
      nil_7 => L_2828 | ::_11 => L_2827
  block L_2827 (x_3392: ((word32, lambdas_2) tuple, list_10) tuple)
    val x_3395: list_10 = #1 (x_3392)
    val x_3394: (word32, lambdas_2) tuple = #0 (x_3392)
    val e'_8: word32 = #0 (x_3394)
    val x_3393: (word32, word32) tuple = (env_1114, e'_8)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2829
  block L_2829 (env_1115: unit)
    call L_2830 (x_2049 (env_1115, x_3393)) handle _ => raise
  block L_2830 (x_3396: bool)
    case x_3396 of
      true => L_2832 | false => L_2831
  block L_2831 ()
    call tail loop_28 (env_1114, x_3395)
  block L_2832 ()
    val x_3397: t_26 = con SOME_19 (x_3394)
    return (x_3397)
  block L_2828 ()
    return (x_1065 (*con NONE_7*))
fun x_3320 (env_1116: (word32, word32) tuple, x_3398: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_2833 ()
  block L_2833 ()
    val flags_1: word32 = #0 (env_1116)
    val fd_6: word32 = #1 (env_1116)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_2834
  block L_2834 (env_1117: unit)
    call L_2835 (toRep_2 (env_1117, fd_6)) handle _ => raise
  block L_2835 (x_3399: word32)
    val x_3400: word32 =
      prim CFunction {args = (word32, word32, word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32, Int32, Int32),
                                   res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_IO_fcntl3} (x_3399,
                                                 F_SETFL_0 (*0x4:w32*),
                                                 flags_1)
    return (x_3400)
fun x_2321 (env_1118: (lambdas_226, lambdas_95) tuple, x_3401: word32):
  {returns = Some (stat_0), raises = Some (exn)} =
L_2836 ()
  block L_2836 ()
    val errorMsg_1: lambdas_226 = #0 (env_1118)
    val x_3402: lambdas_95 = #1 (env_1118)
    case toRep_1 (*con toRepE ... _792)*) of
      toRepEnv_1 => L_2837
  block L_2837 (env_1119: unit)
    call L_2838 (toRep_2 (env_1119, x_3401)) handle _ => raise
  block L_2838 (x_3403: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _125)*) of
      sextdFromInt32ToInt32Env_0 => L_2839
  block L_2839 (env_1120: unit)
    call L_2840 (sextdFromInt32ToInt32_1 (env_1120, x_1053 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_2840 (x_3404: word32)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_2841
  block L_2841 (env_1121: unit)
    call L_2842 (atomicBegin_1 (env_1121, x_1054 (*()*))) handle _ => raise
  block L_2842 (x_3405: unit)
    val x_3406: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_fstat} (x_3403)
    case x_173 (*con xEnv_25 (x_172)*) of
      xEnv_25 => L_2843
  block L_2843 (env_1122: unit)
    call L_2844 (x_2902 (env_1122, x_3406)) handle _ => raise
  block L_2844 (return_18: word32)
    val x_3407: (word32, word32) tuple = (x_3404, return_18)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2845
  block L_2845 (env_1123: unit)
    call L_2846 (x_2049 (env_1123, x_3407)) handle _ => raise
  block L_2846 (x_3408: bool)
    case x_3408 of
      true => L_2848 | false => L_2847
  block L_2847 ()
    call L_2849 (x_3409 (x_3402, return_18)) handle _ => L_2850
  block L_2850 (x_3410: exn)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2851
  block L_2851 (env_1124: unit)
    call L_2852 (atomicEnd_1 (env_1124, x_1063 (*()*))) handle _ => raise
  block L_2852 (x_3411: unit)
    raise (x_3410)
  block L_2849 (x_3412: stat_0)
    goto L_2853 (x_3412)
  block L_2853 (x_3413: stat_0)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2854
  block L_2854 (env_1125: unit)
    call L_2855 (atomicEnd_1 (env_1125, x_1062 (*()*))) handle _ => raise
  block L_2855 (x_3414: unit)
    return (x_3413)
  block L_2848 ()
    val x_3415: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_Error_getErrno} ()
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_2856
  block L_2856 (env_1126: unit)
    call L_2857 (fromRep_1 (env_1126, x_3415)) handle _ => raise
  block L_2857 (e_13: word32)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_2858
  block L_2858 (env_1127: unit)
    call L_2859 (atomicEnd_1 (env_1127, x_1059 (*()*))) handle _ => raise
  block L_2859 (x_3416: unit)
    call L_2860 (loop_30 (e_13, x_1057 (*con nil_6*))) handle _ => raise
  block L_2860 (x_3417: t_24)
    case x_3417 of
      NONE_6 => L_2862 | SOME_17 => L_2861
  block L_2861 (x_3418: (word32, lambdas_2) tuple)
    bug
  block L_2862 ()
    case errorMsg_1 of
      errorMsgEnv_0 => L_2863
  block L_2863 (env_1128: (cpointer, lambdas_484) tuple)
    call L_2864 (errorMsg_2 (env_1128, e_13)) handle _ => raise
  block L_2864 (x_3419: (word8) vector)
    val x_3423: t_0 = con SOME_0 (e_13)
    val x_3422: ((word8) vector, t_0) tuple = (x_3419, x_3423)
    val x_3421: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1473, x_3422)
    val x_3420: exn = con SysErr_0 (x_3421)
    raise (x_3420)
fun loop_30 (env_1129: word32, x_3424: list_8):
  {returns = Some (t_24), raises = Some (exn)} =
L_2865 ()
  block L_2865 ()
    case x_3424 of
      nil_6 => L_2867 | ::_9 => L_2866
  block L_2866 (x_3425: ((word32, lambdas_2) tuple, list_8) tuple)
    val x_3428: list_8 = #1 (x_3425)
    val x_3427: (word32, lambdas_2) tuple = #0 (x_3425)
    val e'_9: word32 = #0 (x_3427)
    val x_3426: (word32, word32) tuple = (env_1129, e'_9)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_2868
  block L_2868 (env_1130: unit)
    call L_2869 (x_2049 (env_1130, x_3426)) handle _ => raise
  block L_2869 (x_3429: bool)
    case x_3429 of
      true => L_2871 | false => L_2870
  block L_2870 ()
    call tail loop_30 (env_1129, x_3428)
  block L_2871 ()
    val x_3430: t_24 = con SOME_17 (x_3427)
    return (x_3430)
  block L_2867 ()
    return (x_1060 (*con NONE_6*))
fun x_3409 (env_1131: lambdas_95, x_3431: word32):
  {returns = Some (stat_0), raises = Some (exn)} =
L_2872 ()
  block L_2872 ()
    val x_3435: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getDev} ()
    val x_3434: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getINo} ()
    val x_3433: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getMode} ()
    val x_3432: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getNLink} ()
    case zextdFromWord64ToInt32_0 (*con zextdF ... _121)*) of
      zextdFromWord64ToInt32Env_0 => L_2873
  block L_2873 (env_1132: unit)
    call L_2874 (zextdFromWord64ToInt32_1 (env_1132, x_3432)) handle _ => raise
  block L_2874 (res_0: word32)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_2875
  block L_2875 (env_1133: unit)
    call L_2876 (zextdFromInt32ToWord64_1 (env_1133, res_0)) handle _ => raise
  block L_2876 (x_3436: word64)
    val x_3437: (word64, word64) tuple = (x_3432, x_3436)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_2877
  block L_2877 (env_1134: unit)
    call L_2878 (x_2295 (env_1134, x_3437)) handle _ => raise
  block L_2878 (x_3438: bool)
    case x_3438 of
      true => L_2880 | false => L_2879
  block L_2879 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2880 ()
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_2881
  block L_2881 (env_1135: unit)
    call L_2882 (<=_4 (env_1135, x_1481)) handle _ => raise
  block L_2882 (x_3439: bool)
    case x_3439 of
      true => L_2884 | false => L_2883
  block L_2883 ()
    goto L_2885 (x_1056 (*con false*))
  block L_2884 ()
    val x_3440: (word32, word32) tuple = (res_0, x_1055 (*0x0:w32*))
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_2886
  block L_2886 (env_1136: unit)
    call L_2885 (<_5 (env_1136, x_3440)) handle _ => raise
  block L_2885 (x_3441: bool)
    case x_3441 of
      true => L_2888 | false => L_2887
  block L_2887 ()
    val x_3445: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getUId} ()
    val x_3444: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Word32},
                      return = word32,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getGId} ()
    val x_3443: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getSize} ()
    val x_3442: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getATime} ()
    case env_1131 of
      xEnv_241 => L_2889
  block L_2889 (env_1137: (lambdas_492, intInf, lambdas_491) tuple)
    call L_2890 (x_3446 (env_1137, x_3442)) handle _ => raise
  block L_2890 (x_3447: time_0)
    val x_3448: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getMTime} ()
    case env_1131 of
      xEnv_241 => L_2891
  block L_2891 (env_1138: (lambdas_492, intInf, lambdas_491) tuple)
    call L_2892 (x_3446 (env_1138, x_3448)) handle _ => raise
  block L_2892 (x_3449: time_0)
    val x_3450: word64 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_FileSys_Stat_getCTime} ()
    case env_1131 of
      xEnv_241 => L_2893
  block L_2893 (env_1139: (lambdas_492, intInf, lambdas_491) tuple)
    call L_2894 (x_3446 (env_1139, x_3450)) handle _ => raise
  block L_2894 (x_3451: time_0)
    val x_3453:
      (time_0,
       time_0,
       word64,
       word32,
       word64,
       word32,
       time_0,
       word32,
       word64,
       word32) tuple =
      (x_3447,
       x_3451,
       x_3435,
       x_3444,
       x_3434,
       x_3433,
       x_3449,
       res_0,
       x_3443,
       x_3445)
    val x_3452: stat_0 = con T_2 (x_3453)
    return (x_3452)
  block L_2888 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2339 (env_1140: word32, x_3454: list_4):
  {returns = Some (word32), raises = Some (exn)} =
L_2895 ()
  block L_2895 ()
    val x_3455: (list_4, word32) tuple = (x_3454, env_1140)
    case loop_1 (*con loopEn ... e_42)*) of
      loopEnv_1 => L_2896
  block L_2896 (env_1141: unit)
    call tail loop_31 (env_1141, x_3455)
fun loop_31 (env_1142: unit, x_3456: (list_4, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_2897 ()
  block L_2897 ()
    val b_15: word32 = #1 (x_3456)
    val l_3: list_4 = #0 (x_3456)
    case l_3 of
      nil_10 => L_2899 | ::_2 => L_2898
  block L_2898 (x_3457: (word32, list_4) tuple)
    val x_3459: list_4 = #1 (x_3457)
    val x_3458: word32 = #0 (x_3457)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_2900
  block L_2900 (env_1143: unit)
    call L_2901 (idFromInt32ToWord32_1 (env_1143, x_3458)) handle _ => raise
  block L_2901 (x_3460: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_2902
  block L_2902 (env_1144: unit)
    call L_2903 (idFromInt32ToWord32_1 (env_1144, b_15)) handle _ => raise
  block L_2903 (x_3461: word32)
    val x_3462: word32 = prim Word32_orb (x_3460, x_3461)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_2904
  block L_2904 (env_1145: unit)
    call L_2905 (idFromWord32ToInt32_1 (env_1145, x_3462)) handle _ => raise
  block L_2905 (x_3463: word32)
    val x_3464: (list_4, word32) tuple = (x_3459, x_3463)
    case loop_1 (*con loopEn ... e_42)*) of
      loopEnv_1 => L_2906
  block L_2906 (env_1146: unit)
    call tail loop_31 (env_1146, x_3464)
  block L_2899 ()
    return (b_15)
fun x_3446 (env_1147: (lambdas_492, intInf, lambdas_491) tuple, x_3465: word64):
  {returns = Some (time_0), raises = Some (exn)} =
L_2907 ()
  block L_2907 ()
    val reserve_2: lambdas_492 = #0 (env_1147)
    val x_3466: intInf = #1 (env_1147)
    val sextdFromInt64_2: lambdas_491 = #2 (env_1147)
    case sextdFromInt64_2 of
      sextdFromInt64Env_0 => L_2908
  block L_2908 (env_1148: (word32, word64) tuple)
    call L_2909 (sextdFromInt64_1 (env_1148, x_3465)) handle _ => raise
  block L_2909 (x_3467: intInf)
    val x_3468: (intInf, intInf) tuple = (x_3467, x_3466)
    case areSmall_0 (*con areSma ... e_25)*) of
      areSmallEnv_0 => L_2910
  block L_2910 (env_1149: unit)
    call L_2911 (areSmall_1 (env_1149, x_3468)) handle _ => raise
  block L_2911 (x_3469: bool)
    case x_3469 of
      true => L_2913 | false => L_2912
  block L_2912 ()
    goto L_2914 (x_1050 (*con NONE_5*))
  block L_2913 ()
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_2915
  block L_2915 (env_1150: unit)
    call L_2916 (dropTagCoerce_1 (env_1150, x_3467)) handle _ => L_2917
  block L_2916 (lhsw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_2918
  block L_2918 (env_1151: unit)
    call L_2919 (zextdFromWord64ToInt64_1 (env_1151, lhsw_0)) handle _ => L_2917
  block L_2919 (lhsi_0: word64)
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_2920
  block L_2920 (env_1152: unit)
    call L_2921 (dropTagCoerce_1 (env_1152, x_3466)) handle _ => L_2917
  block L_2921 (rhsw_0: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_2922
  block L_2922 (env_1153: unit)
    call L_2923 (zextdFromWord64ToInt64_1 (env_1153, rhsw_0)) handle _ => L_2917
  block L_2923 (rhsi_0: word64)
    val x_3471: word64 = prim WordS64_mul (lhsi_0, rhsi_0)
    val x_3470: bool = prim WordS64_mulCheckP (lhsi_0, rhsi_0)
    case x_3470 of
      true => L_2925 | false => L_2924
  block L_2924 ()
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_2926
  block L_2926 (env_1154: unit)
    call L_2927 (zextdFromInt64ToWord64_1 (env_1154, x_3471)) handle _ => L_2917
  block L_2927 (answ_1: word64)
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_2928
  block L_2928 (env_1155: unit)
    call L_2929 (addTag_1 (env_1155, answ_1)) handle _ => L_2917
  block L_2929 (ans_5: word64)
    val x_3472: word64 = prim Word64_xorb (ans_5, answ_1)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_2930
  block L_2930 (env_1156: unit)
    call L_2931 (zextdFromWord64ToInt64_1 (env_1156, x_3472)) handle _ => L_2917
  block L_2931 (x_3473: word64)
    val x_3474: (word64, word64) tuple = (x_3473, x_1045 (*0x0:w64*))
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_2932
  block L_2932 (env_1157: unit)
    call L_2933 (>=_7 (env_1157, x_3474)) handle _ => L_2917
  block L_2933 (x_3475: bool)
    case x_3475 of
      true => L_2935 | false => L_2934
  block L_2934 ()
    goto L_2914 (x_1046 (*con NONE_5*))
  block L_2935 ()
    case fromWord_1 (*con fromWo ... _200)*) of
      fromWordEnv_1 => L_2936
  block L_2936 (env_1158: unit)
    call L_2937 (fromWord_3 (env_1158, ans_5)) handle _ => L_2917
  block L_2937 (x_3476: intInf)
    goto L_2938 (x_3476)
  block L_2925 ()
    goto L_2917 (x_63 (*con Overfl ... x_62)*))
  block L_2917 (x_3477: exn)
    case x_3477 of
      Overflow_0 => L_2939 | _ => L_2940
  block L_2940 ()
    call L_2914 (x_3478 (x_3477, x_1047 (*()*))) handle _ => raise
  block L_2939 (x_3479: (unit) ref)
    val x_3480: bool = prim MLton_equal[(unit) ref] (x_3479, x_62)
    case x_3480 of
      true => L_2942 | false => L_2941
  block L_2941 ()
    call L_2914 (x_3478 (x_3477, x_1049 (*()*))) handle _ => raise
  block L_2942 ()
    goto L_2914 (x_1048 (*con NONE_5*))
  block L_2914 (x_3481: t_7)
    case x_3481 of
      NONE_5 => L_2943 | SOME_5 => L_2938
  block L_2943 ()
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_2944
  block L_2944 (env_1159: unit)
    call L_2945 (numLimbs_1 (env_1159, x_3467)) handle _ => raise
  block L_2945 (x_3482: word64)
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_2946
  block L_2946 (env_1160: unit)
    call L_2947 (numLimbs_1 (env_1160, x_3466)) handle _ => raise
  block L_2947 (x_3483: word64)
    val x_3484: (word64, word64) tuple = (x_3482, x_3483)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_2948
  block L_2948 (env_1161: unit)
    call L_2949 (x_3165 (env_1161, x_3484)) handle _ => raise
  block L_2949 (x_3485: word64)
    val x_3486: (word64, word64) tuple = (x_3485, x_371 (*0x0:w64*))
    case reserve_2 of
      reserveEnv_0 => L_2950
  block L_2950 (env_1162: (word64, word64) tuple)
    call L_2951 (reserve_1 (env_1162, x_3486)) handle _ => raise
  block L_2951 (x_3487: word64)
    val x_3488: intInf = prim IntInf_mul (x_3467, x_3466, x_3487)
    goto L_2938 (x_3488)
  block L_2938 (x_3489: intInf)
    val x_3490: time_0 = con T_1 (x_3489)
    return (x_3490)
fun x_3478 (env_1163: exn, unit_7: unit):
  {returns = Some (t_7), raises = Some (exn)} =
L_2952 ()
  block L_2952 ()
    raise (env_1163)
fun x_3491 (env_1164: (lambdas_31, lambdas_32) tuple, x_3492: exn):
  {returns = Some (t_2), raises = Some (exn)} =
L_2953 ()
  block L_2953 ()
    val concat_4: lambdas_31 = #0 (env_1164)
    val exnMessage_3: lambdas_32 = #1 (env_1164)
    case x_3492 of
      Io_0 => L_2954 | _ => L_2955
  block L_2955 ()
    case x_1038 (*con xEnv_57 (x_1037)*) of
      xEnv_57 => L_2956
  block L_2956 (env_1165: unit)
    call tail x_3493 (env_1165, x_1039 (*()*))
  block L_2954 (x_3494:
                  ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
    val x_3497: (exn, (word8) vector, (word8) vector) tuple = #1 (x_3494)
    val x_3496: (unit) ref = #0 (x_3494)
    val x_3495: bool = prim MLton_equal[(unit) ref] (x_3496, x_1480)
    case x_3495 of
      true => L_2958 | false => L_2957
  block L_2957 ()
    case x_1038 (*con xEnv_57 (x_1037)*) of
      xEnv_57 => L_2959
  block L_2959 (env_1166: unit)
    call tail x_3493 (env_1166, x_1044 (*()*))
  block L_2958 ()
    val x_3500: (word8) vector = #2 (x_3497)
    val x_3499: (word8) vector = #1 (x_3497)
    val x_3498: exn = #0 (x_3497)
    case exnMessage_3 of
      exnMessageEnv_0 => L_2960
  block L_2960 (env_1167: (list_0) ref)
    call L_2961 (exnMessage_2 (env_1167, x_3498)) handle _ => raise
  block L_2961 (x_3501: (word8) vector)
    val x_3513: ((word8) vector, list_7) tuple = (x_3501, x_1040 (*con nil_3*))
    val x_3512: list_7 = con ::_1 (x_3513)
    val x_3511: ((word8) vector, list_7) tuple =
      (x_1041 (*"\" failed with "*), x_3512)
    val x_3510: list_7 = con ::_1 (x_3511)
    val x_3509: ((word8) vector, list_7) tuple = (x_3500, x_3510)
    val x_3508: list_7 = con ::_1 (x_3509)
    val x_3507: ((word8) vector, list_7) tuple = (x_1042 (*" \""*), x_3508)
    val x_3506: list_7 = con ::_1 (x_3507)
    val x_3505: ((word8) vector, list_7) tuple = (x_3499, x_3506)
    val x_3504: list_7 = con ::_1 (x_3505)
    val x_3503: ((word8) vector, list_7) tuple = (x_1043 (*"Io: "*), x_3504)
    val x_3502: list_7 = con ::_1 (x_3503)
    case concat_4 of
      concatEnv_0 => L_2962
  block L_2962 (env_1168: (lambdas_27, lambdas_484, lambdas_26) tuple)
    call L_2963 (concat_2 (env_1168, x_3502)) handle _ => raise
  block L_2963 (x_3514: (word8) vector)
    val x_3515: t_2 = con SOME_1 (x_3514)
    return (x_3515)
fun x_3493 (env_1169: unit, unit_8: unit):
  {returns = Some (t_2), raises = Some (exn)} =
L_2964 ()
  block L_2964 ()
    return (x_1036 (*con NONE_3*))
fun x_3516 (env_1170:
              (lambdas_101,
               real64,
               real64,
               lambdas_102,
               real64,
               word64,
               real64,
               word64) tuple,
            x_3517: t_9):
  {returns = Some (lambdas_100), raises = Some (exn)} =
L_2965 ()
  block L_2965 ()
    val class_2: lambdas_101 = #0 (env_1170)
    val zero_11: real64 = #1 (env_1170)
    val maxWord_16: real64 = #2 (env_1170)
    val setRoundingMode_1: lambdas_102 = #3 (env_1170)
    val one_10: real64 = #4 (env_1170)
    val maxWord'_20: word64 = #5 (env_1170)
    val half_2: real64 = #6 (env_1170)
    val zero_12: word64 = #7 (env_1170)
    val x_3519:
      (word64,
       real64,
       word64,
       real64,
       lambdas_102,
       t_9,
       real64,
       real64,
       lambdas_101) tuple =
      (zero_12,
       half_2,
       maxWord'_20,
       one_10,
       setRoundingMode_1,
       x_3517,
       maxWord_16,
       zero_11,
       class_2)
    val x_3518: lambdas_100 = con xEnv_92 (x_3519)
    return (x_3518)
fun x_3520 (env_1171:
              (word64,
               real64,
               word64,
               real64,
               lambdas_102,
               t_9,
               real64,
               real64,
               lambdas_101) tuple,
            x_3521: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_2966 ()
  block L_2966 ()
    val zero_14: word64 = #0 (env_1171)
    val half_3: real64 = #1 (env_1171)
    val maxWord'_21: word64 = #2 (env_1171)
    val one_11: real64 = #3 (env_1171)
    val setRoundingMode_2: lambdas_102 = #4 (env_1171)
    val x_3522: t_9 = #5 (env_1171)
    val maxWord_17: real64 = #6 (env_1171)
    val zero_13: real64 = #7 (env_1171)
    val class_3: lambdas_101 = #8 (env_1171)
    case class_3 of
      classEnv_0 => L_2967
  block L_2967 (env_1172: (word64, word64, word64) tuple)
    call L_2968 (class_4 (env_1172, x_3521)) handle _ => raise
  block L_2968 (x_3523: float_class_0)
    case x_3523 of
      INF_0 => L_2970 | NAN_1 => L_2969 | _ => L_2971
  block L_2971 ()
    val x_3524: (real64, real64) tuple = (zero_13, x_3521)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2972
  block L_2972 (env_1173: unit)
    call L_2973 (<=_5 (env_1173, x_3524)) handle _ => raise
  block L_2973 (x_3525: bool)
    case x_3525 of
      true => L_2975 | false => L_2974
  block L_2974 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2976
  block L_2976 (env_1174: unit)
    call L_2977 (~_2 (env_1174, one_11)) handle _ => raise
  block L_2977 (x_3526: real64)
    val x_3527: (real64, real64) tuple = (x_3521, x_3526)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2978
  block L_2978 (env_1175: unit)
    call L_2979 (>_7 (env_1175, x_3527)) handle _ => raise
  block L_2979 (x_3528: bool)
    case x_3528 of
      true => L_2981 | false => L_2980
  block L_2980 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2981 ()
    case x_3522 of
      TO_NEGINF_0 => L_2985
    | TO_ZERO_0 => L_2984
    | TO_NEAREST_0 => L_2983
    | TO_POSINF_0 => L_2982
  block L_2982 ()
    return (zero_14)
  block L_2983 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_2986
  block L_2986 (env_1176: unit)
    call L_2987 (~_2 (env_1176, half_3)) handle _ => raise
  block L_2987 (x_3529: real64)
    val x_3530: (real64, real64) tuple = (x_3521, x_3529)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_2988
  block L_2988 (env_1177: unit)
    call L_2989 (<_8 (env_1177, x_3530)) handle _ => raise
  block L_2989 (x_3531: bool)
    case x_3531 of
      true => L_2991 | false => L_2990
  block L_2990 ()
    return (zero_14)
  block L_2991 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2984 ()
    return (zero_14)
  block L_2985 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2975 ()
    val x_3532: (real64, real64) tuple = (x_3521, maxWord_17)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_2992
  block L_2992 (env_1178: unit)
    call L_2993 (<=_5 (env_1178, x_3532)) handle _ => raise
  block L_2993 (x_3533: bool)
    case x_3533 of
      true => L_2995 | false => L_2994
  block L_2994 ()
    val x_3534: (real64, real64) tuple = (maxWord_17, one_11)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_2996
  block L_2996 (env_1179: unit)
    call L_2997 (+_3 (env_1179, x_3534)) handle _ => raise
  block L_2997 (x_3535: real64)
    val x_3536: (real64, real64) tuple = (x_3521, x_3535)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_2998
  block L_2998 (env_1180: unit)
    call L_2999 (<_8 (env_1180, x_3536)) handle _ => raise
  block L_2999 (x_3537: bool)
    case x_3537 of
      true => L_3001 | false => L_3000
  block L_3000 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3001 ()
    case x_3522 of
      TO_NEGINF_0 => L_3005
    | TO_ZERO_0 => L_3004
    | TO_NEAREST_0 => L_3003
    | TO_POSINF_0 => L_3002
  block L_3002 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3003 ()
    val x_3538: (real64, real64) tuple = (x_3521, maxWord_17)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3006
  block L_3006 (env_1181: unit)
    call L_3007 (-_4 (env_1181, x_3538)) handle _ => raise
  block L_3007 (x_3539: real64)
    val x_3540: (real64, real64) tuple = (x_3539, half_3)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3008
  block L_3008 (env_1182: unit)
    call L_3009 (>=_8 (env_1182, x_3540)) handle _ => raise
  block L_3009 (x_3541: bool)
    case x_3541 of
      true => L_3011 | false => L_3010
  block L_3010 ()
    return (maxWord'_21)
  block L_3011 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3004 ()
    return (maxWord'_21)
  block L_3005 ()
    return (maxWord'_21)
  block L_2995 ()
    case x_3522 of
      TO_POSINF_0 => L_3015
    | TO_NEAREST_0 => L_3014
    | TO_ZERO_0 => L_3013
    | TO_NEGINF_0 => L_3012
  block L_3012 ()
    val x_3542: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3521)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3016
  block L_3016 (env_1183: unit)
    call tail toWord64Unsafe_2 (env_1183, x_3542)
  block L_3013 ()
    val x_3543: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3521)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3017
  block L_3017 (env_1184: unit)
    call tail toWord64Unsafe_2 (env_1184, x_3543)
  block L_3014 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3018
  block L_3018 (env_1185: unit)
    call L_3019 (x_3544 (env_1185, x_1023 (*()*))) handle _ => raise
  block L_3019 (m'_0: t_9)
    case setRoundingMode_2 of
      setRoundingModeEnv_0 => L_3020
  block L_3020 (env_1186: (lambdas_226, word32) tuple)
    call L_3021 (setRoundingMode_3 (env_1186, x_1022 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3021 (x_3545: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3022
  block L_3022 (env_1187: unit)
    call L_3023 (round_2 (env_1187, x_3521)) handle _ => raise
  block L_3023 (x_3546: real64)
    case setRoundingMode_2 of
      setRoundingModeEnv_0 => L_3024
  block L_3024 (env_1188: (lambdas_226, word32) tuple)
    call L_3025 (setRoundingMode_3 (env_1188, m'_0)) handle _ => raise
  block L_3025 (x_3547: unit)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3026
  block L_3026 (env_1189: unit)
    call tail toWord64Unsafe_2 (env_1189, x_3546)
  block L_3015 ()
    val x_3548: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3521)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3027
  block L_3027 (env_1190: unit)
    call tail toWord64Unsafe_2 (env_1190, x_3548)
  block L_2969 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2970 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3549 (env_1191:
              (lambdas_101, real64, real64, lambdas_102, real64, word64, real64) tuple,
            x_3550: t_9):
  {returns = Some (lambdas_104), raises = Some (exn)} =
L_3028 ()
  block L_3028 ()
    val class_5: lambdas_101 = #0 (env_1191)
    val zero_15: real64 = #1 (env_1191)
    val maxWord_18: real64 = #2 (env_1191)
    val setRoundingMode_4: lambdas_102 = #3 (env_1191)
    val one_12: real64 = #4 (env_1191)
    val zero_16: word64 = #5 (env_1191)
    val half_4: real64 = #6 (env_1191)
    val x_3552:
      (real64, word64, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple =
      (half_4,
       zero_16,
       one_12,
       setRoundingMode_4,
       x_3550,
       maxWord_18,
       zero_15,
       class_5)
    val x_3551: lambdas_104 = con xEnv_94 (x_3552)
    return (x_3551)
fun x_3553 (env_1192:
              (real64,
               word64,
               real64,
               lambdas_102,
               t_9,
               real64,
               real64,
               lambdas_101) tuple,
            x_3554: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_3029 ()
  block L_3029 ()
    val half_5: real64 = #0 (env_1192)
    val zero_18: word64 = #1 (env_1192)
    val one_13: real64 = #2 (env_1192)
    val setRoundingMode_5: lambdas_102 = #3 (env_1192)
    val x_3555: t_9 = #4 (env_1192)
    val maxWord_19: real64 = #5 (env_1192)
    val zero_17: real64 = #6 (env_1192)
    val class_6: lambdas_101 = #7 (env_1192)
    case class_6 of
      classEnv_0 => L_3030
  block L_3030 (env_1193: (word64, word64, word64) tuple)
    call L_3031 (class_4 (env_1193, x_3554)) handle _ => raise
  block L_3031 (x_3556: float_class_0)
    case x_3556 of
      INF_0 => L_3033 | NAN_1 => L_3032 | _ => L_3034
  block L_3034 ()
    val x_3557: (real64, real64) tuple = (zero_17, x_3554)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3035
  block L_3035 (env_1194: unit)
    call L_3036 (<=_5 (env_1194, x_3557)) handle _ => raise
  block L_3036 (x_3558: bool)
    case x_3558 of
      true => L_3038 | false => L_3037
  block L_3037 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3039
  block L_3039 (env_1195: unit)
    call L_3040 (~_2 (env_1195, one_13)) handle _ => raise
  block L_3040 (x_3559: real64)
    val x_3560: (real64, real64) tuple = (x_3554, x_3559)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3041
  block L_3041 (env_1196: unit)
    call L_3042 (>_7 (env_1196, x_3560)) handle _ => raise
  block L_3042 (x_3561: bool)
    case x_3561 of
      true => L_3044 | false => L_3043
  block L_3043 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3044 ()
    case x_3555 of
      TO_NEGINF_0 => L_3048
    | TO_ZERO_0 => L_3047
    | TO_NEAREST_0 => L_3046
    | TO_POSINF_0 => L_3045
  block L_3045 ()
    return (zero_18)
  block L_3046 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3049
  block L_3049 (env_1197: unit)
    call L_3050 (~_2 (env_1197, half_5)) handle _ => raise
  block L_3050 (x_3562: real64)
    val x_3563: (real64, real64) tuple = (x_3554, x_3562)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3051
  block L_3051 (env_1198: unit)
    call L_3052 (<_8 (env_1198, x_3563)) handle _ => raise
  block L_3052 (x_3564: bool)
    case x_3564 of
      true => L_3054 | false => L_3053
  block L_3053 ()
    return (zero_18)
  block L_3054 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3047 ()
    return (zero_18)
  block L_3048 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3038 ()
    val x_3565: (real64, real64) tuple = (x_3554, maxWord_19)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3055
  block L_3055 (env_1199: unit)
    call L_3056 (<=_5 (env_1199, x_3565)) handle _ => raise
  block L_3056 (x_3566: bool)
    case x_3566 of
      true => L_3058 | false => L_3057
  block L_3057 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3058 ()
    case x_3555 of
      TO_POSINF_0 => L_3062
    | TO_NEAREST_0 => L_3061
    | TO_ZERO_0 => L_3060
    | TO_NEGINF_0 => L_3059
  block L_3059 ()
    val x_3567: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3554)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3063
  block L_3063 (env_1200: unit)
    call tail toWord64Unsafe_2 (env_1200, x_3567)
  block L_3060 ()
    val x_3568: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3554)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3064
  block L_3064 (env_1201: unit)
    call tail toWord64Unsafe_2 (env_1201, x_3568)
  block L_3061 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3065
  block L_3065 (env_1202: unit)
    call L_3066 (x_3544 (env_1202, x_1020 (*()*))) handle _ => raise
  block L_3066 (m'_1: t_9)
    case setRoundingMode_5 of
      setRoundingModeEnv_0 => L_3067
  block L_3067 (env_1203: (lambdas_226, word32) tuple)
    call L_3068 (setRoundingMode_3 (env_1203, x_1019 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3068 (x_3569: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3069
  block L_3069 (env_1204: unit)
    call L_3070 (round_2 (env_1204, x_3554)) handle _ => raise
  block L_3070 (x_3570: real64)
    case setRoundingMode_5 of
      setRoundingModeEnv_0 => L_3071
  block L_3071 (env_1205: (lambdas_226, word32) tuple)
    call L_3072 (setRoundingMode_3 (env_1205, m'_1)) handle _ => raise
  block L_3072 (x_3571: unit)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3073
  block L_3073 (env_1206: unit)
    call tail toWord64Unsafe_2 (env_1206, x_3570)
  block L_3062 ()
    val x_3572: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3554)
    case toWord64Unsafe_1 (*con toWord ... _250)*) of
      toWord64UnsafeEnv_1 => L_3074
  block L_3074 (env_1207: unit)
    call tail toWord64Unsafe_2 (env_1207, x_3572)
  block L_3032 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3033 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2278 (env_1208: (lambdas_109, lambdas_108, word64) tuple, x_3573: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3075 ()
  block L_3075 ()
    val <<_10: lambdas_109 = #0 (env_1208)
    val >>_8: lambdas_108 = #1 (env_1208)
    val maxWord'_22: word64 = #2 (env_1208)
    val x_3574: (word64, word32) tuple = (maxWord'_22, x_3573)
    case >>_8 of
      >>Env_0 => L_3076
  block L_3076 (env_1209: (word32, word64) tuple)
    call L_3077 (>>_9 (env_1209, x_3574)) handle _ => raise
  block L_3077 (x_3575: word64)
    val x_3576: (word64, word32) tuple = (x_3575, x_3573)
    case <<_10 of
      <<Env_0 => L_3078
  block L_3078 (env_1210: (word32, word64) tuple)
    call tail <<_9 (env_1210, x_3576)
fun x_3577 (env_1211:
              (lambdas_101,
               real64,
               real64,
               lambdas_102,
               real64,
               word32,
               real64,
               word32) tuple,
            x_3578: t_9):
  {returns = Some (lambdas_110), raises = Some (exn)} =
L_3079 ()
  block L_3079 ()
    val class_7: lambdas_101 = #0 (env_1211)
    val zero_19: real64 = #1 (env_1211)
    val maxWord_20: real64 = #2 (env_1211)
    val setRoundingMode_6: lambdas_102 = #3 (env_1211)
    val one_14: real64 = #4 (env_1211)
    val maxWord'_23: word32 = #5 (env_1211)
    val half_6: real64 = #6 (env_1211)
    val zero_20: word32 = #7 (env_1211)
    val x_3580:
      (word32,
       real64,
       word32,
       real64,
       lambdas_102,
       t_9,
       real64,
       real64,
       lambdas_101) tuple =
      (zero_20,
       half_6,
       maxWord'_23,
       one_14,
       setRoundingMode_6,
       x_3578,
       maxWord_20,
       zero_19,
       class_7)
    val x_3579: lambdas_110 = con xEnv_99 (x_3580)
    return (x_3579)
fun x_3581 (env_1212:
              (word32,
               real64,
               word32,
               real64,
               lambdas_102,
               t_9,
               real64,
               real64,
               lambdas_101) tuple,
            x_3582: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3080 ()
  block L_3080 ()
    val zero_22: word32 = #0 (env_1212)
    val half_7: real64 = #1 (env_1212)
    val maxWord'_24: word32 = #2 (env_1212)
    val one_15: real64 = #3 (env_1212)
    val setRoundingMode_7: lambdas_102 = #4 (env_1212)
    val x_3583: t_9 = #5 (env_1212)
    val maxWord_21: real64 = #6 (env_1212)
    val zero_21: real64 = #7 (env_1212)
    val class_8: lambdas_101 = #8 (env_1212)
    case class_8 of
      classEnv_0 => L_3081
  block L_3081 (env_1213: (word64, word64, word64) tuple)
    call L_3082 (class_4 (env_1213, x_3582)) handle _ => raise
  block L_3082 (x_3584: float_class_0)
    case x_3584 of
      INF_0 => L_3084 | NAN_1 => L_3083 | _ => L_3085
  block L_3085 ()
    val x_3585: (real64, real64) tuple = (zero_21, x_3582)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3086
  block L_3086 (env_1214: unit)
    call L_3087 (<=_5 (env_1214, x_3585)) handle _ => raise
  block L_3087 (x_3586: bool)
    case x_3586 of
      true => L_3089 | false => L_3088
  block L_3088 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3090
  block L_3090 (env_1215: unit)
    call L_3091 (~_2 (env_1215, one_15)) handle _ => raise
  block L_3091 (x_3587: real64)
    val x_3588: (real64, real64) tuple = (x_3582, x_3587)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3092
  block L_3092 (env_1216: unit)
    call L_3093 (>_7 (env_1216, x_3588)) handle _ => raise
  block L_3093 (x_3589: bool)
    case x_3589 of
      true => L_3095 | false => L_3094
  block L_3094 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3095 ()
    case x_3583 of
      TO_NEGINF_0 => L_3099
    | TO_ZERO_0 => L_3098
    | TO_NEAREST_0 => L_3097
    | TO_POSINF_0 => L_3096
  block L_3096 ()
    return (zero_22)
  block L_3097 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3100
  block L_3100 (env_1217: unit)
    call L_3101 (~_2 (env_1217, half_7)) handle _ => raise
  block L_3101 (x_3590: real64)
    val x_3591: (real64, real64) tuple = (x_3582, x_3590)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3102
  block L_3102 (env_1218: unit)
    call L_3103 (<_8 (env_1218, x_3591)) handle _ => raise
  block L_3103 (x_3592: bool)
    case x_3592 of
      true => L_3105 | false => L_3104
  block L_3104 ()
    return (zero_22)
  block L_3105 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3098 ()
    return (zero_22)
  block L_3099 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3089 ()
    val x_3593: (real64, real64) tuple = (x_3582, maxWord_21)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3106
  block L_3106 (env_1219: unit)
    call L_3107 (<=_5 (env_1219, x_3593)) handle _ => raise
  block L_3107 (x_3594: bool)
    case x_3594 of
      true => L_3109 | false => L_3108
  block L_3108 ()
    val x_3595: (real64, real64) tuple = (maxWord_21, one_15)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3110
  block L_3110 (env_1220: unit)
    call L_3111 (+_3 (env_1220, x_3595)) handle _ => raise
  block L_3111 (x_3596: real64)
    val x_3597: (real64, real64) tuple = (x_3582, x_3596)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3112
  block L_3112 (env_1221: unit)
    call L_3113 (<_8 (env_1221, x_3597)) handle _ => raise
  block L_3113 (x_3598: bool)
    case x_3598 of
      true => L_3115 | false => L_3114
  block L_3114 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3115 ()
    case x_3583 of
      TO_NEGINF_0 => L_3119
    | TO_ZERO_0 => L_3118
    | TO_NEAREST_0 => L_3117
    | TO_POSINF_0 => L_3116
  block L_3116 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3117 ()
    val x_3599: (real64, real64) tuple = (x_3582, maxWord_21)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3120
  block L_3120 (env_1222: unit)
    call L_3121 (-_4 (env_1222, x_3599)) handle _ => raise
  block L_3121 (x_3600: real64)
    val x_3601: (real64, real64) tuple = (x_3600, half_7)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3122
  block L_3122 (env_1223: unit)
    call L_3123 (>=_8 (env_1223, x_3601)) handle _ => raise
  block L_3123 (x_3602: bool)
    case x_3602 of
      true => L_3125 | false => L_3124
  block L_3124 ()
    return (maxWord'_24)
  block L_3125 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3118 ()
    return (maxWord'_24)
  block L_3119 ()
    return (maxWord'_24)
  block L_3109 ()
    case x_3583 of
      TO_POSINF_0 => L_3129
    | TO_NEAREST_0 => L_3128
    | TO_ZERO_0 => L_3127
    | TO_NEGINF_0 => L_3126
  block L_3126 ()
    val x_3603: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3582)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3130
  block L_3130 (env_1224: unit)
    call tail toWord32Unsafe_2 (env_1224, x_3603)
  block L_3127 ()
    val x_3604: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3582)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3131
  block L_3131 (env_1225: unit)
    call tail toWord32Unsafe_2 (env_1225, x_3604)
  block L_3128 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3132
  block L_3132 (env_1226: unit)
    call L_3133 (x_3544 (env_1226, x_1018 (*()*))) handle _ => raise
  block L_3133 (m'_2: t_9)
    case setRoundingMode_7 of
      setRoundingModeEnv_0 => L_3134
  block L_3134 (env_1227: (lambdas_226, word32) tuple)
    call L_3135 (setRoundingMode_3 (env_1227, x_1017 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3135 (x_3605: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3136
  block L_3136 (env_1228: unit)
    call L_3137 (round_2 (env_1228, x_3582)) handle _ => raise
  block L_3137 (x_3606: real64)
    case setRoundingMode_7 of
      setRoundingModeEnv_0 => L_3138
  block L_3138 (env_1229: (lambdas_226, word32) tuple)
    call L_3139 (setRoundingMode_3 (env_1229, m'_2)) handle _ => raise
  block L_3139 (x_3607: unit)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3140
  block L_3140 (env_1230: unit)
    call tail toWord32Unsafe_2 (env_1230, x_3606)
  block L_3129 ()
    val x_3608: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3582)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3141
  block L_3141 (env_1231: unit)
    call tail toWord32Unsafe_2 (env_1231, x_3608)
  block L_3083 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3084 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3609 (env_1232:
              (lambdas_101, real64, real64, lambdas_102, real64, word32, real64) tuple,
            x_3610: t_9):
  {returns = Some (lambdas_112), raises = Some (exn)} =
L_3142 ()
  block L_3142 ()
    val class_9: lambdas_101 = #0 (env_1232)
    val zero_23: real64 = #1 (env_1232)
    val maxWord_22: real64 = #2 (env_1232)
    val setRoundingMode_8: lambdas_102 = #3 (env_1232)
    val one_16: real64 = #4 (env_1232)
    val zero_24: word32 = #5 (env_1232)
    val half_8: real64 = #6 (env_1232)
    val x_3612:
      (real64, word32, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple =
      (half_8,
       zero_24,
       one_16,
       setRoundingMode_8,
       x_3610,
       maxWord_22,
       zero_23,
       class_9)
    val x_3611: lambdas_112 = con xEnv_101 (x_3612)
    return (x_3611)
fun x_3613 (env_1233:
              (real64,
               word32,
               real64,
               lambdas_102,
               t_9,
               real64,
               real64,
               lambdas_101) tuple,
            x_3614: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3143 ()
  block L_3143 ()
    val half_9: real64 = #0 (env_1233)
    val zero_26: word32 = #1 (env_1233)
    val one_17: real64 = #2 (env_1233)
    val setRoundingMode_9: lambdas_102 = #3 (env_1233)
    val x_3615: t_9 = #4 (env_1233)
    val maxWord_23: real64 = #5 (env_1233)
    val zero_25: real64 = #6 (env_1233)
    val class_10: lambdas_101 = #7 (env_1233)
    case class_10 of
      classEnv_0 => L_3144
  block L_3144 (env_1234: (word64, word64, word64) tuple)
    call L_3145 (class_4 (env_1234, x_3614)) handle _ => raise
  block L_3145 (x_3616: float_class_0)
    case x_3616 of
      INF_0 => L_3147 | NAN_1 => L_3146 | _ => L_3148
  block L_3148 ()
    val x_3617: (real64, real64) tuple = (zero_25, x_3614)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3149
  block L_3149 (env_1235: unit)
    call L_3150 (<=_5 (env_1235, x_3617)) handle _ => raise
  block L_3150 (x_3618: bool)
    case x_3618 of
      true => L_3152 | false => L_3151
  block L_3151 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3153
  block L_3153 (env_1236: unit)
    call L_3154 (~_2 (env_1236, one_17)) handle _ => raise
  block L_3154 (x_3619: real64)
    val x_3620: (real64, real64) tuple = (x_3614, x_3619)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3155
  block L_3155 (env_1237: unit)
    call L_3156 (>_7 (env_1237, x_3620)) handle _ => raise
  block L_3156 (x_3621: bool)
    case x_3621 of
      true => L_3158 | false => L_3157
  block L_3157 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3158 ()
    case x_3615 of
      TO_NEGINF_0 => L_3162
    | TO_ZERO_0 => L_3161
    | TO_NEAREST_0 => L_3160
    | TO_POSINF_0 => L_3159
  block L_3159 ()
    return (zero_26)
  block L_3160 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3163
  block L_3163 (env_1238: unit)
    call L_3164 (~_2 (env_1238, half_9)) handle _ => raise
  block L_3164 (x_3622: real64)
    val x_3623: (real64, real64) tuple = (x_3614, x_3622)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3165
  block L_3165 (env_1239: unit)
    call L_3166 (<_8 (env_1239, x_3623)) handle _ => raise
  block L_3166 (x_3624: bool)
    case x_3624 of
      true => L_3168 | false => L_3167
  block L_3167 ()
    return (zero_26)
  block L_3168 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3161 ()
    return (zero_26)
  block L_3162 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3152 ()
    val x_3625: (real64, real64) tuple = (x_3614, maxWord_23)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3169
  block L_3169 (env_1240: unit)
    call L_3170 (<=_5 (env_1240, x_3625)) handle _ => raise
  block L_3170 (x_3626: bool)
    case x_3626 of
      true => L_3172 | false => L_3171
  block L_3171 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3172 ()
    case x_3615 of
      TO_POSINF_0 => L_3176
    | TO_NEAREST_0 => L_3175
    | TO_ZERO_0 => L_3174
    | TO_NEGINF_0 => L_3173
  block L_3173 ()
    val x_3627: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3614)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3177
  block L_3177 (env_1241: unit)
    call tail toWord32Unsafe_2 (env_1241, x_3627)
  block L_3174 ()
    val x_3628: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3614)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3178
  block L_3178 (env_1242: unit)
    call tail toWord32Unsafe_2 (env_1242, x_3628)
  block L_3175 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3179
  block L_3179 (env_1243: unit)
    call L_3180 (x_3544 (env_1243, x_1015 (*()*))) handle _ => raise
  block L_3180 (m'_3: t_9)
    case setRoundingMode_9 of
      setRoundingModeEnv_0 => L_3181
  block L_3181 (env_1244: (lambdas_226, word32) tuple)
    call L_3182 (setRoundingMode_3 (env_1244, x_1014 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3182 (x_3629: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3183
  block L_3183 (env_1245: unit)
    call L_3184 (round_2 (env_1245, x_3614)) handle _ => raise
  block L_3184 (x_3630: real64)
    case setRoundingMode_9 of
      setRoundingModeEnv_0 => L_3185
  block L_3185 (env_1246: (lambdas_226, word32) tuple)
    call L_3186 (setRoundingMode_3 (env_1246, m'_3)) handle _ => raise
  block L_3186 (x_3631: unit)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3187
  block L_3187 (env_1247: unit)
    call tail toWord32Unsafe_2 (env_1247, x_3630)
  block L_3176 ()
    val x_3632: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3614)
    case toWord32Unsafe_1 (*con toWord ... _249)*) of
      toWord32UnsafeEnv_1 => L_3188
  block L_3188 (env_1248: unit)
    call tail toWord32Unsafe_2 (env_1248, x_3632)
  block L_3146 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3147 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2267 (env_1249: (lambdas_117, lambdas_116, word32) tuple, x_3633: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3189 ()
  block L_3189 ()
    val <<_11: lambdas_117 = #0 (env_1249)
    val >>_10: lambdas_116 = #1 (env_1249)
    val maxWord'_25: word32 = #2 (env_1249)
    val x_3634: (word32, word32) tuple = (maxWord'_25, x_3633)
    case >>_10 of
      >>Env_1 => L_3190
  block L_3190 (env_1250: (word32, word32) tuple)
    call L_3191 (>>_11 (env_1250, x_3634)) handle _ => raise
  block L_3191 (x_3635: word32)
    val x_3636: (word32, word32) tuple = (x_3635, x_3633)
    case <<_11 of
      <<Env_1 => L_3192
  block L_3192 (env_1251: (word32, word32) tuple)
    call tail <<_8 (env_1251, x_3636)
fun x_3637 (env_1252:
              (lambdas_101, real64, real64, lambdas_102, real64, word16, real64) tuple,
            x_3638: t_9):
  {returns = Some (lambdas_118), raises = Some (exn)} =
L_3193 ()
  block L_3193 ()
    val class_11: lambdas_101 = #0 (env_1252)
    val zero_27: real64 = #1 (env_1252)
    val maxWord_24: real64 = #2 (env_1252)
    val setRoundingMode_10: lambdas_102 = #3 (env_1252)
    val one_18: real64 = #4 (env_1252)
    val maxWord'_26: word16 = #5 (env_1252)
    val half_10: real64 = #6 (env_1252)
    val x_3640:
      (real64, word16, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple =
      (half_10,
       maxWord'_26,
       one_18,
       setRoundingMode_10,
       x_3638,
       maxWord_24,
       zero_27,
       class_11)
    val x_3639: lambdas_118 = con xEnv_106 (x_3640)
    return (x_3639)
fun x_3641 (env_1253:
              (real64,
               word16,
               real64,
               lambdas_102,
               t_9,
               real64,
               real64,
               lambdas_101) tuple,
            x_3642: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3194 ()
  block L_3194 ()
    val half_11: real64 = #0 (env_1253)
    val maxWord'_27: word16 = #1 (env_1253)
    val one_19: real64 = #2 (env_1253)
    val setRoundingMode_11: lambdas_102 = #3 (env_1253)
    val x_3643: t_9 = #4 (env_1253)
    val maxWord_25: real64 = #5 (env_1253)
    val zero_28: real64 = #6 (env_1253)
    val class_12: lambdas_101 = #7 (env_1253)
    case class_12 of
      classEnv_0 => L_3195
  block L_3195 (env_1254: (word64, word64, word64) tuple)
    call L_3196 (class_4 (env_1254, x_3642)) handle _ => raise
  block L_3196 (x_3644: float_class_0)
    case x_3644 of
      INF_0 => L_3198 | NAN_1 => L_3197 | _ => L_3199
  block L_3199 ()
    val x_3645: (real64, real64) tuple = (zero_28, x_3642)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3200
  block L_3200 (env_1255: unit)
    call L_3201 (<=_5 (env_1255, x_3645)) handle _ => raise
  block L_3201 (x_3646: bool)
    case x_3646 of
      true => L_3203 | false => L_3202
  block L_3202 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3204
  block L_3204 (env_1256: unit)
    call L_3205 (~_2 (env_1256, one_19)) handle _ => raise
  block L_3205 (x_3647: real64)
    val x_3648: (real64, real64) tuple = (x_3642, x_3647)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3206
  block L_3206 (env_1257: unit)
    call L_3207 (>_7 (env_1257, x_3648)) handle _ => raise
  block L_3207 (x_3649: bool)
    case x_3649 of
      true => L_3209 | false => L_3208
  block L_3208 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3209 ()
    case x_3643 of
      TO_NEGINF_0 => L_3213
    | TO_ZERO_0 => L_3212
    | TO_NEAREST_0 => L_3211
    | TO_POSINF_0 => L_3210
  block L_3210 ()
    return (x_285 (*0x0:w16*))
  block L_3211 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3214
  block L_3214 (env_1258: unit)
    call L_3215 (~_2 (env_1258, half_11)) handle _ => raise
  block L_3215 (x_3650: real64)
    val x_3651: (real64, real64) tuple = (x_3642, x_3650)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3216
  block L_3216 (env_1259: unit)
    call L_3217 (<_8 (env_1259, x_3651)) handle _ => raise
  block L_3217 (x_3652: bool)
    case x_3652 of
      true => L_3219 | false => L_3218
  block L_3218 ()
    return (x_285 (*0x0:w16*))
  block L_3219 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3212 ()
    return (x_285 (*0x0:w16*))
  block L_3213 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3203 ()
    val x_3653: (real64, real64) tuple = (x_3642, maxWord_25)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3220
  block L_3220 (env_1260: unit)
    call L_3221 (<=_5 (env_1260, x_3653)) handle _ => raise
  block L_3221 (x_3654: bool)
    case x_3654 of
      true => L_3223 | false => L_3222
  block L_3222 ()
    val x_3655: (real64, real64) tuple = (maxWord_25, one_19)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3224
  block L_3224 (env_1261: unit)
    call L_3225 (+_3 (env_1261, x_3655)) handle _ => raise
  block L_3225 (x_3656: real64)
    val x_3657: (real64, real64) tuple = (x_3642, x_3656)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3226
  block L_3226 (env_1262: unit)
    call L_3227 (<_8 (env_1262, x_3657)) handle _ => raise
  block L_3227 (x_3658: bool)
    case x_3658 of
      true => L_3229 | false => L_3228
  block L_3228 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3229 ()
    case x_3643 of
      TO_NEGINF_0 => L_3233
    | TO_ZERO_0 => L_3232
    | TO_NEAREST_0 => L_3231
    | TO_POSINF_0 => L_3230
  block L_3230 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3231 ()
    val x_3659: (real64, real64) tuple = (x_3642, maxWord_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3234
  block L_3234 (env_1263: unit)
    call L_3235 (-_4 (env_1263, x_3659)) handle _ => raise
  block L_3235 (x_3660: real64)
    val x_3661: (real64, real64) tuple = (x_3660, half_11)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3236
  block L_3236 (env_1264: unit)
    call L_3237 (>=_8 (env_1264, x_3661)) handle _ => raise
  block L_3237 (x_3662: bool)
    case x_3662 of
      true => L_3239 | false => L_3238
  block L_3238 ()
    return (maxWord'_27)
  block L_3239 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3232 ()
    return (maxWord'_27)
  block L_3233 ()
    return (maxWord'_27)
  block L_3223 ()
    case x_3643 of
      TO_POSINF_0 => L_3243
    | TO_NEAREST_0 => L_3242
    | TO_ZERO_0 => L_3241
    | TO_NEGINF_0 => L_3240
  block L_3240 ()
    val x_3663: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3642)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3244
  block L_3244 (env_1265: unit)
    call tail toWord16Unsafe_2 (env_1265, x_3663)
  block L_3241 ()
    val x_3664: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3642)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3245
  block L_3245 (env_1266: unit)
    call tail toWord16Unsafe_2 (env_1266, x_3664)
  block L_3242 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3246
  block L_3246 (env_1267: unit)
    call L_3247 (x_3544 (env_1267, x_1013 (*()*))) handle _ => raise
  block L_3247 (m'_4: t_9)
    case setRoundingMode_11 of
      setRoundingModeEnv_0 => L_3248
  block L_3248 (env_1268: (lambdas_226, word32) tuple)
    call L_3249 (setRoundingMode_3 (env_1268, x_1012 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3249 (x_3665: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3250
  block L_3250 (env_1269: unit)
    call L_3251 (round_2 (env_1269, x_3642)) handle _ => raise
  block L_3251 (x_3666: real64)
    case setRoundingMode_11 of
      setRoundingModeEnv_0 => L_3252
  block L_3252 (env_1270: (lambdas_226, word32) tuple)
    call L_3253 (setRoundingMode_3 (env_1270, m'_4)) handle _ => raise
  block L_3253 (x_3667: unit)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3254
  block L_3254 (env_1271: unit)
    call tail toWord16Unsafe_2 (env_1271, x_3666)
  block L_3243 ()
    val x_3668: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3642)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3255
  block L_3255 (env_1272: unit)
    call tail toWord16Unsafe_2 (env_1272, x_3668)
  block L_3197 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3198 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3669 (env_1273:
              (lambdas_101, real64, real64, lambdas_102, real64, real64) tuple,
            x_3670: t_9):
  {returns = Some (lambdas_120), raises = Some (exn)} =
L_3256 ()
  block L_3256 ()
    val class_13: lambdas_101 = #0 (env_1273)
    val zero_29: real64 = #1 (env_1273)
    val maxWord_26: real64 = #2 (env_1273)
    val setRoundingMode_12: lambdas_102 = #3 (env_1273)
    val one_20: real64 = #4 (env_1273)
    val half_12: real64 = #5 (env_1273)
    val x_3672:
      (real64, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple =
      (half_12,
       one_20,
       setRoundingMode_12,
       x_3670,
       maxWord_26,
       zero_29,
       class_13)
    val x_3671: lambdas_120 = con xEnv_108 (x_3672)
    return (x_3671)
fun x_3673 (env_1274:
              (real64, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple,
            x_3674: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3257 ()
  block L_3257 ()
    val half_13: real64 = #0 (env_1274)
    val one_21: real64 = #1 (env_1274)
    val setRoundingMode_13: lambdas_102 = #2 (env_1274)
    val x_3675: t_9 = #3 (env_1274)
    val maxWord_27: real64 = #4 (env_1274)
    val zero_30: real64 = #5 (env_1274)
    val class_14: lambdas_101 = #6 (env_1274)
    case class_14 of
      classEnv_0 => L_3258
  block L_3258 (env_1275: (word64, word64, word64) tuple)
    call L_3259 (class_4 (env_1275, x_3674)) handle _ => raise
  block L_3259 (x_3676: float_class_0)
    case x_3676 of
      INF_0 => L_3261 | NAN_1 => L_3260 | _ => L_3262
  block L_3262 ()
    val x_3677: (real64, real64) tuple = (zero_30, x_3674)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3263
  block L_3263 (env_1276: unit)
    call L_3264 (<=_5 (env_1276, x_3677)) handle _ => raise
  block L_3264 (x_3678: bool)
    case x_3678 of
      true => L_3266 | false => L_3265
  block L_3265 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3267
  block L_3267 (env_1277: unit)
    call L_3268 (~_2 (env_1277, one_21)) handle _ => raise
  block L_3268 (x_3679: real64)
    val x_3680: (real64, real64) tuple = (x_3674, x_3679)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3269
  block L_3269 (env_1278: unit)
    call L_3270 (>_7 (env_1278, x_3680)) handle _ => raise
  block L_3270 (x_3681: bool)
    case x_3681 of
      true => L_3272 | false => L_3271
  block L_3271 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3272 ()
    case x_3675 of
      TO_NEGINF_0 => L_3276
    | TO_ZERO_0 => L_3275
    | TO_NEAREST_0 => L_3274
    | TO_POSINF_0 => L_3273
  block L_3273 ()
    return (x_285 (*0x0:w16*))
  block L_3274 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3277
  block L_3277 (env_1279: unit)
    call L_3278 (~_2 (env_1279, half_13)) handle _ => raise
  block L_3278 (x_3682: real64)
    val x_3683: (real64, real64) tuple = (x_3674, x_3682)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3279
  block L_3279 (env_1280: unit)
    call L_3280 (<_8 (env_1280, x_3683)) handle _ => raise
  block L_3280 (x_3684: bool)
    case x_3684 of
      true => L_3282 | false => L_3281
  block L_3281 ()
    return (x_285 (*0x0:w16*))
  block L_3282 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3275 ()
    return (x_285 (*0x0:w16*))
  block L_3276 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3266 ()
    val x_3685: (real64, real64) tuple = (x_3674, maxWord_27)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3283
  block L_3283 (env_1281: unit)
    call L_3284 (<=_5 (env_1281, x_3685)) handle _ => raise
  block L_3284 (x_3686: bool)
    case x_3686 of
      true => L_3286 | false => L_3285
  block L_3285 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3286 ()
    case x_3675 of
      TO_POSINF_0 => L_3290
    | TO_NEAREST_0 => L_3289
    | TO_ZERO_0 => L_3288
    | TO_NEGINF_0 => L_3287
  block L_3287 ()
    val x_3687: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3674)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3291
  block L_3291 (env_1282: unit)
    call tail toWord16Unsafe_2 (env_1282, x_3687)
  block L_3288 ()
    val x_3688: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3674)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3292
  block L_3292 (env_1283: unit)
    call tail toWord16Unsafe_2 (env_1283, x_3688)
  block L_3289 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3293
  block L_3293 (env_1284: unit)
    call L_3294 (x_3544 (env_1284, x_1010 (*()*))) handle _ => raise
  block L_3294 (m'_5: t_9)
    case setRoundingMode_13 of
      setRoundingModeEnv_0 => L_3295
  block L_3295 (env_1285: (lambdas_226, word32) tuple)
    call L_3296 (setRoundingMode_3 (env_1285, x_1009 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3296 (x_3689: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3297
  block L_3297 (env_1286: unit)
    call L_3298 (round_2 (env_1286, x_3674)) handle _ => raise
  block L_3298 (x_3690: real64)
    case setRoundingMode_13 of
      setRoundingModeEnv_0 => L_3299
  block L_3299 (env_1287: (lambdas_226, word32) tuple)
    call L_3300 (setRoundingMode_3 (env_1287, m'_5)) handle _ => raise
  block L_3300 (x_3691: unit)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3301
  block L_3301 (env_1288: unit)
    call tail toWord16Unsafe_2 (env_1288, x_3690)
  block L_3290 ()
    val x_3692: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3674)
    case toWord16Unsafe_1 (*con toWord ... _248)*) of
      toWord16UnsafeEnv_1 => L_3302
  block L_3302 (env_1289: unit)
    call tail toWord16Unsafe_2 (env_1289, x_3692)
  block L_3260 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3261 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2256 (env_1290: (lambdas_125, lambdas_124, word16) tuple, x_3693: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_3303 ()
  block L_3303 ()
    val <<_12: lambdas_125 = #0 (env_1290)
    val >>_12: lambdas_124 = #1 (env_1290)
    val maxWord'_28: word16 = #2 (env_1290)
    val x_3694: (word16, word32) tuple = (maxWord'_28, x_3693)
    case >>_12 of
      >>Env_2 => L_3304
  block L_3304 (env_1291: word32)
    call L_3305 (>>_13 (env_1291, x_3694)) handle _ => raise
  block L_3305 (x_3695: word16)
    val x_3696: (word16, word32) tuple = (x_3695, x_3693)
    case <<_12 of
      <<Env_2 => L_3306
  block L_3306 (env_1292: word32)
    call tail <<_13 (env_1292, x_3696)
fun x_3697 (env_1293:
              (lambdas_101, real64, real64, lambdas_102, real64, word8, real64) tuple,
            x_3698: t_9):
  {returns = Some (lambdas_126), raises = Some (exn)} =
L_3307 ()
  block L_3307 ()
    val class_15: lambdas_101 = #0 (env_1293)
    val zero_31: real64 = #1 (env_1293)
    val maxWord_28: real64 = #2 (env_1293)
    val setRoundingMode_14: lambdas_102 = #3 (env_1293)
    val one_22: real64 = #4 (env_1293)
    val maxWord'_29: word8 = #5 (env_1293)
    val half_14: real64 = #6 (env_1293)
    val x_3700:
      (real64, word8, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple =
      (half_14,
       maxWord'_29,
       one_22,
       setRoundingMode_14,
       x_3698,
       maxWord_28,
       zero_31,
       class_15)
    val x_3699: lambdas_126 = con xEnv_113 (x_3700)
    return (x_3699)
fun x_3701 (env_1294:
              (real64,
               word8,
               real64,
               lambdas_102,
               t_9,
               real64,
               real64,
               lambdas_101) tuple,
            x_3702: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3308 ()
  block L_3308 ()
    val half_15: real64 = #0 (env_1294)
    val maxWord'_30: word8 = #1 (env_1294)
    val one_23: real64 = #2 (env_1294)
    val setRoundingMode_15: lambdas_102 = #3 (env_1294)
    val x_3703: t_9 = #4 (env_1294)
    val maxWord_29: real64 = #5 (env_1294)
    val zero_32: real64 = #6 (env_1294)
    val class_16: lambdas_101 = #7 (env_1294)
    case class_16 of
      classEnv_0 => L_3309
  block L_3309 (env_1295: (word64, word64, word64) tuple)
    call L_3310 (class_4 (env_1295, x_3702)) handle _ => raise
  block L_3310 (x_3704: float_class_0)
    case x_3704 of
      INF_0 => L_3312 | NAN_1 => L_3311 | _ => L_3313
  block L_3313 ()
    val x_3705: (real64, real64) tuple = (zero_32, x_3702)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3314
  block L_3314 (env_1296: unit)
    call L_3315 (<=_5 (env_1296, x_3705)) handle _ => raise
  block L_3315 (x_3706: bool)
    case x_3706 of
      true => L_3317 | false => L_3316
  block L_3316 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3318
  block L_3318 (env_1297: unit)
    call L_3319 (~_2 (env_1297, one_23)) handle _ => raise
  block L_3319 (x_3707: real64)
    val x_3708: (real64, real64) tuple = (x_3702, x_3707)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3320
  block L_3320 (env_1298: unit)
    call L_3321 (>_7 (env_1298, x_3708)) handle _ => raise
  block L_3321 (x_3709: bool)
    case x_3709 of
      true => L_3323 | false => L_3322
  block L_3322 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3323 ()
    case x_3703 of
      TO_NEGINF_0 => L_3327
    | TO_ZERO_0 => L_3326
    | TO_NEAREST_0 => L_3325
    | TO_POSINF_0 => L_3324
  block L_3324 ()
    return (x_271 (*0x0:w8*))
  block L_3325 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3328
  block L_3328 (env_1299: unit)
    call L_3329 (~_2 (env_1299, half_15)) handle _ => raise
  block L_3329 (x_3710: real64)
    val x_3711: (real64, real64) tuple = (x_3702, x_3710)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3330
  block L_3330 (env_1300: unit)
    call L_3331 (<_8 (env_1300, x_3711)) handle _ => raise
  block L_3331 (x_3712: bool)
    case x_3712 of
      true => L_3333 | false => L_3332
  block L_3332 ()
    return (x_271 (*0x0:w8*))
  block L_3333 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3326 ()
    return (x_271 (*0x0:w8*))
  block L_3327 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3317 ()
    val x_3713: (real64, real64) tuple = (x_3702, maxWord_29)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3334
  block L_3334 (env_1301: unit)
    call L_3335 (<=_5 (env_1301, x_3713)) handle _ => raise
  block L_3335 (x_3714: bool)
    case x_3714 of
      true => L_3337 | false => L_3336
  block L_3336 ()
    val x_3715: (real64, real64) tuple = (maxWord_29, one_23)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3338
  block L_3338 (env_1302: unit)
    call L_3339 (+_3 (env_1302, x_3715)) handle _ => raise
  block L_3339 (x_3716: real64)
    val x_3717: (real64, real64) tuple = (x_3702, x_3716)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3340
  block L_3340 (env_1303: unit)
    call L_3341 (<_8 (env_1303, x_3717)) handle _ => raise
  block L_3341 (x_3718: bool)
    case x_3718 of
      true => L_3343 | false => L_3342
  block L_3342 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3343 ()
    case x_3703 of
      TO_NEGINF_0 => L_3347
    | TO_ZERO_0 => L_3346
    | TO_NEAREST_0 => L_3345
    | TO_POSINF_0 => L_3344
  block L_3344 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3345 ()
    val x_3719: (real64, real64) tuple = (x_3702, maxWord_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3348
  block L_3348 (env_1304: unit)
    call L_3349 (-_4 (env_1304, x_3719)) handle _ => raise
  block L_3349 (x_3720: real64)
    val x_3721: (real64, real64) tuple = (x_3720, half_15)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3350
  block L_3350 (env_1305: unit)
    call L_3351 (>=_8 (env_1305, x_3721)) handle _ => raise
  block L_3351 (x_3722: bool)
    case x_3722 of
      true => L_3353 | false => L_3352
  block L_3352 ()
    return (maxWord'_30)
  block L_3353 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3346 ()
    return (maxWord'_30)
  block L_3347 ()
    return (maxWord'_30)
  block L_3337 ()
    case x_3703 of
      TO_POSINF_0 => L_3357
    | TO_NEAREST_0 => L_3356
    | TO_ZERO_0 => L_3355
    | TO_NEGINF_0 => L_3354
  block L_3354 ()
    val x_3723: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3702)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3358
  block L_3358 (env_1306: unit)
    call tail toWord8Unsafe_2 (env_1306, x_3723)
  block L_3355 ()
    val x_3724: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3702)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3359
  block L_3359 (env_1307: unit)
    call tail toWord8Unsafe_2 (env_1307, x_3724)
  block L_3356 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3360
  block L_3360 (env_1308: unit)
    call L_3361 (x_3544 (env_1308, x_1008 (*()*))) handle _ => raise
  block L_3361 (m'_6: t_9)
    case setRoundingMode_15 of
      setRoundingModeEnv_0 => L_3362
  block L_3362 (env_1309: (lambdas_226, word32) tuple)
    call L_3363 (setRoundingMode_3 (env_1309, x_1007 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3363 (x_3725: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3364
  block L_3364 (env_1310: unit)
    call L_3365 (round_2 (env_1310, x_3702)) handle _ => raise
  block L_3365 (x_3726: real64)
    case setRoundingMode_15 of
      setRoundingModeEnv_0 => L_3366
  block L_3366 (env_1311: (lambdas_226, word32) tuple)
    call L_3367 (setRoundingMode_3 (env_1311, m'_6)) handle _ => raise
  block L_3367 (x_3727: unit)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3368
  block L_3368 (env_1312: unit)
    call tail toWord8Unsafe_2 (env_1312, x_3726)
  block L_3357 ()
    val x_3728: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3702)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3369
  block L_3369 (env_1313: unit)
    call tail toWord8Unsafe_2 (env_1313, x_3728)
  block L_3311 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3312 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_3729 (env_1314:
              (lambdas_101, real64, real64, lambdas_102, real64, real64) tuple,
            x_3730: t_9):
  {returns = Some (lambdas_128), raises = Some (exn)} =
L_3370 ()
  block L_3370 ()
    val class_17: lambdas_101 = #0 (env_1314)
    val zero_33: real64 = #1 (env_1314)
    val maxWord_30: real64 = #2 (env_1314)
    val setRoundingMode_16: lambdas_102 = #3 (env_1314)
    val one_24: real64 = #4 (env_1314)
    val half_16: real64 = #5 (env_1314)
    val x_3732:
      (real64, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple =
      (half_16,
       one_24,
       setRoundingMode_16,
       x_3730,
       maxWord_30,
       zero_33,
       class_17)
    val x_3731: lambdas_128 = con xEnv_115 (x_3732)
    return (x_3731)
fun x_3733 (env_1315:
              (real64, real64, lambdas_102, t_9, real64, real64, lambdas_101) tuple,
            x_3734: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3371 ()
  block L_3371 ()
    val half_17: real64 = #0 (env_1315)
    val one_25: real64 = #1 (env_1315)
    val setRoundingMode_17: lambdas_102 = #2 (env_1315)
    val x_3735: t_9 = #3 (env_1315)
    val maxWord_31: real64 = #4 (env_1315)
    val zero_34: real64 = #5 (env_1315)
    val class_18: lambdas_101 = #6 (env_1315)
    case class_18 of
      classEnv_0 => L_3372
  block L_3372 (env_1316: (word64, word64, word64) tuple)
    call L_3373 (class_4 (env_1316, x_3734)) handle _ => raise
  block L_3373 (x_3736: float_class_0)
    case x_3736 of
      INF_0 => L_3375 | NAN_1 => L_3374 | _ => L_3376
  block L_3376 ()
    val x_3737: (real64, real64) tuple = (zero_34, x_3734)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3377
  block L_3377 (env_1317: unit)
    call L_3378 (<=_5 (env_1317, x_3737)) handle _ => raise
  block L_3378 (x_3738: bool)
    case x_3738 of
      true => L_3380 | false => L_3379
  block L_3379 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3381
  block L_3381 (env_1318: unit)
    call L_3382 (~_2 (env_1318, one_25)) handle _ => raise
  block L_3382 (x_3739: real64)
    val x_3740: (real64, real64) tuple = (x_3734, x_3739)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_3383
  block L_3383 (env_1319: unit)
    call L_3384 (>_7 (env_1319, x_3740)) handle _ => raise
  block L_3384 (x_3741: bool)
    case x_3741 of
      true => L_3386 | false => L_3385
  block L_3385 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3386 ()
    case x_3735 of
      TO_NEGINF_0 => L_3390
    | TO_ZERO_0 => L_3389
    | TO_NEAREST_0 => L_3388
    | TO_POSINF_0 => L_3387
  block L_3387 ()
    return (x_271 (*0x0:w8*))
  block L_3388 ()
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3391
  block L_3391 (env_1320: unit)
    call L_3392 (~_2 (env_1320, half_17)) handle _ => raise
  block L_3392 (x_3742: real64)
    val x_3743: (real64, real64) tuple = (x_3734, x_3742)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3393
  block L_3393 (env_1321: unit)
    call L_3394 (<_8 (env_1321, x_3743)) handle _ => raise
  block L_3394 (x_3744: bool)
    case x_3744 of
      true => L_3396 | false => L_3395
  block L_3395 ()
    return (x_271 (*0x0:w8*))
  block L_3396 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3389 ()
    return (x_271 (*0x0:w8*))
  block L_3390 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3380 ()
    val x_3745: (real64, real64) tuple = (x_3734, maxWord_31)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3397
  block L_3397 (env_1322: unit)
    call L_3398 (<=_5 (env_1322, x_3745)) handle _ => raise
  block L_3398 (x_3746: bool)
    case x_3746 of
      true => L_3400 | false => L_3399
  block L_3399 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3400 ()
    case x_3735 of
      TO_POSINF_0 => L_3404
    | TO_NEAREST_0 => L_3403
    | TO_ZERO_0 => L_3402
    | TO_NEGINF_0 => L_3401
  block L_3401 ()
    val x_3747: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3734)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3405
  block L_3405 (env_1323: unit)
    call tail toWord8Unsafe_2 (env_1323, x_3747)
  block L_3402 ()
    val x_3748: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3734)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3406
  block L_3406 (env_1324: unit)
    call tail toWord8Unsafe_2 (env_1324, x_3748)
  block L_3403 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3407
  block L_3407 (env_1325: unit)
    call L_3408 (x_3544 (env_1325, x_1005 (*()*))) handle _ => raise
  block L_3408 (m'_7: t_9)
    case setRoundingMode_17 of
      setRoundingModeEnv_0 => L_3409
  block L_3409 (env_1326: (lambdas_226, word32) tuple)
    call L_3410 (setRoundingMode_3 (env_1326, x_1004 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3410 (x_3749: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3411
  block L_3411 (env_1327: unit)
    call L_3412 (round_2 (env_1327, x_3734)) handle _ => raise
  block L_3412 (x_3750: real64)
    case setRoundingMode_17 of
      setRoundingModeEnv_0 => L_3413
  block L_3413 (env_1328: (lambdas_226, word32) tuple)
    call L_3414 (setRoundingMode_3 (env_1328, m'_7)) handle _ => raise
  block L_3414 (x_3751: unit)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3415
  block L_3415 (env_1329: unit)
    call tail toWord8Unsafe_2 (env_1329, x_3750)
  block L_3404 ()
    val x_3752: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3734)
    case toWord8Unsafe_1 (*con toWord ... _247)*) of
      toWord8UnsafeEnv_1 => L_3416
  block L_3416 (env_1330: unit)
    call tail toWord8Unsafe_2 (env_1330, x_3752)
  block L_3374 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3375 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2245 (env_1331: (lambdas_133, lambdas_132, word8) tuple, x_3753: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3417 ()
  block L_3417 ()
    val <<_14: lambdas_133 = #0 (env_1331)
    val >>_14: lambdas_132 = #1 (env_1331)
    val maxWord'_31: word8 = #2 (env_1331)
    val x_3754: (word8, word32) tuple = (maxWord'_31, x_3753)
    case >>_14 of
      >>Env_3 => L_3418
  block L_3418 (env_1332: word32)
    call L_3419 (>>_15 (env_1332, x_3754)) handle _ => raise
  block L_3419 (x_3755: word8)
    val x_3756: (word8, word32) tuple = (x_3755, x_3753)
    case <<_14 of
      <<Env_3 => L_3420
  block L_3420 (env_1333: word32)
    call tail <<_15 (env_1333, x_3756)
fun x_3757 (env_1334:
              (real64, real64, lambdas_102, real64, word64, real64, word64) tuple,
            x_3758: t_9):
  {returns = Some (lambdas_134), raises = Some (exn)} =
L_3421 ()
  block L_3421 ()
    val minInt_16: real64 = #0 (env_1334)
    val maxInt_16: real64 = #1 (env_1334)
    val setRoundingMode_18: lambdas_102 = #2 (env_1334)
    val one_26: real64 = #3 (env_1334)
    val maxInt'_20: word64 = #4 (env_1334)
    val half_18: real64 = #5 (env_1334)
    val minInt'_6: word64 = #6 (env_1334)
    val x_3760:
      (word64, real64, word64, real64, lambdas_102, t_9, real64, real64) tuple =
      (minInt'_6,
       half_18,
       maxInt'_20,
       one_26,
       setRoundingMode_18,
       x_3758,
       maxInt_16,
       minInt_16)
    val x_3759: lambdas_134 = con xEnv_120 (x_3760)
    return (x_3759)
fun x_3761 (env_1335:
              (word64, real64, word64, real64, lambdas_102, t_9, real64, real64) tuple,
            x_3762: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_3422 ()
  block L_3422 ()
    val minInt'_7: word64 = #0 (env_1335)
    val half_19: real64 = #1 (env_1335)
    val maxInt'_21: word64 = #2 (env_1335)
    val one_27: real64 = #3 (env_1335)
    val setRoundingMode_19: lambdas_102 = #4 (env_1335)
    val x_3764: t_9 = #5 (env_1335)
    val maxInt_17: real64 = #6 (env_1335)
    val minInt_17: real64 = #7 (env_1335)
    val x_3763: (real64, real64) tuple = (minInt_17, x_3762)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3423
  block L_3423 (env_1336: unit)
    call L_3424 (<=_5 (env_1336, x_3763)) handle _ => raise
  block L_3424 (x_3765: bool)
    case x_3765 of
      true => L_3426 | false => L_3425
  block L_3425 ()
    val x_3766: (real64, real64) tuple = (x_3762, minInt_17)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3427
  block L_3427 (env_1337: unit)
    call L_3428 (<_8 (env_1337, x_3766)) handle _ => raise
  block L_3428 (x_3767: bool)
    case x_3767 of
      true => L_3430 | false => L_3429
  block L_3429 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3430 ()
    val x_3768: (real64, real64) tuple = (minInt_17, one_27)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3431
  block L_3431 (env_1338: unit)
    call L_3432 (-_4 (env_1338, x_3768)) handle _ => raise
  block L_3432 (x_3769: real64)
    val x_3770: (real64, real64) tuple = (x_3769, x_3762)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3433
  block L_3433 (env_1339: unit)
    call L_3434 (<_8 (env_1339, x_3770)) handle _ => raise
  block L_3434 (x_3771: bool)
    case x_3771 of
      true => L_3436 | false => L_3435
  block L_3435 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3436 ()
    case x_3764 of
      TO_NEGINF_0 => L_3440
    | TO_ZERO_0 => L_3439
    | TO_NEAREST_0 => L_3438
    | TO_POSINF_0 => L_3437
  block L_3437 ()
    return (minInt'_7)
  block L_3438 ()
    val x_3772: (real64, real64) tuple = (x_3762, minInt_17)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3441
  block L_3441 (env_1340: unit)
    call L_3442 (-_4 (env_1340, x_3772)) handle _ => raise
  block L_3442 (x_3773: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3443
  block L_3443 (env_1341: unit)
    call L_3444 (~_2 (env_1341, half_19)) handle _ => raise
  block L_3444 (x_3774: real64)
    val x_3775: (real64, real64) tuple = (x_3773, x_3774)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3445
  block L_3445 (env_1342: unit)
    call L_3446 (<_8 (env_1342, x_3775)) handle _ => raise
  block L_3446 (x_3776: bool)
    case x_3776 of
      true => L_3448 | false => L_3447
  block L_3447 ()
    return (minInt'_7)
  block L_3448 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3439 ()
    return (minInt'_7)
  block L_3440 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3426 ()
    val x_3777: (real64, real64) tuple = (x_3762, maxInt_17)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3449
  block L_3449 (env_1343: unit)
    call L_3450 (<=_5 (env_1343, x_3777)) handle _ => raise
  block L_3450 (x_3778: bool)
    case x_3778 of
      true => L_3452 | false => L_3451
  block L_3451 ()
    val x_3779: (real64, real64) tuple = (maxInt_17, one_27)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3453
  block L_3453 (env_1344: unit)
    call L_3454 (+_3 (env_1344, x_3779)) handle _ => raise
  block L_3454 (x_3780: real64)
    val x_3781: (real64, real64) tuple = (x_3762, x_3780)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3455
  block L_3455 (env_1345: unit)
    call L_3456 (<_8 (env_1345, x_3781)) handle _ => raise
  block L_3456 (x_3782: bool)
    case x_3782 of
      true => L_3458 | false => L_3457
  block L_3457 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3458 ()
    case x_3764 of
      TO_NEGINF_0 => L_3462
    | TO_ZERO_0 => L_3461
    | TO_NEAREST_0 => L_3460
    | TO_POSINF_0 => L_3459
  block L_3459 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3460 ()
    val x_3783: (real64, real64) tuple = (x_3762, maxInt_17)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3463
  block L_3463 (env_1346: unit)
    call L_3464 (-_4 (env_1346, x_3783)) handle _ => raise
  block L_3464 (x_3784: real64)
    val x_3785: (real64, real64) tuple = (x_3784, half_19)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3465
  block L_3465 (env_1347: unit)
    call L_3466 (>=_8 (env_1347, x_3785)) handle _ => raise
  block L_3466 (x_3786: bool)
    case x_3786 of
      true => L_3468 | false => L_3467
  block L_3467 ()
    return (maxInt'_21)
  block L_3468 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3461 ()
    return (maxInt'_21)
  block L_3462 ()
    return (maxInt'_21)
  block L_3452 ()
    case x_3764 of
      TO_POSINF_0 => L_3472
    | TO_NEAREST_0 => L_3471
    | TO_ZERO_0 => L_3470
    | TO_NEGINF_0 => L_3469
  block L_3469 ()
    val x_3787: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3762)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3473
  block L_3473 (env_1348: unit)
    call tail toInt64Unsafe_2 (env_1348, x_3787)
  block L_3470 ()
    val x_3788: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3762)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3474
  block L_3474 (env_1349: unit)
    call tail toInt64Unsafe_2 (env_1349, x_3788)
  block L_3471 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3475
  block L_3475 (env_1350: unit)
    call L_3476 (x_3544 (env_1350, x_1003 (*()*))) handle _ => raise
  block L_3476 (m'_8: t_9)
    case setRoundingMode_19 of
      setRoundingModeEnv_0 => L_3477
  block L_3477 (env_1351: (lambdas_226, word32) tuple)
    call L_3478 (setRoundingMode_3 (env_1351, x_1002 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3478 (x_3789: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3479
  block L_3479 (env_1352: unit)
    call L_3480 (round_2 (env_1352, x_3762)) handle _ => raise
  block L_3480 (x_3790: real64)
    case setRoundingMode_19 of
      setRoundingModeEnv_0 => L_3481
  block L_3481 (env_1353: (lambdas_226, word32) tuple)
    call L_3482 (setRoundingMode_3 (env_1353, m'_8)) handle _ => raise
  block L_3482 (x_3791: unit)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3483
  block L_3483 (env_1354: unit)
    call tail toInt64Unsafe_2 (env_1354, x_3790)
  block L_3472 ()
    val x_3792: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3762)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3484
  block L_3484 (env_1355: unit)
    call tail toInt64Unsafe_2 (env_1355, x_3792)
fun x_3793 (env_1356: (real64, real64, lambdas_102) tuple, x_3794: t_9):
  {returns = Some (lambdas_136), raises = Some (exn)} =
L_3485 ()
  block L_3485 ()
    val minInt_18: real64 = #0 (env_1356)
    val maxInt_18: real64 = #1 (env_1356)
    val setRoundingMode_20: lambdas_102 = #2 (env_1356)
    val x_3796: (lambdas_102, t_9, real64, real64) tuple =
      (setRoundingMode_20, x_3794, maxInt_18, minInt_18)
    val x_3795: lambdas_136 = con xEnv_122 (x_3796)
    return (x_3795)
fun x_3797 (env_1357: (lambdas_102, t_9, real64, real64) tuple, x_3798: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_3486 ()
  block L_3486 ()
    val setRoundingMode_21: lambdas_102 = #0 (env_1357)
    val x_3800: t_9 = #1 (env_1357)
    val maxInt_19: real64 = #2 (env_1357)
    val minInt_19: real64 = #3 (env_1357)
    val x_3799: (real64, real64) tuple = (minInt_19, x_3798)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3487
  block L_3487 (env_1358: unit)
    call L_3488 (<=_5 (env_1358, x_3799)) handle _ => raise
  block L_3488 (x_3801: bool)
    case x_3801 of
      true => L_3490 | false => L_3489
  block L_3489 ()
    val x_3802: (real64, real64) tuple = (x_3798, minInt_19)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3491
  block L_3491 (env_1359: unit)
    call L_3492 (<_8 (env_1359, x_3802)) handle _ => raise
  block L_3492 (x_3803: bool)
    case x_3803 of
      true => L_3494 | false => L_3493
  block L_3493 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3494 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3490 ()
    val x_3804: (real64, real64) tuple = (x_3798, maxInt_19)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3495
  block L_3495 (env_1360: unit)
    call L_3496 (<=_5 (env_1360, x_3804)) handle _ => raise
  block L_3496 (x_3805: bool)
    case x_3805 of
      true => L_3498 | false => L_3497
  block L_3497 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3498 ()
    case x_3800 of
      TO_POSINF_0 => L_3502
    | TO_NEAREST_0 => L_3501
    | TO_ZERO_0 => L_3500
    | TO_NEGINF_0 => L_3499
  block L_3499 ()
    val x_3806: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3798)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3503
  block L_3503 (env_1361: unit)
    call tail toInt64Unsafe_2 (env_1361, x_3806)
  block L_3500 ()
    val x_3807: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3798)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3504
  block L_3504 (env_1362: unit)
    call tail toInt64Unsafe_2 (env_1362, x_3807)
  block L_3501 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3505
  block L_3505 (env_1363: unit)
    call L_3506 (x_3544 (env_1363, x_1000 (*()*))) handle _ => raise
  block L_3506 (m'_9: t_9)
    case setRoundingMode_21 of
      setRoundingModeEnv_0 => L_3507
  block L_3507 (env_1364: (lambdas_226, word32) tuple)
    call L_3508 (setRoundingMode_3 (env_1364, x_999 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3508 (x_3808: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3509
  block L_3509 (env_1365: unit)
    call L_3510 (round_2 (env_1365, x_3798)) handle _ => raise
  block L_3510 (x_3809: real64)
    case setRoundingMode_21 of
      setRoundingModeEnv_0 => L_3511
  block L_3511 (env_1366: (lambdas_226, word32) tuple)
    call L_3512 (setRoundingMode_3 (env_1366, m'_9)) handle _ => raise
  block L_3512 (x_3810: unit)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3513
  block L_3513 (env_1367: unit)
    call tail toInt64Unsafe_2 (env_1367, x_3809)
  block L_3502 ()
    val x_3811: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3798)
    case toInt64Unsafe_1 (*con toInt6 ... _245)*) of
      toInt64UnsafeEnv_1 => L_3514
  block L_3514 (env_1368: unit)
    call tail toInt64Unsafe_2 (env_1368, x_3811)
fun x_2232 (env_1369: (lambdas_141, lambdas_140, word64) tuple, x_3812: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3515 ()
  block L_3515 ()
    val <<_16: lambdas_141 = #0 (env_1369)
    val >>_16: lambdas_140 = #1 (env_1369)
    val maxInt'_22: word64 = #2 (env_1369)
    val x_3813: (word64, word32) tuple = (maxInt'_22, x_3812)
    case >>_16 of
      >>Env_4 => L_3516
  block L_3516 (env_1370: (word32, word64) tuple)
    call L_3517 (>>_17 (env_1370, x_3813)) handle _ => raise
  block L_3517 (x_3814: word64)
    val x_3815: (word64, word32) tuple = (x_3814, x_3812)
    case <<_16 of
      <<Env_4 => L_3518
  block L_3518 (env_1371: (word32, word64) tuple)
    call tail <<_17 (env_1371, x_3815)
fun x_3816 (env_1372:
              (real64, real64, lambdas_102, real64, word32, real64, word32) tuple,
            x_3817: t_9):
  {returns = Some (lambdas_142), raises = Some (exn)} =
L_3519 ()
  block L_3519 ()
    val minInt_20: real64 = #0 (env_1372)
    val maxInt_20: real64 = #1 (env_1372)
    val setRoundingMode_22: lambdas_102 = #2 (env_1372)
    val one_28: real64 = #3 (env_1372)
    val maxInt'_23: word32 = #4 (env_1372)
    val half_20: real64 = #5 (env_1372)
    val minInt'_8: word32 = #6 (env_1372)
    val x_3819:
      (word32, real64, word32, real64, lambdas_102, t_9, real64, real64) tuple =
      (minInt'_8,
       half_20,
       maxInt'_23,
       one_28,
       setRoundingMode_22,
       x_3817,
       maxInt_20,
       minInt_20)
    val x_3818: lambdas_142 = con xEnv_127 (x_3819)
    return (x_3818)
fun x_3820 (env_1373:
              (word32, real64, word32, real64, lambdas_102, t_9, real64, real64) tuple,
            x_3821: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3520 ()
  block L_3520 ()
    val minInt'_9: word32 = #0 (env_1373)
    val half_21: real64 = #1 (env_1373)
    val maxInt'_24: word32 = #2 (env_1373)
    val one_29: real64 = #3 (env_1373)
    val setRoundingMode_23: lambdas_102 = #4 (env_1373)
    val x_3823: t_9 = #5 (env_1373)
    val maxInt_21: real64 = #6 (env_1373)
    val minInt_21: real64 = #7 (env_1373)
    val x_3822: (real64, real64) tuple = (minInt_21, x_3821)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3521
  block L_3521 (env_1374: unit)
    call L_3522 (<=_5 (env_1374, x_3822)) handle _ => raise
  block L_3522 (x_3824: bool)
    case x_3824 of
      true => L_3524 | false => L_3523
  block L_3523 ()
    val x_3825: (real64, real64) tuple = (x_3821, minInt_21)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3525
  block L_3525 (env_1375: unit)
    call L_3526 (<_8 (env_1375, x_3825)) handle _ => raise
  block L_3526 (x_3826: bool)
    case x_3826 of
      true => L_3528 | false => L_3527
  block L_3527 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3528 ()
    val x_3827: (real64, real64) tuple = (minInt_21, one_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3529
  block L_3529 (env_1376: unit)
    call L_3530 (-_4 (env_1376, x_3827)) handle _ => raise
  block L_3530 (x_3828: real64)
    val x_3829: (real64, real64) tuple = (x_3828, x_3821)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3531
  block L_3531 (env_1377: unit)
    call L_3532 (<_8 (env_1377, x_3829)) handle _ => raise
  block L_3532 (x_3830: bool)
    case x_3830 of
      true => L_3534 | false => L_3533
  block L_3533 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3534 ()
    case x_3823 of
      TO_NEGINF_0 => L_3538
    | TO_ZERO_0 => L_3537
    | TO_NEAREST_0 => L_3536
    | TO_POSINF_0 => L_3535
  block L_3535 ()
    return (minInt'_9)
  block L_3536 ()
    val x_3831: (real64, real64) tuple = (x_3821, minInt_21)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3539
  block L_3539 (env_1378: unit)
    call L_3540 (-_4 (env_1378, x_3831)) handle _ => raise
  block L_3540 (x_3832: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3541
  block L_3541 (env_1379: unit)
    call L_3542 (~_2 (env_1379, half_21)) handle _ => raise
  block L_3542 (x_3833: real64)
    val x_3834: (real64, real64) tuple = (x_3832, x_3833)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3543
  block L_3543 (env_1380: unit)
    call L_3544 (<_8 (env_1380, x_3834)) handle _ => raise
  block L_3544 (x_3835: bool)
    case x_3835 of
      true => L_3546 | false => L_3545
  block L_3545 ()
    return (minInt'_9)
  block L_3546 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3537 ()
    return (minInt'_9)
  block L_3538 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3524 ()
    val x_3836: (real64, real64) tuple = (x_3821, maxInt_21)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3547
  block L_3547 (env_1381: unit)
    call L_3548 (<=_5 (env_1381, x_3836)) handle _ => raise
  block L_3548 (x_3837: bool)
    case x_3837 of
      true => L_3550 | false => L_3549
  block L_3549 ()
    val x_3838: (real64, real64) tuple = (maxInt_21, one_29)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3551
  block L_3551 (env_1382: unit)
    call L_3552 (+_3 (env_1382, x_3838)) handle _ => raise
  block L_3552 (x_3839: real64)
    val x_3840: (real64, real64) tuple = (x_3821, x_3839)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3553
  block L_3553 (env_1383: unit)
    call L_3554 (<_8 (env_1383, x_3840)) handle _ => raise
  block L_3554 (x_3841: bool)
    case x_3841 of
      true => L_3556 | false => L_3555
  block L_3555 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3556 ()
    case x_3823 of
      TO_NEGINF_0 => L_3560
    | TO_ZERO_0 => L_3559
    | TO_NEAREST_0 => L_3558
    | TO_POSINF_0 => L_3557
  block L_3557 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3558 ()
    val x_3842: (real64, real64) tuple = (x_3821, maxInt_21)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3561
  block L_3561 (env_1384: unit)
    call L_3562 (-_4 (env_1384, x_3842)) handle _ => raise
  block L_3562 (x_3843: real64)
    val x_3844: (real64, real64) tuple = (x_3843, half_21)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3563
  block L_3563 (env_1385: unit)
    call L_3564 (>=_8 (env_1385, x_3844)) handle _ => raise
  block L_3564 (x_3845: bool)
    case x_3845 of
      true => L_3566 | false => L_3565
  block L_3565 ()
    return (maxInt'_24)
  block L_3566 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3559 ()
    return (maxInt'_24)
  block L_3560 ()
    return (maxInt'_24)
  block L_3550 ()
    case x_3823 of
      TO_POSINF_0 => L_3570
    | TO_NEAREST_0 => L_3569
    | TO_ZERO_0 => L_3568
    | TO_NEGINF_0 => L_3567
  block L_3567 ()
    val x_3846: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3821)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3571
  block L_3571 (env_1386: unit)
    call tail toInt32Unsafe_2 (env_1386, x_3846)
  block L_3568 ()
    val x_3847: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3821)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3572
  block L_3572 (env_1387: unit)
    call tail toInt32Unsafe_2 (env_1387, x_3847)
  block L_3569 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3573
  block L_3573 (env_1388: unit)
    call L_3574 (x_3544 (env_1388, x_997 (*()*))) handle _ => raise
  block L_3574 (m'_10: t_9)
    case setRoundingMode_23 of
      setRoundingModeEnv_0 => L_3575
  block L_3575 (env_1389: (lambdas_226, word32) tuple)
    call L_3576 (setRoundingMode_3 (env_1389, x_996 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3576 (x_3848: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3577
  block L_3577 (env_1390: unit)
    call L_3578 (round_2 (env_1390, x_3821)) handle _ => raise
  block L_3578 (x_3849: real64)
    case setRoundingMode_23 of
      setRoundingModeEnv_0 => L_3579
  block L_3579 (env_1391: (lambdas_226, word32) tuple)
    call L_3580 (setRoundingMode_3 (env_1391, m'_10)) handle _ => raise
  block L_3580 (x_3850: unit)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3581
  block L_3581 (env_1392: unit)
    call tail toInt32Unsafe_2 (env_1392, x_3849)
  block L_3570 ()
    val x_3851: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3821)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3582
  block L_3582 (env_1393: unit)
    call tail toInt32Unsafe_2 (env_1393, x_3851)
fun x_3852 (env_1394: (real64, real64, lambdas_102) tuple, x_3853: t_9):
  {returns = Some (lambdas_144), raises = Some (exn)} =
L_3583 ()
  block L_3583 ()
    val minInt_22: real64 = #0 (env_1394)
    val maxInt_22: real64 = #1 (env_1394)
    val setRoundingMode_24: lambdas_102 = #2 (env_1394)
    val x_3855: (lambdas_102, t_9, real64, real64) tuple =
      (setRoundingMode_24, x_3853, maxInt_22, minInt_22)
    val x_3854: lambdas_144 = con xEnv_129 (x_3855)
    return (x_3854)
fun x_3856 (env_1395: (lambdas_102, t_9, real64, real64) tuple, x_3857: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_3584 ()
  block L_3584 ()
    val setRoundingMode_25: lambdas_102 = #0 (env_1395)
    val x_3859: t_9 = #1 (env_1395)
    val maxInt_23: real64 = #2 (env_1395)
    val minInt_23: real64 = #3 (env_1395)
    val x_3858: (real64, real64) tuple = (minInt_23, x_3857)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3585
  block L_3585 (env_1396: unit)
    call L_3586 (<=_5 (env_1396, x_3858)) handle _ => raise
  block L_3586 (x_3860: bool)
    case x_3860 of
      true => L_3588 | false => L_3587
  block L_3587 ()
    val x_3861: (real64, real64) tuple = (x_3857, minInt_23)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3589
  block L_3589 (env_1397: unit)
    call L_3590 (<_8 (env_1397, x_3861)) handle _ => raise
  block L_3590 (x_3862: bool)
    case x_3862 of
      true => L_3592 | false => L_3591
  block L_3591 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3592 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3588 ()
    val x_3863: (real64, real64) tuple = (x_3857, maxInt_23)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3593
  block L_3593 (env_1398: unit)
    call L_3594 (<=_5 (env_1398, x_3863)) handle _ => raise
  block L_3594 (x_3864: bool)
    case x_3864 of
      true => L_3596 | false => L_3595
  block L_3595 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3596 ()
    case x_3859 of
      TO_POSINF_0 => L_3600
    | TO_NEAREST_0 => L_3599
    | TO_ZERO_0 => L_3598
    | TO_NEGINF_0 => L_3597
  block L_3597 ()
    val x_3865: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3857)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3601
  block L_3601 (env_1399: unit)
    call tail toInt32Unsafe_2 (env_1399, x_3865)
  block L_3598 ()
    val x_3866: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3857)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3602
  block L_3602 (env_1400: unit)
    call tail toInt32Unsafe_2 (env_1400, x_3866)
  block L_3599 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3603
  block L_3603 (env_1401: unit)
    call L_3604 (x_3544 (env_1401, x_994 (*()*))) handle _ => raise
  block L_3604 (m'_11: t_9)
    case setRoundingMode_25 of
      setRoundingModeEnv_0 => L_3605
  block L_3605 (env_1402: (lambdas_226, word32) tuple)
    call L_3606 (setRoundingMode_3 (env_1402, x_993 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3606 (x_3867: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3607
  block L_3607 (env_1403: unit)
    call L_3608 (round_2 (env_1403, x_3857)) handle _ => raise
  block L_3608 (x_3868: real64)
    case setRoundingMode_25 of
      setRoundingModeEnv_0 => L_3609
  block L_3609 (env_1404: (lambdas_226, word32) tuple)
    call L_3610 (setRoundingMode_3 (env_1404, m'_11)) handle _ => raise
  block L_3610 (x_3869: unit)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3611
  block L_3611 (env_1405: unit)
    call tail toInt32Unsafe_2 (env_1405, x_3868)
  block L_3600 ()
    val x_3870: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3857)
    case toInt32Unsafe_1 (*con toInt3 ... _244)*) of
      toInt32UnsafeEnv_1 => L_3612
  block L_3612 (env_1406: unit)
    call tail toInt32Unsafe_2 (env_1406, x_3870)
fun x_2219 (env_1407: (lambdas_149, lambdas_148, word32) tuple, x_3871: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3613 ()
  block L_3613 ()
    val <<_18: lambdas_149 = #0 (env_1407)
    val >>_18: lambdas_148 = #1 (env_1407)
    val maxInt'_25: word32 = #2 (env_1407)
    val x_3872: (word32, word32) tuple = (maxInt'_25, x_3871)
    case >>_18 of
      >>Env_5 => L_3614
  block L_3614 (env_1408: (word32, word32) tuple)
    call L_3615 (>>_19 (env_1408, x_3872)) handle _ => raise
  block L_3615 (x_3873: word32)
    val x_3874: (word32, word32) tuple = (x_3873, x_3871)
    case <<_18 of
      <<Env_5 => L_3616
  block L_3616 (env_1409: (word32, word32) tuple)
    call tail <<_19 (env_1409, x_3874)
fun x_3875 (env_1410:
              (real64, real64, lambdas_102, real64, word16, real64, word16) tuple,
            x_3876: t_9):
  {returns = Some (lambdas_150), raises = Some (exn)} =
L_3617 ()
  block L_3617 ()
    val minInt_24: real64 = #0 (env_1410)
    val maxInt_24: real64 = #1 (env_1410)
    val setRoundingMode_26: lambdas_102 = #2 (env_1410)
    val one_30: real64 = #3 (env_1410)
    val maxInt'_26: word16 = #4 (env_1410)
    val half_22: real64 = #5 (env_1410)
    val minInt'_10: word16 = #6 (env_1410)
    val x_3878:
      (word16, real64, word16, real64, lambdas_102, t_9, real64, real64) tuple =
      (minInt'_10,
       half_22,
       maxInt'_26,
       one_30,
       setRoundingMode_26,
       x_3876,
       maxInt_24,
       minInt_24)
    val x_3877: lambdas_150 = con xEnv_134 (x_3878)
    return (x_3877)
fun x_3879 (env_1411:
              (word16, real64, word16, real64, lambdas_102, t_9, real64, real64) tuple,
            x_3880: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3618 ()
  block L_3618 ()
    val minInt'_11: word16 = #0 (env_1411)
    val half_23: real64 = #1 (env_1411)
    val maxInt'_27: word16 = #2 (env_1411)
    val one_31: real64 = #3 (env_1411)
    val setRoundingMode_27: lambdas_102 = #4 (env_1411)
    val x_3882: t_9 = #5 (env_1411)
    val maxInt_25: real64 = #6 (env_1411)
    val minInt_25: real64 = #7 (env_1411)
    val x_3881: (real64, real64) tuple = (minInt_25, x_3880)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3619
  block L_3619 (env_1412: unit)
    call L_3620 (<=_5 (env_1412, x_3881)) handle _ => raise
  block L_3620 (x_3883: bool)
    case x_3883 of
      true => L_3622 | false => L_3621
  block L_3621 ()
    val x_3884: (real64, real64) tuple = (x_3880, minInt_25)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3623
  block L_3623 (env_1413: unit)
    call L_3624 (<_8 (env_1413, x_3884)) handle _ => raise
  block L_3624 (x_3885: bool)
    case x_3885 of
      true => L_3626 | false => L_3625
  block L_3625 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3626 ()
    val x_3886: (real64, real64) tuple = (minInt_25, one_31)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3627
  block L_3627 (env_1414: unit)
    call L_3628 (-_4 (env_1414, x_3886)) handle _ => raise
  block L_3628 (x_3887: real64)
    val x_3888: (real64, real64) tuple = (x_3887, x_3880)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3629
  block L_3629 (env_1415: unit)
    call L_3630 (<_8 (env_1415, x_3888)) handle _ => raise
  block L_3630 (x_3889: bool)
    case x_3889 of
      true => L_3632 | false => L_3631
  block L_3631 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3632 ()
    case x_3882 of
      TO_NEGINF_0 => L_3636
    | TO_ZERO_0 => L_3635
    | TO_NEAREST_0 => L_3634
    | TO_POSINF_0 => L_3633
  block L_3633 ()
    return (minInt'_11)
  block L_3634 ()
    val x_3890: (real64, real64) tuple = (x_3880, minInt_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3637
  block L_3637 (env_1416: unit)
    call L_3638 (-_4 (env_1416, x_3890)) handle _ => raise
  block L_3638 (x_3891: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3639
  block L_3639 (env_1417: unit)
    call L_3640 (~_2 (env_1417, half_23)) handle _ => raise
  block L_3640 (x_3892: real64)
    val x_3893: (real64, real64) tuple = (x_3891, x_3892)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3641
  block L_3641 (env_1418: unit)
    call L_3642 (<_8 (env_1418, x_3893)) handle _ => raise
  block L_3642 (x_3894: bool)
    case x_3894 of
      true => L_3644 | false => L_3643
  block L_3643 ()
    return (minInt'_11)
  block L_3644 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3635 ()
    return (minInt'_11)
  block L_3636 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3622 ()
    val x_3895: (real64, real64) tuple = (x_3880, maxInt_25)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3645
  block L_3645 (env_1419: unit)
    call L_3646 (<=_5 (env_1419, x_3895)) handle _ => raise
  block L_3646 (x_3896: bool)
    case x_3896 of
      true => L_3648 | false => L_3647
  block L_3647 ()
    val x_3897: (real64, real64) tuple = (maxInt_25, one_31)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3649
  block L_3649 (env_1420: unit)
    call L_3650 (+_3 (env_1420, x_3897)) handle _ => raise
  block L_3650 (x_3898: real64)
    val x_3899: (real64, real64) tuple = (x_3880, x_3898)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3651
  block L_3651 (env_1421: unit)
    call L_3652 (<_8 (env_1421, x_3899)) handle _ => raise
  block L_3652 (x_3900: bool)
    case x_3900 of
      true => L_3654 | false => L_3653
  block L_3653 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3654 ()
    case x_3882 of
      TO_NEGINF_0 => L_3658
    | TO_ZERO_0 => L_3657
    | TO_NEAREST_0 => L_3656
    | TO_POSINF_0 => L_3655
  block L_3655 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3656 ()
    val x_3901: (real64, real64) tuple = (x_3880, maxInt_25)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3659
  block L_3659 (env_1422: unit)
    call L_3660 (-_4 (env_1422, x_3901)) handle _ => raise
  block L_3660 (x_3902: real64)
    val x_3903: (real64, real64) tuple = (x_3902, half_23)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3661
  block L_3661 (env_1423: unit)
    call L_3662 (>=_8 (env_1423, x_3903)) handle _ => raise
  block L_3662 (x_3904: bool)
    case x_3904 of
      true => L_3664 | false => L_3663
  block L_3663 ()
    return (maxInt'_27)
  block L_3664 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3657 ()
    return (maxInt'_27)
  block L_3658 ()
    return (maxInt'_27)
  block L_3648 ()
    case x_3882 of
      TO_POSINF_0 => L_3668
    | TO_NEAREST_0 => L_3667
    | TO_ZERO_0 => L_3666
    | TO_NEGINF_0 => L_3665
  block L_3665 ()
    val x_3905: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3880)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3669
  block L_3669 (env_1424: unit)
    call tail toInt16Unsafe_2 (env_1424, x_3905)
  block L_3666 ()
    val x_3906: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3880)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3670
  block L_3670 (env_1425: unit)
    call tail toInt16Unsafe_2 (env_1425, x_3906)
  block L_3667 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3671
  block L_3671 (env_1426: unit)
    call L_3672 (x_3544 (env_1426, x_991 (*()*))) handle _ => raise
  block L_3672 (m'_12: t_9)
    case setRoundingMode_27 of
      setRoundingModeEnv_0 => L_3673
  block L_3673 (env_1427: (lambdas_226, word32) tuple)
    call L_3674 (setRoundingMode_3 (env_1427, x_990 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3674 (x_3907: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3675
  block L_3675 (env_1428: unit)
    call L_3676 (round_2 (env_1428, x_3880)) handle _ => raise
  block L_3676 (x_3908: real64)
    case setRoundingMode_27 of
      setRoundingModeEnv_0 => L_3677
  block L_3677 (env_1429: (lambdas_226, word32) tuple)
    call L_3678 (setRoundingMode_3 (env_1429, m'_12)) handle _ => raise
  block L_3678 (x_3909: unit)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3679
  block L_3679 (env_1430: unit)
    call tail toInt16Unsafe_2 (env_1430, x_3908)
  block L_3668 ()
    val x_3910: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3880)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3680
  block L_3680 (env_1431: unit)
    call tail toInt16Unsafe_2 (env_1431, x_3910)
fun x_3911 (env_1432: (real64, real64, lambdas_102) tuple, x_3912: t_9):
  {returns = Some (lambdas_152), raises = Some (exn)} =
L_3681 ()
  block L_3681 ()
    val minInt_26: real64 = #0 (env_1432)
    val maxInt_26: real64 = #1 (env_1432)
    val setRoundingMode_28: lambdas_102 = #2 (env_1432)
    val x_3914: (lambdas_102, t_9, real64, real64) tuple =
      (setRoundingMode_28, x_3912, maxInt_26, minInt_26)
    val x_3913: lambdas_152 = con xEnv_136 (x_3914)
    return (x_3913)
fun x_3915 (env_1433: (lambdas_102, t_9, real64, real64) tuple, x_3916: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_3682 ()
  block L_3682 ()
    val setRoundingMode_29: lambdas_102 = #0 (env_1433)
    val x_3918: t_9 = #1 (env_1433)
    val maxInt_27: real64 = #2 (env_1433)
    val minInt_27: real64 = #3 (env_1433)
    val x_3917: (real64, real64) tuple = (minInt_27, x_3916)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3683
  block L_3683 (env_1434: unit)
    call L_3684 (<=_5 (env_1434, x_3917)) handle _ => raise
  block L_3684 (x_3919: bool)
    case x_3919 of
      true => L_3686 | false => L_3685
  block L_3685 ()
    val x_3920: (real64, real64) tuple = (x_3916, minInt_27)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3687
  block L_3687 (env_1435: unit)
    call L_3688 (<_8 (env_1435, x_3920)) handle _ => raise
  block L_3688 (x_3921: bool)
    case x_3921 of
      true => L_3690 | false => L_3689
  block L_3689 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3690 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3686 ()
    val x_3922: (real64, real64) tuple = (x_3916, maxInt_27)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3691
  block L_3691 (env_1436: unit)
    call L_3692 (<=_5 (env_1436, x_3922)) handle _ => raise
  block L_3692 (x_3923: bool)
    case x_3923 of
      true => L_3694 | false => L_3693
  block L_3693 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3694 ()
    case x_3918 of
      TO_POSINF_0 => L_3698
    | TO_NEAREST_0 => L_3697
    | TO_ZERO_0 => L_3696
    | TO_NEGINF_0 => L_3695
  block L_3695 ()
    val x_3924: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3916)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3699
  block L_3699 (env_1437: unit)
    call tail toInt16Unsafe_2 (env_1437, x_3924)
  block L_3696 ()
    val x_3925: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3916)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3700
  block L_3700 (env_1438: unit)
    call tail toInt16Unsafe_2 (env_1438, x_3925)
  block L_3697 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3701
  block L_3701 (env_1439: unit)
    call L_3702 (x_3544 (env_1439, x_988 (*()*))) handle _ => raise
  block L_3702 (m'_13: t_9)
    case setRoundingMode_29 of
      setRoundingModeEnv_0 => L_3703
  block L_3703 (env_1440: (lambdas_226, word32) tuple)
    call L_3704 (setRoundingMode_3 (env_1440, x_987 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3704 (x_3926: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3705
  block L_3705 (env_1441: unit)
    call L_3706 (round_2 (env_1441, x_3916)) handle _ => raise
  block L_3706 (x_3927: real64)
    case setRoundingMode_29 of
      setRoundingModeEnv_0 => L_3707
  block L_3707 (env_1442: (lambdas_226, word32) tuple)
    call L_3708 (setRoundingMode_3 (env_1442, m'_13)) handle _ => raise
  block L_3708 (x_3928: unit)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3709
  block L_3709 (env_1443: unit)
    call tail toInt16Unsafe_2 (env_1443, x_3927)
  block L_3698 ()
    val x_3929: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3916)
    case toInt16Unsafe_1 (*con toInt1 ... _243)*) of
      toInt16UnsafeEnv_1 => L_3710
  block L_3710 (env_1444: unit)
    call tail toInt16Unsafe_2 (env_1444, x_3929)
fun x_2206 (env_1445: (lambdas_157, lambdas_156, word16) tuple, x_3930: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_3711 ()
  block L_3711 ()
    val <<_20: lambdas_157 = #0 (env_1445)
    val >>_20: lambdas_156 = #1 (env_1445)
    val maxInt'_28: word16 = #2 (env_1445)
    val x_3931: (word16, word32) tuple = (maxInt'_28, x_3930)
    case >>_20 of
      >>Env_6 => L_3712
  block L_3712 (env_1446: (word32, word16) tuple)
    call L_3713 (>>_21 (env_1446, x_3931)) handle _ => raise
  block L_3713 (x_3932: word16)
    val x_3933: (word16, word32) tuple = (x_3932, x_3930)
    case <<_20 of
      <<Env_6 => L_3714
  block L_3714 (env_1447: (word32, word16) tuple)
    call tail <<_21 (env_1447, x_3933)
fun x_3934 (env_1448:
              (real64, real64, lambdas_102, real64, word8, real64, word8) tuple,
            x_3935: t_9):
  {returns = Some (lambdas_158), raises = Some (exn)} =
L_3715 ()
  block L_3715 ()
    val minInt_28: real64 = #0 (env_1448)
    val maxInt_28: real64 = #1 (env_1448)
    val setRoundingMode_30: lambdas_102 = #2 (env_1448)
    val one_32: real64 = #3 (env_1448)
    val maxInt'_29: word8 = #4 (env_1448)
    val half_24: real64 = #5 (env_1448)
    val minInt'_12: word8 = #6 (env_1448)
    val x_3937:
      (word8, real64, word8, real64, lambdas_102, t_9, real64, real64) tuple =
      (minInt'_12,
       half_24,
       maxInt'_29,
       one_32,
       setRoundingMode_30,
       x_3935,
       maxInt_28,
       minInt_28)
    val x_3936: lambdas_158 = con xEnv_141 (x_3937)
    return (x_3936)
fun x_3938 (env_1449:
              (word8, real64, word8, real64, lambdas_102, t_9, real64, real64) tuple,
            x_3939: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3716 ()
  block L_3716 ()
    val minInt'_13: word8 = #0 (env_1449)
    val half_25: real64 = #1 (env_1449)
    val maxInt'_30: word8 = #2 (env_1449)
    val one_33: real64 = #3 (env_1449)
    val setRoundingMode_31: lambdas_102 = #4 (env_1449)
    val x_3941: t_9 = #5 (env_1449)
    val maxInt_29: real64 = #6 (env_1449)
    val minInt_29: real64 = #7 (env_1449)
    val x_3940: (real64, real64) tuple = (minInt_29, x_3939)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3717
  block L_3717 (env_1450: unit)
    call L_3718 (<=_5 (env_1450, x_3940)) handle _ => raise
  block L_3718 (x_3942: bool)
    case x_3942 of
      true => L_3720 | false => L_3719
  block L_3719 ()
    val x_3943: (real64, real64) tuple = (x_3939, minInt_29)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3721
  block L_3721 (env_1451: unit)
    call L_3722 (<_8 (env_1451, x_3943)) handle _ => raise
  block L_3722 (x_3944: bool)
    case x_3944 of
      true => L_3724 | false => L_3723
  block L_3723 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3724 ()
    val x_3945: (real64, real64) tuple = (minInt_29, one_33)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3725
  block L_3725 (env_1452: unit)
    call L_3726 (-_4 (env_1452, x_3945)) handle _ => raise
  block L_3726 (x_3946: real64)
    val x_3947: (real64, real64) tuple = (x_3946, x_3939)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3727
  block L_3727 (env_1453: unit)
    call L_3728 (<_8 (env_1453, x_3947)) handle _ => raise
  block L_3728 (x_3948: bool)
    case x_3948 of
      true => L_3730 | false => L_3729
  block L_3729 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3730 ()
    case x_3941 of
      TO_NEGINF_0 => L_3734
    | TO_ZERO_0 => L_3733
    | TO_NEAREST_0 => L_3732
    | TO_POSINF_0 => L_3731
  block L_3731 ()
    return (minInt'_13)
  block L_3732 ()
    val x_3949: (real64, real64) tuple = (x_3939, minInt_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3735
  block L_3735 (env_1454: unit)
    call L_3736 (-_4 (env_1454, x_3949)) handle _ => raise
  block L_3736 (x_3950: real64)
    case ~_1 (*con ~Env_1 (x_229)*) of
      ~Env_1 => L_3737
  block L_3737 (env_1455: unit)
    call L_3738 (~_2 (env_1455, half_25)) handle _ => raise
  block L_3738 (x_3951: real64)
    val x_3952: (real64, real64) tuple = (x_3950, x_3951)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3739
  block L_3739 (env_1456: unit)
    call L_3740 (<_8 (env_1456, x_3952)) handle _ => raise
  block L_3740 (x_3953: bool)
    case x_3953 of
      true => L_3742 | false => L_3741
  block L_3741 ()
    return (minInt'_13)
  block L_3742 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3733 ()
    return (minInt'_13)
  block L_3734 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3720 ()
    val x_3954: (real64, real64) tuple = (x_3939, maxInt_29)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3743
  block L_3743 (env_1457: unit)
    call L_3744 (<=_5 (env_1457, x_3954)) handle _ => raise
  block L_3744 (x_3955: bool)
    case x_3955 of
      true => L_3746 | false => L_3745
  block L_3745 ()
    val x_3956: (real64, real64) tuple = (maxInt_29, one_33)
    case +_2 (*con +Env_2 (x_227)*) of
      +Env_2 => L_3747
  block L_3747 (env_1458: unit)
    call L_3748 (+_3 (env_1458, x_3956)) handle _ => raise
  block L_3748 (x_3957: real64)
    val x_3958: (real64, real64) tuple = (x_3939, x_3957)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3749
  block L_3749 (env_1459: unit)
    call L_3750 (<_8 (env_1459, x_3958)) handle _ => raise
  block L_3750 (x_3959: bool)
    case x_3959 of
      true => L_3752 | false => L_3751
  block L_3751 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3752 ()
    case x_3941 of
      TO_NEGINF_0 => L_3756
    | TO_ZERO_0 => L_3755
    | TO_NEAREST_0 => L_3754
    | TO_POSINF_0 => L_3753
  block L_3753 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3754 ()
    val x_3960: (real64, real64) tuple = (x_3939, maxInt_29)
    case -_2 (*con -Env_2 (x_228)*) of
      -Env_2 => L_3757
  block L_3757 (env_1460: unit)
    call L_3758 (-_4 (env_1460, x_3960)) handle _ => raise
  block L_3758 (x_3961: real64)
    val x_3962: (real64, real64) tuple = (x_3961, half_25)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_3759
  block L_3759 (env_1461: unit)
    call L_3760 (>=_8 (env_1461, x_3962)) handle _ => raise
  block L_3760 (x_3963: bool)
    case x_3963 of
      true => L_3762 | false => L_3761
  block L_3761 ()
    return (maxInt'_30)
  block L_3762 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3755 ()
    return (maxInt'_30)
  block L_3756 ()
    return (maxInt'_30)
  block L_3746 ()
    case x_3941 of
      TO_POSINF_0 => L_3766
    | TO_NEAREST_0 => L_3765
    | TO_ZERO_0 => L_3764
    | TO_NEGINF_0 => L_3763
  block L_3763 ()
    val x_3964: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3939)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3767
  block L_3767 (env_1462: unit)
    call tail toInt8Unsafe_2 (env_1462, x_3964)
  block L_3764 ()
    val x_3965: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3939)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3768
  block L_3768 (env_1463: unit)
    call tail toInt8Unsafe_2 (env_1463, x_3965)
  block L_3765 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3769
  block L_3769 (env_1464: unit)
    call L_3770 (x_3544 (env_1464, x_985 (*()*))) handle _ => raise
  block L_3770 (m'_14: t_9)
    case setRoundingMode_31 of
      setRoundingModeEnv_0 => L_3771
  block L_3771 (env_1465: (lambdas_226, word32) tuple)
    call L_3772 (setRoundingMode_3 (env_1465, x_984 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3772 (x_3966: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3773
  block L_3773 (env_1466: unit)
    call L_3774 (round_2 (env_1466, x_3939)) handle _ => raise
  block L_3774 (x_3967: real64)
    case setRoundingMode_31 of
      setRoundingModeEnv_0 => L_3775
  block L_3775 (env_1467: (lambdas_226, word32) tuple)
    call L_3776 (setRoundingMode_3 (env_1467, m'_14)) handle _ => raise
  block L_3776 (x_3968: unit)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3777
  block L_3777 (env_1468: unit)
    call tail toInt8Unsafe_2 (env_1468, x_3967)
  block L_3766 ()
    val x_3969: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3939)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3778
  block L_3778 (env_1469: unit)
    call tail toInt8Unsafe_2 (env_1469, x_3969)
fun x_3970 (env_1470: (real64, real64, lambdas_102) tuple, x_3971: t_9):
  {returns = Some (lambdas_160), raises = Some (exn)} =
L_3779 ()
  block L_3779 ()
    val minInt_30: real64 = #0 (env_1470)
    val maxInt_30: real64 = #1 (env_1470)
    val setRoundingMode_32: lambdas_102 = #2 (env_1470)
    val x_3973: (lambdas_102, t_9, real64, real64) tuple =
      (setRoundingMode_32, x_3971, maxInt_30, minInt_30)
    val x_3972: lambdas_160 = con xEnv_143 (x_3973)
    return (x_3972)
fun x_3974 (env_1471: (lambdas_102, t_9, real64, real64) tuple, x_3975: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_3780 ()
  block L_3780 ()
    val setRoundingMode_33: lambdas_102 = #0 (env_1471)
    val x_3977: t_9 = #1 (env_1471)
    val maxInt_31: real64 = #2 (env_1471)
    val minInt_31: real64 = #3 (env_1471)
    val x_3976: (real64, real64) tuple = (minInt_31, x_3975)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3781
  block L_3781 (env_1472: unit)
    call L_3782 (<=_5 (env_1472, x_3976)) handle _ => raise
  block L_3782 (x_3978: bool)
    case x_3978 of
      true => L_3784 | false => L_3783
  block L_3783 ()
    val x_3979: (real64, real64) tuple = (x_3975, minInt_31)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_3785
  block L_3785 (env_1473: unit)
    call L_3786 (<_8 (env_1473, x_3979)) handle _ => raise
  block L_3786 (x_3980: bool)
    case x_3980 of
      true => L_3788 | false => L_3787
  block L_3787 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3788 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3784 ()
    val x_3981: (real64, real64) tuple = (x_3975, maxInt_31)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_3789
  block L_3789 (env_1474: unit)
    call L_3790 (<=_5 (env_1474, x_3981)) handle _ => raise
  block L_3790 (x_3982: bool)
    case x_3982 of
      true => L_3792 | false => L_3791
  block L_3791 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3792 ()
    case x_3977 of
      TO_POSINF_0 => L_3796
    | TO_NEAREST_0 => L_3795
    | TO_ZERO_0 => L_3794
    | TO_NEGINF_0 => L_3793
  block L_3793 ()
    val x_3983: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_3975)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3797
  block L_3797 (env_1475: unit)
    call tail toInt8Unsafe_2 (env_1475, x_3983)
  block L_3794 ()
    val x_3984: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_3975)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3798
  block L_3798 (env_1476: unit)
    call tail toInt8Unsafe_2 (env_1476, x_3984)
  block L_3795 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3799
  block L_3799 (env_1477: unit)
    call L_3800 (x_3544 (env_1477, x_982 (*()*))) handle _ => raise
  block L_3800 (m'_15: t_9)
    case setRoundingMode_33 of
      setRoundingModeEnv_0 => L_3801
  block L_3801 (env_1478: (lambdas_226, word32) tuple)
    call L_3802 (setRoundingMode_3 (env_1478, x_981 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3802 (x_3985: unit)
    case round_1 (*con roundE ... _232)*) of
      roundEnv_1 => L_3803
  block L_3803 (env_1479: unit)
    call L_3804 (round_2 (env_1479, x_3975)) handle _ => raise
  block L_3804 (x_3986: real64)
    case setRoundingMode_33 of
      setRoundingModeEnv_0 => L_3805
  block L_3805 (env_1480: (lambdas_226, word32) tuple)
    call L_3806 (setRoundingMode_3 (env_1480, m'_15)) handle _ => raise
  block L_3806 (x_3987: unit)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3807
  block L_3807 (env_1481: unit)
    call tail toInt8Unsafe_2 (env_1481, x_3986)
  block L_3796 ()
    val x_3988: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_3975)
    case toInt8Unsafe_1 (*con toInt8 ... _242)*) of
      toInt8UnsafeEnv_1 => L_3808
  block L_3808 (env_1482: unit)
    call tail toInt8Unsafe_2 (env_1482, x_3988)
fun x_2193 (env_1483: (lambdas_165, lambdas_164, word8) tuple, x_3989: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3809 ()
  block L_3809 ()
    val <<_22: lambdas_165 = #0 (env_1483)
    val >>_22: lambdas_164 = #1 (env_1483)
    val maxInt'_31: word8 = #2 (env_1483)
    val x_3990: (word8, word32) tuple = (maxInt'_31, x_3989)
    case >>_22 of
      >>Env_7 => L_3810
  block L_3810 (env_1484: (word32, word8) tuple)
    call L_3811 (>>_23 (env_1484, x_3990)) handle _ => raise
  block L_3811 (x_3991: word8)
    val x_3992: (word8, word32) tuple = (x_3991, x_3989)
    case <<_22 of
      <<Env_7 => L_3812
  block L_3812 (env_1485: (word32, word8) tuple)
    call tail <<_23 (env_1485, x_3992)
fun x_3993 (env_1486: lambdas_102, x_3994: t_9):
  {returns = Some (lambdas_166), raises = Some (exn)} =
L_3813 ()
  block L_3813 ()
    val x_3996: (t_9, lambdas_102) tuple = (x_3994, env_1486)
    val x_3995: lambdas_166 = con xEnv_148 (x_3996)
    return (x_3995)
fun x_3997 (env_1487: (t_9, lambdas_102) tuple, x_3998: real32):
  {returns = Some (real64), raises = Some (exn)} =
L_3814 ()
  block L_3814 ()
    val x_3999: t_9 = #0 (env_1487)
    val setRoundingMode_34: lambdas_102 = #1 (env_1487)
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3815
  block L_3815 (env_1488: unit)
    call L_3816 (x_3544 (env_1488, x_979 (*()*))) handle _ => raise
  block L_3816 (m'_16: t_9)
    case setRoundingMode_34 of
      setRoundingModeEnv_0 => L_3817
  block L_3817 (env_1489: (lambdas_226, word32) tuple)
    call L_3818 (setRoundingMode_3 (env_1489, x_3999)) handle _ => raise
  block L_3818 (x_4000: unit)
    case fromReal32Unsafe_1 (*con fromRe ... _237)*) of
      fromReal32UnsafeEnv_1 => L_3819
  block L_3819 (env_1490: unit)
    call L_3820 (fromReal32Unsafe_2 (env_1490, x_3998)) handle _ => raise
  block L_3820 (x_4001: real64)
    case setRoundingMode_34 of
      setRoundingModeEnv_0 => L_3821
  block L_3821 (env_1491: (lambdas_226, word32) tuple)
    call L_3822 (setRoundingMode_3 (env_1491, m'_16)) handle _ => raise
  block L_3822 (x_4002: unit)
    return (x_4001)
fun x_4003 (env_1492: unit, x_4004: t_9):
  {returns = Some (lambdas_337), raises = Some (exn)} =
L_3823 ()
  block L_3823 ()
    return (fromReal32Unsafe_1 (*con fromRe ... _237)*))
fun class_4 (env_1493: (word64, word64, word64) tuple, x_4005: real64):
  {returns = Some (float_class_0), raises = Some (exn)} =
L_3824 ()
  block L_3824 ()
    val zero_35: word64 = #0 (env_1493)
    val significandMask_2: word64 = #1 (env_1493)
    val exponentMask_2: word64 = #2 (env_1493)
    val x_4007: word64 = prim Real64_castToWord64 (x_4005)
    val x_4006: (word64, word64) tuple = (x_4007, exponentMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3825
  block L_3825 (env_1494: unit)
    call L_3826 (andb_2 (env_1494, x_4006)) handle _ => raise
  block L_3826 (x_4008: word64)
    val x_4009: (word64, word64) tuple = (x_4008, exponentMask_2)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3827
  block L_3827 (env_1495: unit)
    call L_3828 (x_2295 (env_1495, x_4009)) handle _ => raise
  block L_3828 (x_4010: bool)
    case x_4010 of
      true => L_3830 | false => L_3829
  block L_3829 ()
    val x_4011: (word64, word64) tuple = (x_4007, exponentMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3831
  block L_3831 (env_1496: unit)
    call L_3832 (andb_2 (env_1496, x_4011)) handle _ => raise
  block L_3832 (x_4012: word64)
    val x_4013: (word64, word64) tuple = (x_4012, zero_35)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3833
  block L_3833 (env_1497: unit)
    call L_3834 (x_2295 (env_1497, x_4013)) handle _ => raise
  block L_3834 (x_4014: bool)
    case x_4014 of
      true => L_3836 | false => L_3835
  block L_3835 ()
    return (x_976 (*con NORMAL_1*))
  block L_3836 ()
    val x_4015: (word64, word64) tuple = (x_4007, significandMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3837
  block L_3837 (env_1498: unit)
    call L_3838 (andb_2 (env_1498, x_4015)) handle _ => raise
  block L_3838 (x_4016: word64)
    val x_4017: (word64, word64) tuple = (x_4016, zero_35)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3839
  block L_3839 (env_1499: unit)
    call L_3840 (x_2295 (env_1499, x_4017)) handle _ => raise
  block L_3840 (x_4018: bool)
    case x_4018 of
      true => L_3842 | false => L_3841
  block L_3841 ()
    return (x_975 (*con SUBNORMAL_1*))
  block L_3842 ()
    return (x_974 (*con ZERO_1*))
  block L_3830 ()
    val x_4019: (word64, word64) tuple = (x_4007, significandMask_2)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_3843
  block L_3843 (env_1500: unit)
    call L_3844 (andb_2 (env_1500, x_4019)) handle _ => raise
  block L_3844 (x_4020: word64)
    val x_4021: (word64, word64) tuple = (x_4020, zero_35)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_3845
  block L_3845 (env_1501: unit)
    call L_3846 (x_2295 (env_1501, x_4021)) handle _ => raise
  block L_3846 (x_4022: bool)
    case x_4022 of
      true => L_3848 | false => L_3847
  block L_3847 ()
    return (x_973 (*con NAN_1*))
  block L_3848 ()
    return (x_972 (*con INF_0*))
fun mkMask_1 (env_1502: (lambdas_109, word64) tuple, x_4023: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3849 ()
  block L_3849 ()
    val <<_24: lambdas_109 = #0 (env_1502)
    val zero_36: word64 = #1 (env_1502)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_3850
  block L_3850 (env_1503: unit)
    call L_3851 (notb_7 (env_1503, zero_36)) handle _ => raise
  block L_3851 (x_4024: word64)
    val x_4025: (word64, word32) tuple = (x_4024, x_4023)
    case <<_24 of
      <<Env_0 => L_3852
  block L_3852 (env_1504: (word32, word64) tuple)
    call L_3853 (<<_9 (env_1504, x_4025)) handle _ => raise
  block L_3853 (x_4026: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_3854
  block L_3854 (env_1505: unit)
    call tail notb_7 (env_1505, x_4026)
fun x_4027 (env_1506:
              (lambdas_172,
               real32,
               real32,
               lambdas_102,
               real32,
               word64,
               real32,
               word64) tuple,
            x_4028: t_9):
  {returns = Some (lambdas_171), raises = Some (exn)} =
L_3855 ()
  block L_3855 ()
    val class_19: lambdas_172 = #0 (env_1506)
    val zero_37: real32 = #1 (env_1506)
    val maxWord_32: real32 = #2 (env_1506)
    val setRoundingMode_35: lambdas_102 = #3 (env_1506)
    val one_34: real32 = #4 (env_1506)
    val maxWord'_32: word64 = #5 (env_1506)
    val half_26: real32 = #6 (env_1506)
    val zero_38: word64 = #7 (env_1506)
    val x_4030:
      (word64,
       real32,
       word64,
       real32,
       lambdas_102,
       t_9,
       real32,
       real32,
       lambdas_172) tuple =
      (zero_38,
       half_26,
       maxWord'_32,
       one_34,
       setRoundingMode_35,
       x_4028,
       maxWord_32,
       zero_37,
       class_19)
    val x_4029: lambdas_171 = con xEnv_152 (x_4030)
    return (x_4029)
fun x_4031 (env_1507:
              (word64,
               real32,
               word64,
               real32,
               lambdas_102,
               t_9,
               real32,
               real32,
               lambdas_172) tuple,
            x_4032: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_3856 ()
  block L_3856 ()
    val zero_40: word64 = #0 (env_1507)
    val half_27: real32 = #1 (env_1507)
    val maxWord'_33: word64 = #2 (env_1507)
    val one_35: real32 = #3 (env_1507)
    val setRoundingMode_36: lambdas_102 = #4 (env_1507)
    val x_4033: t_9 = #5 (env_1507)
    val maxWord_33: real32 = #6 (env_1507)
    val zero_39: real32 = #7 (env_1507)
    val class_20: lambdas_172 = #8 (env_1507)
    case class_20 of
      classEnv_1 => L_3857
  block L_3857 (env_1508: (word32, word32, word32) tuple)
    call L_3858 (class_21 (env_1508, x_4032)) handle _ => raise
  block L_3858 (x_4034: float_class_0)
    case x_4034 of
      INF_0 => L_3860 | NAN_1 => L_3859 | _ => L_3861
  block L_3861 ()
    val x_4035: (real32, real32) tuple = (zero_39, x_4032)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3862
  block L_3862 (env_1509: unit)
    call L_3863 (<=_6 (env_1509, x_4035)) handle _ => raise
  block L_3863 (x_4036: bool)
    case x_4036 of
      true => L_3865 | false => L_3864
  block L_3864 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3866
  block L_3866 (env_1510: unit)
    call L_3867 (~_3 (env_1510, one_35)) handle _ => raise
  block L_3867 (x_4037: real32)
    val x_4038: (real32, real32) tuple = (x_4032, x_4037)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3868
  block L_3868 (env_1511: unit)
    call L_3869 (>_8 (env_1511, x_4038)) handle _ => raise
  block L_3869 (x_4039: bool)
    case x_4039 of
      true => L_3871 | false => L_3870
  block L_3870 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3871 ()
    case x_4033 of
      TO_NEGINF_0 => L_3875
    | TO_ZERO_0 => L_3874
    | TO_NEAREST_0 => L_3873
    | TO_POSINF_0 => L_3872
  block L_3872 ()
    return (zero_40)
  block L_3873 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3876
  block L_3876 (env_1512: unit)
    call L_3877 (~_3 (env_1512, half_27)) handle _ => raise
  block L_3877 (x_4040: real32)
    val x_4041: (real32, real32) tuple = (x_4032, x_4040)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3878
  block L_3878 (env_1513: unit)
    call L_3879 (<_9 (env_1513, x_4041)) handle _ => raise
  block L_3879 (x_4042: bool)
    case x_4042 of
      true => L_3881 | false => L_3880
  block L_3880 ()
    return (zero_40)
  block L_3881 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3874 ()
    return (zero_40)
  block L_3875 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3865 ()
    val x_4043: (real32, real32) tuple = (x_4032, maxWord_33)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3882
  block L_3882 (env_1514: unit)
    call L_3883 (<=_6 (env_1514, x_4043)) handle _ => raise
  block L_3883 (x_4044: bool)
    case x_4044 of
      true => L_3885 | false => L_3884
  block L_3884 ()
    val x_4045: (real32, real32) tuple = (maxWord_33, one_35)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_3886
  block L_3886 (env_1515: unit)
    call L_3887 (+_4 (env_1515, x_4045)) handle _ => raise
  block L_3887 (x_4046: real32)
    val x_4047: (real32, real32) tuple = (x_4032, x_4046)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3888
  block L_3888 (env_1516: unit)
    call L_3889 (<_9 (env_1516, x_4047)) handle _ => raise
  block L_3889 (x_4048: bool)
    case x_4048 of
      true => L_3891 | false => L_3890
  block L_3890 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3891 ()
    case x_4033 of
      TO_NEGINF_0 => L_3895
    | TO_ZERO_0 => L_3894
    | TO_NEAREST_0 => L_3893
    | TO_POSINF_0 => L_3892
  block L_3892 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3893 ()
    val x_4049: (real32, real32) tuple = (x_4032, maxWord_33)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_3896
  block L_3896 (env_1517: unit)
    call L_3897 (-_5 (env_1517, x_4049)) handle _ => raise
  block L_3897 (x_4050: real32)
    val x_4051: (real32, real32) tuple = (x_4050, half_27)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3898
  block L_3898 (env_1518: unit)
    call L_3899 (>=_9 (env_1518, x_4051)) handle _ => raise
  block L_3899 (x_4052: bool)
    case x_4052 of
      true => L_3901 | false => L_3900
  block L_3900 ()
    return (maxWord'_33)
  block L_3901 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3894 ()
    return (maxWord'_33)
  block L_3895 ()
    return (maxWord'_33)
  block L_3885 ()
    case x_4033 of
      TO_POSINF_0 => L_3905
    | TO_NEAREST_0 => L_3904
    | TO_ZERO_0 => L_3903
    | TO_NEGINF_0 => L_3902
  block L_3902 ()
    val x_4053: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4032)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3906
  block L_3906 (env_1519: unit)
    call tail toWord64Unsafe_3 (env_1519, x_4053)
  block L_3903 ()
    val x_4054: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4032)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3907
  block L_3907 (env_1520: unit)
    call tail toWord64Unsafe_3 (env_1520, x_4054)
  block L_3904 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3908
  block L_3908 (env_1521: unit)
    call L_3909 (x_3544 (env_1521, x_971 (*()*))) handle _ => raise
  block L_3909 (m'_17: t_9)
    case setRoundingMode_36 of
      setRoundingModeEnv_0 => L_3910
  block L_3910 (env_1522: (lambdas_226, word32) tuple)
    call L_3911 (setRoundingMode_3 (env_1522, x_970 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3911 (x_4055: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_3912
  block L_3912 (env_1523: unit)
    call L_3913 (round_3 (env_1523, x_4032)) handle _ => raise
  block L_3913 (x_4056: real32)
    case setRoundingMode_36 of
      setRoundingModeEnv_0 => L_3914
  block L_3914 (env_1524: (lambdas_226, word32) tuple)
    call L_3915 (setRoundingMode_3 (env_1524, m'_17)) handle _ => raise
  block L_3915 (x_4057: unit)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3916
  block L_3916 (env_1525: unit)
    call tail toWord64Unsafe_3 (env_1525, x_4056)
  block L_3905 ()
    val x_4058: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4032)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3917
  block L_3917 (env_1526: unit)
    call tail toWord64Unsafe_3 (env_1526, x_4058)
  block L_3859 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3860 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4059 (env_1527:
              (lambdas_172, real32, real32, lambdas_102, real32, word64, real32) tuple,
            x_4060: t_9):
  {returns = Some (lambdas_174), raises = Some (exn)} =
L_3918 ()
  block L_3918 ()
    val class_22: lambdas_172 = #0 (env_1527)
    val zero_41: real32 = #1 (env_1527)
    val maxWord_34: real32 = #2 (env_1527)
    val setRoundingMode_37: lambdas_102 = #3 (env_1527)
    val one_36: real32 = #4 (env_1527)
    val zero_42: word64 = #5 (env_1527)
    val half_28: real32 = #6 (env_1527)
    val x_4062:
      (real32, word64, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple =
      (half_28,
       zero_42,
       one_36,
       setRoundingMode_37,
       x_4060,
       maxWord_34,
       zero_41,
       class_22)
    val x_4061: lambdas_174 = con xEnv_154 (x_4062)
    return (x_4061)
fun x_4063 (env_1528:
              (real32,
               word64,
               real32,
               lambdas_102,
               t_9,
               real32,
               real32,
               lambdas_172) tuple,
            x_4064: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_3919 ()
  block L_3919 ()
    val half_29: real32 = #0 (env_1528)
    val zero_44: word64 = #1 (env_1528)
    val one_37: real32 = #2 (env_1528)
    val setRoundingMode_38: lambdas_102 = #3 (env_1528)
    val x_4065: t_9 = #4 (env_1528)
    val maxWord_35: real32 = #5 (env_1528)
    val zero_43: real32 = #6 (env_1528)
    val class_23: lambdas_172 = #7 (env_1528)
    case class_23 of
      classEnv_1 => L_3920
  block L_3920 (env_1529: (word32, word32, word32) tuple)
    call L_3921 (class_21 (env_1529, x_4064)) handle _ => raise
  block L_3921 (x_4066: float_class_0)
    case x_4066 of
      INF_0 => L_3923 | NAN_1 => L_3922 | _ => L_3924
  block L_3924 ()
    val x_4067: (real32, real32) tuple = (zero_43, x_4064)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3925
  block L_3925 (env_1530: unit)
    call L_3926 (<=_6 (env_1530, x_4067)) handle _ => raise
  block L_3926 (x_4068: bool)
    case x_4068 of
      true => L_3928 | false => L_3927
  block L_3927 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3929
  block L_3929 (env_1531: unit)
    call L_3930 (~_3 (env_1531, one_37)) handle _ => raise
  block L_3930 (x_4069: real32)
    val x_4070: (real32, real32) tuple = (x_4064, x_4069)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3931
  block L_3931 (env_1532: unit)
    call L_3932 (>_8 (env_1532, x_4070)) handle _ => raise
  block L_3932 (x_4071: bool)
    case x_4071 of
      true => L_3934 | false => L_3933
  block L_3933 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3934 ()
    case x_4065 of
      TO_NEGINF_0 => L_3938
    | TO_ZERO_0 => L_3937
    | TO_NEAREST_0 => L_3936
    | TO_POSINF_0 => L_3935
  block L_3935 ()
    return (zero_44)
  block L_3936 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3939
  block L_3939 (env_1533: unit)
    call L_3940 (~_3 (env_1533, half_29)) handle _ => raise
  block L_3940 (x_4072: real32)
    val x_4073: (real32, real32) tuple = (x_4064, x_4072)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3941
  block L_3941 (env_1534: unit)
    call L_3942 (<_9 (env_1534, x_4073)) handle _ => raise
  block L_3942 (x_4074: bool)
    case x_4074 of
      true => L_3944 | false => L_3943
  block L_3943 ()
    return (zero_44)
  block L_3944 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3937 ()
    return (zero_44)
  block L_3938 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3928 ()
    val x_4075: (real32, real32) tuple = (x_4064, maxWord_35)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3945
  block L_3945 (env_1535: unit)
    call L_3946 (<=_6 (env_1535, x_4075)) handle _ => raise
  block L_3946 (x_4076: bool)
    case x_4076 of
      true => L_3948 | false => L_3947
  block L_3947 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3948 ()
    case x_4065 of
      TO_POSINF_0 => L_3952
    | TO_NEAREST_0 => L_3951
    | TO_ZERO_0 => L_3950
    | TO_NEGINF_0 => L_3949
  block L_3949 ()
    val x_4077: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4064)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3953
  block L_3953 (env_1536: unit)
    call tail toWord64Unsafe_3 (env_1536, x_4077)
  block L_3950 ()
    val x_4078: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4064)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3954
  block L_3954 (env_1537: unit)
    call tail toWord64Unsafe_3 (env_1537, x_4078)
  block L_3951 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_3955
  block L_3955 (env_1538: unit)
    call L_3956 (x_3544 (env_1538, x_968 (*()*))) handle _ => raise
  block L_3956 (m'_18: t_9)
    case setRoundingMode_38 of
      setRoundingModeEnv_0 => L_3957
  block L_3957 (env_1539: (lambdas_226, word32) tuple)
    call L_3958 (setRoundingMode_3 (env_1539, x_967 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3958 (x_4079: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_3959
  block L_3959 (env_1540: unit)
    call L_3960 (round_3 (env_1540, x_4064)) handle _ => raise
  block L_3960 (x_4080: real32)
    case setRoundingMode_38 of
      setRoundingModeEnv_0 => L_3961
  block L_3961 (env_1541: (lambdas_226, word32) tuple)
    call L_3962 (setRoundingMode_3 (env_1541, m'_18)) handle _ => raise
  block L_3962 (x_4081: unit)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3963
  block L_3963 (env_1542: unit)
    call tail toWord64Unsafe_3 (env_1542, x_4080)
  block L_3952 ()
    val x_4082: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4064)
    case toWord64Unsafe_0 (*con toWord ... _226)*) of
      toWord64UnsafeEnv_0 => L_3964
  block L_3964 (env_1543: unit)
    call tail toWord64Unsafe_3 (env_1543, x_4082)
  block L_3922 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3923 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2155 (env_1544: (lambdas_109, lambdas_108, word64) tuple, x_4083: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3965 ()
  block L_3965 ()
    val <<_25: lambdas_109 = #0 (env_1544)
    val >>_24: lambdas_108 = #1 (env_1544)
    val maxWord'_34: word64 = #2 (env_1544)
    val x_4084: (word64, word32) tuple = (maxWord'_34, x_4083)
    case >>_24 of
      >>Env_0 => L_3966
  block L_3966 (env_1545: (word32, word64) tuple)
    call L_3967 (>>_9 (env_1545, x_4084)) handle _ => raise
  block L_3967 (x_4085: word64)
    val x_4086: (word64, word32) tuple = (x_4085, x_4083)
    case <<_25 of
      <<Env_0 => L_3968
  block L_3968 (env_1546: (word32, word64) tuple)
    call tail <<_9 (env_1546, x_4086)
fun x_4087 (env_1547:
              (lambdas_172,
               real32,
               real32,
               lambdas_102,
               real32,
               word32,
               real32,
               word32) tuple,
            x_4088: t_9):
  {returns = Some (lambdas_178), raises = Some (exn)} =
L_3969 ()
  block L_3969 ()
    val class_24: lambdas_172 = #0 (env_1547)
    val zero_45: real32 = #1 (env_1547)
    val maxWord_36: real32 = #2 (env_1547)
    val setRoundingMode_39: lambdas_102 = #3 (env_1547)
    val one_38: real32 = #4 (env_1547)
    val maxWord'_35: word32 = #5 (env_1547)
    val half_30: real32 = #6 (env_1547)
    val zero_46: word32 = #7 (env_1547)
    val x_4090:
      (word32,
       real32,
       word32,
       real32,
       lambdas_102,
       t_9,
       real32,
       real32,
       lambdas_172) tuple =
      (zero_46,
       half_30,
       maxWord'_35,
       one_38,
       setRoundingMode_39,
       x_4088,
       maxWord_36,
       zero_45,
       class_24)
    val x_4089: lambdas_178 = con xEnv_159 (x_4090)
    return (x_4089)
fun x_4091 (env_1548:
              (word32,
               real32,
               word32,
               real32,
               lambdas_102,
               t_9,
               real32,
               real32,
               lambdas_172) tuple,
            x_4092: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_3970 ()
  block L_3970 ()
    val zero_48: word32 = #0 (env_1548)
    val half_31: real32 = #1 (env_1548)
    val maxWord'_36: word32 = #2 (env_1548)
    val one_39: real32 = #3 (env_1548)
    val setRoundingMode_40: lambdas_102 = #4 (env_1548)
    val x_4093: t_9 = #5 (env_1548)
    val maxWord_37: real32 = #6 (env_1548)
    val zero_47: real32 = #7 (env_1548)
    val class_25: lambdas_172 = #8 (env_1548)
    case class_25 of
      classEnv_1 => L_3971
  block L_3971 (env_1549: (word32, word32, word32) tuple)
    call L_3972 (class_21 (env_1549, x_4092)) handle _ => raise
  block L_3972 (x_4094: float_class_0)
    case x_4094 of
      INF_0 => L_3974 | NAN_1 => L_3973 | _ => L_3975
  block L_3975 ()
    val x_4095: (real32, real32) tuple = (zero_47, x_4092)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3976
  block L_3976 (env_1550: unit)
    call L_3977 (<=_6 (env_1550, x_4095)) handle _ => raise
  block L_3977 (x_4096: bool)
    case x_4096 of
      true => L_3979 | false => L_3978
  block L_3978 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3980
  block L_3980 (env_1551: unit)
    call L_3981 (~_3 (env_1551, one_39)) handle _ => raise
  block L_3981 (x_4097: real32)
    val x_4098: (real32, real32) tuple = (x_4092, x_4097)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3982
  block L_3982 (env_1552: unit)
    call L_3983 (>_8 (env_1552, x_4098)) handle _ => raise
  block L_3983 (x_4099: bool)
    case x_4099 of
      true => L_3985 | false => L_3984
  block L_3984 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3985 ()
    case x_4093 of
      TO_NEGINF_0 => L_3989
    | TO_ZERO_0 => L_3988
    | TO_NEAREST_0 => L_3987
    | TO_POSINF_0 => L_3986
  block L_3986 ()
    return (zero_48)
  block L_3987 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_3990
  block L_3990 (env_1553: unit)
    call L_3991 (~_3 (env_1553, half_31)) handle _ => raise
  block L_3991 (x_4100: real32)
    val x_4101: (real32, real32) tuple = (x_4092, x_4100)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_3992
  block L_3992 (env_1554: unit)
    call L_3993 (<_9 (env_1554, x_4101)) handle _ => raise
  block L_3993 (x_4102: bool)
    case x_4102 of
      true => L_3995 | false => L_3994
  block L_3994 ()
    return (zero_48)
  block L_3995 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3988 ()
    return (zero_48)
  block L_3989 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3979 ()
    val x_4103: (real32, real32) tuple = (x_4092, maxWord_37)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_3996
  block L_3996 (env_1555: unit)
    call L_3997 (<=_6 (env_1555, x_4103)) handle _ => raise
  block L_3997 (x_4104: bool)
    case x_4104 of
      true => L_3999 | false => L_3998
  block L_3998 ()
    val x_4105: (real32, real32) tuple = (maxWord_37, one_39)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4000
  block L_4000 (env_1556: unit)
    call L_4001 (+_4 (env_1556, x_4105)) handle _ => raise
  block L_4001 (x_4106: real32)
    val x_4107: (real32, real32) tuple = (x_4092, x_4106)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4002
  block L_4002 (env_1557: unit)
    call L_4003 (<_9 (env_1557, x_4107)) handle _ => raise
  block L_4003 (x_4108: bool)
    case x_4108 of
      true => L_4005 | false => L_4004
  block L_4004 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4005 ()
    case x_4093 of
      TO_NEGINF_0 => L_4009
    | TO_ZERO_0 => L_4008
    | TO_NEAREST_0 => L_4007
    | TO_POSINF_0 => L_4006
  block L_4006 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4007 ()
    val x_4109: (real32, real32) tuple = (x_4092, maxWord_37)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4010
  block L_4010 (env_1558: unit)
    call L_4011 (-_5 (env_1558, x_4109)) handle _ => raise
  block L_4011 (x_4110: real32)
    val x_4111: (real32, real32) tuple = (x_4110, half_31)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4012
  block L_4012 (env_1559: unit)
    call L_4013 (>=_9 (env_1559, x_4111)) handle _ => raise
  block L_4013 (x_4112: bool)
    case x_4112 of
      true => L_4015 | false => L_4014
  block L_4014 ()
    return (maxWord'_36)
  block L_4015 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4008 ()
    return (maxWord'_36)
  block L_4009 ()
    return (maxWord'_36)
  block L_3999 ()
    case x_4093 of
      TO_POSINF_0 => L_4019
    | TO_NEAREST_0 => L_4018
    | TO_ZERO_0 => L_4017
    | TO_NEGINF_0 => L_4016
  block L_4016 ()
    val x_4113: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4092)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4020
  block L_4020 (env_1560: unit)
    call tail toWord32Unsafe_3 (env_1560, x_4113)
  block L_4017 ()
    val x_4114: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4092)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4021
  block L_4021 (env_1561: unit)
    call tail toWord32Unsafe_3 (env_1561, x_4114)
  block L_4018 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4022
  block L_4022 (env_1562: unit)
    call L_4023 (x_3544 (env_1562, x_966 (*()*))) handle _ => raise
  block L_4023 (m'_19: t_9)
    case setRoundingMode_40 of
      setRoundingModeEnv_0 => L_4024
  block L_4024 (env_1563: (lambdas_226, word32) tuple)
    call L_4025 (setRoundingMode_3 (env_1563, x_965 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4025 (x_4115: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4026
  block L_4026 (env_1564: unit)
    call L_4027 (round_3 (env_1564, x_4092)) handle _ => raise
  block L_4027 (x_4116: real32)
    case setRoundingMode_40 of
      setRoundingModeEnv_0 => L_4028
  block L_4028 (env_1565: (lambdas_226, word32) tuple)
    call L_4029 (setRoundingMode_3 (env_1565, m'_19)) handle _ => raise
  block L_4029 (x_4117: unit)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4030
  block L_4030 (env_1566: unit)
    call tail toWord32Unsafe_3 (env_1566, x_4116)
  block L_4019 ()
    val x_4118: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4092)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4031
  block L_4031 (env_1567: unit)
    call tail toWord32Unsafe_3 (env_1567, x_4118)
  block L_3973 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3974 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4119 (env_1568:
              (lambdas_172, real32, real32, lambdas_102, real32, word32, real32) tuple,
            x_4120: t_9):
  {returns = Some (lambdas_180), raises = Some (exn)} =
L_4032 ()
  block L_4032 ()
    val class_26: lambdas_172 = #0 (env_1568)
    val zero_49: real32 = #1 (env_1568)
    val maxWord_38: real32 = #2 (env_1568)
    val setRoundingMode_41: lambdas_102 = #3 (env_1568)
    val one_40: real32 = #4 (env_1568)
    val zero_50: word32 = #5 (env_1568)
    val half_32: real32 = #6 (env_1568)
    val x_4122:
      (real32, word32, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple =
      (half_32,
       zero_50,
       one_40,
       setRoundingMode_41,
       x_4120,
       maxWord_38,
       zero_49,
       class_26)
    val x_4121: lambdas_180 = con xEnv_161 (x_4122)
    return (x_4121)
fun x_4123 (env_1569:
              (real32,
               word32,
               real32,
               lambdas_102,
               t_9,
               real32,
               real32,
               lambdas_172) tuple,
            x_4124: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4033 ()
  block L_4033 ()
    val half_33: real32 = #0 (env_1569)
    val zero_52: word32 = #1 (env_1569)
    val one_41: real32 = #2 (env_1569)
    val setRoundingMode_42: lambdas_102 = #3 (env_1569)
    val x_4125: t_9 = #4 (env_1569)
    val maxWord_39: real32 = #5 (env_1569)
    val zero_51: real32 = #6 (env_1569)
    val class_27: lambdas_172 = #7 (env_1569)
    case class_27 of
      classEnv_1 => L_4034
  block L_4034 (env_1570: (word32, word32, word32) tuple)
    call L_4035 (class_21 (env_1570, x_4124)) handle _ => raise
  block L_4035 (x_4126: float_class_0)
    case x_4126 of
      INF_0 => L_4037 | NAN_1 => L_4036 | _ => L_4038
  block L_4038 ()
    val x_4127: (real32, real32) tuple = (zero_51, x_4124)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4039
  block L_4039 (env_1571: unit)
    call L_4040 (<=_6 (env_1571, x_4127)) handle _ => raise
  block L_4040 (x_4128: bool)
    case x_4128 of
      true => L_4042 | false => L_4041
  block L_4041 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4043
  block L_4043 (env_1572: unit)
    call L_4044 (~_3 (env_1572, one_41)) handle _ => raise
  block L_4044 (x_4129: real32)
    val x_4130: (real32, real32) tuple = (x_4124, x_4129)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4045
  block L_4045 (env_1573: unit)
    call L_4046 (>_8 (env_1573, x_4130)) handle _ => raise
  block L_4046 (x_4131: bool)
    case x_4131 of
      true => L_4048 | false => L_4047
  block L_4047 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4048 ()
    case x_4125 of
      TO_NEGINF_0 => L_4052
    | TO_ZERO_0 => L_4051
    | TO_NEAREST_0 => L_4050
    | TO_POSINF_0 => L_4049
  block L_4049 ()
    return (zero_52)
  block L_4050 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4053
  block L_4053 (env_1574: unit)
    call L_4054 (~_3 (env_1574, half_33)) handle _ => raise
  block L_4054 (x_4132: real32)
    val x_4133: (real32, real32) tuple = (x_4124, x_4132)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4055
  block L_4055 (env_1575: unit)
    call L_4056 (<_9 (env_1575, x_4133)) handle _ => raise
  block L_4056 (x_4134: bool)
    case x_4134 of
      true => L_4058 | false => L_4057
  block L_4057 ()
    return (zero_52)
  block L_4058 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4051 ()
    return (zero_52)
  block L_4052 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4042 ()
    val x_4135: (real32, real32) tuple = (x_4124, maxWord_39)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4059
  block L_4059 (env_1576: unit)
    call L_4060 (<=_6 (env_1576, x_4135)) handle _ => raise
  block L_4060 (x_4136: bool)
    case x_4136 of
      true => L_4062 | false => L_4061
  block L_4061 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4062 ()
    case x_4125 of
      TO_POSINF_0 => L_4066
    | TO_NEAREST_0 => L_4065
    | TO_ZERO_0 => L_4064
    | TO_NEGINF_0 => L_4063
  block L_4063 ()
    val x_4137: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4124)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4067
  block L_4067 (env_1577: unit)
    call tail toWord32Unsafe_3 (env_1577, x_4137)
  block L_4064 ()
    val x_4138: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4124)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4068
  block L_4068 (env_1578: unit)
    call tail toWord32Unsafe_3 (env_1578, x_4138)
  block L_4065 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4069
  block L_4069 (env_1579: unit)
    call L_4070 (x_3544 (env_1579, x_963 (*()*))) handle _ => raise
  block L_4070 (m'_20: t_9)
    case setRoundingMode_42 of
      setRoundingModeEnv_0 => L_4071
  block L_4071 (env_1580: (lambdas_226, word32) tuple)
    call L_4072 (setRoundingMode_3 (env_1580, x_962 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4072 (x_4139: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4073
  block L_4073 (env_1581: unit)
    call L_4074 (round_3 (env_1581, x_4124)) handle _ => raise
  block L_4074 (x_4140: real32)
    case setRoundingMode_42 of
      setRoundingModeEnv_0 => L_4075
  block L_4075 (env_1582: (lambdas_226, word32) tuple)
    call L_4076 (setRoundingMode_3 (env_1582, m'_20)) handle _ => raise
  block L_4076 (x_4141: unit)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4077
  block L_4077 (env_1583: unit)
    call tail toWord32Unsafe_3 (env_1583, x_4140)
  block L_4066 ()
    val x_4142: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4124)
    case toWord32Unsafe_0 (*con toWord ... _225)*) of
      toWord32UnsafeEnv_0 => L_4078
  block L_4078 (env_1584: unit)
    call tail toWord32Unsafe_3 (env_1584, x_4142)
  block L_4036 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4037 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2144 (env_1585: (lambdas_117, lambdas_116, word32) tuple, x_4143: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4079 ()
  block L_4079 ()
    val <<_26: lambdas_117 = #0 (env_1585)
    val >>_25: lambdas_116 = #1 (env_1585)
    val maxWord'_37: word32 = #2 (env_1585)
    val x_4144: (word32, word32) tuple = (maxWord'_37, x_4143)
    case >>_25 of
      >>Env_1 => L_4080
  block L_4080 (env_1586: (word32, word32) tuple)
    call L_4081 (>>_11 (env_1586, x_4144)) handle _ => raise
  block L_4081 (x_4145: word32)
    val x_4146: (word32, word32) tuple = (x_4145, x_4143)
    case <<_26 of
      <<Env_1 => L_4082
  block L_4082 (env_1587: (word32, word32) tuple)
    call tail <<_8 (env_1587, x_4146)
fun x_4147 (env_1588:
              (lambdas_172, real32, real32, lambdas_102, real32, word16, real32) tuple,
            x_4148: t_9):
  {returns = Some (lambdas_184), raises = Some (exn)} =
L_4083 ()
  block L_4083 ()
    val class_28: lambdas_172 = #0 (env_1588)
    val zero_53: real32 = #1 (env_1588)
    val maxWord_40: real32 = #2 (env_1588)
    val setRoundingMode_43: lambdas_102 = #3 (env_1588)
    val one_42: real32 = #4 (env_1588)
    val maxWord'_38: word16 = #5 (env_1588)
    val half_34: real32 = #6 (env_1588)
    val x_4150:
      (real32, word16, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple =
      (half_34,
       maxWord'_38,
       one_42,
       setRoundingMode_43,
       x_4148,
       maxWord_40,
       zero_53,
       class_28)
    val x_4149: lambdas_184 = con xEnv_166 (x_4150)
    return (x_4149)
fun x_4151 (env_1589:
              (real32,
               word16,
               real32,
               lambdas_102,
               t_9,
               real32,
               real32,
               lambdas_172) tuple,
            x_4152: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4084 ()
  block L_4084 ()
    val half_35: real32 = #0 (env_1589)
    val maxWord'_39: word16 = #1 (env_1589)
    val one_43: real32 = #2 (env_1589)
    val setRoundingMode_44: lambdas_102 = #3 (env_1589)
    val x_4153: t_9 = #4 (env_1589)
    val maxWord_41: real32 = #5 (env_1589)
    val zero_54: real32 = #6 (env_1589)
    val class_29: lambdas_172 = #7 (env_1589)
    case class_29 of
      classEnv_1 => L_4085
  block L_4085 (env_1590: (word32, word32, word32) tuple)
    call L_4086 (class_21 (env_1590, x_4152)) handle _ => raise
  block L_4086 (x_4154: float_class_0)
    case x_4154 of
      INF_0 => L_4088 | NAN_1 => L_4087 | _ => L_4089
  block L_4089 ()
    val x_4155: (real32, real32) tuple = (zero_54, x_4152)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4090
  block L_4090 (env_1591: unit)
    call L_4091 (<=_6 (env_1591, x_4155)) handle _ => raise
  block L_4091 (x_4156: bool)
    case x_4156 of
      true => L_4093 | false => L_4092
  block L_4092 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4094
  block L_4094 (env_1592: unit)
    call L_4095 (~_3 (env_1592, one_43)) handle _ => raise
  block L_4095 (x_4157: real32)
    val x_4158: (real32, real32) tuple = (x_4152, x_4157)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4096
  block L_4096 (env_1593: unit)
    call L_4097 (>_8 (env_1593, x_4158)) handle _ => raise
  block L_4097 (x_4159: bool)
    case x_4159 of
      true => L_4099 | false => L_4098
  block L_4098 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4099 ()
    case x_4153 of
      TO_NEGINF_0 => L_4103
    | TO_ZERO_0 => L_4102
    | TO_NEAREST_0 => L_4101
    | TO_POSINF_0 => L_4100
  block L_4100 ()
    return (x_285 (*0x0:w16*))
  block L_4101 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4104
  block L_4104 (env_1594: unit)
    call L_4105 (~_3 (env_1594, half_35)) handle _ => raise
  block L_4105 (x_4160: real32)
    val x_4161: (real32, real32) tuple = (x_4152, x_4160)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4106
  block L_4106 (env_1595: unit)
    call L_4107 (<_9 (env_1595, x_4161)) handle _ => raise
  block L_4107 (x_4162: bool)
    case x_4162 of
      true => L_4109 | false => L_4108
  block L_4108 ()
    return (x_285 (*0x0:w16*))
  block L_4109 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4102 ()
    return (x_285 (*0x0:w16*))
  block L_4103 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4093 ()
    val x_4163: (real32, real32) tuple = (x_4152, maxWord_41)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4110
  block L_4110 (env_1596: unit)
    call L_4111 (<=_6 (env_1596, x_4163)) handle _ => raise
  block L_4111 (x_4164: bool)
    case x_4164 of
      true => L_4113 | false => L_4112
  block L_4112 ()
    val x_4165: (real32, real32) tuple = (maxWord_41, one_43)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4114
  block L_4114 (env_1597: unit)
    call L_4115 (+_4 (env_1597, x_4165)) handle _ => raise
  block L_4115 (x_4166: real32)
    val x_4167: (real32, real32) tuple = (x_4152, x_4166)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4116
  block L_4116 (env_1598: unit)
    call L_4117 (<_9 (env_1598, x_4167)) handle _ => raise
  block L_4117 (x_4168: bool)
    case x_4168 of
      true => L_4119 | false => L_4118
  block L_4118 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4119 ()
    case x_4153 of
      TO_NEGINF_0 => L_4123
    | TO_ZERO_0 => L_4122
    | TO_NEAREST_0 => L_4121
    | TO_POSINF_0 => L_4120
  block L_4120 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4121 ()
    val x_4169: (real32, real32) tuple = (x_4152, maxWord_41)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4124
  block L_4124 (env_1599: unit)
    call L_4125 (-_5 (env_1599, x_4169)) handle _ => raise
  block L_4125 (x_4170: real32)
    val x_4171: (real32, real32) tuple = (x_4170, half_35)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4126
  block L_4126 (env_1600: unit)
    call L_4127 (>=_9 (env_1600, x_4171)) handle _ => raise
  block L_4127 (x_4172: bool)
    case x_4172 of
      true => L_4129 | false => L_4128
  block L_4128 ()
    return (maxWord'_39)
  block L_4129 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4122 ()
    return (maxWord'_39)
  block L_4123 ()
    return (maxWord'_39)
  block L_4113 ()
    case x_4153 of
      TO_POSINF_0 => L_4133
    | TO_NEAREST_0 => L_4132
    | TO_ZERO_0 => L_4131
    | TO_NEGINF_0 => L_4130
  block L_4130 ()
    val x_4173: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4152)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4134
  block L_4134 (env_1601: unit)
    call tail toWord16Unsafe_3 (env_1601, x_4173)
  block L_4131 ()
    val x_4174: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4152)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4135
  block L_4135 (env_1602: unit)
    call tail toWord16Unsafe_3 (env_1602, x_4174)
  block L_4132 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4136
  block L_4136 (env_1603: unit)
    call L_4137 (x_3544 (env_1603, x_961 (*()*))) handle _ => raise
  block L_4137 (m'_21: t_9)
    case setRoundingMode_44 of
      setRoundingModeEnv_0 => L_4138
  block L_4138 (env_1604: (lambdas_226, word32) tuple)
    call L_4139 (setRoundingMode_3 (env_1604, x_960 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4139 (x_4175: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4140
  block L_4140 (env_1605: unit)
    call L_4141 (round_3 (env_1605, x_4152)) handle _ => raise
  block L_4141 (x_4176: real32)
    case setRoundingMode_44 of
      setRoundingModeEnv_0 => L_4142
  block L_4142 (env_1606: (lambdas_226, word32) tuple)
    call L_4143 (setRoundingMode_3 (env_1606, m'_21)) handle _ => raise
  block L_4143 (x_4177: unit)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4144
  block L_4144 (env_1607: unit)
    call tail toWord16Unsafe_3 (env_1607, x_4176)
  block L_4133 ()
    val x_4178: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4152)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4145
  block L_4145 (env_1608: unit)
    call tail toWord16Unsafe_3 (env_1608, x_4178)
  block L_4087 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4088 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4179 (env_1609:
              (lambdas_172, real32, real32, lambdas_102, real32, real32) tuple,
            x_4180: t_9):
  {returns = Some (lambdas_186), raises = Some (exn)} =
L_4146 ()
  block L_4146 ()
    val class_30: lambdas_172 = #0 (env_1609)
    val zero_55: real32 = #1 (env_1609)
    val maxWord_42: real32 = #2 (env_1609)
    val setRoundingMode_45: lambdas_102 = #3 (env_1609)
    val one_44: real32 = #4 (env_1609)
    val half_36: real32 = #5 (env_1609)
    val x_4182:
      (real32, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple =
      (half_36,
       one_44,
       setRoundingMode_45,
       x_4180,
       maxWord_42,
       zero_55,
       class_30)
    val x_4181: lambdas_186 = con xEnv_168 (x_4182)
    return (x_4181)
fun x_4183 (env_1610:
              (real32, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple,
            x_4184: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4147 ()
  block L_4147 ()
    val half_37: real32 = #0 (env_1610)
    val one_45: real32 = #1 (env_1610)
    val setRoundingMode_46: lambdas_102 = #2 (env_1610)
    val x_4185: t_9 = #3 (env_1610)
    val maxWord_43: real32 = #4 (env_1610)
    val zero_56: real32 = #5 (env_1610)
    val class_31: lambdas_172 = #6 (env_1610)
    case class_31 of
      classEnv_1 => L_4148
  block L_4148 (env_1611: (word32, word32, word32) tuple)
    call L_4149 (class_21 (env_1611, x_4184)) handle _ => raise
  block L_4149 (x_4186: float_class_0)
    case x_4186 of
      INF_0 => L_4151 | NAN_1 => L_4150 | _ => L_4152
  block L_4152 ()
    val x_4187: (real32, real32) tuple = (zero_56, x_4184)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4153
  block L_4153 (env_1612: unit)
    call L_4154 (<=_6 (env_1612, x_4187)) handle _ => raise
  block L_4154 (x_4188: bool)
    case x_4188 of
      true => L_4156 | false => L_4155
  block L_4155 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4157
  block L_4157 (env_1613: unit)
    call L_4158 (~_3 (env_1613, one_45)) handle _ => raise
  block L_4158 (x_4189: real32)
    val x_4190: (real32, real32) tuple = (x_4184, x_4189)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4159
  block L_4159 (env_1614: unit)
    call L_4160 (>_8 (env_1614, x_4190)) handle _ => raise
  block L_4160 (x_4191: bool)
    case x_4191 of
      true => L_4162 | false => L_4161
  block L_4161 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4162 ()
    case x_4185 of
      TO_NEGINF_0 => L_4166
    | TO_ZERO_0 => L_4165
    | TO_NEAREST_0 => L_4164
    | TO_POSINF_0 => L_4163
  block L_4163 ()
    return (x_285 (*0x0:w16*))
  block L_4164 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4167
  block L_4167 (env_1615: unit)
    call L_4168 (~_3 (env_1615, half_37)) handle _ => raise
  block L_4168 (x_4192: real32)
    val x_4193: (real32, real32) tuple = (x_4184, x_4192)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4169
  block L_4169 (env_1616: unit)
    call L_4170 (<_9 (env_1616, x_4193)) handle _ => raise
  block L_4170 (x_4194: bool)
    case x_4194 of
      true => L_4172 | false => L_4171
  block L_4171 ()
    return (x_285 (*0x0:w16*))
  block L_4172 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4165 ()
    return (x_285 (*0x0:w16*))
  block L_4166 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4156 ()
    val x_4195: (real32, real32) tuple = (x_4184, maxWord_43)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4173
  block L_4173 (env_1617: unit)
    call L_4174 (<=_6 (env_1617, x_4195)) handle _ => raise
  block L_4174 (x_4196: bool)
    case x_4196 of
      true => L_4176 | false => L_4175
  block L_4175 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4176 ()
    case x_4185 of
      TO_POSINF_0 => L_4180
    | TO_NEAREST_0 => L_4179
    | TO_ZERO_0 => L_4178
    | TO_NEGINF_0 => L_4177
  block L_4177 ()
    val x_4197: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4184)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4181
  block L_4181 (env_1618: unit)
    call tail toWord16Unsafe_3 (env_1618, x_4197)
  block L_4178 ()
    val x_4198: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4184)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4182
  block L_4182 (env_1619: unit)
    call tail toWord16Unsafe_3 (env_1619, x_4198)
  block L_4179 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4183
  block L_4183 (env_1620: unit)
    call L_4184 (x_3544 (env_1620, x_958 (*()*))) handle _ => raise
  block L_4184 (m'_22: t_9)
    case setRoundingMode_46 of
      setRoundingModeEnv_0 => L_4185
  block L_4185 (env_1621: (lambdas_226, word32) tuple)
    call L_4186 (setRoundingMode_3 (env_1621, x_957 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4186 (x_4199: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4187
  block L_4187 (env_1622: unit)
    call L_4188 (round_3 (env_1622, x_4184)) handle _ => raise
  block L_4188 (x_4200: real32)
    case setRoundingMode_46 of
      setRoundingModeEnv_0 => L_4189
  block L_4189 (env_1623: (lambdas_226, word32) tuple)
    call L_4190 (setRoundingMode_3 (env_1623, m'_22)) handle _ => raise
  block L_4190 (x_4201: unit)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4191
  block L_4191 (env_1624: unit)
    call tail toWord16Unsafe_3 (env_1624, x_4200)
  block L_4180 ()
    val x_4202: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4184)
    case toWord16Unsafe_0 (*con toWord ... _224)*) of
      toWord16UnsafeEnv_0 => L_4192
  block L_4192 (env_1625: unit)
    call tail toWord16Unsafe_3 (env_1625, x_4202)
  block L_4150 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4151 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2133 (env_1626: (lambdas_125, lambdas_124, word16) tuple, x_4203: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_4193 ()
  block L_4193 ()
    val <<_27: lambdas_125 = #0 (env_1626)
    val >>_26: lambdas_124 = #1 (env_1626)
    val maxWord'_40: word16 = #2 (env_1626)
    val x_4204: (word16, word32) tuple = (maxWord'_40, x_4203)
    case >>_26 of
      >>Env_2 => L_4194
  block L_4194 (env_1627: word32)
    call L_4195 (>>_13 (env_1627, x_4204)) handle _ => raise
  block L_4195 (x_4205: word16)
    val x_4206: (word16, word32) tuple = (x_4205, x_4203)
    case <<_27 of
      <<Env_2 => L_4196
  block L_4196 (env_1628: word32)
    call tail <<_13 (env_1628, x_4206)
fun x_4207 (env_1629:
              (lambdas_172, real32, real32, lambdas_102, real32, word8, real32) tuple,
            x_4208: t_9):
  {returns = Some (lambdas_190), raises = Some (exn)} =
L_4197 ()
  block L_4197 ()
    val class_32: lambdas_172 = #0 (env_1629)
    val zero_57: real32 = #1 (env_1629)
    val maxWord_44: real32 = #2 (env_1629)
    val setRoundingMode_47: lambdas_102 = #3 (env_1629)
    val one_46: real32 = #4 (env_1629)
    val maxWord'_41: word8 = #5 (env_1629)
    val half_38: real32 = #6 (env_1629)
    val x_4210:
      (real32, word8, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple =
      (half_38,
       maxWord'_41,
       one_46,
       setRoundingMode_47,
       x_4208,
       maxWord_44,
       zero_57,
       class_32)
    val x_4209: lambdas_190 = con xEnv_173 (x_4210)
    return (x_4209)
fun x_4211 (env_1630:
              (real32,
               word8,
               real32,
               lambdas_102,
               t_9,
               real32,
               real32,
               lambdas_172) tuple,
            x_4212: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4198 ()
  block L_4198 ()
    val half_39: real32 = #0 (env_1630)
    val maxWord'_42: word8 = #1 (env_1630)
    val one_47: real32 = #2 (env_1630)
    val setRoundingMode_48: lambdas_102 = #3 (env_1630)
    val x_4213: t_9 = #4 (env_1630)
    val maxWord_45: real32 = #5 (env_1630)
    val zero_58: real32 = #6 (env_1630)
    val class_33: lambdas_172 = #7 (env_1630)
    case class_33 of
      classEnv_1 => L_4199
  block L_4199 (env_1631: (word32, word32, word32) tuple)
    call L_4200 (class_21 (env_1631, x_4212)) handle _ => raise
  block L_4200 (x_4214: float_class_0)
    case x_4214 of
      INF_0 => L_4202 | NAN_1 => L_4201 | _ => L_4203
  block L_4203 ()
    val x_4215: (real32, real32) tuple = (zero_58, x_4212)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4204
  block L_4204 (env_1632: unit)
    call L_4205 (<=_6 (env_1632, x_4215)) handle _ => raise
  block L_4205 (x_4216: bool)
    case x_4216 of
      true => L_4207 | false => L_4206
  block L_4206 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4208
  block L_4208 (env_1633: unit)
    call L_4209 (~_3 (env_1633, one_47)) handle _ => raise
  block L_4209 (x_4217: real32)
    val x_4218: (real32, real32) tuple = (x_4212, x_4217)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4210
  block L_4210 (env_1634: unit)
    call L_4211 (>_8 (env_1634, x_4218)) handle _ => raise
  block L_4211 (x_4219: bool)
    case x_4219 of
      true => L_4213 | false => L_4212
  block L_4212 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4213 ()
    case x_4213 of
      TO_NEGINF_0 => L_4217
    | TO_ZERO_0 => L_4216
    | TO_NEAREST_0 => L_4215
    | TO_POSINF_0 => L_4214
  block L_4214 ()
    return (x_271 (*0x0:w8*))
  block L_4215 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4218
  block L_4218 (env_1635: unit)
    call L_4219 (~_3 (env_1635, half_39)) handle _ => raise
  block L_4219 (x_4220: real32)
    val x_4221: (real32, real32) tuple = (x_4212, x_4220)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4220
  block L_4220 (env_1636: unit)
    call L_4221 (<_9 (env_1636, x_4221)) handle _ => raise
  block L_4221 (x_4222: bool)
    case x_4222 of
      true => L_4223 | false => L_4222
  block L_4222 ()
    return (x_271 (*0x0:w8*))
  block L_4223 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4216 ()
    return (x_271 (*0x0:w8*))
  block L_4217 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4207 ()
    val x_4223: (real32, real32) tuple = (x_4212, maxWord_45)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4224
  block L_4224 (env_1637: unit)
    call L_4225 (<=_6 (env_1637, x_4223)) handle _ => raise
  block L_4225 (x_4224: bool)
    case x_4224 of
      true => L_4227 | false => L_4226
  block L_4226 ()
    val x_4225: (real32, real32) tuple = (maxWord_45, one_47)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4228
  block L_4228 (env_1638: unit)
    call L_4229 (+_4 (env_1638, x_4225)) handle _ => raise
  block L_4229 (x_4226: real32)
    val x_4227: (real32, real32) tuple = (x_4212, x_4226)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4230
  block L_4230 (env_1639: unit)
    call L_4231 (<_9 (env_1639, x_4227)) handle _ => raise
  block L_4231 (x_4228: bool)
    case x_4228 of
      true => L_4233 | false => L_4232
  block L_4232 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4233 ()
    case x_4213 of
      TO_NEGINF_0 => L_4237
    | TO_ZERO_0 => L_4236
    | TO_NEAREST_0 => L_4235
    | TO_POSINF_0 => L_4234
  block L_4234 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4235 ()
    val x_4229: (real32, real32) tuple = (x_4212, maxWord_45)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4238
  block L_4238 (env_1640: unit)
    call L_4239 (-_5 (env_1640, x_4229)) handle _ => raise
  block L_4239 (x_4230: real32)
    val x_4231: (real32, real32) tuple = (x_4230, half_39)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4240
  block L_4240 (env_1641: unit)
    call L_4241 (>=_9 (env_1641, x_4231)) handle _ => raise
  block L_4241 (x_4232: bool)
    case x_4232 of
      true => L_4243 | false => L_4242
  block L_4242 ()
    return (maxWord'_42)
  block L_4243 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4236 ()
    return (maxWord'_42)
  block L_4237 ()
    return (maxWord'_42)
  block L_4227 ()
    case x_4213 of
      TO_POSINF_0 => L_4247
    | TO_NEAREST_0 => L_4246
    | TO_ZERO_0 => L_4245
    | TO_NEGINF_0 => L_4244
  block L_4244 ()
    val x_4233: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4212)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4248
  block L_4248 (env_1642: unit)
    call tail toWord8Unsafe_3 (env_1642, x_4233)
  block L_4245 ()
    val x_4234: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4212)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4249
  block L_4249 (env_1643: unit)
    call tail toWord8Unsafe_3 (env_1643, x_4234)
  block L_4246 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4250
  block L_4250 (env_1644: unit)
    call L_4251 (x_3544 (env_1644, x_956 (*()*))) handle _ => raise
  block L_4251 (m'_23: t_9)
    case setRoundingMode_48 of
      setRoundingModeEnv_0 => L_4252
  block L_4252 (env_1645: (lambdas_226, word32) tuple)
    call L_4253 (setRoundingMode_3 (env_1645, x_955 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4253 (x_4235: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4254
  block L_4254 (env_1646: unit)
    call L_4255 (round_3 (env_1646, x_4212)) handle _ => raise
  block L_4255 (x_4236: real32)
    case setRoundingMode_48 of
      setRoundingModeEnv_0 => L_4256
  block L_4256 (env_1647: (lambdas_226, word32) tuple)
    call L_4257 (setRoundingMode_3 (env_1647, m'_23)) handle _ => raise
  block L_4257 (x_4237: unit)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4258
  block L_4258 (env_1648: unit)
    call tail toWord8Unsafe_3 (env_1648, x_4236)
  block L_4247 ()
    val x_4238: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4212)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4259
  block L_4259 (env_1649: unit)
    call tail toWord8Unsafe_3 (env_1649, x_4238)
  block L_4201 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4202 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_4239 (env_1650:
              (lambdas_172, real32, real32, lambdas_102, real32, real32) tuple,
            x_4240: t_9):
  {returns = Some (lambdas_192), raises = Some (exn)} =
L_4260 ()
  block L_4260 ()
    val class_34: lambdas_172 = #0 (env_1650)
    val zero_59: real32 = #1 (env_1650)
    val maxWord_46: real32 = #2 (env_1650)
    val setRoundingMode_49: lambdas_102 = #3 (env_1650)
    val one_48: real32 = #4 (env_1650)
    val half_40: real32 = #5 (env_1650)
    val x_4242:
      (real32, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple =
      (half_40,
       one_48,
       setRoundingMode_49,
       x_4240,
       maxWord_46,
       zero_59,
       class_34)
    val x_4241: lambdas_192 = con xEnv_175 (x_4242)
    return (x_4241)
fun x_4243 (env_1651:
              (real32, real32, lambdas_102, t_9, real32, real32, lambdas_172) tuple,
            x_4244: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4261 ()
  block L_4261 ()
    val half_41: real32 = #0 (env_1651)
    val one_49: real32 = #1 (env_1651)
    val setRoundingMode_50: lambdas_102 = #2 (env_1651)
    val x_4245: t_9 = #3 (env_1651)
    val maxWord_47: real32 = #4 (env_1651)
    val zero_60: real32 = #5 (env_1651)
    val class_35: lambdas_172 = #6 (env_1651)
    case class_35 of
      classEnv_1 => L_4262
  block L_4262 (env_1652: (word32, word32, word32) tuple)
    call L_4263 (class_21 (env_1652, x_4244)) handle _ => raise
  block L_4263 (x_4246: float_class_0)
    case x_4246 of
      INF_0 => L_4265 | NAN_1 => L_4264 | _ => L_4266
  block L_4266 ()
    val x_4247: (real32, real32) tuple = (zero_60, x_4244)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4267
  block L_4267 (env_1653: unit)
    call L_4268 (<=_6 (env_1653, x_4247)) handle _ => raise
  block L_4268 (x_4248: bool)
    case x_4248 of
      true => L_4270 | false => L_4269
  block L_4269 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4271
  block L_4271 (env_1654: unit)
    call L_4272 (~_3 (env_1654, one_49)) handle _ => raise
  block L_4272 (x_4249: real32)
    val x_4250: (real32, real32) tuple = (x_4244, x_4249)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_4273
  block L_4273 (env_1655: unit)
    call L_4274 (>_8 (env_1655, x_4250)) handle _ => raise
  block L_4274 (x_4251: bool)
    case x_4251 of
      true => L_4276 | false => L_4275
  block L_4275 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4276 ()
    case x_4245 of
      TO_NEGINF_0 => L_4280
    | TO_ZERO_0 => L_4279
    | TO_NEAREST_0 => L_4278
    | TO_POSINF_0 => L_4277
  block L_4277 ()
    return (x_271 (*0x0:w8*))
  block L_4278 ()
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4281
  block L_4281 (env_1656: unit)
    call L_4282 (~_3 (env_1656, half_41)) handle _ => raise
  block L_4282 (x_4252: real32)
    val x_4253: (real32, real32) tuple = (x_4244, x_4252)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4283
  block L_4283 (env_1657: unit)
    call L_4284 (<_9 (env_1657, x_4253)) handle _ => raise
  block L_4284 (x_4254: bool)
    case x_4254 of
      true => L_4286 | false => L_4285
  block L_4285 ()
    return (x_271 (*0x0:w8*))
  block L_4286 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4279 ()
    return (x_271 (*0x0:w8*))
  block L_4280 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4270 ()
    val x_4255: (real32, real32) tuple = (x_4244, maxWord_47)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4287
  block L_4287 (env_1658: unit)
    call L_4288 (<=_6 (env_1658, x_4255)) handle _ => raise
  block L_4288 (x_4256: bool)
    case x_4256 of
      true => L_4290 | false => L_4289
  block L_4289 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4290 ()
    case x_4245 of
      TO_POSINF_0 => L_4294
    | TO_NEAREST_0 => L_4293
    | TO_ZERO_0 => L_4292
    | TO_NEGINF_0 => L_4291
  block L_4291 ()
    val x_4257: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4244)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4295
  block L_4295 (env_1659: unit)
    call tail toWord8Unsafe_3 (env_1659, x_4257)
  block L_4292 ()
    val x_4258: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4244)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4296
  block L_4296 (env_1660: unit)
    call tail toWord8Unsafe_3 (env_1660, x_4258)
  block L_4293 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4297
  block L_4297 (env_1661: unit)
    call L_4298 (x_3544 (env_1661, x_953 (*()*))) handle _ => raise
  block L_4298 (m'_24: t_9)
    case setRoundingMode_50 of
      setRoundingModeEnv_0 => L_4299
  block L_4299 (env_1662: (lambdas_226, word32) tuple)
    call L_4300 (setRoundingMode_3 (env_1662, x_952 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4300 (x_4259: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4301
  block L_4301 (env_1663: unit)
    call L_4302 (round_3 (env_1663, x_4244)) handle _ => raise
  block L_4302 (x_4260: real32)
    case setRoundingMode_50 of
      setRoundingModeEnv_0 => L_4303
  block L_4303 (env_1664: (lambdas_226, word32) tuple)
    call L_4304 (setRoundingMode_3 (env_1664, m'_24)) handle _ => raise
  block L_4304 (x_4261: unit)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4305
  block L_4305 (env_1665: unit)
    call tail toWord8Unsafe_3 (env_1665, x_4260)
  block L_4294 ()
    val x_4262: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4244)
    case toWord8Unsafe_0 (*con toWord ... _223)*) of
      toWord8UnsafeEnv_0 => L_4306
  block L_4306 (env_1666: unit)
    call tail toWord8Unsafe_3 (env_1666, x_4262)
  block L_4264 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4265 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2122 (env_1667: (lambdas_133, lambdas_132, word8) tuple, x_4263: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_4307 ()
  block L_4307 ()
    val <<_28: lambdas_133 = #0 (env_1667)
    val >>_27: lambdas_132 = #1 (env_1667)
    val maxWord'_43: word8 = #2 (env_1667)
    val x_4264: (word8, word32) tuple = (maxWord'_43, x_4263)
    case >>_27 of
      >>Env_3 => L_4308
  block L_4308 (env_1668: word32)
    call L_4309 (>>_15 (env_1668, x_4264)) handle _ => raise
  block L_4309 (x_4265: word8)
    val x_4266: (word8, word32) tuple = (x_4265, x_4263)
    case <<_28 of
      <<Env_3 => L_4310
  block L_4310 (env_1669: word32)
    call tail <<_15 (env_1669, x_4266)
fun x_4267 (env_1670:
              (real32, real32, lambdas_102, real32, word64, real32, word64) tuple,
            x_4268: t_9):
  {returns = Some (lambdas_196), raises = Some (exn)} =
L_4311 ()
  block L_4311 ()
    val minInt_32: real32 = #0 (env_1670)
    val maxInt_32: real32 = #1 (env_1670)
    val setRoundingMode_51: lambdas_102 = #2 (env_1670)
    val one_50: real32 = #3 (env_1670)
    val maxInt'_32: word64 = #4 (env_1670)
    val half_42: real32 = #5 (env_1670)
    val minInt'_14: word64 = #6 (env_1670)
    val x_4270:
      (word64, real32, word64, real32, lambdas_102, t_9, real32, real32) tuple =
      (minInt'_14,
       half_42,
       maxInt'_32,
       one_50,
       setRoundingMode_51,
       x_4268,
       maxInt_32,
       minInt_32)
    val x_4269: lambdas_196 = con xEnv_180 (x_4270)
    return (x_4269)
fun x_4271 (env_1671:
              (word64, real32, word64, real32, lambdas_102, t_9, real32, real32) tuple,
            x_4272: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_4312 ()
  block L_4312 ()
    val minInt'_15: word64 = #0 (env_1671)
    val half_43: real32 = #1 (env_1671)
    val maxInt'_33: word64 = #2 (env_1671)
    val one_51: real32 = #3 (env_1671)
    val setRoundingMode_52: lambdas_102 = #4 (env_1671)
    val x_4274: t_9 = #5 (env_1671)
    val maxInt_33: real32 = #6 (env_1671)
    val minInt_33: real32 = #7 (env_1671)
    val x_4273: (real32, real32) tuple = (minInt_33, x_4272)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4313
  block L_4313 (env_1672: unit)
    call L_4314 (<=_6 (env_1672, x_4273)) handle _ => raise
  block L_4314 (x_4275: bool)
    case x_4275 of
      true => L_4316 | false => L_4315
  block L_4315 ()
    val x_4276: (real32, real32) tuple = (x_4272, minInt_33)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4317
  block L_4317 (env_1673: unit)
    call L_4318 (<_9 (env_1673, x_4276)) handle _ => raise
  block L_4318 (x_4277: bool)
    case x_4277 of
      true => L_4320 | false => L_4319
  block L_4319 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4320 ()
    val x_4278: (real32, real32) tuple = (minInt_33, one_51)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4321
  block L_4321 (env_1674: unit)
    call L_4322 (-_5 (env_1674, x_4278)) handle _ => raise
  block L_4322 (x_4279: real32)
    val x_4280: (real32, real32) tuple = (x_4279, x_4272)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4323
  block L_4323 (env_1675: unit)
    call L_4324 (<_9 (env_1675, x_4280)) handle _ => raise
  block L_4324 (x_4281: bool)
    case x_4281 of
      true => L_4326 | false => L_4325
  block L_4325 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4326 ()
    case x_4274 of
      TO_NEGINF_0 => L_4330
    | TO_ZERO_0 => L_4329
    | TO_NEAREST_0 => L_4328
    | TO_POSINF_0 => L_4327
  block L_4327 ()
    return (minInt'_15)
  block L_4328 ()
    val x_4282: (real32, real32) tuple = (x_4272, minInt_33)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4331
  block L_4331 (env_1676: unit)
    call L_4332 (-_5 (env_1676, x_4282)) handle _ => raise
  block L_4332 (x_4283: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4333
  block L_4333 (env_1677: unit)
    call L_4334 (~_3 (env_1677, half_43)) handle _ => raise
  block L_4334 (x_4284: real32)
    val x_4285: (real32, real32) tuple = (x_4283, x_4284)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4335
  block L_4335 (env_1678: unit)
    call L_4336 (<_9 (env_1678, x_4285)) handle _ => raise
  block L_4336 (x_4286: bool)
    case x_4286 of
      true => L_4338 | false => L_4337
  block L_4337 ()
    return (minInt'_15)
  block L_4338 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4329 ()
    return (minInt'_15)
  block L_4330 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4316 ()
    val x_4287: (real32, real32) tuple = (x_4272, maxInt_33)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4339
  block L_4339 (env_1679: unit)
    call L_4340 (<=_6 (env_1679, x_4287)) handle _ => raise
  block L_4340 (x_4288: bool)
    case x_4288 of
      true => L_4342 | false => L_4341
  block L_4341 ()
    val x_4289: (real32, real32) tuple = (maxInt_33, one_51)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4343
  block L_4343 (env_1680: unit)
    call L_4344 (+_4 (env_1680, x_4289)) handle _ => raise
  block L_4344 (x_4290: real32)
    val x_4291: (real32, real32) tuple = (x_4272, x_4290)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4345
  block L_4345 (env_1681: unit)
    call L_4346 (<_9 (env_1681, x_4291)) handle _ => raise
  block L_4346 (x_4292: bool)
    case x_4292 of
      true => L_4348 | false => L_4347
  block L_4347 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4348 ()
    case x_4274 of
      TO_NEGINF_0 => L_4352
    | TO_ZERO_0 => L_4351
    | TO_NEAREST_0 => L_4350
    | TO_POSINF_0 => L_4349
  block L_4349 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4350 ()
    val x_4293: (real32, real32) tuple = (x_4272, maxInt_33)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4353
  block L_4353 (env_1682: unit)
    call L_4354 (-_5 (env_1682, x_4293)) handle _ => raise
  block L_4354 (x_4294: real32)
    val x_4295: (real32, real32) tuple = (x_4294, half_43)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4355
  block L_4355 (env_1683: unit)
    call L_4356 (>=_9 (env_1683, x_4295)) handle _ => raise
  block L_4356 (x_4296: bool)
    case x_4296 of
      true => L_4358 | false => L_4357
  block L_4357 ()
    return (maxInt'_33)
  block L_4358 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4351 ()
    return (maxInt'_33)
  block L_4352 ()
    return (maxInt'_33)
  block L_4342 ()
    case x_4274 of
      TO_POSINF_0 => L_4362
    | TO_NEAREST_0 => L_4361
    | TO_ZERO_0 => L_4360
    | TO_NEGINF_0 => L_4359
  block L_4359 ()
    val x_4297: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4272)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4363
  block L_4363 (env_1684: unit)
    call tail toInt64Unsafe_3 (env_1684, x_4297)
  block L_4360 ()
    val x_4298: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4272)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4364
  block L_4364 (env_1685: unit)
    call tail toInt64Unsafe_3 (env_1685, x_4298)
  block L_4361 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4365
  block L_4365 (env_1686: unit)
    call L_4366 (x_3544 (env_1686, x_951 (*()*))) handle _ => raise
  block L_4366 (m'_25: t_9)
    case setRoundingMode_52 of
      setRoundingModeEnv_0 => L_4367
  block L_4367 (env_1687: (lambdas_226, word32) tuple)
    call L_4368 (setRoundingMode_3 (env_1687, x_950 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4368 (x_4299: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4369
  block L_4369 (env_1688: unit)
    call L_4370 (round_3 (env_1688, x_4272)) handle _ => raise
  block L_4370 (x_4300: real32)
    case setRoundingMode_52 of
      setRoundingModeEnv_0 => L_4371
  block L_4371 (env_1689: (lambdas_226, word32) tuple)
    call L_4372 (setRoundingMode_3 (env_1689, m'_25)) handle _ => raise
  block L_4372 (x_4301: unit)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4373
  block L_4373 (env_1690: unit)
    call tail toInt64Unsafe_3 (env_1690, x_4300)
  block L_4362 ()
    val x_4302: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4272)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4374
  block L_4374 (env_1691: unit)
    call tail toInt64Unsafe_3 (env_1691, x_4302)
fun x_4303 (env_1692: (real32, real32, lambdas_102) tuple, x_4304: t_9):
  {returns = Some (lambdas_198), raises = Some (exn)} =
L_4375 ()
  block L_4375 ()
    val minInt_34: real32 = #0 (env_1692)
    val maxInt_34: real32 = #1 (env_1692)
    val setRoundingMode_53: lambdas_102 = #2 (env_1692)
    val x_4306: (lambdas_102, t_9, real32, real32) tuple =
      (setRoundingMode_53, x_4304, maxInt_34, minInt_34)
    val x_4305: lambdas_198 = con xEnv_182 (x_4306)
    return (x_4305)
fun x_4307 (env_1693: (lambdas_102, t_9, real32, real32) tuple, x_4308: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_4376 ()
  block L_4376 ()
    val setRoundingMode_54: lambdas_102 = #0 (env_1693)
    val x_4310: t_9 = #1 (env_1693)
    val maxInt_35: real32 = #2 (env_1693)
    val minInt_35: real32 = #3 (env_1693)
    val x_4309: (real32, real32) tuple = (minInt_35, x_4308)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4377
  block L_4377 (env_1694: unit)
    call L_4378 (<=_6 (env_1694, x_4309)) handle _ => raise
  block L_4378 (x_4311: bool)
    case x_4311 of
      true => L_4380 | false => L_4379
  block L_4379 ()
    val x_4312: (real32, real32) tuple = (x_4308, minInt_35)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4381
  block L_4381 (env_1695: unit)
    call L_4382 (<_9 (env_1695, x_4312)) handle _ => raise
  block L_4382 (x_4313: bool)
    case x_4313 of
      true => L_4384 | false => L_4383
  block L_4383 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4384 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4380 ()
    val x_4314: (real32, real32) tuple = (x_4308, maxInt_35)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4385
  block L_4385 (env_1696: unit)
    call L_4386 (<=_6 (env_1696, x_4314)) handle _ => raise
  block L_4386 (x_4315: bool)
    case x_4315 of
      true => L_4388 | false => L_4387
  block L_4387 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4388 ()
    case x_4310 of
      TO_POSINF_0 => L_4392
    | TO_NEAREST_0 => L_4391
    | TO_ZERO_0 => L_4390
    | TO_NEGINF_0 => L_4389
  block L_4389 ()
    val x_4316: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4308)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4393
  block L_4393 (env_1697: unit)
    call tail toInt64Unsafe_3 (env_1697, x_4316)
  block L_4390 ()
    val x_4317: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4308)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4394
  block L_4394 (env_1698: unit)
    call tail toInt64Unsafe_3 (env_1698, x_4317)
  block L_4391 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4395
  block L_4395 (env_1699: unit)
    call L_4396 (x_3544 (env_1699, x_948 (*()*))) handle _ => raise
  block L_4396 (m'_26: t_9)
    case setRoundingMode_54 of
      setRoundingModeEnv_0 => L_4397
  block L_4397 (env_1700: (lambdas_226, word32) tuple)
    call L_4398 (setRoundingMode_3 (env_1700, x_947 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4398 (x_4318: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4399
  block L_4399 (env_1701: unit)
    call L_4400 (round_3 (env_1701, x_4308)) handle _ => raise
  block L_4400 (x_4319: real32)
    case setRoundingMode_54 of
      setRoundingModeEnv_0 => L_4401
  block L_4401 (env_1702: (lambdas_226, word32) tuple)
    call L_4402 (setRoundingMode_3 (env_1702, m'_26)) handle _ => raise
  block L_4402 (x_4320: unit)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4403
  block L_4403 (env_1703: unit)
    call tail toInt64Unsafe_3 (env_1703, x_4319)
  block L_4392 ()
    val x_4321: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4308)
    case toInt64Unsafe_0 (*con toInt6 ... _221)*) of
      toInt64UnsafeEnv_0 => L_4404
  block L_4404 (env_1704: unit)
    call tail toInt64Unsafe_3 (env_1704, x_4321)
fun x_2109 (env_1705: (lambdas_141, lambdas_140, word64) tuple, x_4322: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4405 ()
  block L_4405 ()
    val <<_29: lambdas_141 = #0 (env_1705)
    val >>_28: lambdas_140 = #1 (env_1705)
    val maxInt'_34: word64 = #2 (env_1705)
    val x_4323: (word64, word32) tuple = (maxInt'_34, x_4322)
    case >>_28 of
      >>Env_4 => L_4406
  block L_4406 (env_1706: (word32, word64) tuple)
    call L_4407 (>>_17 (env_1706, x_4323)) handle _ => raise
  block L_4407 (x_4324: word64)
    val x_4325: (word64, word32) tuple = (x_4324, x_4322)
    case <<_29 of
      <<Env_4 => L_4408
  block L_4408 (env_1707: (word32, word64) tuple)
    call tail <<_17 (env_1707, x_4325)
fun x_4326 (env_1708:
              (real32, real32, lambdas_102, real32, word32, real32, word32) tuple,
            x_4327: t_9):
  {returns = Some (lambdas_202), raises = Some (exn)} =
L_4409 ()
  block L_4409 ()
    val minInt_36: real32 = #0 (env_1708)
    val maxInt_36: real32 = #1 (env_1708)
    val setRoundingMode_55: lambdas_102 = #2 (env_1708)
    val one_52: real32 = #3 (env_1708)
    val maxInt'_35: word32 = #4 (env_1708)
    val half_44: real32 = #5 (env_1708)
    val minInt'_16: word32 = #6 (env_1708)
    val x_4329:
      (word32, real32, word32, real32, lambdas_102, t_9, real32, real32) tuple =
      (minInt'_16,
       half_44,
       maxInt'_35,
       one_52,
       setRoundingMode_55,
       x_4327,
       maxInt_36,
       minInt_36)
    val x_4328: lambdas_202 = con xEnv_187 (x_4329)
    return (x_4328)
fun x_4330 (env_1709:
              (word32, real32, word32, real32, lambdas_102, t_9, real32, real32) tuple,
            x_4331: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4410 ()
  block L_4410 ()
    val minInt'_17: word32 = #0 (env_1709)
    val half_45: real32 = #1 (env_1709)
    val maxInt'_36: word32 = #2 (env_1709)
    val one_53: real32 = #3 (env_1709)
    val setRoundingMode_56: lambdas_102 = #4 (env_1709)
    val x_4333: t_9 = #5 (env_1709)
    val maxInt_37: real32 = #6 (env_1709)
    val minInt_37: real32 = #7 (env_1709)
    val x_4332: (real32, real32) tuple = (minInt_37, x_4331)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4411
  block L_4411 (env_1710: unit)
    call L_4412 (<=_6 (env_1710, x_4332)) handle _ => raise
  block L_4412 (x_4334: bool)
    case x_4334 of
      true => L_4414 | false => L_4413
  block L_4413 ()
    val x_4335: (real32, real32) tuple = (x_4331, minInt_37)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4415
  block L_4415 (env_1711: unit)
    call L_4416 (<_9 (env_1711, x_4335)) handle _ => raise
  block L_4416 (x_4336: bool)
    case x_4336 of
      true => L_4418 | false => L_4417
  block L_4417 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4418 ()
    val x_4337: (real32, real32) tuple = (minInt_37, one_53)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4419
  block L_4419 (env_1712: unit)
    call L_4420 (-_5 (env_1712, x_4337)) handle _ => raise
  block L_4420 (x_4338: real32)
    val x_4339: (real32, real32) tuple = (x_4338, x_4331)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4421
  block L_4421 (env_1713: unit)
    call L_4422 (<_9 (env_1713, x_4339)) handle _ => raise
  block L_4422 (x_4340: bool)
    case x_4340 of
      true => L_4424 | false => L_4423
  block L_4423 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4424 ()
    case x_4333 of
      TO_NEGINF_0 => L_4428
    | TO_ZERO_0 => L_4427
    | TO_NEAREST_0 => L_4426
    | TO_POSINF_0 => L_4425
  block L_4425 ()
    return (minInt'_17)
  block L_4426 ()
    val x_4341: (real32, real32) tuple = (x_4331, minInt_37)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4429
  block L_4429 (env_1714: unit)
    call L_4430 (-_5 (env_1714, x_4341)) handle _ => raise
  block L_4430 (x_4342: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4431
  block L_4431 (env_1715: unit)
    call L_4432 (~_3 (env_1715, half_45)) handle _ => raise
  block L_4432 (x_4343: real32)
    val x_4344: (real32, real32) tuple = (x_4342, x_4343)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4433
  block L_4433 (env_1716: unit)
    call L_4434 (<_9 (env_1716, x_4344)) handle _ => raise
  block L_4434 (x_4345: bool)
    case x_4345 of
      true => L_4436 | false => L_4435
  block L_4435 ()
    return (minInt'_17)
  block L_4436 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4427 ()
    return (minInt'_17)
  block L_4428 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4414 ()
    val x_4346: (real32, real32) tuple = (x_4331, maxInt_37)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4437
  block L_4437 (env_1717: unit)
    call L_4438 (<=_6 (env_1717, x_4346)) handle _ => raise
  block L_4438 (x_4347: bool)
    case x_4347 of
      true => L_4440 | false => L_4439
  block L_4439 ()
    val x_4348: (real32, real32) tuple = (maxInt_37, one_53)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4441
  block L_4441 (env_1718: unit)
    call L_4442 (+_4 (env_1718, x_4348)) handle _ => raise
  block L_4442 (x_4349: real32)
    val x_4350: (real32, real32) tuple = (x_4331, x_4349)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4443
  block L_4443 (env_1719: unit)
    call L_4444 (<_9 (env_1719, x_4350)) handle _ => raise
  block L_4444 (x_4351: bool)
    case x_4351 of
      true => L_4446 | false => L_4445
  block L_4445 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4446 ()
    case x_4333 of
      TO_NEGINF_0 => L_4450
    | TO_ZERO_0 => L_4449
    | TO_NEAREST_0 => L_4448
    | TO_POSINF_0 => L_4447
  block L_4447 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4448 ()
    val x_4352: (real32, real32) tuple = (x_4331, maxInt_37)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4451
  block L_4451 (env_1720: unit)
    call L_4452 (-_5 (env_1720, x_4352)) handle _ => raise
  block L_4452 (x_4353: real32)
    val x_4354: (real32, real32) tuple = (x_4353, half_45)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4453
  block L_4453 (env_1721: unit)
    call L_4454 (>=_9 (env_1721, x_4354)) handle _ => raise
  block L_4454 (x_4355: bool)
    case x_4355 of
      true => L_4456 | false => L_4455
  block L_4455 ()
    return (maxInt'_36)
  block L_4456 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4449 ()
    return (maxInt'_36)
  block L_4450 ()
    return (maxInt'_36)
  block L_4440 ()
    case x_4333 of
      TO_POSINF_0 => L_4460
    | TO_NEAREST_0 => L_4459
    | TO_ZERO_0 => L_4458
    | TO_NEGINF_0 => L_4457
  block L_4457 ()
    val x_4356: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4331)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4461
  block L_4461 (env_1722: unit)
    call tail toInt32Unsafe_3 (env_1722, x_4356)
  block L_4458 ()
    val x_4357: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4331)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4462
  block L_4462 (env_1723: unit)
    call tail toInt32Unsafe_3 (env_1723, x_4357)
  block L_4459 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4463
  block L_4463 (env_1724: unit)
    call L_4464 (x_3544 (env_1724, x_945 (*()*))) handle _ => raise
  block L_4464 (m'_27: t_9)
    case setRoundingMode_56 of
      setRoundingModeEnv_0 => L_4465
  block L_4465 (env_1725: (lambdas_226, word32) tuple)
    call L_4466 (setRoundingMode_3 (env_1725, x_944 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4466 (x_4358: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4467
  block L_4467 (env_1726: unit)
    call L_4468 (round_3 (env_1726, x_4331)) handle _ => raise
  block L_4468 (x_4359: real32)
    case setRoundingMode_56 of
      setRoundingModeEnv_0 => L_4469
  block L_4469 (env_1727: (lambdas_226, word32) tuple)
    call L_4470 (setRoundingMode_3 (env_1727, m'_27)) handle _ => raise
  block L_4470 (x_4360: unit)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4471
  block L_4471 (env_1728: unit)
    call tail toInt32Unsafe_3 (env_1728, x_4359)
  block L_4460 ()
    val x_4361: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4331)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4472
  block L_4472 (env_1729: unit)
    call tail toInt32Unsafe_3 (env_1729, x_4361)
fun x_4362 (env_1730: (real32, real32, lambdas_102) tuple, x_4363: t_9):
  {returns = Some (lambdas_204), raises = Some (exn)} =
L_4473 ()
  block L_4473 ()
    val minInt_38: real32 = #0 (env_1730)
    val maxInt_38: real32 = #1 (env_1730)
    val setRoundingMode_57: lambdas_102 = #2 (env_1730)
    val x_4365: (lambdas_102, t_9, real32, real32) tuple =
      (setRoundingMode_57, x_4363, maxInt_38, minInt_38)
    val x_4364: lambdas_204 = con xEnv_189 (x_4365)
    return (x_4364)
fun x_4366 (env_1731: (lambdas_102, t_9, real32, real32) tuple, x_4367: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4474 ()
  block L_4474 ()
    val setRoundingMode_58: lambdas_102 = #0 (env_1731)
    val x_4369: t_9 = #1 (env_1731)
    val maxInt_39: real32 = #2 (env_1731)
    val minInt_39: real32 = #3 (env_1731)
    val x_4368: (real32, real32) tuple = (minInt_39, x_4367)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4475
  block L_4475 (env_1732: unit)
    call L_4476 (<=_6 (env_1732, x_4368)) handle _ => raise
  block L_4476 (x_4370: bool)
    case x_4370 of
      true => L_4478 | false => L_4477
  block L_4477 ()
    val x_4371: (real32, real32) tuple = (x_4367, minInt_39)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4479
  block L_4479 (env_1733: unit)
    call L_4480 (<_9 (env_1733, x_4371)) handle _ => raise
  block L_4480 (x_4372: bool)
    case x_4372 of
      true => L_4482 | false => L_4481
  block L_4481 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4482 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4478 ()
    val x_4373: (real32, real32) tuple = (x_4367, maxInt_39)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4483
  block L_4483 (env_1734: unit)
    call L_4484 (<=_6 (env_1734, x_4373)) handle _ => raise
  block L_4484 (x_4374: bool)
    case x_4374 of
      true => L_4486 | false => L_4485
  block L_4485 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4486 ()
    case x_4369 of
      TO_POSINF_0 => L_4490
    | TO_NEAREST_0 => L_4489
    | TO_ZERO_0 => L_4488
    | TO_NEGINF_0 => L_4487
  block L_4487 ()
    val x_4375: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4367)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4491
  block L_4491 (env_1735: unit)
    call tail toInt32Unsafe_3 (env_1735, x_4375)
  block L_4488 ()
    val x_4376: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4367)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4492
  block L_4492 (env_1736: unit)
    call tail toInt32Unsafe_3 (env_1736, x_4376)
  block L_4489 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4493
  block L_4493 (env_1737: unit)
    call L_4494 (x_3544 (env_1737, x_942 (*()*))) handle _ => raise
  block L_4494 (m'_28: t_9)
    case setRoundingMode_58 of
      setRoundingModeEnv_0 => L_4495
  block L_4495 (env_1738: (lambdas_226, word32) tuple)
    call L_4496 (setRoundingMode_3 (env_1738, x_941 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4496 (x_4377: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4497
  block L_4497 (env_1739: unit)
    call L_4498 (round_3 (env_1739, x_4367)) handle _ => raise
  block L_4498 (x_4378: real32)
    case setRoundingMode_58 of
      setRoundingModeEnv_0 => L_4499
  block L_4499 (env_1740: (lambdas_226, word32) tuple)
    call L_4500 (setRoundingMode_3 (env_1740, m'_28)) handle _ => raise
  block L_4500 (x_4379: unit)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4501
  block L_4501 (env_1741: unit)
    call tail toInt32Unsafe_3 (env_1741, x_4378)
  block L_4490 ()
    val x_4380: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4367)
    case toInt32Unsafe_0 (*con toInt3 ... _220)*) of
      toInt32UnsafeEnv_0 => L_4502
  block L_4502 (env_1742: unit)
    call tail toInt32Unsafe_3 (env_1742, x_4380)
fun x_2096 (env_1743: (lambdas_149, lambdas_148, word32) tuple, x_4381: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4503 ()
  block L_4503 ()
    val <<_30: lambdas_149 = #0 (env_1743)
    val >>_29: lambdas_148 = #1 (env_1743)
    val maxInt'_37: word32 = #2 (env_1743)
    val x_4382: (word32, word32) tuple = (maxInt'_37, x_4381)
    case >>_29 of
      >>Env_5 => L_4504
  block L_4504 (env_1744: (word32, word32) tuple)
    call L_4505 (>>_19 (env_1744, x_4382)) handle _ => raise
  block L_4505 (x_4383: word32)
    val x_4384: (word32, word32) tuple = (x_4383, x_4381)
    case <<_30 of
      <<Env_5 => L_4506
  block L_4506 (env_1745: (word32, word32) tuple)
    call tail <<_19 (env_1745, x_4384)
fun x_4385 (env_1746:
              (real32, real32, lambdas_102, real32, word16, real32, word16) tuple,
            x_4386: t_9):
  {returns = Some (lambdas_208), raises = Some (exn)} =
L_4507 ()
  block L_4507 ()
    val minInt_40: real32 = #0 (env_1746)
    val maxInt_40: real32 = #1 (env_1746)
    val setRoundingMode_59: lambdas_102 = #2 (env_1746)
    val one_54: real32 = #3 (env_1746)
    val maxInt'_38: word16 = #4 (env_1746)
    val half_46: real32 = #5 (env_1746)
    val minInt'_18: word16 = #6 (env_1746)
    val x_4388:
      (word16, real32, word16, real32, lambdas_102, t_9, real32, real32) tuple =
      (minInt'_18,
       half_46,
       maxInt'_38,
       one_54,
       setRoundingMode_59,
       x_4386,
       maxInt_40,
       minInt_40)
    val x_4387: lambdas_208 = con xEnv_194 (x_4388)
    return (x_4387)
fun x_4389 (env_1747:
              (word16, real32, word16, real32, lambdas_102, t_9, real32, real32) tuple,
            x_4390: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4508 ()
  block L_4508 ()
    val minInt'_19: word16 = #0 (env_1747)
    val half_47: real32 = #1 (env_1747)
    val maxInt'_39: word16 = #2 (env_1747)
    val one_55: real32 = #3 (env_1747)
    val setRoundingMode_60: lambdas_102 = #4 (env_1747)
    val x_4392: t_9 = #5 (env_1747)
    val maxInt_41: real32 = #6 (env_1747)
    val minInt_41: real32 = #7 (env_1747)
    val x_4391: (real32, real32) tuple = (minInt_41, x_4390)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4509
  block L_4509 (env_1748: unit)
    call L_4510 (<=_6 (env_1748, x_4391)) handle _ => raise
  block L_4510 (x_4393: bool)
    case x_4393 of
      true => L_4512 | false => L_4511
  block L_4511 ()
    val x_4394: (real32, real32) tuple = (x_4390, minInt_41)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4513
  block L_4513 (env_1749: unit)
    call L_4514 (<_9 (env_1749, x_4394)) handle _ => raise
  block L_4514 (x_4395: bool)
    case x_4395 of
      true => L_4516 | false => L_4515
  block L_4515 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4516 ()
    val x_4396: (real32, real32) tuple = (minInt_41, one_55)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4517
  block L_4517 (env_1750: unit)
    call L_4518 (-_5 (env_1750, x_4396)) handle _ => raise
  block L_4518 (x_4397: real32)
    val x_4398: (real32, real32) tuple = (x_4397, x_4390)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4519
  block L_4519 (env_1751: unit)
    call L_4520 (<_9 (env_1751, x_4398)) handle _ => raise
  block L_4520 (x_4399: bool)
    case x_4399 of
      true => L_4522 | false => L_4521
  block L_4521 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4522 ()
    case x_4392 of
      TO_NEGINF_0 => L_4526
    | TO_ZERO_0 => L_4525
    | TO_NEAREST_0 => L_4524
    | TO_POSINF_0 => L_4523
  block L_4523 ()
    return (minInt'_19)
  block L_4524 ()
    val x_4400: (real32, real32) tuple = (x_4390, minInt_41)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4527
  block L_4527 (env_1752: unit)
    call L_4528 (-_5 (env_1752, x_4400)) handle _ => raise
  block L_4528 (x_4401: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4529
  block L_4529 (env_1753: unit)
    call L_4530 (~_3 (env_1753, half_47)) handle _ => raise
  block L_4530 (x_4402: real32)
    val x_4403: (real32, real32) tuple = (x_4401, x_4402)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4531
  block L_4531 (env_1754: unit)
    call L_4532 (<_9 (env_1754, x_4403)) handle _ => raise
  block L_4532 (x_4404: bool)
    case x_4404 of
      true => L_4534 | false => L_4533
  block L_4533 ()
    return (minInt'_19)
  block L_4534 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4525 ()
    return (minInt'_19)
  block L_4526 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4512 ()
    val x_4405: (real32, real32) tuple = (x_4390, maxInt_41)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4535
  block L_4535 (env_1755: unit)
    call L_4536 (<=_6 (env_1755, x_4405)) handle _ => raise
  block L_4536 (x_4406: bool)
    case x_4406 of
      true => L_4538 | false => L_4537
  block L_4537 ()
    val x_4407: (real32, real32) tuple = (maxInt_41, one_55)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4539
  block L_4539 (env_1756: unit)
    call L_4540 (+_4 (env_1756, x_4407)) handle _ => raise
  block L_4540 (x_4408: real32)
    val x_4409: (real32, real32) tuple = (x_4390, x_4408)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4541
  block L_4541 (env_1757: unit)
    call L_4542 (<_9 (env_1757, x_4409)) handle _ => raise
  block L_4542 (x_4410: bool)
    case x_4410 of
      true => L_4544 | false => L_4543
  block L_4543 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4544 ()
    case x_4392 of
      TO_NEGINF_0 => L_4548
    | TO_ZERO_0 => L_4547
    | TO_NEAREST_0 => L_4546
    | TO_POSINF_0 => L_4545
  block L_4545 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4546 ()
    val x_4411: (real32, real32) tuple = (x_4390, maxInt_41)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4549
  block L_4549 (env_1758: unit)
    call L_4550 (-_5 (env_1758, x_4411)) handle _ => raise
  block L_4550 (x_4412: real32)
    val x_4413: (real32, real32) tuple = (x_4412, half_47)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4551
  block L_4551 (env_1759: unit)
    call L_4552 (>=_9 (env_1759, x_4413)) handle _ => raise
  block L_4552 (x_4414: bool)
    case x_4414 of
      true => L_4554 | false => L_4553
  block L_4553 ()
    return (maxInt'_39)
  block L_4554 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4547 ()
    return (maxInt'_39)
  block L_4548 ()
    return (maxInt'_39)
  block L_4538 ()
    case x_4392 of
      TO_POSINF_0 => L_4558
    | TO_NEAREST_0 => L_4557
    | TO_ZERO_0 => L_4556
    | TO_NEGINF_0 => L_4555
  block L_4555 ()
    val x_4415: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4390)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4559
  block L_4559 (env_1760: unit)
    call tail toInt16Unsafe_3 (env_1760, x_4415)
  block L_4556 ()
    val x_4416: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4390)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4560
  block L_4560 (env_1761: unit)
    call tail toInt16Unsafe_3 (env_1761, x_4416)
  block L_4557 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4561
  block L_4561 (env_1762: unit)
    call L_4562 (x_3544 (env_1762, x_939 (*()*))) handle _ => raise
  block L_4562 (m'_29: t_9)
    case setRoundingMode_60 of
      setRoundingModeEnv_0 => L_4563
  block L_4563 (env_1763: (lambdas_226, word32) tuple)
    call L_4564 (setRoundingMode_3 (env_1763, x_938 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4564 (x_4417: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4565
  block L_4565 (env_1764: unit)
    call L_4566 (round_3 (env_1764, x_4390)) handle _ => raise
  block L_4566 (x_4418: real32)
    case setRoundingMode_60 of
      setRoundingModeEnv_0 => L_4567
  block L_4567 (env_1765: (lambdas_226, word32) tuple)
    call L_4568 (setRoundingMode_3 (env_1765, m'_29)) handle _ => raise
  block L_4568 (x_4419: unit)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4569
  block L_4569 (env_1766: unit)
    call tail toInt16Unsafe_3 (env_1766, x_4418)
  block L_4558 ()
    val x_4420: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4390)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4570
  block L_4570 (env_1767: unit)
    call tail toInt16Unsafe_3 (env_1767, x_4420)
fun x_4421 (env_1768: (real32, real32, lambdas_102) tuple, x_4422: t_9):
  {returns = Some (lambdas_210), raises = Some (exn)} =
L_4571 ()
  block L_4571 ()
    val minInt_42: real32 = #0 (env_1768)
    val maxInt_42: real32 = #1 (env_1768)
    val setRoundingMode_61: lambdas_102 = #2 (env_1768)
    val x_4424: (lambdas_102, t_9, real32, real32) tuple =
      (setRoundingMode_61, x_4422, maxInt_42, minInt_42)
    val x_4423: lambdas_210 = con xEnv_196 (x_4424)
    return (x_4423)
fun x_4425 (env_1769: (lambdas_102, t_9, real32, real32) tuple, x_4426: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4572 ()
  block L_4572 ()
    val setRoundingMode_62: lambdas_102 = #0 (env_1769)
    val x_4428: t_9 = #1 (env_1769)
    val maxInt_43: real32 = #2 (env_1769)
    val minInt_43: real32 = #3 (env_1769)
    val x_4427: (real32, real32) tuple = (minInt_43, x_4426)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4573
  block L_4573 (env_1770: unit)
    call L_4574 (<=_6 (env_1770, x_4427)) handle _ => raise
  block L_4574 (x_4429: bool)
    case x_4429 of
      true => L_4576 | false => L_4575
  block L_4575 ()
    val x_4430: (real32, real32) tuple = (x_4426, minInt_43)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4577
  block L_4577 (env_1771: unit)
    call L_4578 (<_9 (env_1771, x_4430)) handle _ => raise
  block L_4578 (x_4431: bool)
    case x_4431 of
      true => L_4580 | false => L_4579
  block L_4579 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4580 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4576 ()
    val x_4432: (real32, real32) tuple = (x_4426, maxInt_43)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4581
  block L_4581 (env_1772: unit)
    call L_4582 (<=_6 (env_1772, x_4432)) handle _ => raise
  block L_4582 (x_4433: bool)
    case x_4433 of
      true => L_4584 | false => L_4583
  block L_4583 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4584 ()
    case x_4428 of
      TO_POSINF_0 => L_4588
    | TO_NEAREST_0 => L_4587
    | TO_ZERO_0 => L_4586
    | TO_NEGINF_0 => L_4585
  block L_4585 ()
    val x_4434: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4426)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4589
  block L_4589 (env_1773: unit)
    call tail toInt16Unsafe_3 (env_1773, x_4434)
  block L_4586 ()
    val x_4435: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4426)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4590
  block L_4590 (env_1774: unit)
    call tail toInt16Unsafe_3 (env_1774, x_4435)
  block L_4587 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4591
  block L_4591 (env_1775: unit)
    call L_4592 (x_3544 (env_1775, x_936 (*()*))) handle _ => raise
  block L_4592 (m'_30: t_9)
    case setRoundingMode_62 of
      setRoundingModeEnv_0 => L_4593
  block L_4593 (env_1776: (lambdas_226, word32) tuple)
    call L_4594 (setRoundingMode_3 (env_1776, x_935 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4594 (x_4436: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4595
  block L_4595 (env_1777: unit)
    call L_4596 (round_3 (env_1777, x_4426)) handle _ => raise
  block L_4596 (x_4437: real32)
    case setRoundingMode_62 of
      setRoundingModeEnv_0 => L_4597
  block L_4597 (env_1778: (lambdas_226, word32) tuple)
    call L_4598 (setRoundingMode_3 (env_1778, m'_30)) handle _ => raise
  block L_4598 (x_4438: unit)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4599
  block L_4599 (env_1779: unit)
    call tail toInt16Unsafe_3 (env_1779, x_4437)
  block L_4588 ()
    val x_4439: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4426)
    case toInt16Unsafe_0 (*con toInt1 ... _219)*) of
      toInt16UnsafeEnv_0 => L_4600
  block L_4600 (env_1780: unit)
    call tail toInt16Unsafe_3 (env_1780, x_4439)
fun x_2083 (env_1781: (lambdas_157, lambdas_156, word16) tuple, x_4440: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_4601 ()
  block L_4601 ()
    val <<_31: lambdas_157 = #0 (env_1781)
    val >>_30: lambdas_156 = #1 (env_1781)
    val maxInt'_40: word16 = #2 (env_1781)
    val x_4441: (word16, word32) tuple = (maxInt'_40, x_4440)
    case >>_30 of
      >>Env_6 => L_4602
  block L_4602 (env_1782: (word32, word16) tuple)
    call L_4603 (>>_21 (env_1782, x_4441)) handle _ => raise
  block L_4603 (x_4442: word16)
    val x_4443: (word16, word32) tuple = (x_4442, x_4440)
    case <<_31 of
      <<Env_6 => L_4604
  block L_4604 (env_1783: (word32, word16) tuple)
    call tail <<_21 (env_1783, x_4443)
fun x_4444 (env_1784:
              (real32, real32, lambdas_102, real32, word8, real32, word8) tuple,
            x_4445: t_9):
  {returns = Some (lambdas_214), raises = Some (exn)} =
L_4605 ()
  block L_4605 ()
    val minInt_44: real32 = #0 (env_1784)
    val maxInt_44: real32 = #1 (env_1784)
    val setRoundingMode_63: lambdas_102 = #2 (env_1784)
    val one_56: real32 = #3 (env_1784)
    val maxInt'_41: word8 = #4 (env_1784)
    val half_48: real32 = #5 (env_1784)
    val minInt'_20: word8 = #6 (env_1784)
    val x_4447:
      (word8, real32, word8, real32, lambdas_102, t_9, real32, real32) tuple =
      (minInt'_20,
       half_48,
       maxInt'_41,
       one_56,
       setRoundingMode_63,
       x_4445,
       maxInt_44,
       minInt_44)
    val x_4446: lambdas_214 = con xEnv_201 (x_4447)
    return (x_4446)
fun x_4448 (env_1785:
              (word8, real32, word8, real32, lambdas_102, t_9, real32, real32) tuple,
            x_4449: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4606 ()
  block L_4606 ()
    val minInt'_21: word8 = #0 (env_1785)
    val half_49: real32 = #1 (env_1785)
    val maxInt'_42: word8 = #2 (env_1785)
    val one_57: real32 = #3 (env_1785)
    val setRoundingMode_64: lambdas_102 = #4 (env_1785)
    val x_4451: t_9 = #5 (env_1785)
    val maxInt_45: real32 = #6 (env_1785)
    val minInt_45: real32 = #7 (env_1785)
    val x_4450: (real32, real32) tuple = (minInt_45, x_4449)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4607
  block L_4607 (env_1786: unit)
    call L_4608 (<=_6 (env_1786, x_4450)) handle _ => raise
  block L_4608 (x_4452: bool)
    case x_4452 of
      true => L_4610 | false => L_4609
  block L_4609 ()
    val x_4453: (real32, real32) tuple = (x_4449, minInt_45)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4611
  block L_4611 (env_1787: unit)
    call L_4612 (<_9 (env_1787, x_4453)) handle _ => raise
  block L_4612 (x_4454: bool)
    case x_4454 of
      true => L_4614 | false => L_4613
  block L_4613 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4614 ()
    val x_4455: (real32, real32) tuple = (minInt_45, one_57)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4615
  block L_4615 (env_1788: unit)
    call L_4616 (-_5 (env_1788, x_4455)) handle _ => raise
  block L_4616 (x_4456: real32)
    val x_4457: (real32, real32) tuple = (x_4456, x_4449)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4617
  block L_4617 (env_1789: unit)
    call L_4618 (<_9 (env_1789, x_4457)) handle _ => raise
  block L_4618 (x_4458: bool)
    case x_4458 of
      true => L_4620 | false => L_4619
  block L_4619 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4620 ()
    case x_4451 of
      TO_NEGINF_0 => L_4624
    | TO_ZERO_0 => L_4623
    | TO_NEAREST_0 => L_4622
    | TO_POSINF_0 => L_4621
  block L_4621 ()
    return (minInt'_21)
  block L_4622 ()
    val x_4459: (real32, real32) tuple = (x_4449, minInt_45)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4625
  block L_4625 (env_1790: unit)
    call L_4626 (-_5 (env_1790, x_4459)) handle _ => raise
  block L_4626 (x_4460: real32)
    case ~_0 (*con ~Env_0 (x_205)*) of
      ~Env_0 => L_4627
  block L_4627 (env_1791: unit)
    call L_4628 (~_3 (env_1791, half_49)) handle _ => raise
  block L_4628 (x_4461: real32)
    val x_4462: (real32, real32) tuple = (x_4460, x_4461)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4629
  block L_4629 (env_1792: unit)
    call L_4630 (<_9 (env_1792, x_4462)) handle _ => raise
  block L_4630 (x_4463: bool)
    case x_4463 of
      true => L_4632 | false => L_4631
  block L_4631 ()
    return (minInt'_21)
  block L_4632 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4623 ()
    return (minInt'_21)
  block L_4624 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4610 ()
    val x_4464: (real32, real32) tuple = (x_4449, maxInt_45)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4633
  block L_4633 (env_1793: unit)
    call L_4634 (<=_6 (env_1793, x_4464)) handle _ => raise
  block L_4634 (x_4465: bool)
    case x_4465 of
      true => L_4636 | false => L_4635
  block L_4635 ()
    val x_4466: (real32, real32) tuple = (maxInt_45, one_57)
    case +_1 (*con +Env_1 (x_203)*) of
      +Env_1 => L_4637
  block L_4637 (env_1794: unit)
    call L_4638 (+_4 (env_1794, x_4466)) handle _ => raise
  block L_4638 (x_4467: real32)
    val x_4468: (real32, real32) tuple = (x_4449, x_4467)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4639
  block L_4639 (env_1795: unit)
    call L_4640 (<_9 (env_1795, x_4468)) handle _ => raise
  block L_4640 (x_4469: bool)
    case x_4469 of
      true => L_4642 | false => L_4641
  block L_4641 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4642 ()
    case x_4451 of
      TO_NEGINF_0 => L_4646
    | TO_ZERO_0 => L_4645
    | TO_NEAREST_0 => L_4644
    | TO_POSINF_0 => L_4643
  block L_4643 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4644 ()
    val x_4470: (real32, real32) tuple = (x_4449, maxInt_45)
    case -_1 (*con -Env_1 (x_204)*) of
      -Env_1 => L_4647
  block L_4647 (env_1796: unit)
    call L_4648 (-_5 (env_1796, x_4470)) handle _ => raise
  block L_4648 (x_4471: real32)
    val x_4472: (real32, real32) tuple = (x_4471, half_49)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_4649
  block L_4649 (env_1797: unit)
    call L_4650 (>=_9 (env_1797, x_4472)) handle _ => raise
  block L_4650 (x_4473: bool)
    case x_4473 of
      true => L_4652 | false => L_4651
  block L_4651 ()
    return (maxInt'_42)
  block L_4652 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4645 ()
    return (maxInt'_42)
  block L_4646 ()
    return (maxInt'_42)
  block L_4636 ()
    case x_4451 of
      TO_POSINF_0 => L_4656
    | TO_NEAREST_0 => L_4655
    | TO_ZERO_0 => L_4654
    | TO_NEGINF_0 => L_4653
  block L_4653 ()
    val x_4474: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4449)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4657
  block L_4657 (env_1798: unit)
    call tail toInt8Unsafe_3 (env_1798, x_4474)
  block L_4654 ()
    val x_4475: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4449)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4658
  block L_4658 (env_1799: unit)
    call tail toInt8Unsafe_3 (env_1799, x_4475)
  block L_4655 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4659
  block L_4659 (env_1800: unit)
    call L_4660 (x_3544 (env_1800, x_933 (*()*))) handle _ => raise
  block L_4660 (m'_31: t_9)
    case setRoundingMode_64 of
      setRoundingModeEnv_0 => L_4661
  block L_4661 (env_1801: (lambdas_226, word32) tuple)
    call L_4662 (setRoundingMode_3 (env_1801, x_932 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4662 (x_4476: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4663
  block L_4663 (env_1802: unit)
    call L_4664 (round_3 (env_1802, x_4449)) handle _ => raise
  block L_4664 (x_4477: real32)
    case setRoundingMode_64 of
      setRoundingModeEnv_0 => L_4665
  block L_4665 (env_1803: (lambdas_226, word32) tuple)
    call L_4666 (setRoundingMode_3 (env_1803, m'_31)) handle _ => raise
  block L_4666 (x_4478: unit)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4667
  block L_4667 (env_1804: unit)
    call tail toInt8Unsafe_3 (env_1804, x_4477)
  block L_4656 ()
    val x_4479: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4449)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4668
  block L_4668 (env_1805: unit)
    call tail toInt8Unsafe_3 (env_1805, x_4479)
fun x_4480 (env_1806: (real32, real32, lambdas_102) tuple, x_4481: t_9):
  {returns = Some (lambdas_216), raises = Some (exn)} =
L_4669 ()
  block L_4669 ()
    val minInt_46: real32 = #0 (env_1806)
    val maxInt_46: real32 = #1 (env_1806)
    val setRoundingMode_65: lambdas_102 = #2 (env_1806)
    val x_4483: (lambdas_102, t_9, real32, real32) tuple =
      (setRoundingMode_65, x_4481, maxInt_46, minInt_46)
    val x_4482: lambdas_216 = con xEnv_203 (x_4483)
    return (x_4482)
fun x_4484 (env_1807: (lambdas_102, t_9, real32, real32) tuple, x_4485: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4670 ()
  block L_4670 ()
    val setRoundingMode_66: lambdas_102 = #0 (env_1807)
    val x_4487: t_9 = #1 (env_1807)
    val maxInt_47: real32 = #2 (env_1807)
    val minInt_47: real32 = #3 (env_1807)
    val x_4486: (real32, real32) tuple = (minInt_47, x_4485)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4671
  block L_4671 (env_1808: unit)
    call L_4672 (<=_6 (env_1808, x_4486)) handle _ => raise
  block L_4672 (x_4488: bool)
    case x_4488 of
      true => L_4674 | false => L_4673
  block L_4673 ()
    val x_4489: (real32, real32) tuple = (x_4485, minInt_47)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_4675
  block L_4675 (env_1809: unit)
    call L_4676 (<_9 (env_1809, x_4489)) handle _ => raise
  block L_4676 (x_4490: bool)
    case x_4490 of
      true => L_4678 | false => L_4677
  block L_4677 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4678 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4674 ()
    val x_4491: (real32, real32) tuple = (x_4485, maxInt_47)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_4679
  block L_4679 (env_1810: unit)
    call L_4680 (<=_6 (env_1810, x_4491)) handle _ => raise
  block L_4680 (x_4492: bool)
    case x_4492 of
      true => L_4682 | false => L_4681
  block L_4681 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4682 ()
    case x_4487 of
      TO_POSINF_0 => L_4686
    | TO_NEAREST_0 => L_4685
    | TO_ZERO_0 => L_4684
    | TO_NEGINF_0 => L_4683
  block L_4683 ()
    val x_4493: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_4485)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4687
  block L_4687 (env_1811: unit)
    call tail toInt8Unsafe_3 (env_1811, x_4493)
  block L_4684 ()
    val x_4494: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_4485)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4688
  block L_4688 (env_1812: unit)
    call tail toInt8Unsafe_3 (env_1812, x_4494)
  block L_4685 ()
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4689
  block L_4689 (env_1813: unit)
    call L_4690 (x_3544 (env_1813, x_930 (*()*))) handle _ => raise
  block L_4690 (m'_32: t_9)
    case setRoundingMode_66 of
      setRoundingModeEnv_0 => L_4691
  block L_4691 (env_1814: (lambdas_226, word32) tuple)
    call L_4692 (setRoundingMode_3 (env_1814, x_929 (*con TO_NEAREST_0*))) handle _ => raise
  block L_4692 (x_4495: unit)
    case round_0 (*con roundE ... _208)*) of
      roundEnv_0 => L_4693
  block L_4693 (env_1815: unit)
    call L_4694 (round_3 (env_1815, x_4485)) handle _ => raise
  block L_4694 (x_4496: real32)
    case setRoundingMode_66 of
      setRoundingModeEnv_0 => L_4695
  block L_4695 (env_1816: (lambdas_226, word32) tuple)
    call L_4696 (setRoundingMode_3 (env_1816, m'_32)) handle _ => raise
  block L_4696 (x_4497: unit)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4697
  block L_4697 (env_1817: unit)
    call tail toInt8Unsafe_3 (env_1817, x_4496)
  block L_4686 ()
    val x_4498: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_4485)
    case toInt8Unsafe_0 (*con toInt8 ... _218)*) of
      toInt8UnsafeEnv_0 => L_4698
  block L_4698 (env_1818: unit)
    call tail toInt8Unsafe_3 (env_1818, x_4498)
fun x_2070 (env_1819: (lambdas_165, lambdas_164, word8) tuple, x_4499: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_4699 ()
  block L_4699 ()
    val <<_32: lambdas_165 = #0 (env_1819)
    val >>_31: lambdas_164 = #1 (env_1819)
    val maxInt'_43: word8 = #2 (env_1819)
    val x_4500: (word8, word32) tuple = (maxInt'_43, x_4499)
    case >>_31 of
      >>Env_7 => L_4700
  block L_4700 (env_1820: (word32, word8) tuple)
    call L_4701 (>>_23 (env_1820, x_4500)) handle _ => raise
  block L_4701 (x_4501: word8)
    val x_4502: (word8, word32) tuple = (x_4501, x_4499)
    case <<_32 of
      <<Env_7 => L_4702
  block L_4702 (env_1821: (word32, word8) tuple)
    call tail <<_23 (env_1821, x_4502)
fun x_4503 (env_1822: lambdas_102, x_4504: t_9):
  {returns = Some (lambdas_220), raises = Some (exn)} =
L_4703 ()
  block L_4703 ()
    val x_4506: (t_9, lambdas_102) tuple = (x_4504, env_1822)
    val x_4505: lambdas_220 = con xEnv_208 (x_4506)
    return (x_4505)
fun x_4507 (env_1823: (t_9, lambdas_102) tuple, x_4508: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_4704 ()
  block L_4704 ()
    val x_4509: t_9 = #0 (env_1823)
    val setRoundingMode_67: lambdas_102 = #1 (env_1823)
    case x_919 (*con xEnv_54 (x_918)*) of
      xEnv_54 => L_4705
  block L_4705 (env_1824: unit)
    call L_4706 (x_3544 (env_1824, x_927 (*()*))) handle _ => raise
  block L_4706 (m'_33: t_9)
    case setRoundingMode_67 of
      setRoundingModeEnv_0 => L_4707
  block L_4707 (env_1825: (lambdas_226, word32) tuple)
    call L_4708 (setRoundingMode_3 (env_1825, x_4509)) handle _ => raise
  block L_4708 (x_4510: unit)
    case fromReal32Unsafe_0 (*con fromRe ... _213)*) of
      fromReal32UnsafeEnv_0 => L_4709
  block L_4709 (env_1826: unit)
    call L_4710 (fromReal32Unsafe_3 (env_1826, x_4508)) handle _ => raise
  block L_4710 (x_4511: real32)
    case setRoundingMode_67 of
      setRoundingModeEnv_0 => L_4711
  block L_4711 (env_1827: (lambdas_226, word32) tuple)
    call L_4712 (setRoundingMode_3 (env_1827, m'_33)) handle _ => raise
  block L_4712 (x_4512: unit)
    return (x_4511)
fun x_4513 (env_1828: unit, x_4514: t_9):
  {returns = Some (lambdas_363), raises = Some (exn)} =
L_4713 ()
  block L_4713 ()
    return (fromReal32Unsafe_0 (*con fromRe ... _213)*))
fun class_21 (env_1829: (word32, word32, word32) tuple, x_4515: real32):
  {returns = Some (float_class_0), raises = Some (exn)} =
L_4714 ()
  block L_4714 ()
    val zero_61: word32 = #0 (env_1829)
    val significandMask_3: word32 = #1 (env_1829)
    val exponentMask_3: word32 = #2 (env_1829)
    val x_4517: word32 = prim Real32_castToWord32 (x_4515)
    val x_4516: (word32, word32) tuple = (x_4517, exponentMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4715
  block L_4715 (env_1830: unit)
    call L_4716 (andb_3 (env_1830, x_4516)) handle _ => raise
  block L_4716 (x_4518: word32)
    val x_4519: (word32, word32) tuple = (x_4518, exponentMask_3)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4717
  block L_4717 (env_1831: unit)
    call L_4718 (x_2049 (env_1831, x_4519)) handle _ => raise
  block L_4718 (x_4520: bool)
    case x_4520 of
      true => L_4720 | false => L_4719
  block L_4719 ()
    val x_4521: (word32, word32) tuple = (x_4517, exponentMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4721
  block L_4721 (env_1832: unit)
    call L_4722 (andb_3 (env_1832, x_4521)) handle _ => raise
  block L_4722 (x_4522: word32)
    val x_4523: (word32, word32) tuple = (x_4522, zero_61)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4723
  block L_4723 (env_1833: unit)
    call L_4724 (x_2049 (env_1833, x_4523)) handle _ => raise
  block L_4724 (x_4524: bool)
    case x_4524 of
      true => L_4726 | false => L_4725
  block L_4725 ()
    return (x_924 (*con NORMAL_1*))
  block L_4726 ()
    val x_4525: (word32, word32) tuple = (x_4517, significandMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4727
  block L_4727 (env_1834: unit)
    call L_4728 (andb_3 (env_1834, x_4525)) handle _ => raise
  block L_4728 (x_4526: word32)
    val x_4527: (word32, word32) tuple = (x_4526, zero_61)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4729
  block L_4729 (env_1835: unit)
    call L_4730 (x_2049 (env_1835, x_4527)) handle _ => raise
  block L_4730 (x_4528: bool)
    case x_4528 of
      true => L_4732 | false => L_4731
  block L_4731 ()
    return (x_923 (*con SUBNORMAL_1*))
  block L_4732 ()
    return (x_922 (*con ZERO_1*))
  block L_4720 ()
    val x_4529: (word32, word32) tuple = (x_4517, significandMask_3)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4733
  block L_4733 (env_1836: unit)
    call L_4734 (andb_3 (env_1836, x_4529)) handle _ => raise
  block L_4734 (x_4530: word32)
    val x_4531: (word32, word32) tuple = (x_4530, zero_61)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4735
  block L_4735 (env_1837: unit)
    call L_4736 (x_2049 (env_1837, x_4531)) handle _ => raise
  block L_4736 (x_4532: bool)
    case x_4532 of
      true => L_4738 | false => L_4737
  block L_4737 ()
    return (x_921 (*con NAN_1*))
  block L_4738 ()
    return (x_920 (*con INF_0*))
fun mkMask_0 (env_1838: (lambdas_117, word32) tuple, x_4533: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4739 ()
  block L_4739 ()
    val <<_33: lambdas_117 = #0 (env_1838)
    val zero_62: word32 = #1 (env_1838)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_4740
  block L_4740 (env_1839: unit)
    call L_4741 (notb_6 (env_1839, zero_62)) handle _ => raise
  block L_4741 (x_4534: word32)
    val x_4535: (word32, word32) tuple = (x_4534, x_4533)
    case <<_33 of
      <<Env_1 => L_4742
  block L_4742 (env_1840: (word32, word32) tuple)
    call L_4743 (<<_8 (env_1840, x_4535)) handle _ => raise
  block L_4743 (x_4536: word32)
    case notb_2 (*con notbEn ... _139)*) of
      notbEnv_2 => L_4744
  block L_4744 (env_1841: unit)
    call tail notb_6 (env_1841, x_4536)
fun x_3544 (env_1842: unit, x_4537: unit):
  {returns = Some (t_9), raises = Some (exn)} =
L_4745 ()
  block L_4745 ()
    val x_4539: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = IEEEReal_getRoundingMode} ()
    val x_4538: (word32, word32) tuple = (x_4539, FE_TONEAREST_0 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4746
  block L_4746 (env_1843: unit)
    call L_4747 (x_2049 (env_1843, x_4538)) handle _ => raise
  block L_4747 (x_4540: bool)
    case x_4540 of
      true => L_4749 | false => L_4748
  block L_4748 ()
    val x_4541: (word32, word32) tuple = (x_4539, FE_DOWNWARD_0 (*0x400:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4750
  block L_4750 (env_1844: unit)
    call L_4751 (x_2049 (env_1844, x_4541)) handle _ => raise
  block L_4751 (x_4542: bool)
    case x_4542 of
      true => L_4753 | false => L_4752
  block L_4752 ()
    val x_4543: (word32, word32) tuple = (x_4539, FE_UPWARD_0 (*0x800:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4754
  block L_4754 (env_1845: unit)
    call L_4755 (x_2049 (env_1845, x_4543)) handle _ => raise
  block L_4755 (x_4544: bool)
    case x_4544 of
      true => L_4757 | false => L_4756
  block L_4756 ()
    val x_4545: (word32, word32) tuple = (x_4539, FE_TOWARDZERO_0 (*0xC00:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4758
  block L_4758 (env_1846: unit)
    call L_4759 (x_2049 (env_1846, x_4545)) handle _ => raise
  block L_4759 (x_4546: bool)
    case x_4546 of
      true => L_4761 | false => L_4760
  block L_4760 ()
    raise (x_917 (*con Fail_0 (x_916)*))
  block L_4761 ()
    return (x_914 (*con TO_ZERO_0*))
  block L_4757 ()
    return (x_913 (*con TO_POSINF_0*))
  block L_4753 ()
    return (x_912 (*con TO_NEGINF_0*))
  block L_4749 ()
    return (x_911 (*con TO_NEAREST_0*))
fun setRoundingMode_3 (env_1847: (lambdas_226, word32) tuple, x_4547: t_9):
  {returns = Some (unit), raises = Some (exn)} =
L_4762 ()
  block L_4762 ()
    val errorMsg_3: lambdas_226 = #0 (env_1847)
    val inval_1: word32 = #1 (env_1847)
    case x_4547 of
      TO_NEAREST_0 => L_4766
    | TO_POSINF_0 => L_4765
    | TO_ZERO_0 => L_4764
    | TO_NEGINF_0 => L_4763
  block L_4763 ()
    goto L_4767 (FE_DOWNWARD_0 (*0x400:w32*))
  block L_4764 ()
    goto L_4767 (FE_TOWARDZERO_0 (*0xC00:w32*))
  block L_4765 ()
    goto L_4767 (FE_UPWARD_0 (*0x800:w32*))
  block L_4766 ()
    goto L_4767 (FE_TONEAREST_0 (*0x0:w32*))
  block L_4767 (x_4548: word32)
    val x_4549: (word32, word32) tuple =
      (x_4548, FE_NOSUPPORT_0 (*0xFFFFFFFF:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4768
  block L_4768 (env_1848: unit)
    call L_4769 (x_2049 (env_1848, x_4549)) handle _ => raise
  block L_4769 (x_4550: bool)
    case x_4550 of
      true => L_4771 | false => L_4770
  block L_4770 ()
    val x_4552: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = IEEEReal_setRoundingMode} (x_4548)
    val x_4551: (word32, word32) tuple = (x_4552, x_909 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4772
  block L_4772 (env_1849: unit)
    call L_4773 (x_2049 (env_1849, x_4551)) handle _ => raise
  block L_4773 (x_4553: bool)
    case x_4553 of
      true => L_4775 | false => L_4774
  block L_4774 ()
    case errorMsg_3 of
      errorMsgEnv_0 => L_4776
  block L_4776 (env_1850: (cpointer, lambdas_484) tuple)
    call L_4777 (errorMsg_2 (env_1850, inval_1)) handle _ => raise
  block L_4777 (x_4554: (word8) vector)
    val x_4558: t_0 = con SOME_0 (inval_1)
    val x_4557: ((word8) vector, t_0) tuple = (x_4554, x_4558)
    val x_4556: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1473, x_4557)
    val x_4555: exn = con SysErr_0 (x_4556)
    raise (x_4555)
  block L_4775 ()
    return (x_910 (*()*))
  block L_4771 ()
    raise (x_908 (*con Fail_0 (x_907)*))
fun x_2927 (env_1851: unit, x_4559: unit):
  {returns = Some (lambdas_227), raises = Some (exn)} =
L_4778 ()
  block L_4778 ()
    return (x_902 (*con xEnv_52 (x_901)*))
fun x_2944 (env_1852: unit, x_4560: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4779 ()
  block L_4779 ()
    return (x_900 (*()*))
fun raiseSys_7 (env_1853: lambdas_226, x_4561: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4780 ()
  block L_4780 ()
    case env_1853 of
      errorMsgEnv_0 => L_4781
  block L_4781 (env_1854: (cpointer, lambdas_484) tuple)
    call L_4782 (errorMsg_2 (env_1854, x_4561)) handle _ => raise
  block L_4782 (x_4562: (word8) vector)
    val x_4566: t_0 = con SOME_0 (x_4561)
    val x_4565: ((word8) vector, t_0) tuple = (x_4562, x_4566)
    val x_4564: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1473, x_4565)
    val x_4563: exn = con SysErr_0 (x_4564)
    raise (x_4563)
fun raiseSys_4 (env_1855: lambdas_226, x_4567: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4783 ()
  block L_4783 ()
    case env_1855 of
      errorMsgEnv_0 => L_4784
  block L_4784 (env_1856: (cpointer, lambdas_484) tuple)
    call L_4785 (errorMsg_2 (env_1856, x_4567)) handle _ => raise
  block L_4785 (x_4568: (word8) vector)
    val x_4572: t_0 = con SOME_0 (x_4567)
    val x_4571: ((word8) vector, t_0) tuple = (x_4568, x_4572)
    val x_4570: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1473, x_4571)
    val x_4569: exn = con SysErr_0 (x_4570)
    raise (x_4569)
fun errorMsg_2 (env_1857: (cpointer, lambdas_484) tuple, x_4573: word32):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4786 ()
  block L_4786 ()
    val null_1: cpointer = #0 (env_1857)
    val arrayAlloc_4: lambdas_484 = #1 (env_1857)
    val x_4574: word64 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_Error_strError} (x_4573)
    case fromWord_0 (*con fromWo ... _190)*) of
      fromWordEnv_0 => L_4787
  block L_4787 (env_1858: unit)
    call L_4788 (fromWord_2 (env_1858, x_4574)) handle _ => raise
  block L_4788 (x_4575: cpointer)
    val x_4576: bool = prim MLton_equal[cpointer] (x_4575, null_1)
    case x_4576 of
      true => L_4790 | false => L_4789
  block L_4789 ()
    call L_4791 (loop_32 (x_4574, x_895 (*0x0:w32*))) handle _ => raise
  block L_4791 (x_4577: word32)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_4792
  block L_4792 (env_1859: unit)
    call L_4793 (fromIntForLength_1 (env_1859, x_4577)) handle _ => raise
  block L_4793 (x_4578: word64)
    case arrayAlloc_4 of
      arrayAllocEnv_0 => L_4794
  block L_4794 (env_1860: word64)
    call L_4795 (arrayAlloc_5 (env_1860, x_4578)) handle _ => raise
  block L_4795 (a_2: (word8) array)
    val tuple_103: (word64, word64, (word8) array) tuple = (x_4578, x_4574, a_2)
    call L_4796 (loop_33 (tuple_103, x_1474)) handle _ => raise
  block L_4796 (b_16: unit)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_4797
  block L_4797 (env_1861: unit)
    call L_4798 (x_4579 (env_1861, a_2)) handle _ => raise
  block L_4798 (x_4580: (word8) array)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_4799
  block L_4799 (env_1862: unit)
    call tail x_1790 (env_1862, x_4580)
  block L_4790 ()
    return (x_891 (*"Unknown error"*))
fun loop_33 (env_1863: (word64, word64, (word8) array) tuple,
             x_4581: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4800 ()
  block L_4800 ()
    val x_4583: word64 = #0 (env_1863)
    val x_4584: word64 = #1 (env_1863)
    val a_3: (word8) array = #2 (env_1863)
    val b_17: unit = #1 (x_4581)
    val i_8: word64 = #0 (x_4581)
    val x_4582: (word64, word64) tuple = (i_8, x_4583)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_4801
  block L_4801 (env_1864: unit)
    call L_4802 (>=_7 (env_1864, x_4582)) handle _ => raise
  block L_4802 (x_4585: bool)
    case x_4585 of
      true => L_4804 | false => L_4803
  block L_4803 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_4805
  block L_4805 (env_1865: unit)
    call L_4806 (sextdFromInt64ToInt32_1 (env_1865, i_8)) handle _ => raise
  block L_4806 (x_4586: word32)
    val x_4587: (word64, word32) tuple = (x_4584, x_4586)
    case sub_0 (*con subEnv ... e_39)*) of
      subEnv_0 => L_4807
  block L_4807 (env_1866: unit)
    call L_4808 (sub_1 (env_1866, x_4587)) handle _ => raise
  block L_4808 (x_4588: word8)
    val x_4589: ((word8) array, word64, word8) tuple = (a_3, i_8, x_4588)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_4809
  block L_4809 (env_1867: unit)
    call L_4810 (x_2544 (env_1867, x_4589)) handle _ => raise
  block L_4810 (x_4590: unit)
    val x_4591: (word64, word64) tuple = (i_8, x_898 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_4811
  block L_4811 (env_1868: unit)
    call L_4812 (+!_2 (env_1868, x_4591)) handle _ => raise
  block L_4812 (x_4592: word64)
    val x_4593: (word64, unit) tuple = (x_4592, x_897 (*()*))
    call tail loop_33 (env_1863, x_4593)
  block L_4804 ()
    return (b_17)
fun loop_32 (env_1869: word64, x_4594: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4813 ()
  block L_4813 ()
    val x_4595: (word64, word32) tuple = (env_1869, x_4594)
    case sub_0 (*con subEnv ... e_39)*) of
      subEnv_0 => L_4814
  block L_4814 (env_1870: unit)
    call L_4815 (sub_1 (env_1870, x_4595)) handle _ => raise
  block L_4815 (x_4596: word8)
    case8 x_4596 of
      0x0:w8 => L_4816 | _ => L_4817
  block L_4817 ()
    goto L_4818 (x_892 (*con false*))
  block L_4816 ()
    goto L_4818 (x_893 (*con true*))
  block L_4818 (x_4597: bool)
    case x_4597 of
      true => L_4820 | false => L_4819
  block L_4819 ()
    val x_4598: (word32, word32) tuple = (x_4594, x_894 (*0x1:w32*))
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_4821
  block L_4821 (env_1871: unit)
    call L_4822 (+!_3 (env_1871, x_4598)) handle _ => raise
  block L_4822 (x_4599: word32)
    call tail loop_32 (env_1869, x_4599)
  block L_4820 ()
    return (x_4594)
fun x_4600 (env_1872: (lambdas_31, list_3) tuple, x_4601: exn):
  {returns = Some (t_2), raises = Some (exn)} =
L_4823 ()
  block L_4823 ()
    val concat_5: lambdas_31 = #0 (env_1872)
    val errorNames_1: list_3 = #1 (env_1872)
    case x_4601 of
      SysErr_0 => L_4824 | _ => L_4825
  block L_4825 ()
    case x_878 (*con xEnv_51 (x_877)*) of
      xEnv_51 => L_4826
  block L_4826 (env_1873: unit)
    call tail x_4602 (env_1873, x_879 (*()*))
  block L_4824 (x_4603: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_4606: ((word8) vector, t_0) tuple = #1 (x_4603)
    val x_4605: (unit) ref = #0 (x_4603)
    val x_4604: bool = prim MLton_equal[(unit) ref] (x_4605, x_1473)
    case x_4604 of
      true => L_4828 | false => L_4827
  block L_4827 ()
    case x_878 (*con xEnv_51 (x_877)*) of
      xEnv_51 => L_4829
  block L_4829 (env_1874: unit)
    call tail x_4602 (env_1874, x_890 (*()*))
  block L_4828 ()
    val x_4608: t_0 = #1 (x_4606)
    val x_4607: (word8) vector = #0 (x_4606)
    case x_4608 of
      NONE_1 => L_4831 | SOME_0 => L_4830
  block L_4830 (x_4609: word32)
    call L_4832 (loop_34 (x_4609, errorNames_1)) handle _ => raise
  block L_4832 (x_4610: t_27)
    case x_4610 of
      NONE_4 => L_4834 | SOME_20 => L_4833
  block L_4833 (x_4611: (word32, (word8) vector) tuple)
    val x_4612: (word8) vector = #1 (x_4611)
    goto L_4835 (x_4612)
  block L_4834 ()
    goto L_4835 (x_887 (*"<UNKNOWN>"*))
  block L_4835 (x_4613: (word8) vector)
    val x_4617: ((word8) vector, list_7) tuple =
      (x_4613, x_885 (*con ::_1 (x_884)*))
    val x_4616: list_7 = con ::_1 (x_4617)
    val x_4615: ((word8) vector, list_7) tuple = (x_888 (*" ["*), x_4616)
    val x_4614: list_7 = con ::_1 (x_4615)
    case concat_5 of
      concatEnv_0 => L_4836
  block L_4836 (env_1875: (lambdas_27, lambdas_484, lambdas_26) tuple)
    call L_4837 (concat_2 (env_1875, x_4614)) handle _ => raise
  block L_4831 ()
    goto L_4837 (x_881 (*""*))
  block L_4837 (x_4618: (word8) vector)
    val x_4624: ((word8) vector, list_7) tuple = (x_4618, x_880 (*con nil_3*))
    val x_4623: list_7 = con ::_1 (x_4624)
    val x_4622: ((word8) vector, list_7) tuple = (x_4607, x_4623)
    val x_4621: list_7 = con ::_1 (x_4622)
    val x_4620: ((word8) vector, list_7) tuple = (x_889 (*"SysErr: "*), x_4621)
    val x_4619: list_7 = con ::_1 (x_4620)
    case concat_5 of
      concatEnv_0 => L_4838
  block L_4838 (env_1876: (lambdas_27, lambdas_484, lambdas_26) tuple)
    call L_4839 (concat_2 (env_1876, x_4619)) handle _ => raise
  block L_4839 (x_4625: (word8) vector)
    val x_4626: t_2 = con SOME_1 (x_4625)
    return (x_4626)
fun loop_34 (env_1877: word32, x_4627: list_3):
  {returns = Some (t_27), raises = Some (exn)} =
L_4840 ()
  block L_4840 ()
    case x_4627 of
      nil_5 => L_4842 | ::_6 => L_4841
  block L_4841 (x_4628: ((word32, (word8) vector) tuple, list_3) tuple)
    val x_4631: list_3 = #1 (x_4628)
    val x_4630: (word32, (word8) vector) tuple = #0 (x_4628)
    val m_0: word32 = #0 (x_4630)
    val x_4629: (word32, word32) tuple = (env_1877, m_0)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4843
  block L_4843 (env_1878: unit)
    call L_4844 (x_2049 (env_1878, x_4629)) handle _ => raise
  block L_4844 (x_4632: bool)
    case x_4632 of
      true => L_4846 | false => L_4845
  block L_4845 ()
    call tail loop_34 (env_1877, x_4631)
  block L_4846 ()
    val x_4633: t_27 = con SOME_20 (x_4630)
    return (x_4633)
  block L_4842 ()
    return (x_886 (*con NONE_4*))
fun x_4602 (env_1879: unit, unit_9: unit):
  {returns = Some (t_2), raises = Some (exn)} =
L_4847 ()
  block L_4847 ()
    return (x_876 (*con NONE_3*))
fun ::?_1 (env_1880: unit,
           x_4634: ((word32, (word8) vector) tuple, list_3) tuple):
  {returns = Some (list_3), raises = Some (exn)} =
L_4848 ()
  block L_4848 ()
    val x_4637: list_3 = #1 (x_4634)
    val x_4636: (word32, (word8) vector) tuple = #0 (x_4634)
    val x_4635: word32 = #0 (x_4636)
    case fromRep_0 (*con fromRe ... _793)*) of
      fromRepEnv_0 => L_4849
  block L_4849 (env_1881: unit)
    call L_4850 (fromRep_1 (env_1881, x_794 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_4850 (x_4638: word32)
    val x_4639: (word32, word32) tuple = (x_4635, x_4638)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_4851
  block L_4851 (env_1882: unit)
    call L_4852 (x_2049 (env_1882, x_4639)) handle _ => raise
  block L_4852 (x_4640: bool)
    case x_4640 of
      true => L_4854 | false => L_4853
  block L_4853 ()
    val x_4641: list_3 = con ::_6 (x_4634)
    return (x_4641)
  block L_4854 ()
    return (x_4637)
fun fromRep_1 (env_1883: unit, x_4642: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4855 ()
  block L_4855 ()
    return (x_4642)
fun toRep_2 (env_1884: unit, x_4643: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4856 ()
  block L_4856 ()
    return (x_4643)
fun toRep_3 (env_1885: unit, x_4644: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4857 ()
  block L_4857 ()
    return (x_4644)
fun new_2 (env_1886: unit, x_4645: unit):
  {returns = Some ((list_2) ref), raises = Some (exn)} =
L_4858 ()
  block L_4858 ()
    val x_4646: (list_2) ref = prim Ref_ref[list_2] (x_788 (*con nil_4*))
    return (x_4646)
fun sub_1 (env_1887: unit, x_4647: (word64, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4859 ()
  block L_4859 ()
    val i_9: word32 = #1 (x_4647)
    val cs_0: word64 = #0 (x_4647)
    case fromWord_0 (*con fromWo ... _190)*) of
      fromWordEnv_0 => L_4860
  block L_4860 (env_1888: unit)
    call L_4861 (fromWord_2 (env_1888, cs_0)) handle _ => raise
  block L_4861 (x_4648: cpointer)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_4862
  block L_4862 (env_1889: unit)
    call L_4863 (sextdFromInt32ToInt64_1 (env_1889, i_9)) handle _ => raise
  block L_4863 (x_4649: word64)
    val x_4650: word8 = prim CPointer_getWord8 (x_4648, x_4649)
    case idFromWord8_0 (*con idFrom ... _202)*) of
      idFromWord8Env_0 => L_4864
  block L_4864 (env_1890: unit)
    call tail idFromWord8_1 (env_1890, x_4650)
fun x_4651 (env_1891: lambdas_31, x_4652: exn):
  {returns = Some (t_2), raises = Some (exn)} =
L_4865 ()
  block L_4865 ()
    case x_4652 of
      Fail_0 => L_4866 | _ => L_4867
  block L_4867 ()
    case x_783 (*con xEnv_50 (x_782)*) of
      xEnv_50 => L_4868
  block L_4868 (env_1892: unit)
    call tail x_4653 (env_1892, x_784 (*()*))
  block L_4866 (x_4654: ((unit) ref, (word8) vector) tuple)
    val x_4657: (word8) vector = #1 (x_4654)
    val x_4656: (unit) ref = #0 (x_4654)
    val x_4655: bool = prim MLton_equal[(unit) ref] (x_4656, x_1453)
    case x_4655 of
      true => L_4870 | false => L_4869
  block L_4869 ()
    case x_783 (*con xEnv_50 (x_782)*) of
      xEnv_50 => L_4871
  block L_4871 (env_1893: unit)
    call tail x_4653 (env_1893, x_787 (*()*))
  block L_4870 ()
    val x_4661: ((word8) vector, list_7) tuple = (x_4657, x_785 (*con nil_3*))
    val x_4660: list_7 = con ::_1 (x_4661)
    val x_4659: ((word8) vector, list_7) tuple = (x_786 (*"Fail: "*), x_4660)
    val x_4658: list_7 = con ::_1 (x_4659)
    case env_1891 of
      concatEnv_0 => L_4872
  block L_4872 (env_1894: (lambdas_27, lambdas_484, lambdas_26) tuple)
    call L_4873 (concat_2 (env_1894, x_4658)) handle _ => raise
  block L_4873 (x_4662: (word8) vector)
    val x_4663: t_2 = con SOME_1 (x_4662)
    return (x_4663)
fun x_4653 (env_1895: unit, unit_10: unit):
  {returns = Some (t_2), raises = Some (exn)} =
L_4874 ()
  block L_4874 ()
    return (x_781 (*con NONE_3*))
fun loop_10 (env_1896: (word64, (word8) array, word8) tuple,
             x_4664: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4875 ()
  block L_4875 ()
    val x_4666: word64 = #0 (env_1896)
    val a_4: (word8) array = #1 (env_1896)
    val x_4667: word8 = #2 (env_1896)
    val b_18: unit = #1 (x_4664)
    val i_10: word64 = #0 (x_4664)
    val x_4665: (word64, word64) tuple = (i_10, x_4666)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_4876
  block L_4876 (env_1897: unit)
    call L_4877 (>=_7 (env_1897, x_4665)) handle _ => raise
  block L_4877 (x_4668: bool)
    case x_4668 of
      true => L_4879 | false => L_4878
  block L_4878 ()
    val x_4669: ((word8) array, word64, word8) tuple = (a_4, i_10, x_4667)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_4880
  block L_4880 (env_1898: unit)
    call L_4881 (x_2544 (env_1898, x_4669)) handle _ => raise
  block L_4881 (x_4670: unit)
    val x_4671: (word64, word64) tuple = (i_10, x_779 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_4882
  block L_4882 (env_1899: unit)
    call L_4883 (+!_2 (env_1899, x_4671)) handle _ => raise
  block L_4883 (x_4672: word64)
    val x_4673: (word64, unit) tuple = (x_4672, x_778 (*()*))
    call tail loop_10 (env_1896, x_4673)
  block L_4879 ()
    return (b_18)
fun >>_9 (env_1900: (word32, word64) tuple, x_4674: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4884 ()
  block L_4884 ()
    val sizeInBitsWord_16: word32 = #0 (env_1900)
    val zero_63: word64 = #1 (env_1900)
    val n_2: word32 = #1 (x_4674)
    val i_11: word64 = #0 (x_4674)
    val x_4675: (word32, word32) tuple = (n_2, sizeInBitsWord_16)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4885
  block L_4885 (env_1901: unit)
    call L_4886 (>=_10 (env_1901, x_4675)) handle _ => raise
  block L_4886 (x_4676: bool)
    case x_4676 of
      true => L_4888 | false => L_4887
  block L_4887 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4889
  block L_4889 (env_1902: unit)
    call L_4890 (zextdFromWord32ToWord32_1 (env_1902, n_2)) handle _ => raise
  block L_4890 (x_4677: word32)
    val x_4678: (word64, word32) tuple = (i_11, x_4677)
    case >>?_3 (*con >>?Env_3 (x_150)*) of
      >>?Env_3 => L_4891
  block L_4891 (env_1903: unit)
    call tail >>?_4 (env_1903, x_4678)
  block L_4888 ()
    return (zero_63)
fun <<_9 (env_1904: (word32, word64) tuple, x_4679: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4892 ()
  block L_4892 ()
    val sizeInBitsWord_17: word32 = #0 (env_1904)
    val zero_64: word64 = #1 (env_1904)
    val n_3: word32 = #1 (x_4679)
    val i_12: word64 = #0 (x_4679)
    val x_4680: (word32, word32) tuple = (n_3, sizeInBitsWord_17)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4893
  block L_4893 (env_1905: unit)
    call L_4894 (>=_10 (env_1905, x_4680)) handle _ => raise
  block L_4894 (x_4681: bool)
    case x_4681 of
      true => L_4896 | false => L_4895
  block L_4895 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4897
  block L_4897 (env_1906: unit)
    call L_4898 (zextdFromWord32ToWord32_1 (env_1906, n_3)) handle _ => raise
  block L_4898 (x_4682: word32)
    val x_4683: (word64, word32) tuple = (i_12, x_4682)
    case <<?_3 (*con <<?Env_3 (x_146)*) of
      <<?Env_3 => L_4899
  block L_4899 (env_1907: unit)
    call tail <<?_4 (env_1907, x_4683)
  block L_4896 ()
    return (zero_64)
fun x_4684 (env_1908: unit, x_4685: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4900 ()
  block L_4900 ()
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4901
  block L_4901 (env_1909: unit)
    call L_4902 (st_1 (env_1909, x_4685)) handle _ => raise
  block L_4902 (x_4686: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4903
  block L_4903 (env_1910: unit)
    call L_4904 (st_1 (env_1910, x_4686)) handle _ => raise
  block L_4904 (x_4687: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4905
  block L_4905 (env_1911: unit)
    call tail st_1 (env_1911, x_4687)
fun x_4688 (env_1912: unit, x_4689: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4906 ()
  block L_4906 ()
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4907
  block L_4907 (env_1913: unit)
    call L_4908 (st_1 (env_1913, x_4689)) handle _ => raise
  block L_4908 (x_4690: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_38)*) of
      stEnv_0 => L_4909
  block L_4909 (env_1914: unit)
    call tail st_1 (env_1914, x_4690)
fun x_4691 (env_1915: unit, x_4692: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4910 ()
  block L_4910 ()
    return (x_4692)
fun st_1 (env_1916: unit, x_4693: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_4911 ()
  block L_4911 ()
    val sft_0: word32 = #2 (x_4693)
    val msk_0: word32 = #1 (x_4693)
    val w_1: word32 = #0 (x_4693)
    val x_4694: (word32, word32) tuple = (w_1, msk_0)
    case andb_0 (*con andbEn ... _137)*) of
      andbEnv_0 => L_4912
  block L_4912 (env_1917: unit)
    call L_4913 (andb_3 (env_1917, x_4694)) handle _ => raise
  block L_4913 (odd_0: word32)
    val x_4695: (word32, word32) tuple = (w_1, odd_0)
    case xorb_0 (*con xorbEn ... _142)*) of
      xorbEnv_0 => L_4914
  block L_4914 (env_1918: unit)
    call L_4915 (xorb_1 (env_1918, x_4695)) handle _ => raise
  block L_4915 (evn_0: word32)
    val x_4696: (word32, word32) tuple = (odd_0, sft_0)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_4916
  block L_4916 (env_1919: unit)
    call L_4917 (<<?_5 (env_1919, x_4696)) handle _ => raise
  block L_4917 (x_4697: word32)
    val x_4698: (word32, word32) tuple = (evn_0, sft_0)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4918
  block L_4918 (env_1920: unit)
    call L_4919 (>>?_5 (env_1920, x_4698)) handle _ => raise
  block L_4919 (x_4699: word32)
    val x_4700: (word32, word32) tuple = (x_4697, x_4699)
    case xorb_0 (*con xorbEn ... _142)*) of
      xorbEnv_0 => L_4920
  block L_4920 (env_1921: unit)
    call L_4921 (xorb_1 (env_1921, x_4700)) handle _ => raise
  block L_4921 (x_4701: word32)
    val x_4702: (word32, word32) tuple = (sft_0, x_518 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4922
  block L_4922 (env_1922: unit)
    call L_4923 (>>?_5 (env_1922, x_4702)) handle _ => raise
  block L_4923 (x_4703: word32)
    val x_4704: (word32, word32) tuple = (msk_0, x_4703)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_4924
  block L_4924 (env_1923: unit)
    call L_4925 (<<?_5 (env_1923, x_4704)) handle _ => raise
  block L_4925 (x_4705: word32)
    val x_4706: (word32, word32) tuple = (msk_0, x_4705)
    case xorb_0 (*con xorbEn ... _142)*) of
      xorbEnv_0 => L_4926
  block L_4926 (env_1924: unit)
    call L_4927 (xorb_1 (env_1924, x_4706)) handle _ => raise
  block L_4927 (x_4707: word32)
    val x_4708: (word32, word32) tuple = (sft_0, x_519 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4928
  block L_4928 (env_1925: unit)
    call L_4929 (>>?_5 (env_1925, x_4708)) handle _ => raise
  block L_4929 (x_4709: word32)
    val x_4710: (word32, word32, word32) tuple = (x_4701, x_4707, x_4709)
    return (x_4710)
fun >>_11 (env_1926: (word32, word32) tuple, x_4711: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4930 ()
  block L_4930 ()
    val sizeInBitsWord_18: word32 = #0 (env_1926)
    val zero_65: word32 = #1 (env_1926)
    val n_4: word32 = #1 (x_4711)
    val i_13: word32 = #0 (x_4711)
    val x_4712: (word32, word32) tuple = (n_4, sizeInBitsWord_18)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4931
  block L_4931 (env_1927: unit)
    call L_4932 (>=_10 (env_1927, x_4712)) handle _ => raise
  block L_4932 (x_4713: bool)
    case x_4713 of
      true => L_4934 | false => L_4933
  block L_4933 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4935
  block L_4935 (env_1928: unit)
    call L_4936 (zextdFromWord32ToWord32_1 (env_1928, n_4)) handle _ => raise
  block L_4936 (x_4714: word32)
    val x_4715: (word32, word32) tuple = (i_13, x_4714)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_4937
  block L_4937 (env_1929: unit)
    call tail >>?_5 (env_1929, x_4715)
  block L_4934 ()
    return (zero_65)
fun <<_8 (env_1930: (word32, word32) tuple, x_4716: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4938 ()
  block L_4938 ()
    val sizeInBitsWord_19: word32 = #0 (env_1930)
    val zero_66: word32 = #1 (env_1930)
    val n_5: word32 = #1 (x_4716)
    val i_14: word32 = #0 (x_4716)
    val x_4717: (word32, word32) tuple = (n_5, sizeInBitsWord_19)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4939
  block L_4939 (env_1931: unit)
    call L_4940 (>=_10 (env_1931, x_4717)) handle _ => raise
  block L_4940 (x_4718: bool)
    case x_4718 of
      true => L_4942 | false => L_4941
  block L_4941 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4943
  block L_4943 (env_1932: unit)
    call L_4944 (zextdFromWord32ToWord32_1 (env_1932, n_5)) handle _ => raise
  block L_4944 (x_4719: word32)
    val x_4720: (word32, word32) tuple = (i_14, x_4719)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_4945
  block L_4945 (env_1933: unit)
    call tail <<?_5 (env_1933, x_4720)
  block L_4942 ()
    return (zero_66)
fun >>_13 (env_1934: word32, x_4721: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4946 ()
  block L_4946 ()
    val n_6: word32 = #1 (x_4721)
    val i_15: word16 = #0 (x_4721)
    val x_4722: (word32, word32) tuple = (n_6, env_1934)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4947
  block L_4947 (env_1935: unit)
    call L_4948 (>=_10 (env_1935, x_4722)) handle _ => raise
  block L_4948 (x_4723: bool)
    case x_4723 of
      true => L_4950 | false => L_4949
  block L_4949 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4951
  block L_4951 (env_1936: unit)
    call L_4952 (zextdFromWord32ToWord32_1 (env_1936, n_6)) handle _ => raise
  block L_4952 (x_4724: word32)
    val x_4725: (word16, word32) tuple = (i_15, x_4724)
    case >>?_1 (*con >>?Env_1 (x_136)*) of
      >>?Env_1 => L_4953
  block L_4953 (env_1937: unit)
    call tail >>?_6 (env_1937, x_4725)
  block L_4950 ()
    return (x_285 (*0x0:w16*))
fun <<_13 (env_1938: word32, x_4726: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4954 ()
  block L_4954 ()
    val n_7: word32 = #1 (x_4726)
    val i_16: word16 = #0 (x_4726)
    val x_4727: (word32, word32) tuple = (n_7, env_1938)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4955
  block L_4955 (env_1939: unit)
    call L_4956 (>=_10 (env_1939, x_4727)) handle _ => raise
  block L_4956 (x_4728: bool)
    case x_4728 of
      true => L_4958 | false => L_4957
  block L_4957 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4959
  block L_4959 (env_1940: unit)
    call L_4960 (zextdFromWord32ToWord32_1 (env_1940, n_7)) handle _ => raise
  block L_4960 (x_4729: word32)
    val x_4730: (word16, word32) tuple = (i_16, x_4729)
    case <<?_1 (*con <<?Env_1 (x_134)*) of
      <<?Env_1 => L_4961
  block L_4961 (env_1941: unit)
    call tail <<?_6 (env_1941, x_4730)
  block L_4958 ()
    return (x_285 (*0x0:w16*))
fun >>_15 (env_1942: word32, x_4731: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4962 ()
  block L_4962 ()
    val n_8: word32 = #1 (x_4731)
    val i_17: word8 = #0 (x_4731)
    val x_4732: (word32, word32) tuple = (n_8, env_1942)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4963
  block L_4963 (env_1943: unit)
    call L_4964 (>=_10 (env_1943, x_4732)) handle _ => raise
  block L_4964 (x_4733: bool)
    case x_4733 of
      true => L_4966 | false => L_4965
  block L_4965 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4967
  block L_4967 (env_1944: unit)
    call L_4968 (zextdFromWord32ToWord32_1 (env_1944, n_8)) handle _ => raise
  block L_4968 (x_4734: word32)
    val x_4735: (word8, word32) tuple = (i_17, x_4734)
    case >>?_0 (*con >>?Env_0 (x_133)*) of
      >>?Env_0 => L_4969
  block L_4969 (env_1945: unit)
    call tail >>?_7 (env_1945, x_4735)
  block L_4966 ()
    return (x_271 (*0x0:w8*))
fun <<_15 (env_1946: word32, x_4736: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4970 ()
  block L_4970 ()
    val n_9: word32 = #1 (x_4736)
    val i_18: word8 = #0 (x_4736)
    val x_4737: (word32, word32) tuple = (n_9, env_1946)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4971
  block L_4971 (env_1947: unit)
    call L_4972 (>=_10 (env_1947, x_4737)) handle _ => raise
  block L_4972 (x_4738: bool)
    case x_4738 of
      true => L_4974 | false => L_4973
  block L_4973 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_4975
  block L_4975 (env_1948: unit)
    call L_4976 (zextdFromWord32ToWord32_1 (env_1948, n_9)) handle _ => raise
  block L_4976 (x_4739: word32)
    val x_4740: (word8, word32) tuple = (i_18, x_4739)
    case <<?_0 (*con <<?Env_0 (x_131)*) of
      <<?Env_0 => L_4977
  block L_4977 (env_1949: unit)
    call tail <<?_7 (env_1949, x_4740)
  block L_4974 ()
    return (x_271 (*0x0:w8*))
fun fmt_0 (env_1950:
             (word32,
              lambdas_248,
              word64,
              word64,
              word64,
              (word8) array,
              lambdas_251,
              (bool) ref) tuple,
           x_4741: radix_0):
  {returns = Some (lambdas_285), raises = Some (exn)} =
L_4978 ()
  block L_4978 ()
    val maxNumDigits_3: word32 = #0 (env_1950)
    val quot_6: lambdas_248 = #1 (env_1950)
    val one_58: word64 = #2 (env_1950)
    val minInt'_22: word64 = #3 (env_1950)
    val zero_67: word64 = #4 (env_1950)
    val x_4746: (word8) array = #5 (env_1950)
    val x_4745: lambdas_251 = #6 (env_1950)
    val x_4744: (bool) ref = #7 (env_1950)
    val x_4743:
      (word32,
       lambdas_248,
       word64,
       word64,
       word64,
       radix_0,
       (word8) array,
       lambdas_251,
       (bool) ref) tuple =
      (maxNumDigits_3,
       quot_6,
       one_58,
       minInt'_22,
       zero_67,
       x_4741,
       x_4746,
       x_4745,
       x_4744)
    val x_4742: lambdas_285 = con xEnv_227 (x_4743)
    return (x_4742)
fun x_4747 (env_1951:
              (word32,
               lambdas_248,
               word64,
               word64,
               word64,
               radix_0,
               (word8) array,
               lambdas_251,
               (bool) ref) tuple,
            x_4748: word64):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4979 ()
  block L_4979 ()
    val maxNumDigits_4: word32 = #0 (env_1951)
    val quot_7: lambdas_248 = #1 (env_1951)
    val one_59: word64 = #2 (env_1951)
    val minInt'_23: word64 = #3 (env_1951)
    val zero_68: word64 = #4 (env_1951)
    val x_4752: radix_0 = #5 (env_1951)
    val x_4751: (word8) array = #6 (env_1951)
    val x_4750: lambdas_251 = #7 (env_1951)
    val x_4749: (bool) ref = #8 (env_1951)
    case atomicBegin_0 (*con atomic ... _193)*) of
      atomicBeginEnv_0 => L_4980
  block L_4980 (env_1952: unit)
    call L_4981 (atomicBegin_1 (env_1952, x_503 (*()*))) handle _ => raise
  block L_4981 (x_4753: unit)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_4982
  block L_4982 (env_1953: unit)
    call L_4983 (x_2630 (env_1953, x_4749)) handle _ => raise
  block L_4983 (b_19: bool)
    case b_19 of
      true => L_4985 | false => L_4984
  block L_4984 ()
    val x_4754: ((bool) ref, bool) tuple = (x_4749, x_506 (*con true*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_4986
  block L_4986 (env_1954: unit)
    call L_4987 (x_2682 (env_1954, x_4754)) handle _ => raise
  block L_4987 (x_4755: unit)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_4988
  block L_4988 (env_1955: unit)
    call L_4989 (atomicEnd_1 (env_1955, x_507 (*()*))) handle _ => raise
  block L_4989 (x_4756: unit)
    goto L_4990 (x_4751)
  block L_4985 ()
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_4991
  block L_4991 (env_1956: unit)
    call L_4992 (atomicEnd_1 (env_1956, x_504 (*()*))) handle _ => raise
  block L_4992 (x_4757: unit)
    case x_4750 of
      xEnv_228 => L_4993
  block L_4993 (env_1957: (lambdas_286, word32) tuple)
    call L_4990 (x_1632 (env_1957, x_505 (*()*))) handle _ => raise
  block L_4990 (x_4758: (word8) array)
    val x_4759: ((bool) ref, bool) tuple = (x_4749, b_19)
    case radixToInt_0 (*con radixT ... _437)*) of
      radixToIntEnv_0 => L_4994
  block L_4994 (env_1958: unit)
    call L_4995 (radixToInt_1 (env_1958, x_4752)) handle _ => L_4996
  block L_4995 (x_4760: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_4997
  block L_4997 (env_1959: unit)
    call L_4998 (sextdFromInt32ToInt64_1 (env_1959, x_4760)) handle _ => L_4996
  block L_4998 (radix_3: word64)
    val tuple_104:
      (word64, word64, word64, word64, (word8) array, lambdas_248, word64) tuple =
      (radix_3, zero_68, minInt'_23, one_59, x_4758, quot_7, x_4748)
    val x_4761: (word64, word64) tuple = (x_4748, zero_68)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_4999
  block L_4999 (env_1960: unit)
    call L_5000 (<_7 (env_1960, x_4761)) handle _ => L_4996
  block L_5000 (x_4762: bool)
    case x_4762 of
      true => L_5002 | false => L_5001
  block L_5001 ()
    case ~!_1 (*con ~!Env_1 (x_165)*) of
      ~!Env_1 => L_5003
  block L_5003 (env_1961: unit)
    call L_5004 (~!_3 (env_1961, x_4748)) handle _ => L_4996
  block L_5002 ()
    goto L_5004 (x_4748)
  block L_5004 (x_4763: word64)
    val x_4764: (word32, word32) tuple = (maxNumDigits_4, x_515 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_5005
  block L_5005 (env_1962: unit)
    call L_5006 (x_1780 (env_1962, x_4764)) handle _ => L_4996
  block L_5006 (x_4765: word32)
    val x_4766: (word64, word32) tuple = (x_4763, x_4765)
    call L_5007 (loop_35 (tuple_104, x_4766)) handle _ => L_4996
  block L_4996 (x_4767: exn)
    call L_5008 (x_4768 (x_4759, x_517 (*()*))) handle _ => raise
  block L_5008 (x_4769: unit)
    raise (x_4767)
  block L_5007 (x_4770: (word8) vector)
    goto L_5009 (x_4770)
  block L_5009 (x_4771: (word8) vector)
    call L_5010 (x_4768 (x_4759, x_516 (*()*))) handle _ => raise
  block L_5010 (x_4772: unit)
    return (x_4771)
fun loop_35 (env_1963:
               (word64,
                word64,
                word64,
                word64,
                (word8) array,
                lambdas_248,
                word64) tuple,
             x_4773: (word64, word32) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5011 ()
  block L_5011 ()
    val radix_4: word64 = #0 (env_1963)
    val zero_69: word64 = #1 (env_1963)
    val minInt'_24: word64 = #2 (env_1963)
    val one_60: word64 = #3 (env_1963)
    val x_4776: (word8) array = #4 (env_1963)
    val quot_8: lambdas_248 = #5 (env_1963)
    val x_4775: word64 = #6 (env_1963)
    val i_19: word32 = #1 (x_4773)
    val q_2: word64 = #0 (x_4773)
    val x_4774: (word64, word64) tuple = (radix_4, zero_69)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5012
  block L_5012 (env_1964: unit)
    call L_5013 (x_2295 (env_1964, x_4774)) handle _ => raise
  block L_5013 (x_4777: bool)
    case x_4777 of
      true => L_5015 | false => L_5014
  block L_5014 ()
    val x_4778: (word64, word64) tuple = (q_2, minInt'_24)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5016
  block L_5016 (env_1965: unit)
    call L_5017 (x_2295 (env_1965, x_4778)) handle _ => raise
  block L_5017 (x_4779: bool)
    case x_4779 of
      true => L_5019 | false => L_5018
  block L_5018 ()
    goto L_5020 (x_510 (*con false*))
  block L_5019 ()
    case x_167 (*con xEnv_23 (x_166)*) of
      xEnv_23 => L_5021
  block L_5021 (env_1966: unit)
    call L_5022 (x_1588 (env_1966, one_60)) handle _ => raise
  block L_5022 (x_4780: word64)
    val x_4781: (word64, word64) tuple = (radix_4, x_4780)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5023
  block L_5023 (env_1967: unit)
    call L_5020 (x_2295 (env_1967, x_4781)) handle _ => raise
  block L_5020 (x_4782: bool)
    case x_4782 of
      true => L_5025 | false => L_5024
  block L_5024 ()
    val x_4783: word64 = prim WordS64_rem (q_2, radix_4)
    goto L_5026 (x_4783)
  block L_5025 ()
    goto L_5026 (zero_69)
  block L_5026 (x_4784: word64)
    case ~!_1 (*con ~!Env_1 (x_165)*) of
      ~!Env_1 => L_5027
  block L_5027 (env_1968: unit)
    call L_5028 (~!_3 (env_1968, x_4784)) handle _ => raise
  block L_5028 (x_4785: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5029
  block L_5029 (env_1969: unit)
    call L_5030 (x_2418 (env_1969, x_4785)) handle _ => raise
  block L_5030 (x_4786: word32)
    case digitToChar_0 (*con digitT ... e_37)*) of
      digitToCharEnv_0 => L_5031
  block L_5031 (env_1970: unit)
    call L_5032 (digitToChar_1 (env_1970, x_4786)) handle _ => raise
  block L_5032 (x_4787: word8)
    val x_4788: ((word8) array, word32, word8) tuple = (x_4776, i_19, x_4787)
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_5033
  block L_5033 (env_1971: unit)
    call L_5034 (update_1 (env_1971, x_4788)) handle _ => raise
  block L_5034 (x_4789: unit)
    val x_4790: (word64, word64) tuple = (q_2, radix_4)
    case quot_8 of
      quotEnv_0 => L_5035
  block L_5035 (env_1972: (word64, word64, word64) tuple)
    call L_5036 (quot_3 (env_1972, x_4790)) handle _ => raise
  block L_5036 (q_3: word64)
    val x_4791: (word64, word64) tuple = (q_3, zero_69)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5037
  block L_5037 (env_1973: unit)
    call L_5038 (x_2295 (env_1973, x_4791)) handle _ => raise
  block L_5038 (x_4792: bool)
    case x_4792 of
      true => L_5040 | false => L_5039
  block L_5039 ()
    val x_4793: (word32, word32) tuple = (i_19, x_514 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_5041
  block L_5041 (env_1974: unit)
    call L_5042 (x_1780 (env_1974, x_4793)) handle _ => raise
  block L_5042 (x_4794: word32)
    val x_4795: (word64, word32) tuple = (q_3, x_4794)
    call tail loop_35 (env_1963, x_4795)
  block L_5040 ()
    val x_4796: (word64, word64) tuple = (x_4775, zero_69)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5043
  block L_5043 (env_1975: unit)
    call L_5044 (<_7 (env_1975, x_4796)) handle _ => raise
  block L_5044 (x_4797: bool)
    case x_4797 of
      true => L_5046 | false => L_5045
  block L_5045 ()
    goto L_5047 (i_19)
  block L_5046 ()
    val x_4798: (word32, word32) tuple = (i_19, x_511 (*0x1:w32*))
    case x_159 (*con xEnv_21 (x_158)*) of
      xEnv_21 => L_5048
  block L_5048 (env_1976: unit)
    call L_5049 (x_1780 (env_1976, x_4798)) handle _ => raise
  block L_5049 (i_20: word32)
    val x_4799: ((word8) array, word32, word8) tuple =
      (x_4776, i_20, x_512 (*0x7E:w8*))
    case update_0 (*con update ... e_35)*) of
      updateEnv_0 => L_5050
  block L_5050 (env_1977: unit)
    call L_5051 (update_1 (env_1977, x_4799)) handle _ => raise
  block L_5051 (x_4800: unit)
    goto L_5047 (i_20)
  block L_5047 (x_4801: word32)
    val x_4802: ((word8) array, word32, t_0) tuple =
      (x_4776, x_4801, x_513 (*con NONE_1*))
    case slice_0 (*con sliceE ... e_33)*) of
      sliceEnv_0 => L_5052
  block L_5052 (env_1978: unit)
    call L_5053 (slice_1 (env_1978, x_4802)) handle _ => raise
  block L_5053 (x_4803: t_13)
    case vector_0 (*con vector ... e_19)*) of
      vectorEnv_0 => L_5054
  block L_5054 (env_1979: unit)
    call tail vector_1 (env_1979, x_4803)
  block L_5015 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_4768 (env_1980: ((bool) ref, bool) tuple, x_4804: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5055 ()
  block L_5055 ()
    val x_4805: (bool) ref = #0 (env_1980)
    val b_20: bool = #1 (env_1980)
    case b_20 of
      true => L_5057 | false => L_5056
  block L_5056 ()
    val x_4806: ((bool) ref, bool) tuple = (x_4805, x_509 (*con false*))
    case x_91 (*con xEnv_12 (x_90)*) of
      xEnv_12 => L_5058
  block L_5058 (env_1981: unit)
    call tail x_2682 (env_1981, x_4806)
  block L_5057 ()
    return (x_508 (*()*))
fun x_1632 (env_1982: (lambdas_286, word32) tuple, x_4807: unit):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5059 ()
  block L_5059 ()
    val new_4: lambdas_286 = #0 (env_1982)
    val maxNumDigits_5: word32 = #1 (env_1982)
    val x_4808: (word32, word8) tuple = (maxNumDigits_5, x_500 (*0x0:w8*))
    case new_4 of
      newEnv_1 => L_5060
  block L_5060 (env_1983: lambdas_484)
    call tail new_3 (env_1983, x_4808)
fun >>_17 (env_1984: (word32, word64) tuple, x_4809: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5061 ()
  block L_5061 ()
    val sizeInBitsWord_20: word32 = #0 (env_1984)
    val zero_70: word64 = #1 (env_1984)
    val n_10: word32 = #1 (x_4809)
    val i_21: word64 = #0 (x_4809)
    val x_4810: (word32, word32) tuple = (n_10, sizeInBitsWord_20)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5062
  block L_5062 (env_1985: unit)
    call L_5063 (>=_10 (env_1985, x_4810)) handle _ => raise
  block L_5063 (x_4811: bool)
    case x_4811 of
      true => L_5065 | false => L_5064
  block L_5064 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5066
  block L_5066 (env_1986: unit)
    call L_5067 (zextdFromWord32ToWord32_1 (env_1986, n_10)) handle _ => raise
  block L_5067 (x_4812: word32)
    val x_4813: (word64, word32) tuple = (i_21, x_4812)
    case x_322 (*con xEnv_43 (x_321)*) of
      xEnv_43 => L_5068
  block L_5068 (env_1987: unit)
    call tail x_1542 (env_1987, x_4813)
  block L_5065 ()
    return (zero_70)
fun <<_17 (env_1988: (word32, word64) tuple, x_4814: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5069 ()
  block L_5069 ()
    val sizeInBitsWord_21: word32 = #0 (env_1988)
    val zero_71: word64 = #1 (env_1988)
    val n_11: word32 = #1 (x_4814)
    val i_22: word64 = #0 (x_4814)
    val x_4815: (word32, word32) tuple = (n_11, sizeInBitsWord_21)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5070
  block L_5070 (env_1989: unit)
    call L_5071 (>=_10 (env_1989, x_4815)) handle _ => raise
  block L_5071 (x_4816: bool)
    case x_4816 of
      true => L_5073 | false => L_5072
  block L_5072 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5074
  block L_5074 (env_1990: unit)
    call L_5075 (zextdFromWord32ToWord32_1 (env_1990, n_11)) handle _ => raise
  block L_5075 (x_4817: word32)
    val x_4818: (word64, word32) tuple = (i_22, x_4817)
    case x_320 (*con xEnv_42 (x_319)*) of
      xEnv_42 => L_5076
  block L_5076 (env_1991: unit)
    call tail x_1537 (env_1991, x_4818)
  block L_5073 ()
    return (zero_71)
fun x_1626 (env_1992: (lambdas_286, word32) tuple, x_4819: unit):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5077 ()
  block L_5077 ()
    val new_5: lambdas_286 = #0 (env_1992)
    val maxNumDigits_6: word32 = #1 (env_1992)
    val x_4820: (word32, word8) tuple = (maxNumDigits_6, x_495 (*0x0:w8*))
    case new_5 of
      newEnv_1 => L_5078
  block L_5078 (env_1993: lambdas_484)
    call tail new_3 (env_1993, x_4820)
fun >>_19 (env_1994: (word32, word32) tuple, x_4821: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5079 ()
  block L_5079 ()
    val sizeInBitsWord_22: word32 = #0 (env_1994)
    val zero_72: word32 = #1 (env_1994)
    val n_12: word32 = #1 (x_4821)
    val i_23: word32 = #0 (x_4821)
    val x_4822: (word32, word32) tuple = (n_12, sizeInBitsWord_22)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5080
  block L_5080 (env_1995: unit)
    call L_5081 (>=_10 (env_1995, x_4822)) handle _ => raise
  block L_5081 (x_4823: bool)
    case x_4823 of
      true => L_5083 | false => L_5082
  block L_5082 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5084
  block L_5084 (env_1996: unit)
    call L_5085 (zextdFromWord32ToWord32_1 (env_1996, n_12)) handle _ => raise
  block L_5085 (x_4824: word32)
    val x_4825: (word32, word32) tuple = (i_23, x_4824)
    case x_306 (*con xEnv_41 (x_305)*) of
      xEnv_41 => L_5086
  block L_5086 (env_1997: unit)
    call tail x_1530 (env_1997, x_4825)
  block L_5083 ()
    return (zero_72)
fun <<_19 (env_1998: (word32, word32) tuple, x_4826: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5087 ()
  block L_5087 ()
    val sizeInBitsWord_23: word32 = #0 (env_1998)
    val zero_73: word32 = #1 (env_1998)
    val n_13: word32 = #1 (x_4826)
    val i_24: word32 = #0 (x_4826)
    val x_4827: (word32, word32) tuple = (n_13, sizeInBitsWord_23)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5088
  block L_5088 (env_1999: unit)
    call L_5089 (>=_10 (env_1999, x_4827)) handle _ => raise
  block L_5089 (x_4828: bool)
    case x_4828 of
      true => L_5091 | false => L_5090
  block L_5090 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5092
  block L_5092 (env_2000: unit)
    call L_5093 (zextdFromWord32ToWord32_1 (env_2000, n_13)) handle _ => raise
  block L_5093 (x_4829: word32)
    val x_4830: (word32, word32) tuple = (i_24, x_4829)
    case x_304 (*con xEnv_40 (x_303)*) of
      xEnv_40 => L_5094
  block L_5094 (env_2001: unit)
    call tail x_1525 (env_2001, x_4830)
  block L_5091 ()
    return (zero_73)
fun >>_21 (env_2002: (word32, word16) tuple, x_4831: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5095 ()
  block L_5095 ()
    val sizeInBitsWord_24: word32 = #0 (env_2002)
    val zero_74: word16 = #1 (env_2002)
    val n_14: word32 = #1 (x_4831)
    val i_25: word16 = #0 (x_4831)
    val x_4832: (word32, word32) tuple = (n_14, sizeInBitsWord_24)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5096
  block L_5096 (env_2003: unit)
    call L_5097 (>=_10 (env_2003, x_4832)) handle _ => raise
  block L_5097 (x_4833: bool)
    case x_4833 of
      true => L_5099 | false => L_5098
  block L_5098 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5100
  block L_5100 (env_2004: unit)
    call L_5101 (zextdFromWord32ToWord32_1 (env_2004, n_14)) handle _ => raise
  block L_5101 (x_4834: word32)
    val x_4835: (word16, word32) tuple = (i_25, x_4834)
    case x_291 (*con xEnv_39 (x_290)*) of
      xEnv_39 => L_5102
  block L_5102 (env_2005: unit)
    call tail x_1518 (env_2005, x_4835)
  block L_5099 ()
    return (zero_74)
fun <<_21 (env_2006: (word32, word16) tuple, x_4836: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5103 ()
  block L_5103 ()
    val sizeInBitsWord_25: word32 = #0 (env_2006)
    val zero_75: word16 = #1 (env_2006)
    val n_15: word32 = #1 (x_4836)
    val i_26: word16 = #0 (x_4836)
    val x_4837: (word32, word32) tuple = (n_15, sizeInBitsWord_25)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5104
  block L_5104 (env_2007: unit)
    call L_5105 (>=_10 (env_2007, x_4837)) handle _ => raise
  block L_5105 (x_4838: bool)
    case x_4838 of
      true => L_5107 | false => L_5106
  block L_5106 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5108
  block L_5108 (env_2008: unit)
    call L_5109 (zextdFromWord32ToWord32_1 (env_2008, n_15)) handle _ => raise
  block L_5109 (x_4839: word32)
    val x_4840: (word16, word32) tuple = (i_26, x_4839)
    case x_289 (*con xEnv_38 (x_288)*) of
      xEnv_38 => L_5110
  block L_5110 (env_2009: unit)
    call tail x_1513 (env_2009, x_4840)
  block L_5107 ()
    return (zero_75)
fun >>_23 (env_2010: (word32, word8) tuple, x_4841: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5111 ()
  block L_5111 ()
    val sizeInBitsWord_26: word32 = #0 (env_2010)
    val zero_76: word8 = #1 (env_2010)
    val n_16: word32 = #1 (x_4841)
    val i_27: word8 = #0 (x_4841)
    val x_4842: (word32, word32) tuple = (n_16, sizeInBitsWord_26)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5112
  block L_5112 (env_2011: unit)
    call L_5113 (>=_10 (env_2011, x_4842)) handle _ => raise
  block L_5113 (x_4843: bool)
    case x_4843 of
      true => L_5115 | false => L_5114
  block L_5114 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5116
  block L_5116 (env_2012: unit)
    call L_5117 (zextdFromWord32ToWord32_1 (env_2012, n_16)) handle _ => raise
  block L_5117 (x_4844: word32)
    val x_4845: (word8, word32) tuple = (i_27, x_4844)
    case x_277 (*con xEnv_37 (x_276)*) of
      xEnv_37 => L_5118
  block L_5118 (env_2013: unit)
    call tail x_1506 (env_2013, x_4845)
  block L_5115 ()
    return (zero_76)
fun <<_23 (env_2014: (word32, word8) tuple, x_4846: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5119 ()
  block L_5119 ()
    val sizeInBitsWord_27: word32 = #0 (env_2014)
    val zero_77: word8 = #1 (env_2014)
    val n_17: word32 = #1 (x_4846)
    val i_28: word8 = #0 (x_4846)
    val x_4847: (word32, word32) tuple = (n_17, sizeInBitsWord_27)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5120
  block L_5120 (env_2015: unit)
    call L_5121 (>=_10 (env_2015, x_4847)) handle _ => raise
  block L_5121 (x_4848: bool)
    case x_4848 of
      true => L_5123 | false => L_5122
  block L_5122 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _119)*) of
      zextdFromWord32ToWord32Env_0 => L_5124
  block L_5124 (env_2016: unit)
    call L_5125 (zextdFromWord32ToWord32_1 (env_2016, n_17)) handle _ => raise
  block L_5125 (x_4849: word32)
    val x_4850: (word8, word32) tuple = (i_28, x_4849)
    case x_275 (*con xEnv_36 (x_274)*) of
      xEnv_36 => L_5126
  block L_5126 (env_2017: unit)
    call tail x_1501 (env_2017, x_4850)
  block L_5123 ()
    return (zero_77)
fun digitToChar_1 (env_2018: unit, x_4851: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_5127 ()
  block L_5127 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5128
  block L_5128 (env_2019: unit)
    call L_5129 (full_2 (env_2019, x_491 (*"0123456789ABCDEF"*))) handle _ => raise
  block L_5129 (x_4852: t_19)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5130
  block L_5130 (env_2020: unit)
    call L_5131 (sextdFromInt32ToInt64_1 (env_2020, x_4851)) handle _ => L_5132
  block L_5132 (x_4853: exn)
    case x_4853 of
      Overflow_0 => L_5133 | _ => L_5134
  block L_5134 ()
    call L_5131 (x_4854 (x_4853, x_492 (*()*))) handle _ => raise
  block L_5133 (x_4855: (unit) ref)
    val x_4856: bool = prim MLton_equal[(unit) ref] (x_4855, x_62)
    case x_4856 of
      true => L_5136 | false => L_5135
  block L_5135 ()
    call L_5131 (x_4854 (x_4853, x_493 (*()*))) handle _ => raise
  block L_5136 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_5131 (i_29: word64)
    case x_4852 of
      T_4 => L_5137
  block L_5137 (x_4857: (word64, (word8) vector, word64) tuple)
    val x_4859: word64 = #0 (x_4857)
    val x_4858: (word64, word64) tuple = (i_29, x_4859)
    case >=_5 (*con >=Env_ ... e_15)*) of
      >=Env_5 => L_5138
  block L_5138 (env_2021: unit)
    call L_5139 (>=_11 (env_2021, x_4858)) handle _ => raise
  block L_5139 (x_4860: bool)
    case x_4860 of
      true => L_5141 | false => L_5140
  block L_5140 ()
    case x_4852 of
      T_4 => L_5142
  block L_5142 (x_4861: (word64, (word8) vector, word64) tuple)
    val x_4863: word64 = #2 (x_4861)
    val x_4864: (word8) vector = #1 (x_4861)
    val x_4862: (word64, word64) tuple = (x_4863, i_29)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5143
  block L_5143 (env_2022: unit)
    call L_5144 (+!_2 (env_2022, x_4862)) handle _ => raise
  block L_5144 (x_4865: word64)
    val x_4866: ((word8) vector, word64) tuple = (x_4864, x_4865)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_5145
  block L_5145 (env_2023: unit)
    call tail x_2541 (env_2023, x_4866)
  block L_5141 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_4854 (env_2024: exn, unit_11: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5146 ()
  block L_5146 ()
    raise (env_2024)
fun loop_9 (env_2025: (word64, (bool) array) tuple, x_4867: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5147 ()
  block L_5147 ()
    val x_4869: word64 = #0 (env_2025)
    val x_4870: (bool) array = #1 (env_2025)
    val b_21: unit = #1 (x_4867)
    val i_30: word64 = #0 (x_4867)
    val x_4868: (word64, word64) tuple = (i_30, x_4869)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5148
  block L_5148 (env_2026: unit)
    call L_5149 (>=_7 (env_2026, x_4868)) handle _ => raise
  block L_5149 (x_4871: bool)
    case x_4871 of
      true => L_5151 | false => L_5150
  block L_5150 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5152
  block L_5152 (env_2027: unit)
    call L_5153 (sextdFromInt64ToInt32_1 (env_2027, i_30)) handle _ => raise
  block L_5153 (x_4872: word32)
    case x_429 (*con xEnv_45 (x_428)*) of
      xEnv_45 => L_5154
  block L_5154 (env_2028: unit)
    call L_5155 (x_1785 (env_2028, x_4872)) handle _ => raise
  block L_5155 (x_4873: word8)
    val x_4874: (word8, word8) tuple = (x_4873, x_477 (*0x20:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5156
  block L_5156 (env_2029: unit)
    call L_5157 (x_2558 (env_2029, x_4874)) handle _ => raise
  block L_5157 (x_4875: bool)
    case x_4875 of
      true => L_5159 | false => L_5158
  block L_5158 ()
    val x_4876: (word8, word8) tuple = (x_4873, x_479 (*0x9:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5160
  block L_5160 (env_2030: unit)
    call L_5161 (x_2558 (env_2030, x_4876)) handle _ => raise
  block L_5159 ()
    goto L_5161 (x_478 (*con true*))
  block L_5161 (x_4877: bool)
    case x_4877 of
      true => L_5163 | false => L_5162
  block L_5162 ()
    val x_4878: (word8, word8) tuple = (x_4873, x_481 (*0xD:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5164
  block L_5164 (env_2031: unit)
    call L_5165 (x_2558 (env_2031, x_4878)) handle _ => raise
  block L_5163 ()
    goto L_5165 (x_480 (*con true*))
  block L_5165 (x_4879: bool)
    case x_4879 of
      true => L_5167 | false => L_5166
  block L_5166 ()
    val x_4880: (word8, word8) tuple = (x_4873, x_483 (*0xA:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5168
  block L_5168 (env_2032: unit)
    call L_5169 (x_2558 (env_2032, x_4880)) handle _ => raise
  block L_5167 ()
    goto L_5169 (x_482 (*con true*))
  block L_5169 (x_4881: bool)
    case x_4881 of
      true => L_5171 | false => L_5170
  block L_5170 ()
    val x_4882: (word8, word8) tuple = (x_4873, x_485 (*0xB:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5172
  block L_5172 (env_2033: unit)
    call L_5173 (x_2558 (env_2033, x_4882)) handle _ => raise
  block L_5171 ()
    goto L_5173 (x_484 (*con true*))
  block L_5173 (x_4883: bool)
    case x_4883 of
      true => L_5175 | false => L_5174
  block L_5174 ()
    val x_4884: (word8, word8) tuple = (x_4873, x_487 (*0xC:w8*))
    case x_99 (*con xEnv_16 (x_98)*) of
      xEnv_16 => L_5176
  block L_5176 (env_2034: unit)
    call L_5177 (x_2558 (env_2034, x_4884)) handle _ => raise
  block L_5175 ()
    goto L_5177 (x_486 (*con true*))
  block L_5177 (x_4885: bool)
    val _: unit = prim Array_update[bool] (x_4870, i_30, x_4885)
    val x_4886: (word64, word64) tuple = (i_30, x_489 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5178
  block L_5178 (env_2035: unit)
    call L_5179 (+!_2 (env_2035, x_4886)) handle _ => raise
  block L_5179 (x_4887: word64)
    val x_4888: (word64, unit) tuple = (x_4887, x_488 (*()*))
    call tail loop_9 (env_2025, x_4888)
  block L_5151 ()
    return (b_21)
fun loop_8 (env_2036: (word64, list_1, (t_0) array) tuple,
            x_4889: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5180 ()
  block L_5180 ()
    val x_4891: word64 = #0 (env_2036)
    val x_4893: list_1 = #1 (env_2036)
    val x_4892: (t_0) array = #2 (env_2036)
    val b_22: unit = #1 (x_4889)
    val i_31: word64 = #0 (x_4889)
    val x_4890: (word64, word64) tuple = (i_31, x_4891)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5181
  block L_5181 (env_2037: unit)
    call L_5182 (>=_7 (env_2037, x_4890)) handle _ => raise
  block L_5182 (x_4894: bool)
    case x_4894 of
      true => L_5184 | false => L_5183
  block L_5183 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5185
  block L_5185 (env_2038: unit)
    call L_5186 (sextdFromInt64ToInt32_1 (env_2038, i_31)) handle _ => raise
  block L_5186 (x_4895: word32)
    case x_429 (*con xEnv_45 (x_428)*) of
      xEnv_45 => L_5187
  block L_5187 (env_2039: unit)
    call L_5188 (x_1785 (env_2039, x_4895)) handle _ => raise
  block L_5188 (x_4896: word8)
    call L_5189 (loop_36 (x_4896, x_4893)) handle _ => raise
  block L_5189 (x_4897: t_0)
    val _: unit = prim Array_update[t_0] (x_4892, i_31, x_4897)
    val x_4898: (word64, word64) tuple = (i_31, x_474 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5190
  block L_5190 (env_2040: unit)
    call L_5191 (+!_2 (env_2040, x_4898)) handle _ => raise
  block L_5191 (x_4899: word64)
    val x_4900: (word64, unit) tuple = (x_4899, x_473 (*()*))
    call tail loop_8 (env_2036, x_4900)
  block L_5184 ()
    return (b_22)
fun loop_36 (env_2041: word8, x_4901: list_1):
  {returns = Some (t_0), raises = Some (exn)} =
L_5192 ()
  block L_5192 ()
    case x_4901 of
      nil_2 => L_5194 | ::_4 => L_5193
  block L_5193 (x_4902: (lambdas_1, list_1) tuple)
    val x_4904: list_1 = #1 (x_4902)
    val x_4903: lambdas_1 = #0 (x_4902)
    case x_4903 of
      xEnv_245 => L_5195
  block L_5195 (env_2042: (word32, word32, word8, word8) tuple)
    call L_5196 (x_4905 (env_2042, env_2041)) handle _ => raise
  block L_5196 (x_4906: t_0)
    case x_4906 of
      NONE_1 => L_5197 | _ => L_5198
  block L_5198 ()
    return (x_4906)
  block L_5197 ()
    call tail loop_36 (env_2041, x_4904)
  block L_5194 ()
    return (x_472 (*con NONE_1*))
fun loop_7 (env_2043: (word64, lambdas_1, (t_0) array) tuple,
            x_4907: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5199 ()
  block L_5199 ()
    val x_4909: word64 = #0 (env_2043)
    val x_4911: lambdas_1 = #1 (env_2043)
    val x_4910: (t_0) array = #2 (env_2043)
    val b_23: unit = #1 (x_4907)
    val i_32: word64 = #0 (x_4907)
    val x_4908: (word64, word64) tuple = (i_32, x_4909)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5200
  block L_5200 (env_2044: unit)
    call L_5201 (>=_7 (env_2044, x_4908)) handle _ => raise
  block L_5201 (x_4912: bool)
    case x_4912 of
      true => L_5203 | false => L_5202
  block L_5202 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5204
  block L_5204 (env_2045: unit)
    call L_5205 (sextdFromInt64ToInt32_1 (env_2045, i_32)) handle _ => raise
  block L_5205 (x_4913: word32)
    case x_429 (*con xEnv_45 (x_428)*) of
      xEnv_45 => L_5206
  block L_5206 (env_2046: unit)
    call L_5207 (x_1785 (env_2046, x_4913)) handle _ => raise
  block L_5207 (x_4914: word8)
    case x_4911 of
      xEnv_245 => L_5208
  block L_5208 (env_2047: (word32, word32, word8, word8) tuple)
    call L_5209 (x_4905 (env_2047, x_4914)) handle _ => raise
  block L_5209 (x_4915: t_0)
    val _: unit = prim Array_update[t_0] (x_4910, i_32, x_4915)
    val x_4916: (word64, word64) tuple = (i_32, x_459 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5210
  block L_5210 (env_2048: unit)
    call L_5211 (+!_2 (env_2048, x_4916)) handle _ => raise
  block L_5211 (x_4917: word64)
    val x_4918: (word64, unit) tuple = (x_4917, x_458 (*()*))
    call tail loop_7 (env_2043, x_4918)
  block L_5203 ()
    return (b_23)
fun loop_6 (env_2049: (word64, lambdas_1, (t_0) array) tuple,
            x_4919: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5212 ()
  block L_5212 ()
    val x_4921: word64 = #0 (env_2049)
    val x_4923: lambdas_1 = #1 (env_2049)
    val x_4922: (t_0) array = #2 (env_2049)
    val b_24: unit = #1 (x_4919)
    val i_33: word64 = #0 (x_4919)
    val x_4920: (word64, word64) tuple = (i_33, x_4921)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5213
  block L_5213 (env_2050: unit)
    call L_5214 (>=_7 (env_2050, x_4920)) handle _ => raise
  block L_5214 (x_4924: bool)
    case x_4924 of
      true => L_5216 | false => L_5215
  block L_5215 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5217
  block L_5217 (env_2051: unit)
    call L_5218 (sextdFromInt64ToInt32_1 (env_2051, i_33)) handle _ => raise
  block L_5218 (x_4925: word32)
    case x_429 (*con xEnv_45 (x_428)*) of
      xEnv_45 => L_5219
  block L_5219 (env_2052: unit)
    call L_5220 (x_1785 (env_2052, x_4925)) handle _ => raise
  block L_5220 (x_4926: word8)
    case x_4923 of
      xEnv_245 => L_5221
  block L_5221 (env_2053: (word32, word32, word8, word8) tuple)
    call L_5222 (x_4905 (env_2053, x_4926)) handle _ => raise
  block L_5222 (x_4927: t_0)
    val _: unit = prim Array_update[t_0] (x_4922, i_33, x_4927)
    val x_4928: (word64, word64) tuple = (i_33, x_452 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5223
  block L_5223 (env_2054: unit)
    call L_5224 (+!_2 (env_2054, x_4928)) handle _ => raise
  block L_5224 (x_4929: word64)
    val x_4930: (word64, unit) tuple = (x_4929, x_451 (*()*))
    call tail loop_6 (env_2049, x_4930)
  block L_5216 ()
    return (b_24)
fun loop_5 (env_2055: (word64, lambdas_1, (t_0) array) tuple,
            x_4931: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5225 ()
  block L_5225 ()
    val x_4933: word64 = #0 (env_2055)
    val x_4935: lambdas_1 = #1 (env_2055)
    val x_4934: (t_0) array = #2 (env_2055)
    val b_25: unit = #1 (x_4931)
    val i_34: word64 = #0 (x_4931)
    val x_4932: (word64, word64) tuple = (i_34, x_4933)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5226
  block L_5226 (env_2056: unit)
    call L_5227 (>=_7 (env_2056, x_4932)) handle _ => raise
  block L_5227 (x_4936: bool)
    case x_4936 of
      true => L_5229 | false => L_5228
  block L_5228 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5230
  block L_5230 (env_2057: unit)
    call L_5231 (sextdFromInt64ToInt32_1 (env_2057, i_34)) handle _ => raise
  block L_5231 (x_4937: word32)
    case x_429 (*con xEnv_45 (x_428)*) of
      xEnv_45 => L_5232
  block L_5232 (env_2058: unit)
    call L_5233 (x_1785 (env_2058, x_4937)) handle _ => raise
  block L_5233 (x_4938: word8)
    case x_4935 of
      xEnv_245 => L_5234
  block L_5234 (env_2059: (word32, word32, word8, word8) tuple)
    call L_5235 (x_4905 (env_2059, x_4938)) handle _ => raise
  block L_5235 (x_4939: t_0)
    val _: unit = prim Array_update[t_0] (x_4934, i_34, x_4939)
    val x_4940: (word64, word64) tuple = (i_34, x_445 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5236
  block L_5236 (env_2060: unit)
    call L_5237 (+!_2 (env_2060, x_4940)) handle _ => raise
  block L_5237 (x_4941: word64)
    val x_4942: (word64, unit) tuple = (x_4941, x_444 (*()*))
    call tail loop_5 (env_2055, x_4942)
  block L_5229 ()
    return (b_25)
fun range_1 (env_2061: unit, x_4943: (word32, word8, word8) tuple):
  {returns = Some (lambdas_1), raises = Some (exn)} =
L_5238 ()
  block L_5238 ()
    val cmax_0: word8 = #2 (x_4943)
    val cmin_0: word8 = #1 (x_4943)
    val add_0: word32 = #0 (x_4943)
    case x_431 (*con xEnv_46 (x_430)*) of
      xEnv_46 => L_5239
  block L_5239 (env_2062: unit)
    call L_5240 (x_4944 (env_2062, cmin_0)) handle _ => raise
  block L_5240 (min_0: word32)
    val x_4946: (word32, word32, word8, word8) tuple =
      (min_0, add_0, cmax_0, cmin_0)
    val x_4945: lambdas_1 = con xEnv_245 (x_4946)
    return (x_4945)
fun x_4905 (env_2063: (word32, word32, word8, word8) tuple, x_4947: word8):
  {returns = Some (t_0), raises = Some (exn)} =
L_5241 ()
  block L_5241 ()
    val min_1: word32 = #0 (env_2063)
    val add_1: word32 = #1 (env_2063)
    val cmax_1: word8 = #2 (env_2063)
    val cmin_1: word8 = #3 (env_2063)
    val x_4948: (word8, word8) tuple = (cmin_1, x_4947)
    case <=_1 (*con <=Env_ ... le_8)*) of
      <=Env_1 => L_5242
  block L_5242 (env_2064: unit)
    call L_5243 (<=_7 (env_2064, x_4948)) handle _ => raise
  block L_5243 (x_4949: bool)
    case x_4949 of
      true => L_5245 | false => L_5244
  block L_5244 ()
    goto L_5246 (x_438 (*con false*))
  block L_5245 ()
    val x_4950: (word8, word8) tuple = (x_4947, cmax_1)
    case <=_1 (*con <=Env_ ... le_8)*) of
      <=Env_1 => L_5247
  block L_5247 (env_2065: unit)
    call L_5246 (<=_7 (env_2065, x_4950)) handle _ => raise
  block L_5246 (x_4951: bool)
    case x_4951 of
      true => L_5249 | false => L_5248
  block L_5248 ()
    return (x_439 (*con NONE_1*))
  block L_5249 ()
    case x_431 (*con xEnv_46 (x_430)*) of
      xEnv_46 => L_5250
  block L_5250 (env_2066: unit)
    call L_5251 (x_4944 (env_2066, x_4947)) handle _ => raise
  block L_5251 (x_4952: word32)
    val x_4953: (word32, word32) tuple = (add_1, x_4952)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5252
  block L_5252 (env_2067: unit)
    call L_5253 (+!_3 (env_2067, x_4953)) handle _ => raise
  block L_5253 (x_4954: word32)
    val x_4955: (word32, word32) tuple = (x_4954, min_1)
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5254
  block L_5254 (env_2068: unit)
    call L_5255 (-!_3 (env_2068, x_4955)) handle _ => raise
  block L_5255 (x_4956: word32)
    val x_4957: t_0 = con SOME_0 (x_4956)
    return (x_4957)
fun radixToInt_1 (env_2069: unit, x_4958: radix_0):
  {returns = Some (word32), raises = Some (exn)} =
L_5256 ()
  block L_5256 ()
    case x_4958 of
      BIN_1 => L_5260 | DEC_1 => L_5259 | HEX_0 => L_5258 | OCT_1 => L_5257
  block L_5257 ()
    return (x_436 (*0x8:w32*))
  block L_5258 ()
    return (x_435 (*0x10:w32*))
  block L_5259 ()
    return (x_434 (*0xA:w32*))
  block L_5260 ()
    return (x_433 (*0x2:w32*))
fun x_4944 (env_2070: unit, x_4959: word8):
  {returns = Some (word32), raises = Some (exn)} =
L_5261 ()
  block L_5261 ()
    val x_4960: word32 = prim WordU8_extdToWord32 (x_4959)
    return (x_4960)
fun x_1785 (env_2071: unit, x_4961: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_5262 ()
  block L_5262 ()
    val x_4962: word8 = prim WordS32_extdToWord8 (x_4961)
    case idFromWord8_0 (*con idFrom ... _202)*) of
      idFromWord8Env_0 => L_5263
  block L_5263 (env_2072: unit)
    call tail idFromWord8_1 (env_2072, x_4962)
fun update_1 (env_2073: unit, x_4963: ((word8) array, word32, word8) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5264 ()
  block L_5264 ()
    val x_4964: word8 = #2 (x_4963)
    val i_35: word32 = #1 (x_4963)
    val seq_0: (word8) array = #0 (x_4963)
    case full_0 (*con fullEn ... e_18)*) of
      fullEnv_0 => L_5265
  block L_5265 (env_2074: unit)
    call L_5266 (full_3 (env_2074, seq_0)) handle _ => raise
  block L_5266 (x_4965: t_13)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5267
  block L_5267 (env_2075: unit)
    call L_5268 (sextdFromInt32ToInt64_1 (env_2075, i_35)) handle _ => L_5269
  block L_5269 (x_4966: exn)
    case x_4966 of
      Overflow_0 => L_5270 | _ => L_5271
  block L_5271 ()
    call L_5268 (x_4967 (x_4966, x_426 (*()*))) handle _ => raise
  block L_5270 (x_4968: (unit) ref)
    val x_4969: bool = prim MLton_equal[(unit) ref] (x_4968, x_62)
    case x_4969 of
      true => L_5273 | false => L_5272
  block L_5272 ()
    call L_5268 (x_4967 (x_4966, x_427 (*()*))) handle _ => raise
  block L_5273 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_5268 (i_36: word64)
    case x_4965 of
      T_3 => L_5274
  block L_5274 (x_4970: (word64, (word8) array, word64) tuple)
    val x_4972: word64 = #0 (x_4970)
    val x_4971: (word64, word64) tuple = (i_36, x_4972)
    case >=_5 (*con >=Env_ ... e_15)*) of
      >=Env_5 => L_5275
  block L_5275 (env_2076: unit)
    call L_5276 (>=_11 (env_2076, x_4971)) handle _ => raise
  block L_5276 (x_4973: bool)
    case x_4973 of
      true => L_5278 | false => L_5277
  block L_5277 ()
    case x_4965 of
      T_3 => L_5279
  block L_5279 (x_4974: (word64, (word8) array, word64) tuple)
    val x_4976: word64 = #2 (x_4974)
    val x_4977: (word8) array = #1 (x_4974)
    val x_4975: (word64, word64) tuple = (x_4976, i_36)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5280
  block L_5280 (env_2077: unit)
    call L_5281 (+!_2 (env_2077, x_4975)) handle _ => raise
  block L_5281 (x_4978: word64)
    val x_4979: ((word8) array, word64, word8) tuple = (x_4977, x_4978, x_4964)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5282
  block L_5282 (env_2078: unit)
    call tail x_2544 (env_2078, x_4979)
  block L_5278 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_4967 (env_2079: exn, unit_12: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5283 ()
  block L_5283 ()
    raise (env_2079)
fun base_5 (env_2080: unit, x_4980: t_13):
  {returns = Some (((word8) array, word32, word32) tuple), raises = Some (exn)} =
L_5284 ()
  block L_5284 ()
    case x_4980 of
      T_3 => L_5285
  block L_5285 (x_4981: (word64, (word8) array, word64) tuple)
    val x_4984: word64 = #2 (x_4981)
    val x_4983: (word8) array = #1 (x_4981)
    val x_4982: word64 = #0 (x_4981)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5286
  block L_5286 (env_2081: unit)
    call L_5287 (x_2418 (env_2081, x_4984)) handle _ => L_5288
  block L_5287 (x_4985: word32)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5289
  block L_5289 (env_2082: unit)
    call L_5290 (x_2418 (env_2082, x_4982)) handle _ => L_5288
  block L_5288 (x_4986: exn)
    case x_4986 of
      Overflow_0 => L_5291 | _ => L_5292
  block L_5292 ()
    call tail x_4987 (x_4986, x_421 (*()*))
  block L_5291 (x_4988: (unit) ref)
    val x_4989: bool = prim MLton_equal[(unit) ref] (x_4988, x_62)
    case x_4989 of
      true => L_5294 | false => L_5293
  block L_5293 ()
    call tail x_4987 (x_4986, x_425 (*()*))
  block L_5294 ()
    raise (x_424 (*con Fail_0 (x_423)*))
  block L_5290 (x_4990: word32)
    val x_4991: ((word8) array, word32, word32) tuple = (x_4983, x_4985, x_4990)
    return (x_4991)
fun x_4987 (env_2083: exn, unit_13: unit):
  {returns = Some (((word8) array, word32, word32) tuple), raises = Some (exn)} =
L_5295 ()
  block L_5295 ()
    raise (env_2083)
fun slice_1 (env_2084: unit, x_4992: ((word8) array, word32, t_0) tuple):
  {returns = Some (t_13), raises = Some (exn)} =
L_5296 ()
  block L_5296 ()
    val len_5: t_0 = #2 (x_4992)
    val start_0: word32 = #1 (x_4992)
    val seq_1: (word8) array = #0 (x_4992)
    case full_0 (*con fullEn ... e_18)*) of
      fullEnv_0 => L_5297
  block L_5297 (env_2085: unit)
    call L_5298 (full_3 (env_2085, seq_1)) handle _ => raise
  block L_5298 (x_4993: t_13)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5299
  block L_5299 (env_2086: unit)
    call L_5300 (sextdFromInt32ToInt64_1 (env_2086, start_0)) handle _ => L_5301
  block L_5300 (x_4994: word64)
    case len_5 of
      NONE_1 => L_5303 | SOME_0 => L_5302
  block L_5302 (x_4995: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5304
  block L_5304 (env_2087: unit)
    call L_5305 (sextdFromInt32ToInt64_1 (env_2087, x_4995)) handle _ => L_5301
  block L_5305 (x_4996: word64)
    val x_4997: t_28 = con SOME_21 (x_4996)
    goto L_5306 (x_4997)
  block L_5303 ()
    goto L_5306 (x_417 (*con NONE_0*))
  block L_5306 (x_4998: t_28)
    case x_4993 of
      T_3 => L_5307
  block L_5307 (x_4999: (word64, (word8) array, word64) tuple)
    val x_5002: word64 = #2 (x_4999)
    val x_5001: (word8) array = #1 (x_4999)
    val x_5000: word64 = #0 (x_4999)
    case x_4998 of
      NONE_0 => L_5309 | SOME_21 => L_5308
  block L_5308 (x_5003: word64)
    val x_5004: (word64, word64) tuple = (x_4994, x_5000)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5310
  block L_5310 (env_2088: unit)
    call L_5311 (>_5 (env_2088, x_5004)) handle _ => L_5301
  block L_5311 (x_5005: bool)
    case x_5005 of
      true => L_5313 | false => L_5312
  block L_5312 ()
    val x_5006: (word64, word64) tuple = (x_5000, x_4994)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5314
  block L_5314 (env_2089: unit)
    call L_5315 (-!_2 (env_2089, x_5006)) handle _ => L_5301
  block L_5315 (x_5007: word64)
    val x_5008: (word64, word64) tuple = (x_5003, x_5007)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5316
  block L_5316 (env_2090: unit)
    call L_5317 (>_5 (env_2090, x_5008)) handle _ => L_5301
  block L_5313 ()
    goto L_5317 (x_418 (*con true*))
  block L_5317 (x_5009: bool)
    case x_5009 of
      true => L_5319 | false => L_5318
  block L_5318 ()
    val x_5010: (word64, word64) tuple = (x_5002, x_4994)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5320
  block L_5320 (env_2091: unit)
    call L_5321 (+!_2 (env_2091, x_5010)) handle _ => L_5301
  block L_5321 (x_5011: word64)
    val x_5013: (word64, (word8) array, word64) tuple = (x_5003, x_5001, x_5011)
    val x_5012: t_13 = con T_3 (x_5013)
    return (x_5012)
  block L_5319 ()
    goto L_5301 (x_69 (*con Subscr ... x_68)*))
  block L_5309 ()
    val x_5014: (word64, word64) tuple = (x_4994, x_5000)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5322
  block L_5322 (env_2092: unit)
    call L_5323 (>_5 (env_2092, x_5014)) handle _ => L_5301
  block L_5323 (x_5015: bool)
    case x_5015 of
      true => L_5325 | false => L_5324
  block L_5324 ()
    val x_5016: (word64, word64) tuple = (x_5002, x_4994)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5326
  block L_5326 (env_2093: unit)
    call L_5327 (+!_2 (env_2093, x_5016)) handle _ => L_5301
  block L_5327 (x_5017: word64)
    val x_5018: (word64, word64) tuple = (x_5000, x_4994)
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5328
  block L_5328 (env_2094: unit)
    call L_5329 (-!_2 (env_2094, x_5018)) handle _ => L_5301
  block L_5329 (x_5019: word64)
    val x_5021: (word64, (word8) array, word64) tuple = (x_5019, x_5001, x_5017)
    val x_5020: t_13 = con T_3 (x_5021)
    return (x_5020)
  block L_5325 ()
    goto L_5301 (x_69 (*con Subscr ... x_68)*))
  block L_5301 (x_5022: exn)
    case x_5022 of
      Overflow_0 => L_5330 | _ => L_5331
  block L_5331 ()
    call tail x_5023 (x_5022, x_419 (*()*))
  block L_5330 (x_5024: (unit) ref)
    val x_5025: bool = prim MLton_equal[(unit) ref] (x_5024, x_62)
    case x_5025 of
      true => L_5333 | false => L_5332
  block L_5332 ()
    call tail x_5023 (x_5022, x_420 (*()*))
  block L_5333 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_5023 (env_2095: exn, unit_14: unit):
  {returns = Some (t_13), raises = Some (exn)} =
L_5334 ()
  block L_5334 ()
    raise (env_2095)
fun new_3 (env_2096: lambdas_484, x_5026: (word32, word8) tuple):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5335 ()
  block L_5335 ()
    val x_5027: word8 = #1 (x_5026)
    val n_18: word32 = #0 (x_5026)
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_5336
  block L_5336 (env_2097: unit)
    call L_5337 (fromIntForLength_1 (env_2097, n_18)) handle _ => raise
  block L_5337 (x_5028: word64)
    case env_2096 of
      arrayAllocEnv_0 => L_5338
  block L_5338 (env_2098: word64)
    call L_5339 (arrayAlloc_5 (env_2098, x_5028)) handle _ => raise
  block L_5339 (a_5: (word8) array)
    val tuple_105: (word64, (word8) array, word8) tuple = (x_5028, a_5, x_5027)
    call L_5340 (loop_37 (tuple_105, x_1455)) handle _ => raise
  block L_5340 (b_26: unit)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_5341
  block L_5341 (env_2099: unit)
    call tail x_4579 (env_2099, a_5)
fun loop_37 (env_2100: (word64, (word8) array, word8) tuple,
             x_5029: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5342 ()
  block L_5342 ()
    val x_5031: word64 = #0 (env_2100)
    val a_6: (word8) array = #1 (env_2100)
    val x_5032: word8 = #2 (env_2100)
    val b_27: unit = #1 (x_5029)
    val i_37: word64 = #0 (x_5029)
    val x_5030: (word64, word64) tuple = (i_37, x_5031)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5343
  block L_5343 (env_2101: unit)
    call L_5344 (>=_7 (env_2101, x_5030)) handle _ => raise
  block L_5344 (x_5033: bool)
    case x_5033 of
      true => L_5346 | false => L_5345
  block L_5345 ()
    val x_5034: ((word8) array, word64, word8) tuple = (a_6, i_37, x_5032)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5347
  block L_5347 (env_2102: unit)
    call L_5348 (x_2544 (env_2102, x_5034)) handle _ => raise
  block L_5348 (x_5035: unit)
    val x_5036: (word64, word64) tuple = (i_37, x_415 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5349
  block L_5349 (env_2103: unit)
    call L_5350 (+!_2 (env_2103, x_5036)) handle _ => raise
  block L_5350 (x_5037: word64)
    val x_5038: (word64, unit) tuple = (x_5037, x_414 (*()*))
    call tail loop_37 (env_2100, x_5038)
  block L_5346 ()
    return (b_27)
fun length_2 (env_2104: unit, x_5039: (word8) array):
  {returns = Some (word32), raises = Some (exn)} =
L_5351 ()
  block L_5351 ()
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_5352
  block L_5352 (env_2105: unit)
    call L_5353 (x_2444 (env_2105, x_5039)) handle _ => L_5354
  block L_5353 (x_5040: word64)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5355
  block L_5355 (env_2106: unit)
    call L_5356 (x_2418 (env_2106, x_5040)) handle _ => L_5354
  block L_5354 (x_5041: exn)
    case x_5041 of
      Overflow_0 => L_5357 | _ => L_5358
  block L_5358 ()
    call tail x_5042 (x_5041, x_408 (*()*))
  block L_5357 (x_5043: (unit) ref)
    val x_5044: bool = prim MLton_equal[(unit) ref] (x_5043, x_62)
    case x_5044 of
      true => L_5360 | false => L_5359
  block L_5359 ()
    call tail x_5042 (x_5041, x_412 (*()*))
  block L_5360 ()
    raise (x_411 (*con Fail_0 (x_410)*))
  block L_5356 (x_5045: word32)
    return (x_5045)
fun x_5042 (env_2107: exn, unit_15: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_5361 ()
  block L_5361 ()
    raise (env_2107)
fun concat_2 (env_2108: (lambdas_27, lambdas_484, lambdas_26) tuple,
              x_5046: list_7):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5362 ()
  block L_5362 ()
    val arrayAlloc_7: lambdas_27 = #0 (env_2108)
    val arrayAlloc_6: lambdas_484 = #1 (env_2108)
    val sequence_3: lambdas_26 = #2 (env_2108)
    case x_5046 of
      nil_3 => L_5364 | ::_1 => L_5363
  block L_5363 (x_5047: ((word8) vector, list_7) tuple)
    val x_5049: list_7 = #1 (x_5047)
    val x_5048: (word8) vector = #0 (x_5047)
    case x_5049 of
      nil_3 => L_5365 | _ => L_5366
  block L_5366 ()
    val x_5050: (list_7, word64) tuple = (x_5046, x_400 (*0x0:w64*))
    case loop_0 (*con loopEn ... e_31)*) of
      loopEnv_0 => L_5367
  block L_5367 (env_2109: unit)
    call L_5368 (loop_38 (env_2109, x_5050)) handle _ => raise
  block L_5368 (x_5051: word64)
    case arrayAlloc_6 of
      arrayAllocEnv_0 => L_5369
  block L_5369 (env_2110: word64)
    call L_5370 (arrayAlloc_5 (env_2110, x_5051)) handle _ => raise
  block L_5370 (x_5052: (word8) array)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_5371
  block L_5371 (env_2111: unit)
    call L_5372 (x_4579 (env_2111, x_5052)) handle _ => raise
  block L_5372 (x_5053: (word8) array)
    val x_5054: (word64, list_7) tuple = (x_407 (*0x0:w64*), x_5046)
    call tail loop_39 (x_5053, x_5054)
  block L_5365 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5373
  block L_5373 (env_2112: unit)
    call L_5374 (full_2 (env_2112, x_5048)) handle _ => raise
  block L_5374 (x_5055: t_19)
    case sequence_3 of
      sequenceEnv_0 => L_5375
  block L_5375 (env_2113: lambdas_27)
    call tail sequence_2 (env_2113, x_5055)
  block L_5364 ()
    case fromIntForLength_0 (*con fromIn ... e_29)*) of
      fromIntForLengthEnv_0 => L_5376
  block L_5376 (env_2114: unit)
    call L_5377 (fromIntForLength_1 (env_2114, x_393 (*0x0:w32*))) handle _ => raise
  block L_5377 (x_5056: word64)
    case arrayAlloc_7 of
      arrayAllocEnv_1 => L_5378
  block L_5378 (env_2115: word64)
    call L_5379 (arrayAlloc_2 (env_2115, x_5056)) handle _ => raise
  block L_5379 (a_7: (word8) array)
    val tuple_106: (word64, (word8) array) tuple = (x_5056, a_7)
    call L_5380 (loop_40 (tuple_106, x_1454)) handle _ => raise
  block L_5380 (b_28: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5381
  block L_5381 (env_2116: unit)
    call tail x_1790 (env_2116, a_7)
fun loop_39 (env_2117: (word8) array, x_5057: (word64, list_7) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5382 ()
  block L_5382 ()
    val xs_0: list_7 = #1 (x_5057)
    val di_0: word64 = #0 (x_5057)
    case xs_0 of
      nil_3 => L_5384 | ::_1 => L_5383
  block L_5383 (x_5058: ((word8) vector, list_7) tuple)
    val x_5060: list_7 = #1 (x_5058)
    val x_5059: (word8) vector = #0 (x_5058)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5385
  block L_5385 (env_2118: unit)
    call L_5386 (full_2 (env_2118, x_5059)) handle _ => raise
  block L_5386 (sl_2: t_19)
    case sl_2 of
      T_4 => L_5387
  block L_5387 (x_5061: (word64, (word8) vector, word64) tuple)
    val x_5065: word64 = #2 (x_5061)
    val x_5064: (word8) vector = #1 (x_5061)
    val x_5063: word64 = #0 (x_5061)
    val x_5062: (word64, word64) tuple = (x_5063, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5388
  block L_5388 (env_2119: unit)
    call L_5389 (<_7 (env_2119, x_5062)) handle _ => raise
  block L_5389 (x_5066: bool)
    case x_5066 of
      true => L_5391 | false => L_5390
  block L_5390 ()
    val x_5067: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (env_2117, di_0, x_5064, x_5065, x_5063)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_5392
  block L_5392 (env_2120: unit)
    call L_5393 (x_2456 (env_2120, x_5067)) handle _ => raise
  block L_5391 ()
    val x_5068: (word64, word64) tuple = (x_5063, x_403 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5394
  block L_5394 (env_2121: unit)
    call L_5395 (-!_2 (env_2121, x_5068)) handle _ => raise
  block L_5395 (len_6: word64)
    val tuple_107:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_6, di_0, x_5065, x_5064, env_2117)
    call L_5393 (loop_41 (tuple_107, x_406 (*0x0:w64*))) handle _ => raise
  block L_5393 (x_5069: unit)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_5396
  block L_5396 (env_2122: unit)
    call L_5397 (length_3 (env_2122, sl_2)) handle _ => raise
  block L_5397 (x_5070: word64)
    val x_5071: (word64, word64) tuple = (di_0, x_5070)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5398
  block L_5398 (env_2123: unit)
    call L_5399 (+!_2 (env_2123, x_5071)) handle _ => raise
  block L_5399 (x_5072: word64)
    val x_5073: (word64, list_7) tuple = (x_5072, x_5060)
    call tail loop_39 (env_2117, x_5073)
  block L_5384 ()
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5400
  block L_5400 (env_2124: unit)
    call tail x_1790 (env_2124, env_2117)
fun loop_41 (env_2125:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_5074: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_5401 ()
  block L_5401 ()
    val len_7: word64 = #0 (env_2125)
    val di_1: word64 = #1 (env_2125)
    val x_5078: word64 = #2 (env_2125)
    val x_5077: (word8) vector = #3 (env_2125)
    val x_5076: (word8) array = #4 (env_2125)
    val x_5075: (word64, word64) tuple = (x_5074, len_7)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_5402
  block L_5402 (env_2126: unit)
    call L_5403 (>_6 (env_2126, x_5075)) handle _ => raise
  block L_5403 (x_5079: bool)
    case x_5079 of
      true => L_5405 | false => L_5404
  block L_5404 ()
    val x_5080: (word64, word64) tuple = (di_1, x_5074)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5406
  block L_5406 (env_2127: unit)
    call L_5407 (+!_2 (env_2127, x_5080)) handle _ => raise
  block L_5407 (x_5081: word64)
    val x_5082: (word64, word64) tuple = (x_5078, x_5074)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5408
  block L_5408 (env_2128: unit)
    call L_5409 (+!_2 (env_2128, x_5082)) handle _ => raise
  block L_5409 (x_5083: word64)
    val x_5084: ((word8) vector, word64) tuple = (x_5077, x_5083)
    case x_187 (*con xEnv_32 (x_186)*) of
      xEnv_32 => L_5410
  block L_5410 (env_2129: unit)
    call L_5411 (x_2541 (env_2129, x_5084)) handle _ => raise
  block L_5411 (x_5085: word8)
    val x_5086: ((word8) array, word64, word8) tuple = (x_5076, x_5081, x_5085)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5412
  block L_5412 (env_2130: unit)
    call L_5413 (x_2544 (env_2130, x_5086)) handle _ => raise
  block L_5413 (x_5087: unit)
    val x_5088: (word64, word64) tuple = (x_5074, x_405 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5414
  block L_5414 (env_2131: unit)
    call L_5415 (+!_2 (env_2131, x_5088)) handle _ => raise
  block L_5415 (x_5089: word64)
    call tail loop_41 (env_2125, x_5089)
  block L_5405 ()
    return (x_404 (*()*))
fun loop_38 (env_2132: unit, x_5090: (list_7, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5416 ()
  block L_5416 ()
    val b_29: word64 = #1 (x_5090)
    val l_4: list_7 = #0 (x_5090)
    case l_4 of
      nil_3 => L_5418 | ::_1 => L_5417
  block L_5417 (x_5091: ((word8) vector, list_7) tuple)
    val x_5093: list_7 = #1 (x_5091)
    val x_5092: (word8) vector = #0 (x_5091)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_5419
  block L_5419 (env_2133: unit)
    call L_5420 (full_2 (env_2133, x_5092)) handle _ => L_5421
  block L_5420 (x_5094: t_19)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_5422
  block L_5422 (env_2134: unit)
    call L_5423 (length_3 (env_2134, x_5094)) handle _ => L_5421
  block L_5423 (x_5095: word64)
    val x_5096: (word64, word64) tuple = (b_29, x_5095)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_5424
  block L_5424 (env_2135: unit)
    call L_5425 (x_3165 (env_2135, x_5096)) handle _ => L_5421
  block L_5421 (x_5097: exn)
    case x_5097 of
      Overflow_0 => L_5426 | _ => L_5427
  block L_5427 ()
    call L_5425 (x_5098 (x_5097, x_401 (*()*))) handle _ => raise
  block L_5426 (x_5099: (unit) ref)
    val x_5100: bool = prim MLton_equal[(unit) ref] (x_5099, x_62)
    case x_5100 of
      true => L_5429 | false => L_5428
  block L_5428 ()
    call L_5425 (x_5098 (x_5097, x_402 (*()*))) handle _ => raise
  block L_5429 ()
    raise (x_66 (*con Size_0 (x_65)*))
  block L_5425 (x_5101: word64)
    val x_5102: (list_7, word64) tuple = (x_5093, x_5101)
    case loop_0 (*con loopEn ... e_31)*) of
      loopEnv_0 => L_5430
  block L_5430 (env_2136: unit)
    call tail loop_38 (env_2136, x_5102)
  block L_5418 ()
    return (b_29)
fun x_5098 (env_2137: exn, unit_16: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5431 ()
  block L_5431 ()
    raise (env_2137)
fun loop_40 (env_2138: (word64, (word8) array) tuple,
             x_5103: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5432 ()
  block L_5432 ()
    val x_5105: word64 = #0 (env_2138)
    val b_30: unit = #1 (x_5103)
    val i_38: word64 = #0 (x_5103)
    val x_5104: (word64, word64) tuple = (i_38, x_5105)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_5433
  block L_5433 (env_2139: unit)
    call L_5434 (>=_7 (env_2139, x_5104)) handle _ => raise
  block L_5434 (x_5106: bool)
    case x_5106 of
      true => L_5436 | false => L_5435
  block L_5435 ()
    raise (x_397 (*con Fail_0 (x_396)*))
  block L_5436 ()
    return (b_30)
fun base_3 (env_2140: unit, x_5107: t_19):
  {returns = Some (((word8) vector, word32, word32) tuple), raises = Some (exn)} =
L_5437 ()
  block L_5437 ()
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_5438
  block L_5438 (env_2141: unit)
    call L_5439 (base_4 (env_2141, x_5107)) handle _ => raise
  block L_5439 (x_5108: ((word8) vector, word64, word64) tuple)
    val len_8: word64 = #2 (x_5108)
    val start_1: word64 = #1 (x_5108)
    val seq_2: (word8) vector = #0 (x_5108)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5440
  block L_5440 (env_2142: unit)
    call L_5441 (x_2418 (env_2142, start_1)) handle _ => L_5442
  block L_5441 (x_5109: word32)
    case x_265 (*con xEnv_35 (x_264)*) of
      xEnv_35 => L_5443
  block L_5443 (env_2143: unit)
    call L_5444 (x_2418 (env_2143, len_8)) handle _ => L_5442
  block L_5442 (x_5110: exn)
    case x_5110 of
      Overflow_0 => L_5445 | _ => L_5446
  block L_5446 ()
    call tail x_5111 (x_5110, x_388 (*()*))
  block L_5445 (x_5112: (unit) ref)
    val x_5113: bool = prim MLton_equal[(unit) ref] (x_5112, x_62)
    case x_5113 of
      true => L_5448 | false => L_5447
  block L_5447 ()
    call tail x_5111 (x_5110, x_392 (*()*))
  block L_5448 ()
    raise (x_391 (*con Fail_0 (x_390)*))
  block L_5444 (x_5114: word32)
    val x_5115: ((word8) vector, word32, word32) tuple = (seq_2, x_5109, x_5114)
    return (x_5115)
fun x_5111 (env_2144: exn, unit_17: unit):
  {returns = Some (((word8) vector, word32, word32) tuple), raises = Some (exn)} =
L_5449 ()
  block L_5449 ()
    raise (env_2144)
fun fromIntForLength_1 (env_2145: unit, x_5116: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_5450 ()
  block L_5450 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5451
  block L_5451 (env_2146: unit)
    call L_5452 (sextdFromInt32ToInt64_1 (env_2146, x_5116)) handle _ => L_5453
  block L_5453 (x_5117: exn)
    case x_5117 of
      Overflow_0 => L_5454 | _ => L_5455
  block L_5455 ()
    call tail x_5118 (x_5117, x_386 (*()*))
  block L_5454 (x_5119: (unit) ref)
    val x_5120: bool = prim MLton_equal[(unit) ref] (x_5119, x_62)
    case x_5120 of
      true => L_5457 | false => L_5456
  block L_5456 ()
    call tail x_5118 (x_5117, x_387 (*()*))
  block L_5457 ()
    raise (x_66 (*con Size_0 (x_65)*))
  block L_5452 (x_5121: word64)
    return (x_5121)
fun x_5118 (env_2147: exn, unit_18: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_5458 ()
  block L_5458 ()
    raise (env_2147)
fun exnMessage_2 (env_2148: (list_0) ref, x_5122: exn):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5459 ()
  block L_5459 ()
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_5460
  block L_5460 (env_2149: unit)
    call L_5461 (x_1792 (env_2149, env_2148)) handle _ => raise
  block L_5461 (x_5123: list_0)
    call tail find_0 (x_5122, x_5123)
fun find_0 (env_2150: exn, x_5124: list_0):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5462 ()
  block L_5462 ()
    case x_5124 of
      nil_1 => L_5464 | ::_3 => L_5463
  block L_5463 (x_5125: (lambdas_0, list_0) tuple)
    val x_5127: list_0 = #1 (x_5125)
    val x_5126: lambdas_0 = #0 (x_5125)
    case x_5126 of
      xEnv_248 => L_5467 | xEnv_247 => L_5466 | xEnv_246 => L_5465
  block L_5465 (env_2151: (lambdas_31, lambdas_32) tuple)
    call L_5468 (x_3491 (env_2151, env_2150)) handle _ => raise
  block L_5466 (env_2152: lambdas_31)
    call L_5468 (x_4651 (env_2152, env_2150)) handle _ => raise
  block L_5467 (env_2153: (lambdas_31, list_3) tuple)
    call L_5468 (x_4600 (env_2153, env_2150)) handle _ => raise
  block L_5468 (x_5128: t_2)
    case x_5128 of
      NONE_3 => L_5470 | SOME_1 => L_5469
  block L_5469 (x_5129: (word8) vector)
    return (x_5129)
  block L_5470 ()
    call tail find_0 (env_2150, x_5127)
  block L_5464 ()
    case name_0 (*con nameEnv_0 (x_53)*) of
      nameEnv_0 => L_5471
  block L_5471 (env_2154: unit)
    call tail name_1 (env_2154, env_2150)
fun mkBigCvt_0 (env_2155:
                  (word64,
                   word32,
                   word32,
                   word32,
                   lambdas_35,
                   word32,
                   word32,
                   word32) tuple,
                x_5130: (word32, lambdas_285) tuple):
  {returns = Some (lambdas_284), raises = Some (exn)} =
L_5472 ()
  block L_5472 ()
    val bytesPerSequenceMetaData_1: word64 = #0 (env_2155)
    val minInt'_25: word32 = #1 (env_2155)
    val one_62: word32 = #2 (env_2155)
    val zero_79: word32 = #3 (env_2155)
    val quot_9: lambdas_35 = #4 (env_2155)
    val sizeInBitsWord_28: word32 = #5 (env_2155)
    val zero_78: word32 = #6 (env_2155)
    val one_61: word32 = #7 (env_2155)
    val x_5132:
      (word64,
       word32,
       word32,
       word32,
       lambdas_35,
       word32,
       word32,
       word32,
       (word32, lambdas_285) tuple) tuple =
      (bytesPerSequenceMetaData_1,
       minInt'_25,
       one_62,
       zero_79,
       quot_9,
       sizeInBitsWord_28,
       zero_78,
       one_61,
       x_5130)
    val x_5131: lambdas_284 = con xEnv_226 (x_5132)
    return (x_5131)
fun x_5133 (env_2156:
              (word64,
               word32,
               word32,
               word32,
               lambdas_35,
               word32,
               word32,
               word32,
               (word32, lambdas_285) tuple) tuple,
            x_5134: intInf):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5473 ()
  block L_5473 ()
    val bytesPerSequenceMetaData_2: word64 = #0 (env_2156)
    val minInt'_26: word32 = #1 (env_2156)
    val one_64: word32 = #2 (env_2156)
    val zero_81: word32 = #3 (env_2156)
    val quot_10: lambdas_35 = #4 (env_2156)
    val sizeInBitsWord_29: word32 = #5 (env_2156)
    val zero_80: word32 = #6 (env_2156)
    val one_63: word32 = #7 (env_2156)
    val x_5136: (word32, lambdas_285) tuple = #8 (env_2156)
    val x_5137: lambdas_285 = #1 (x_5136)
    val x_5135: word32 = #0 (x_5136)
    case isSmall_0 (*con isSmal ... e_24)*) of
      isSmallEnv_0 => L_5474
  block L_5474 (env_2157: unit)
    call L_5475 (isSmall_1 (env_2157, x_5134)) handle _ => raise
  block L_5475 (x_5138: bool)
    case x_5138 of
      true => L_5477 | false => L_5476
  block L_5476 ()
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_5478
  block L_5478 (env_2158: unit)
    call L_5479 (idFromInt32ToWord32_1 (env_2158, x_5135)) handle _ => raise
  block L_5479 (x_5139: word32)
    val x_5140: (word32, word32) tuple = (x_5139, zero_80)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5480
  block L_5480 (env_2159: unit)
    call L_5481 (x_2049 (env_2159, x_5140)) handle _ => raise
  block L_5481 (x_5141: bool)
    case x_5141 of
      true => L_5483 | false => L_5482
  block L_5482 ()
    val x_5142: (word32, word32) tuple = (sizeInBitsWord_29, x_373 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5484
  block L_5484 (env_2160: unit)
    call L_5485 (>>?_5 (env_2160, x_5142)) handle _ => raise
  block L_5485 (x_5143: word32)
    val x_5144: (word32, word32, word32) tuple =
      (x_5139, x_5143, x_374 (*0x0:w32*))
    call L_5486 (loop_42 (one_63, x_5144)) handle _ => raise
  block L_5486 (x_5145: word32)
    val x_5146: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_5145)
    case quot_10 of
      quotEnv_1 => L_5487
  block L_5487 (env_2161: (word32, word32, word32) tuple)
    call L_5488 (quot_2 (env_2161, x_5146)) handle _ => raise
  block L_5488 (x_5147: word32)
    val x_5148: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), zero_81)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_5489
  block L_5489 (env_2162: unit)
    call L_5490 (>=_6 (env_2162, x_5148)) handle _ => raise
  block L_5490 (x_5149: bool)
    case x_5149 of
      true => L_5492 | false => L_5491
  block L_5491 ()
    val x_5150: (word32, word32) tuple = (x_5145, zero_81)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5493
  block L_5493 (env_2163: unit)
    call L_5494 (<_5 (env_2163, x_5150)) handle _ => raise
  block L_5494 (x_5151: bool)
    case x_5151 of
      true => L_5496 | false => L_5495
  block L_5495 ()
    val x_5152: (word32, word32) tuple = (x_5145, zero_81)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_5497
  block L_5497 (env_2164: unit)
    call L_5498 (>_9 (env_2164, x_5152)) handle _ => raise
  block L_5498 (x_5153: bool)
    case x_5153 of
      true => L_5500 | false => L_5499
  block L_5499 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_5500 ()
    val x_5154: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), one_64)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5501
  block L_5501 (env_2165: unit)
    call L_5502 (+!_3 (env_2165, x_5154)) handle _ => raise
  block L_5502 (x_5155: word32)
    val x_5156: (word32, word32) tuple = (x_5155, x_5145)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5503
  block L_5503 (env_2166: unit)
    call L_5504 (remUnsafe_1 (env_2166, x_5156)) handle _ => raise
  block L_5504 (x_5157: word32)
    val x_5158: (word32, word32) tuple = (x_5145, one_64)
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5505
  block L_5505 (env_2167: unit)
    call L_5506 (-!_3 (env_2167, x_5158)) handle _ => raise
  block L_5506 (x_5159: word32)
    val x_5160: (word32, word32) tuple = (x_5157, x_5159)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5507
  block L_5507 (env_2168: unit)
    call L_5508 (+!_3 (env_2168, x_5160)) handle _ => raise
  block L_5496 ()
    val x_5161: (word32, word32) tuple =
      (sizeInBits_32 (*0x40:w32*), minInt'_26)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5509
  block L_5509 (env_2169: unit)
    call L_5510 (x_2049 (env_2169, x_5161)) handle _ => raise
  block L_5510 (x_5162: bool)
    case x_5162 of
      true => L_5512 | false => L_5511
  block L_5511 ()
    goto L_5513 (x_375 (*con false*))
  block L_5512 ()
    case x_156 (*con xEnv_20 (x_155)*) of
      xEnv_20 => L_5514
  block L_5514 (env_2170: unit)
    call L_5515 (x_2766 (env_2170, one_64)) handle _ => raise
  block L_5515 (x_5163: word32)
    val x_5164: (word32, word32) tuple = (x_5145, x_5163)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5516
  block L_5516 (env_2171: unit)
    call L_5513 (x_2049 (env_2171, x_5164)) handle _ => raise
  block L_5513 (x_5165: bool)
    case x_5165 of
      true => L_5518 | false => L_5517
  block L_5517 ()
    val x_5166: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_5145)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5519
  block L_5519 (env_2172: unit)
    call L_5508 (remUnsafe_1 (env_2172, x_5166)) handle _ => raise
  block L_5518 ()
    goto L_5508 (zero_81)
  block L_5492 ()
    val x_5167: (word32, word32) tuple = (x_5145, zero_81)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_5520
  block L_5520 (env_2173: unit)
    call L_5521 (>_9 (env_2173, x_5167)) handle _ => raise
  block L_5521 (x_5168: bool)
    case x_5168 of
      true => L_5523 | false => L_5522
  block L_5522 ()
    val x_5169: (word32, word32) tuple = (x_5145, zero_81)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5524
  block L_5524 (env_2174: unit)
    call L_5525 (<_5 (env_2174, x_5169)) handle _ => raise
  block L_5525 (x_5170: bool)
    case x_5170 of
      true => L_5527 | false => L_5526
  block L_5526 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_5527 ()
    val x_5171: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), zero_81)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5528
  block L_5528 (env_2175: unit)
    call L_5529 (x_2049 (env_2175, x_5171)) handle _ => raise
  block L_5529 (x_5172: bool)
    case x_5172 of
      true => L_5531 | false => L_5530
  block L_5530 ()
    val x_5173: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), one_64)
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5532
  block L_5532 (env_2176: unit)
    call L_5533 (-!_3 (env_2176, x_5173)) handle _ => raise
  block L_5533 (x_5174: word32)
    val x_5175: (word32, word32) tuple = (x_5174, x_5145)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5534
  block L_5534 (env_2177: unit)
    call L_5535 (remUnsafe_1 (env_2177, x_5175)) handle _ => raise
  block L_5535 (x_5176: word32)
    val x_5177: (word32, word32) tuple = (x_5145, one_64)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_5536
  block L_5536 (env_2178: unit)
    call L_5537 (x_1623 (env_2178, x_5177)) handle _ => raise
  block L_5537 (x_5178: word32)
    val x_5179: (word32, word32) tuple = (x_5176, x_5178)
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5538
  block L_5538 (env_2179: unit)
    call L_5508 (+!_3 (env_2179, x_5179)) handle _ => raise
  block L_5531 ()
    goto L_5508 (zero_81)
  block L_5523 ()
    val x_5180: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_5145)
    case remUnsafe_0 (*con remUns ... _160)*) of
      remUnsafeEnv_0 => L_5539
  block L_5539 (env_2180: unit)
    call L_5508 (remUnsafe_1 (env_2180, x_5180)) handle _ => raise
  block L_5508 (x_5181: word32)
    val x_5182: (word32, word32) tuple = (x_5181, x_376 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5540
  block L_5540 (env_2181: unit)
    call L_5541 (x_2049 (env_2181, x_5182)) handle _ => raise
  block L_5541 (x_5183: bool)
    case x_5183 of
      true => L_5543 | false => L_5542
  block L_5542 ()
    goto L_5544 (x_378 (*0x1:w32*))
  block L_5543 ()
    goto L_5544 (x_377 (*0x0:w32*))
  block L_5544 (x_5184: word32)
    val x_5185: (word32, word32) tuple = (x_5147, x_5184)
    case x_153 (*con xEnv_19 (x_152)*) of
      xEnv_19 => L_5545
  block L_5545 (env_2182: unit)
    call L_5546 (x_1623 (env_2182, x_5185)) handle _ => raise
  block L_5546 (dpl_0: word32)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5547
  block L_5547 (env_2183: unit)
    call L_5548 (+_5 (env_2183, x_1452)) handle _ => raise
  block L_5548 (x_5186: word64)
    val x_5187: (word64, word64) tuple = (bytesPerSequenceMetaData_2, x_5186)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5549
  block L_5549 (env_2184: unit)
    call L_5550 (+_5 (env_2184, x_5187)) handle _ => raise
  block L_5550 (x_5188: word64)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _117)*) of
      zextdFromInt32ToWord64Env_0 => L_5551
  block L_5551 (env_2185: unit)
    call L_5552 (zextdFromInt32ToWord64_1 (env_2185, dpl_0)) handle _ => raise
  block L_5552 (x_5189: word64)
    case numLimbs_0 (*con numLim ... e_26)*) of
      numLimbsEnv_0 => L_5553
  block L_5553 (env_2186: unit)
    call L_5554 (numLimbs_1 (env_2186, x_5134)) handle _ => raise
  block L_5554 (x_5190: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_5555
  block L_5555 (env_2187: unit)
    call L_5556 (zextdFromInt64ToWord64_1 (env_2187, x_5190)) handle _ => raise
  block L_5556 (x_5191: word64)
    val x_5192: (word64, word64) tuple = (x_5189, x_5191)
    case *_0 (*con *Env_0 (x_147)*) of
      *Env_0 => L_5557
  block L_5557 (env_2188: unit)
    call L_5558 (*_1 (env_2188, x_5192)) handle _ => raise
  block L_5558 (x_5193: word64)
    val x_5194: (word64, word64) tuple = (x_5188, x_5193)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5559
  block L_5559 (env_2189: unit)
    call L_5560 (+_5 (env_2189, x_5194)) handle _ => raise
  block L_5560 (bytes_1: word64)
    val x_5195: (word8) vector = prim IntInf_toString (x_5134, x_5135, bytes_1)
    return (x_5195)
  block L_5483 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_5477 ()
    case dropTagCoerce_0 (*con dropTa ... e_27)*) of
      dropTagCoerceEnv_0 => L_5561
  block L_5561 (env_2190: unit)
    call L_5562 (dropTagCoerce_1 (env_2190, x_5134)) handle _ => raise
  block L_5562 (x_5196: word64)
    case zextdFromWord64ToInt64_0 (*con zextdF ... _122)*) of
      zextdFromWord64ToInt64Env_0 => L_5563
  block L_5563 (env_2191: unit)
    call L_5564 (zextdFromWord64ToInt64_1 (env_2191, x_5196)) handle _ => raise
  block L_5564 (x_5197: word64)
    case x_5137 of
      xEnv_227 => L_5565
  block L_5565 (env_2192:
                  (word32,
                   lambdas_248,
                   word64,
                   word64,
                   word64,
                   radix_0,
                   (word8) array,
                   lambdas_251,
                   (bool) ref) tuple)
    call tail x_4747 (env_2192, x_5197)
fun loop_42 (env_2193: word32, x_5198: (word32, word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5566 ()
  block L_5566 ()
    val acc_0: word32 = #2 (x_5198)
    val s_0: word32 = #1 (x_5198)
    val n_19: word32 = #0 (x_5198)
    val x_5199: (word32, word32) tuple = (n_19, env_2193)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5567
  block L_5567 (env_2194: unit)
    call L_5568 (x_2049 (env_2194, x_5199)) handle _ => raise
  block L_5568 (x_5200: bool)
    case x_5200 of
      true => L_5570 | false => L_5569
  block L_5569 ()
    val x_5201: (word32, word32) tuple = (env_2193, s_0)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_5571
  block L_5571 (env_2195: unit)
    call L_5572 (<<?_5 (env_2195, x_5201)) handle _ => raise
  block L_5572 (x_5202: word32)
    val x_5203: (word32, word32) tuple = (n_19, x_5202)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_5573
  block L_5573 (env_2196: unit)
    call L_5574 (>=_10 (env_2196, x_5203)) handle _ => raise
  block L_5574 (x_5204: bool)
    case x_5204 of
      true => L_5576 | false => L_5575
  block L_5575 ()
    val x_5205: (word32, word32) tuple = (n_19, acc_0)
    goto L_5577 (x_5205)
  block L_5576 ()
    val x_5206: (word32, word32) tuple = (n_19, s_0)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5578
  block L_5578 (env_2197: unit)
    call L_5579 (>>?_5 (env_2197, x_5206)) handle _ => raise
  block L_5579 (x_5207: word32)
    val x_5209: word32 = prim Word32_add (acc_0, s_0)
    val x_5208: (word32, word32) tuple = (x_5207, x_5209)
    goto L_5577 (x_5208)
  block L_5577 (x_5210: (word32, word32) tuple)
    val acc_1: word32 = #1 (x_5210)
    val n_20: word32 = #0 (x_5210)
    val x_5211: (word32, word32) tuple = (s_0, x_372 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5580
  block L_5580 (env_2198: unit)
    call L_5581 (>>?_5 (env_2198, x_5211)) handle _ => raise
  block L_5581 (x_5212: word32)
    val x_5213: (word32, word32, word32) tuple = (n_20, x_5212, acc_1)
    call tail loop_42 (env_2193, x_5213)
  block L_5570 ()
    return (acc_0)
fun reserve_1 (env_2199: (word64, word64) tuple, x_5214: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5582 ()
  block L_5582 ()
    val bytesPerMPLimb_1: word64 = #0 (env_2199)
    val bytesPerSequenceMetaData_3: word64 = #1 (env_2199)
    val extra_0: word64 = #1 (x_5214)
    val num_0: word64 = #0 (x_5214)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_5583
  block L_5583 (env_2200: unit)
    call L_5584 (zextdFromInt64ToWord64_1 (env_2200, num_0)) handle _ => raise
  block L_5584 (x_5215: word64)
    val x_5216: (word64, word64) tuple = (bytesPerMPLimb_1, x_5215)
    case *_0 (*con *Env_0 (x_147)*) of
      *Env_0 => L_5585
  block L_5585 (env_2201: unit)
    call L_5586 (*_1 (env_2201, x_5216)) handle _ => raise
  block L_5586 (x_5217: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _118)*) of
      zextdFromInt64ToWord64Env_0 => L_5587
  block L_5587 (env_2202: unit)
    call L_5588 (zextdFromInt64ToWord64_1 (env_2202, extra_0)) handle _ => raise
  block L_5588 (x_5218: word64)
    val x_5219: (word64, word64) tuple = (bytesPerMPLimb_1, x_5218)
    case *_0 (*con *Env_0 (x_147)*) of
      *Env_0 => L_5589
  block L_5589 (env_2203: unit)
    call L_5590 (*_1 (env_2203, x_5219)) handle _ => raise
  block L_5590 (x_5220: word64)
    val x_5221: (word64, word64) tuple =
      (bytesPerSequenceMetaData_3, x_369 (*0x7:w64*))
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5591
  block L_5591 (env_2204: unit)
    call L_5592 (+_5 (env_2204, x_5221)) handle _ => raise
  block L_5592 (x_5222: word64)
    val x_5223: (word64, word64) tuple = (bytesPerMPLimb_1, x_5222)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5593
  block L_5593 (env_2205: unit)
    call L_5594 (+_5 (env_2205, x_5223)) handle _ => raise
  block L_5594 (x_5224: word64)
    val x_5225: (word64, word64) tuple = (x_5220, x_5224)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5595
  block L_5595 (env_2206: unit)
    call L_5596 (+_5 (env_2206, x_5225)) handle _ => raise
  block L_5596 (x_5226: word64)
    val x_5227: (word64, word64) tuple = (x_5217, x_5226)
    case +_0 (*con +Env_0 (x_144)*) of
      +Env_0 => L_5597
  block L_5597 (env_2207: unit)
    call tail +_5 (env_2207, x_5227)
fun sextdFromInt64_1 (env_2208: (word32, word64) tuple, x_5228: word64):
  {returns = Some (intInf), raises = Some (exn)} =
L_5598 ()
  block L_5598 ()
    val sizeInBitsWord_30: word32 = #0 (env_2208)
    val zero_82: word64 = #1 (env_2208)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5599
  block L_5599 (env_2209: unit)
    call L_5600 (idFromInt64ToWord64_1 (env_2209, x_5228)) handle _ => raise
  block L_5600 (x_5229: word64)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_5601
  block L_5601 (env_2210: unit)
    call L_5602 (>_9 (env_2210, x_1448)) handle _ => raise
  block L_5602 (x_5230: bool)
    case x_5230 of
      true => L_5604 | false => L_5603
  block L_5603 ()
    val x_5231: (word32, word32) tuple = (sizeInBitsWord_30, x_350 (*0x2:w32*))
    case -_0 (*con -Env_0 (x_141)*) of
      -Env_0 => L_5605
  block L_5605 (env_2211: unit)
    call L_5606 (-_3 (env_2211, x_5231)) handle _ => raise
  block L_5606 (shift_0: word32)
    val x_5232: (word64, word32) tuple = (x_5229, shift_0)
    case ~>>?_0 (*con ~>>?En ... _149)*) of
      ~>>?Env_0 => L_5607
  block L_5607 (env_2212: unit)
    call L_5608 (~>>?_1 (env_2212, x_5232)) handle _ => raise
  block L_5608 (upperBits_0: word64)
    case notb_3 (*con notbEn ... _148)*) of
      notbEnv_3 => L_5609
  block L_5609 (env_2213: unit)
    call L_5610 (notb_7 (env_2213, zero_82)) handle _ => raise
  block L_5610 (oneBits_0: word64)
    val x_5233: (word64, word64) tuple = (upperBits_0, zero_82)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5611
  block L_5611 (env_2214: unit)
    call L_5612 (x_2295 (env_2214, x_5233)) handle _ => raise
  block L_5612 (x_5234: bool)
    case x_5234 of
      true => L_5614 | false => L_5613
  block L_5613 ()
    val x_5235: (word64, word64) tuple = (upperBits_0, oneBits_0)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5615
  block L_5615 (env_2215: unit)
    call L_5616 (x_2295 (env_2215, x_5235)) handle _ => raise
  block L_5614 ()
    goto L_5616 (x_351 (*con true*))
  block L_5604 ()
    goto L_5616 (x_349 (*con true*))
  block L_5616 (x_5236: bool)
    case x_5236 of
      true => L_5618 | false => L_5617
  block L_5617 ()
    val tuple_108: (word64, word32) tuple = (zero_82, sizeInBitsWord_30)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_5619
  block L_5619 (env_2216: unit)
    call L_5620 (idFromWord64ToInt64_1 (env_2216, x_5229)) handle _ => raise
  block L_5620 (x_5237: word64)
    val x_5238: (word64, word64) tuple = (x_5237, x_353 (*0x0:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5621
  block L_5621 (env_2217: unit)
    call L_5622 (<_7 (env_2217, x_5238)) handle _ => raise
  block L_5622 (x_5239: bool)
    case x_5239 of
      true => L_5624 | false => L_5623
  block L_5623 ()
    val x_5240: (word64, word64, list_12) tuple =
      (x_5229, x_360 (*0x1:w64*), x_365 (*con ::_0 (x_364)*))
    call L_5625 (loop_43 (tuple_108, x_5240)) handle _ => raise
  block L_5624 ()
    val x_5242: word64 = prim Word64_neg (x_5229)
    val x_5241: (word64, word64, list_12) tuple =
      (x_5242, x_354 (*0x1:w64*), x_359 (*con ::_0 (x_358)*))
    call L_5625 (loop_43 (tuple_108, x_5241)) handle _ => raise
  block L_5625 (x_5243: (word64, list_12) tuple)
    val acc_2: list_12 = #1 (x_5243)
    val n_21: word64 = #0 (x_5243)
    val x_5244: (word64) array = prim Array_alloc[word64] (n_21)
    call L_5626 (loop_44 (x_5244, acc_2)) handle _ => raise
  block L_5626 (x_5245: unit)
    val x_5247: (word64) vector = prim Array_toVector[word64] (x_5244)
    val x_5246: intInf = prim WordVector_toIntInf (x_5247)
    return (x_5246)
  block L_5618 ()
    case addTag_0 (*con addTag ... e_28)*) of
      addTagEnv_0 => L_5627
  block L_5627 (env_2218: unit)
    call L_5628 (addTag_1 (env_2218, x_5229)) handle _ => raise
  block L_5628 (x_5248: word64)
    case fromWord_1 (*con fromWo ... _200)*) of
      fromWordEnv_1 => L_5629
  block L_5629 (env_2219: unit)
    call tail fromWord_3 (env_2219, x_5248)
fun loop_44 (env_2220: (word64) array, x_5249: list_12):
  {returns = Some (unit), raises = Some (exn)} =
L_5630 ()
  block L_5630 ()
    case x_5249 of
      nil_0 => L_5632 | ::_0 => L_5631
  block L_5631 (x_5250: ((word64, word64) tuple, list_12) tuple)
    val x_5255: list_12 = #1 (x_5250)
    val x_5253: (word64, word64) tuple = #0 (x_5250)
    val x_5254: word64 = #1 (x_5253)
    val x_5252: word64 = #0 (x_5253)
    val x_5251: (word64, word64) tuple = (x_367 (*0x0:w64*), x_5252)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5633
  block L_5633 (env_2221: unit)
    call L_5634 (+!_2 (env_2221, x_5251)) handle _ => raise
  block L_5634 (x_5256: word64)
    val _: unit = prim Array_update[word64] (env_2220, x_5256, x_5254)
    call tail loop_44 (env_2220, x_5255)
  block L_5632 ()
    return (x_366 (*()*))
fun loop_43 (env_2222: (word64, word32) tuple,
             x_5257: (word64, word64, list_12) tuple):
  {returns = Some ((word64, list_12) tuple), raises = Some (exn)} =
L_5635 ()
  block L_5635 ()
    val zero_83: word64 = #0 (env_2222)
    val sizeInBitsWord_31: word32 = #1 (env_2222)
    val acc_3: list_12 = #2 (x_5257)
    val i_39: word64 = #1 (x_5257)
    val w_2: word64 = #0 (x_5257)
    val x_5258: (word64, word64) tuple = (w_2, zero_83)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5636
  block L_5636 (env_2223: unit)
    call L_5637 (x_2295 (env_2223, x_5258)) handle _ => raise
  block L_5637 (x_5259: bool)
    case x_5259 of
      true => L_5639 | false => L_5638
  block L_5638 ()
    val x_5260: (word64, word32) tuple = (w_2, sizeInBitsWord_31)
    case >>?_3 (*con >>?Env_3 (x_150)*) of
      >>?Env_3 => L_5640
  block L_5640 (env_2224: unit)
    call L_5641 (>>?_4 (env_2224, x_5260)) handle _ => raise
  block L_5641 (w_3: word64)
    val x_5261: (word64, word64) tuple = (i_39, x_352 (*0x1:w64*))
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_5642
  block L_5642 (env_2225: unit)
    call L_5643 (x_3165 (env_2225, x_5261)) handle _ => raise
  block L_5643 (x_5262: word64)
    val x_5266: (word64, word64) tuple = (i_39, w_2)
    val x_5265: ((word64, word64) tuple, list_12) tuple = (x_5266, acc_3)
    val x_5264: list_12 = con ::_0 (x_5265)
    val x_5263: (word64, word64, list_12) tuple = (w_3, x_5262, x_5264)
    call tail loop_43 (env_2222, x_5263)
  block L_5639 ()
    val x_5267: (word64, list_12) tuple = (i_39, acc_3)
    return (x_5267)
fun addTag_1 (env_2226: unit, x_5268: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_5644 ()
  block L_5644 ()
    val x_5269: (word64, word32) tuple = (x_5268, x_347 (*0x1:w32*))
    case <<?_3 (*con <<?Env_3 (x_146)*) of
      <<?Env_3 => L_5645
  block L_5645 (env_2227: unit)
    call L_5646 (<<?_4 (env_2227, x_5269)) handle _ => raise
  block L_5646 (x_5270: word64)
    val x_5271: word64 = prim Word64_orb (x_5270, x_348 (*0x1:w64*))
    return (x_5271)
fun dropTagCoerce_1 (env_2228: unit, x_5272: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_5647 ()
  block L_5647 ()
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5648
  block L_5648 (env_2229: unit)
    call L_5649 (toWord_1 (env_2229, x_5272)) handle _ => raise
  block L_5649 (x_5273: word64)
    val x_5274: (word64, word32) tuple = (x_5273, x_346 (*0x1:w32*))
    case ~>>?_0 (*con ~>>?En ... _149)*) of
      ~>>?Env_0 => L_5650
  block L_5650 (env_2230: unit)
    call tail ~>>?_1 (env_2230, x_5274)
fun numLimbs_1 (env_2231: unit, x_5275: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_5651 ()
  block L_5651 ()
    case isSmall_0 (*con isSmal ... e_24)*) of
      isSmallEnv_0 => L_5652
  block L_5652 (env_2232: unit)
    call L_5653 (isSmall_1 (env_2232, x_5275)) handle _ => raise
  block L_5653 (x_5276: bool)
    case x_5276 of
      true => L_5655 | false => L_5654
  block L_5654 ()
    val x_5279: (word64) vector = prim IntInf_toVector (x_5275)
    val x_5278: word64 = prim Vector_length[word64] (x_5279)
    val x_5277: (word64, word64) tuple = (x_5278, x_345 (*0x1:w64*))
    case x_170 (*con xEnv_24 (x_169)*) of
      xEnv_24 => L_5656
  block L_5656 (env_2233: unit)
    call tail x_2290 (env_2233, x_5277)
  block L_5655 ()
    return (x_344 (*0x1:w64*))
fun areSmall_1 (env_2234: unit, x_5280: (intInf, intInf) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5657 ()
  block L_5657 ()
    val i'_0: intInf = #1 (x_5280)
    val i_40: intInf = #0 (x_5280)
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5658
  block L_5658 (env_2235: unit)
    call L_5659 (toWord_1 (env_2235, i_40)) handle _ => raise
  block L_5659 (x_5281: word64)
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5660
  block L_5660 (env_2236: unit)
    call L_5661 (toWord_1 (env_2236, i'_0)) handle _ => raise
  block L_5661 (x_5282: word64)
    val x_5283: (word64, word64) tuple = (x_5281, x_5282)
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_5662
  block L_5662 (env_2237: unit)
    call L_5663 (andb_2 (env_2237, x_5283)) handle _ => raise
  block L_5663 (x_5284: word64)
    val x_5285: (word64, word64) tuple = (x_5284, x_343 (*0x1:w64*))
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_5664
  block L_5664 (env_2238: unit)
    call L_5665 (andb_2 (env_2238, x_5285)) handle _ => raise
  block L_5665 (x_5286: word64)
    val x_5287: (word64, word64) tuple = (x_342 (*0x0:w64*), x_5286)
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5666
  block L_5666 (env_2239: unit)
    call tail x_5288 (env_2239, x_5287)
fun isSmall_1 (env_2240: unit, x_5289: intInf):
  {returns = Some (bool), raises = Some (exn)} =
L_5667 ()
  block L_5667 ()
    case toWord_0 (*con toWord ... _201)*) of
      toWordEnv_0 => L_5668
  block L_5668 (env_2241: unit)
    call L_5669 (toWord_1 (env_2241, x_5289)) handle _ => raise
  block L_5669 (x_5290: word64)
    val x_5291: (word64, word64) tuple = (x_5290, x_341 (*0x1:w64*))
    case andb_1 (*con andbEn ... _145)*) of
      andbEnv_1 => L_5670
  block L_5670 (env_2242: unit)
    call L_5671 (andb_2 (env_2242, x_5291)) handle _ => raise
  block L_5671 (x_5292: word64)
    val x_5293: (word64, word64) tuple = (x_340 (*0x0:w64*), x_5292)
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5672
  block L_5672 (env_2243: unit)
    call tail x_5288 (env_2243, x_5293)
fun sequence_2 (env_2244: lambdas_27, x_5294: t_19):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5673 ()
  block L_5673 ()
    case x_5294 of
      T_4 => L_5674
  block L_5674 (x_5295: (word64, (word8) vector, word64) tuple)
    val x_5297: word64 = #2 (x_5295)
    val x_5299: (word8) vector = #1 (x_5295)
    val x_5298: word64 = #0 (x_5295)
    val x_5296: (word64, word64) tuple = (x_5297, x_337 (*0x0:w64*))
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5675
  block L_5675 (env_2245: unit)
    call L_5676 (x_5288 (env_2245, x_5296)) handle _ => raise
  block L_5676 (x_5300: bool)
    case x_5300 of
      true => L_5678 | false => L_5677
  block L_5677 ()
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_5679
  block L_5679 (env_2246: unit)
    call L_5680 (x_2416 (env_2246, x_5299)) handle _ => raise
  block L_5680 (x_5301: word64)
    val x_5302: (word64, word64) tuple = (x_5298, x_5301)
    case x_103 (*con xEnv_18 (x_102)*) of
      xEnv_18 => L_5681
  block L_5681 (env_2247: unit)
    call L_5682 (x_5288 (env_2247, x_5302)) handle _ => raise
  block L_5678 ()
    goto L_5682 (x_338 (*con true*))
  block L_5682 (x_5303: bool)
    case x_5303 of
      true => L_5684 | false => L_5683
  block L_5683 ()
    return (x_5299)
  block L_5684 ()
    case env_2244 of
      arrayAllocEnv_1 => L_5685
  block L_5685 (env_2248: word64)
    call L_5686 (arrayAlloc_2 (env_2248, x_5298)) handle _ => raise
  block L_5686 (a_8: (word8) array)
    val x_5304: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_8, x_339 (*0x0:w64*), x_5299, x_5297, x_5298)
    case x_177 (*con xEnv_27 (x_176)*) of
      xEnv_27 => L_5687
  block L_5687 (env_2249: unit)
    call L_5688 (x_2456 (env_2249, x_5304)) handle _ => raise
  block L_5688 (x_5305: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5689
  block L_5689 (env_2250: unit)
    call tail x_1790 (env_2250, a_8)
fun base_4 (env_2251: unit, x_5306: t_19):
  {returns = Some (((word8) vector, word64, word64) tuple), raises = Some (exn)} =
L_5690 ()
  block L_5690 ()
    case x_5306 of
      T_4 => L_5691
  block L_5691 (x_5307: (word64, (word8) vector, word64) tuple)
    val x_5310: word64 = #2 (x_5307)
    val x_5311: (word8) vector = #1 (x_5307)
    val x_5309: word64 = #0 (x_5307)
    val x_5308: ((word8) vector, word64, word64) tuple =
      (x_5311, x_5310, x_5309)
    return (x_5308)
fun full_2 (env_2252: unit, x_5312: (word8) vector):
  {returns = Some (t_19), raises = Some (exn)} =
L_5692 ()
  block L_5692 ()
    case x_185 (*con xEnv_31 (x_184)*) of
      xEnv_31 => L_5693
  block L_5693 (env_2253: unit)
    call L_5694 (x_2416 (env_2253, x_5312)) handle _ => raise
  block L_5694 (x_5313: word64)
    val x_5315: (word64, (word8) vector, word64) tuple =
      (x_5313, x_5312, x_336 (*0x0:w64*))
    val x_5314: t_19 = con T_4 (x_5315)
    return (x_5314)
fun length_3 (env_2254: unit, x_5316: t_19):
  {returns = Some (word64), raises = Some (exn)} =
L_5695 ()
  block L_5695 ()
    case x_5316 of
      T_4 => L_5696
  block L_5696 (x_5317: (word64, (word8) vector, word64) tuple)
    val x_5318: word64 = #0 (x_5317)
    return (x_5318)
fun arrayAlloc_2 (env_2255: word64, x_5319: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5697 ()
  block L_5697 ()
    val x_5320: (word64, word64) tuple = (x_5319, env_2255)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5698
  block L_5698 (env_2256: unit)
    call L_5699 (>_5 (env_2256, x_5320)) handle _ => raise
  block L_5699 (x_5321: bool)
    case x_5321 of
      true => L_5701 | false => L_5700
  block L_5700 ()
    case x_175 (*con xEnv_26 (x_174)*) of
      xEnv_26 => L_5702
  block L_5702 (env_2257: unit)
    call tail x_5322 (env_2257, x_5319)
  block L_5701 ()
    raise (x_66 (*con Size_0 (x_65)*))
fun valOf_3 (env_2258: unit, x_5323: t_0):
  {returns = Some (word32), raises = Some (exn)} =
L_5703 ()
  block L_5703 ()
    case x_5323 of
      SOME_0 => L_5705 | NONE_1 => L_5704
  block L_5704 ()
    return (x_335 (*0x0:w32*))
  block L_5705 (x_5324: word32)
    return (x_5324)
fun vector_1 (env_2259: unit, x_5325: t_13):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5706 ()
  block L_5706 ()
    case x_5325 of
      T_3 => L_5707
  block L_5707 (x_5326: (word64, (word8) array, word64) tuple)
    val x_5327: word64 = #0 (x_5326)
    case unsafeArrayAlloc_0 (*con unsafe ... e_17)*) of
      unsafeArrayAllocEnv_0 => L_5708
  block L_5708 (env_2260: unit)
    call L_5709 (unsafeArrayAlloc_1 (env_2260, x_5327)) handle _ => raise
  block L_5709 (x_5328: (word8) array)
    case x_327 (*con xEnv_44 (x_326)*) of
      xEnv_44 => L_5710
  block L_5710 (env_2261: unit)
    call L_5711 (x_4579 (env_2261, x_5328)) handle _ => raise
  block L_5711 (x_5329: (word8) array)
    case x_5325 of
      T_3 => L_5712
  block L_5712 (x_5330: (word64, (word8) array, word64) tuple)
    val x_5334: word64 = #2 (x_5330)
    val x_5333: (word8) array = #1 (x_5330)
    val x_5332: word64 = #0 (x_5330)
    val x_5331: (word64, word64) tuple = (x_5332, smallCopyLimit_0 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5713
  block L_5713 (env_2262: unit)
    call L_5714 (<_7 (env_2262, x_5331)) handle _ => raise
  block L_5714 (x_5335: bool)
    case x_5335 of
      true => L_5716 | false => L_5715
  block L_5715 ()
    val x_5336: unit =
      prim Array_copyArray[word8] (x_5329,
                                   x_330 (*0x0:w64*),
                                   x_5333,
                                   x_5334,
                                   x_5332)
    goto L_5717 (x_5336)
  block L_5716 ()
    val x_5337: (word64, word64) tuple = (x_5332, x_331 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5718
  block L_5718 (env_2263: unit)
    call L_5719 (-!_2 (env_2263, x_5337)) handle _ => raise
  block L_5719 (len_9: word64)
    val tuple_109: (word64, word64, (word8) array, (word8) array) tuple =
      (len_9, x_5334, x_5333, x_5329)
    call L_5717 (loop_45 (tuple_109, x_334 (*0x0:w64*))) handle _ => raise
  block L_5717 (x_5338: unit)
    case x_183 (*con xEnv_30 (x_182)*) of
      xEnv_30 => L_5720
  block L_5720 (env_2264: unit)
    call tail x_1790 (env_2264, x_5329)
fun loop_45 (env_2265: (word64, word64, (word8) array, (word8) array) tuple,
             x_5339: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_5721 ()
  block L_5721 ()
    val len_10: word64 = #0 (env_2265)
    val x_5343: word64 = #1 (env_2265)
    val x_5342: (word8) array = #2 (env_2265)
    val x_5341: (word8) array = #3 (env_2265)
    val x_5340: (word64, word64) tuple = (x_5339, len_10)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_5722
  block L_5722 (env_2266: unit)
    call L_5723 (>_6 (env_2266, x_5340)) handle _ => raise
  block L_5723 (x_5344: bool)
    case x_5344 of
      true => L_5725 | false => L_5724
  block L_5724 ()
    val x_5345: (word64, word64) tuple = (x_330 (*0x0:w64*), x_5339)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5726
  block L_5726 (env_2267: unit)
    call L_5727 (+!_2 (env_2267, x_5345)) handle _ => raise
  block L_5727 (x_5346: word64)
    val x_5347: (word64, word64) tuple = (x_5343, x_5339)
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5728
  block L_5728 (env_2268: unit)
    call L_5729 (+!_2 (env_2268, x_5347)) handle _ => raise
  block L_5729 (x_5348: word64)
    val x_5350: word8 = prim Array_sub[word8] (x_5342, x_5348)
    val x_5349: ((word8) array, word64, word8) tuple = (x_5341, x_5346, x_5350)
    case x_181 (*con xEnv_29 (x_180)*) of
      xEnv_29 => L_5730
  block L_5730 (env_2269: unit)
    call L_5731 (x_2544 (env_2269, x_5349)) handle _ => raise
  block L_5731 (x_5351: unit)
    val x_5352: (word64, word64) tuple = (x_5339, x_333 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5732
  block L_5732 (env_2270: unit)
    call L_5733 (+!_2 (env_2270, x_5352)) handle _ => raise
  block L_5733 (x_5353: word64)
    call tail loop_45 (env_2265, x_5353)
  block L_5725 ()
    return (x_332 (*()*))
fun full_3 (env_2271: unit, x_5354: (word8) array):
  {returns = Some (t_13), raises = Some (exn)} =
L_5734 ()
  block L_5734 ()
    case x_179 (*con xEnv_28 (x_178)*) of
      xEnv_28 => L_5735
  block L_5735 (env_2272: unit)
    call L_5736 (x_2444 (env_2272, x_5354)) handle _ => raise
  block L_5736 (x_5355: word64)
    val x_5357: (word64, (word8) array, word64) tuple =
      (x_5355, x_5354, x_329 (*0x0:w64*))
    val x_5356: t_13 = con T_3 (x_5357)
    return (x_5356)
fun arrayAlloc_5 (env_2273: word64, x_5358: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5737 ()
  block L_5737 ()
    val x_5359: (word64, word64) tuple = (x_5358, env_2273)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_5738
  block L_5738 (env_2274: unit)
    call L_5739 (>_5 (env_2274, x_5359)) handle _ => raise
  block L_5739 (x_5360: bool)
    case x_5360 of
      true => L_5741 | false => L_5740
  block L_5740 ()
    case unsafeArrayAlloc_0 (*con unsafe ... e_17)*) of
      unsafeArrayAllocEnv_0 => L_5742
  block L_5742 (env_2275: unit)
    call tail unsafeArrayAlloc_1 (env_2275, x_5358)
  block L_5741 ()
    raise (x_66 (*con Size_0 (x_65)*))
fun unsafeArrayAlloc_1 (env_2276: unit, x_5361: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5743 ()
  block L_5743 ()
    case x_175 (*con xEnv_26 (x_174)*) of
      xEnv_26 => L_5744
  block L_5744 (env_2277: unit)
    call tail x_5322 (env_2277, x_5361)
fun valOf_2 (env_2278: unit, x_5362: t_0):
  {returns = Some (word32), raises = Some (exn)} =
L_5745 ()
  block L_5745 ()
    case x_5362 of
      SOME_0 => L_5747 | NONE_1 => L_5746
  block L_5746 ()
    return (x_328 (*0x0:w32*))
  block L_5747 (x_5363: word32)
    return (x_5363)
fun x_4579 (env_2279: unit, x_5364: (word8) array):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5748 ()
  block L_5748 ()
    return (x_5364)
fun >=_11 (env_2280: unit, x_5365: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5749 ()
  block L_5749 ()
    case ltu_0 (*con ltuEnv ... e_13)*) of
      ltuEnv_0 => L_5750
  block L_5750 (env_2281: unit)
    call L_5751 (ltu_1 (env_2281, x_5365)) handle _ => raise
  block L_5751 (x_5366: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5752
  block L_5752 (env_2282: unit)
    call tail not_1 (env_2282, x_5366)
fun >_5 (env_2283: unit, x_5367: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5753 ()
  block L_5753 ()
    val b_31: word64 = #1 (x_5367)
    val a_9: word64 = #0 (x_5367)
    val x_5368: (word64, word64) tuple = (b_31, a_9)
    case ltu_0 (*con ltuEnv ... e_13)*) of
      ltuEnv_0 => L_5754
  block L_5754 (env_2284: unit)
    call tail ltu_1 (env_2284, x_5368)
fun ltu_1 (env_2285: unit, x_5369: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5755 ()
  block L_5755 ()
    val i'_1: word64 = #1 (x_5369)
    val i_41: word64 = #0 (x_5369)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5756
  block L_5756 (env_2286: unit)
    call L_5757 (idFromInt64ToWord64_1 (env_2286, i_41)) handle _ => raise
  block L_5757 (x_5370: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5758
  block L_5758 (env_2287: unit)
    call L_5759 (idFromInt64ToWord64_1 (env_2287, i'_1)) handle _ => raise
  block L_5759 (x_5371: word64)
    val x_5372: bool = prim WordU64_lt (x_5370, x_5371)
    return (x_5372)
fun quot_3 (env_2288: (word64, word64, word64) tuple,
            x_5373: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5760 ()
  block L_5760 ()
    val zero_84: word64 = #0 (env_2288)
    val minInt'_27: word64 = #1 (env_2288)
    val one_65: word64 = #2 (env_2288)
    val y_0: word64 = #1 (x_5373)
    val x_5375: word64 = #0 (x_5373)
    val x_5374: (word64, word64) tuple = (y_0, zero_84)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5761
  block L_5761 (env_2289: unit)
    call L_5762 (x_2295 (env_2289, x_5374)) handle _ => raise
  block L_5762 (x_5376: bool)
    case x_5376 of
      true => L_5764 | false => L_5763
  block L_5763 ()
    val x_5377: (word64, word64) tuple = (x_5375, minInt'_27)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5765
  block L_5765 (env_2290: unit)
    call L_5766 (x_2295 (env_2290, x_5377)) handle _ => raise
  block L_5766 (x_5378: bool)
    case x_5378 of
      true => L_5768 | false => L_5767
  block L_5767 ()
    goto L_5769 (x_325 (*con false*))
  block L_5768 ()
    case x_167 (*con xEnv_23 (x_166)*) of
      xEnv_23 => L_5770
  block L_5770 (env_2291: unit)
    call L_5771 (x_1588 (env_2291, one_65)) handle _ => raise
  block L_5771 (x_5379: word64)
    val x_5380: (word64, word64) tuple = (y_0, x_5379)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5772
  block L_5772 (env_2292: unit)
    call L_5769 (x_2295 (env_2292, x_5380)) handle _ => raise
  block L_5769 (x_5381: bool)
    case x_5381 of
      true => L_5774 | false => L_5773
  block L_5773 ()
    val x_5382: word64 = prim WordS64_quot (x_5375, y_0)
    return (x_5382)
  block L_5774 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_5764 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_1542 (env_2293: unit, x_5383: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5775 ()
  block L_5775 ()
    val w_4: word32 = #1 (x_5383)
    val x_5384: word64 = #0 (x_5383)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5776
  block L_5776 (env_2294: unit)
    call L_5777 (idFromInt64ToWord64_1 (env_2294, x_5384)) handle _ => raise
  block L_5777 (x_5385: word64)
    val x_5386: (word64, word32) tuple = (x_5385, w_4)
    case >>?_3 (*con >>?Env_3 (x_150)*) of
      >>?Env_3 => L_5778
  block L_5778 (env_2295: unit)
    call L_5779 (>>?_4 (env_2295, x_5386)) handle _ => raise
  block L_5779 (x_5387: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_5780
  block L_5780 (env_2296: unit)
    call tail idFromWord64ToInt64_1 (env_2296, x_5387)
fun x_1537 (env_2297: unit, x_5388: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5781 ()
  block L_5781 ()
    val w_5: word32 = #1 (x_5388)
    val x_5389: word64 = #0 (x_5388)
    case idFromInt64ToWord64_0 (*con idFrom ... _107)*) of
      idFromInt64ToWord64Env_0 => L_5782
  block L_5782 (env_2298: unit)
    call L_5783 (idFromInt64ToWord64_1 (env_2298, x_5389)) handle _ => raise
  block L_5783 (x_5390: word64)
    val x_5391: (word64, word32) tuple = (x_5390, w_5)
    case <<?_3 (*con <<?Env_3 (x_146)*) of
      <<?Env_3 => L_5784
  block L_5784 (env_2299: unit)
    call L_5785 (<<?_4 (env_2299, x_5391)) handle _ => raise
  block L_5785 (x_5392: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... _111)*) of
      idFromWord64ToInt64Env_0 => L_5786
  block L_5786 (env_2300: unit)
    call tail idFromWord64ToInt64_1 (env_2300, x_5392)
fun quot_2 (env_2301: (word32, word32, word32) tuple,
            x_5393: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5787 ()
  block L_5787 ()
    val zero_85: word32 = #0 (env_2301)
    val minInt'_28: word32 = #1 (env_2301)
    val one_66: word32 = #2 (env_2301)
    val y_1: word32 = #1 (x_5393)
    val x_5395: word32 = #0 (x_5393)
    val x_5394: (word32, word32) tuple = (y_1, zero_85)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5788
  block L_5788 (env_2302: unit)
    call L_5789 (x_2049 (env_2302, x_5394)) handle _ => raise
  block L_5789 (x_5396: bool)
    case x_5396 of
      true => L_5791 | false => L_5790
  block L_5790 ()
    val x_5397: (word32, word32) tuple = (x_5395, minInt'_28)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5792
  block L_5792 (env_2303: unit)
    call L_5793 (x_2049 (env_2303, x_5397)) handle _ => raise
  block L_5793 (x_5398: bool)
    case x_5398 of
      true => L_5795 | false => L_5794
  block L_5794 ()
    goto L_5796 (x_309 (*con false*))
  block L_5795 ()
    case x_156 (*con xEnv_20 (x_155)*) of
      xEnv_20 => L_5797
  block L_5797 (env_2304: unit)
    call L_5798 (x_2766 (env_2304, one_66)) handle _ => raise
  block L_5798 (x_5399: word32)
    val x_5400: (word32, word32) tuple = (y_1, x_5399)
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5799
  block L_5799 (env_2305: unit)
    call L_5796 (x_2049 (env_2305, x_5400)) handle _ => raise
  block L_5796 (x_5401: bool)
    case x_5401 of
      true => L_5801 | false => L_5800
  block L_5800 ()
    val x_5402: word32 = prim WordS32_quot (x_5395, y_1)
    return (x_5402)
  block L_5801 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_5791 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_1530 (env_2306: unit, x_5403: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5802 ()
  block L_5802 ()
    val w_6: word32 = #1 (x_5403)
    val x_5404: word32 = #0 (x_5403)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_5803
  block L_5803 (env_2307: unit)
    call L_5804 (idFromInt32ToWord32_1 (env_2307, x_5404)) handle _ => raise
  block L_5804 (x_5405: word32)
    val x_5406: (word32, word32) tuple = (x_5405, w_6)
    case >>?_2 (*con >>?Env_2 (x_140)*) of
      >>?Env_2 => L_5805
  block L_5805 (env_2308: unit)
    call L_5806 (>>?_5 (env_2308, x_5406)) handle _ => raise
  block L_5806 (x_5407: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_5807
  block L_5807 (env_2309: unit)
    call tail idFromWord32ToInt32_1 (env_2309, x_5407)
fun x_1525 (env_2310: unit, x_5408: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5808 ()
  block L_5808 ()
    val w_7: word32 = #1 (x_5408)
    val x_5409: word32 = #0 (x_5408)
    case idFromInt32ToWord32_0 (*con idFrom ... _106)*) of
      idFromInt32ToWord32Env_0 => L_5809
  block L_5809 (env_2311: unit)
    call L_5810 (idFromInt32ToWord32_1 (env_2311, x_5409)) handle _ => raise
  block L_5810 (x_5410: word32)
    val x_5411: (word32, word32) tuple = (x_5410, w_7)
    case <<?_2 (*con <<?Env_2 (x_138)*) of
      <<?Env_2 => L_5811
  block L_5811 (env_2312: unit)
    call L_5812 (<<?_5 (env_2312, x_5411)) handle _ => raise
  block L_5812 (x_5412: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... _110)*) of
      idFromWord32ToInt32Env_0 => L_5813
  block L_5813 (env_2313: unit)
    call tail idFromWord32ToInt32_1 (env_2313, x_5412)
fun x_1518 (env_2314: unit, x_5413: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5814 ()
  block L_5814 ()
    val w_8: word32 = #1 (x_5413)
    val x_5414: word16 = #0 (x_5413)
    case idFromInt16ToWord16_0 (*con idFrom ... _105)*) of
      idFromInt16ToWord16Env_0 => L_5815
  block L_5815 (env_2315: unit)
    call L_5816 (idFromInt16ToWord16_1 (env_2315, x_5414)) handle _ => raise
  block L_5816 (x_5415: word16)
    val x_5416: (word16, word32) tuple = (x_5415, w_8)
    case >>?_1 (*con >>?Env_1 (x_136)*) of
      >>?Env_1 => L_5817
  block L_5817 (env_2316: unit)
    call L_5818 (>>?_6 (env_2316, x_5416)) handle _ => raise
  block L_5818 (x_5417: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... _109)*) of
      idFromWord16ToInt16Env_0 => L_5819
  block L_5819 (env_2317: unit)
    call tail idFromWord16ToInt16_1 (env_2317, x_5417)
fun x_1513 (env_2318: unit, x_5418: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_5820 ()
  block L_5820 ()
    val w_9: word32 = #1 (x_5418)
    val x_5419: word16 = #0 (x_5418)
    case idFromInt16ToWord16_0 (*con idFrom ... _105)*) of
      idFromInt16ToWord16Env_0 => L_5821
  block L_5821 (env_2319: unit)
    call L_5822 (idFromInt16ToWord16_1 (env_2319, x_5419)) handle _ => raise
  block L_5822 (x_5420: word16)
    val x_5421: (word16, word32) tuple = (x_5420, w_9)
    case <<?_1 (*con <<?Env_1 (x_134)*) of
      <<?Env_1 => L_5823
  block L_5823 (env_2320: unit)
    call L_5824 (<<?_6 (env_2320, x_5421)) handle _ => raise
  block L_5824 (x_5422: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... _109)*) of
      idFromWord16ToInt16Env_0 => L_5825
  block L_5825 (env_2321: unit)
    call tail idFromWord16ToInt16_1 (env_2321, x_5422)
fun x_1506 (env_2322: unit, x_5423: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5826 ()
  block L_5826 ()
    val w_10: word32 = #1 (x_5423)
    val x_5424: word8 = #0 (x_5423)
    case idFromInt8ToWord8_0 (*con idFrom ... _104)*) of
      idFromInt8ToWord8Env_0 => L_5827
  block L_5827 (env_2323: unit)
    call L_5828 (idFromInt8ToWord8_1 (env_2323, x_5424)) handle _ => raise
  block L_5828 (x_5425: word8)
    val x_5426: (word8, word32) tuple = (x_5425, w_10)
    case >>?_0 (*con >>?Env_0 (x_133)*) of
      >>?Env_0 => L_5829
  block L_5829 (env_2324: unit)
    call L_5830 (>>?_7 (env_2324, x_5426)) handle _ => raise
  block L_5830 (x_5427: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... _108)*) of
      idFromWord8ToInt8Env_0 => L_5831
  block L_5831 (env_2325: unit)
    call tail idFromWord8ToInt8_1 (env_2325, x_5427)
fun x_1501 (env_2326: unit, x_5428: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5832 ()
  block L_5832 ()
    val w_11: word32 = #1 (x_5428)
    val x_5429: word8 = #0 (x_5428)
    case idFromInt8ToWord8_0 (*con idFrom ... _104)*) of
      idFromInt8ToWord8Env_0 => L_5833
  block L_5833 (env_2327: unit)
    call L_5834 (idFromInt8ToWord8_1 (env_2327, x_5429)) handle _ => raise
  block L_5834 (x_5430: word8)
    val x_5431: (word8, word32) tuple = (x_5430, w_11)
    case <<?_0 (*con <<?Env_0 (x_131)*) of
      <<?Env_0 => L_5835
  block L_5835 (env_2328: unit)
    call L_5836 (<<?_7 (env_2328, x_5431)) handle _ => raise
  block L_5836 (x_5432: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... _108)*) of
      idFromWord8ToInt8Env_0 => L_5837
  block L_5837 (env_2329: unit)
    call tail idFromWord8ToInt8_1 (env_2329, x_5432)
fun x_2418 (env_2330: unit, x_5433: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_5838 ()
  block L_5838 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _129)*) of
      sextdFromInt64ToInt32Env_0 => L_5839
  block L_5839 (env_2331: unit)
    call L_5840 (sextdFromInt64ToInt32_1 (env_2331, x_5433)) handle _ => raise
  block L_5840 (res_1: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _126)*) of
      sextdFromInt32ToInt64Env_0 => L_5841
  block L_5841 (env_2332: unit)
    call L_5842 (sextdFromInt32ToInt64_1 (env_2332, res_1)) handle _ => raise
  block L_5842 (x_5434: word64)
    val x_5435: (word64, word64) tuple = (x_5433, x_5434)
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_5843
  block L_5843 (env_2333: unit)
    call L_5844 (x_2295 (env_2333, x_5435)) handle _ => raise
  block L_5844 (x_5436: bool)
    case x_5436 of
      true => L_5846 | false => L_5845
  block L_5845 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_5846 ()
    return (res_1)
fun x_2522 (env_2334: unit, x_5437: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5847 ()
  block L_5847 ()
    case bug_0 (*con bugEnv_0 (x_189)*) of
      bugEnv_0 => L_5848
  block L_5848 (env_2335: unit)
    call tail bug_1 (env_2335, x_261 (*"missing s ... rary"*))
fun x_2526 (env_2336: unit, x_5438: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_5849 ()
  block L_5849 ()
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5850
  block L_5850 (env_2337: unit)
    call L_5851 (print_1 (env_2337, x_253 (*"unhandled ... on: "*))) handle _ => raise
  block L_5851 (x_5439: unit)
    case x_5438 of
      Fail8_0 => L_5852 | _ => L_5853
  block L_5853 ()
    call L_5854 (x_5440 (x_5438, x_254 (*()*))) handle _ => raise
  block L_5852 (x_5441: ((unit) ref, (word8) vector) tuple)
    val x_5444: (word8) vector = #1 (x_5441)
    val x_5443: (unit) ref = #0 (x_5441)
    val x_5442: bool = prim MLton_equal[(unit) ref] (x_5443, x_1443)
    case x_5442 of
      true => L_5856 | false => L_5855
  block L_5855 ()
    call L_5854 (x_5440 (x_5438, x_256 (*()*))) handle _ => raise
  block L_5856 ()
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5857
  block L_5857 (env_2338: unit)
    call L_5858 (print_1 (env_2338, x_255 (*"Fail "*))) handle _ => raise
  block L_5858 (x_5445: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5859
  block L_5859 (env_2339: unit)
    call L_5854 (print_1 (env_2339, x_5444)) handle _ => raise
  block L_5854 (x_5446: unit)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5860
  block L_5860 (env_2340: unit)
    call L_5861 (print_1 (env_2340, x_257 (*"\n"*))) handle _ => raise
  block L_5861 (x_5447: unit)
    case bug_0 (*con bugEnv_0 (x_189)*) of
      bugEnv_0 => L_5862
  block L_5862 (env_2341: unit)
    call tail bug_1 (env_2341, x_258 (*"unhandled ... rary"*))
fun x_5440 (env_2342: exn, unit_19: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5863 ()
  block L_5863 ()
    case name_0 (*con nameEnv_0 (x_53)*) of
      nameEnv_0 => L_5864
  block L_5864 (env_2343: unit)
    call L_5865 (name_1 (env_2343, env_2342)) handle _ => raise
  block L_5865 (x_5448: (word8) vector)
    case print_0 (*con printE ... _199)*) of
      printEnv_0 => L_5866
  block L_5866 (env_2344: unit)
    call tail print_1 (env_2344, x_5448)
fun castFromWord_3 (env_2345: unit, x_5449: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_5867 ()
  block L_5867 ()
    val x_5450: real64 = prim Word64_castToReal64 (x_5449)
    return (x_5450)
fun castFromWord_2 (env_2346: unit, x_5451: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_5868 ()
  block L_5868 ()
    val x_5452: real32 = prim Word32_castToReal32 (x_5451)
    return (x_5452)
fun >=_8 (env_2347: unit, x_5453: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5869 ()
  block L_5869 ()
    val b_32: real64 = #1 (x_5453)
    val a_10: real64 = #0 (x_5453)
    val x_5454: (real64, real64) tuple = (b_32, a_10)
    case <=_3 (*con <=Env_3 (x_231)*) of
      <=Env_3 => L_5870
  block L_5870 (env_2348: unit)
    call tail <=_5 (env_2348, x_5454)
fun >_7 (env_2349: unit, x_5455: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5871 ()
  block L_5871 ()
    val b_33: real64 = #1 (x_5455)
    val a_11: real64 = #0 (x_5455)
    val x_5456: (real64, real64) tuple = (b_33, a_11)
    case <_4 (*con <Env_4 (x_230)*) of
      <Env_4 => L_5872
  block L_5872 (env_2350: unit)
    call tail <_8 (env_2350, x_5456)
fun toWord64Unsafe_2 (env_2351: unit, x_5457: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_5873 ()
  block L_5873 ()
    val x_5458: word64 = prim Real64_rndToWordU64 (x_5457)
    return (x_5458)
fun toWord32Unsafe_2 (env_2352: unit, x_5459: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_5874 ()
  block L_5874 ()
    val x_5460: word32 = prim Real64_rndToWordU32 (x_5459)
    return (x_5460)
fun toWord16Unsafe_2 (env_2353: unit, x_5461: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_5875 ()
  block L_5875 ()
    val x_5462: word16 = prim Real64_rndToWordU16 (x_5461)
    return (x_5462)
fun toWord8Unsafe_2 (env_2354: unit, x_5463: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_5876 ()
  block L_5876 ()
    val x_5464: word8 = prim Real64_rndToWordU8 (x_5463)
    return (x_5464)
fun toReal32Unsafe_2 (env_2355: unit, x_5465: real64):
  {returns = Some (real32), raises = Some (exn)} =
L_5877 ()
  block L_5877 ()
    val x_5466: real32 = prim Real64_rndToReal32 (x_5465)
    return (x_5466)
fun toInt64Unsafe_2 (env_2356: unit, x_5467: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_5878 ()
  block L_5878 ()
    val x_5468: word64 = prim Real64_rndToWordS64 (x_5467)
    return (x_5468)
fun toInt32Unsafe_2 (env_2357: unit, x_5469: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_5879 ()
  block L_5879 ()
    val x_5470: word32 = prim Real64_rndToWordS32 (x_5469)
    return (x_5470)
fun toInt16Unsafe_2 (env_2358: unit, x_5471: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_5880 ()
  block L_5880 ()
    val x_5472: word16 = prim Real64_rndToWordS16 (x_5471)
    return (x_5472)
fun toInt8Unsafe_2 (env_2359: unit, x_5473: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_5881 ()
  block L_5881 ()
    val x_5474: word8 = prim Real64_rndToWordS8 (x_5473)
    return (x_5474)
fun fromWord64Unsafe_3 (env_2360: unit, x_5475: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_5882 ()
  block L_5882 ()
    val x_5476: real64 = prim WordU64_rndToReal64 (x_5475)
    return (x_5476)
fun fromWord32Unsafe_3 (env_2361: unit, x_5477: word32):
  {returns = Some (real64), raises = Some (exn)} =
L_5883 ()
  block L_5883 ()
    val x_5478: real64 = prim WordU32_rndToReal64 (x_5477)
    return (x_5478)
fun fromWord16Unsafe_3 (env_2362: unit, x_5479: word16):
  {returns = Some (real64), raises = Some (exn)} =
L_5884 ()
  block L_5884 ()
    val x_5480: real64 = prim WordU16_rndToReal64 (x_5479)
    return (x_5480)
fun fromWord8Unsafe_3 (env_2363: unit, x_5481: word8):
  {returns = Some (real64), raises = Some (exn)} =
L_5885 ()
  block L_5885 ()
    val x_5482: real64 = prim WordU8_rndToReal64 (x_5481)
    return (x_5482)
fun fromReal32Unsafe_2 (env_2364: unit, x_5483: real32):
  {returns = Some (real64), raises = Some (exn)} =
L_5886 ()
  block L_5886 ()
    val x_5484: real64 = prim Real32_rndToReal64 (x_5483)
    return (x_5484)
fun fromInt64Unsafe_3 (env_2365: unit, x_5485: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_5887 ()
  block L_5887 ()
    val x_5486: real64 = prim WordS64_rndToReal64 (x_5485)
    return (x_5486)
fun fromInt32Unsafe_3 (env_2366: unit, x_5487: word32):
  {returns = Some (real64), raises = Some (exn)} =
L_5888 ()
  block L_5888 ()
    val x_5488: real64 = prim WordS32_rndToReal64 (x_5487)
    return (x_5488)
fun fromInt16Unsafe_3 (env_2367: unit, x_5489: word16):
  {returns = Some (real64), raises = Some (exn)} =
L_5889 ()
  block L_5889 ()
    val x_5490: real64 = prim WordS16_rndToReal64 (x_5489)
    return (x_5490)
fun fromInt8Unsafe_3 (env_2368: unit, x_5491: word8):
  {returns = Some (real64), raises = Some (exn)} =
L_5890 ()
  block L_5890 ()
    val x_5492: real64 = prim WordS8_rndToReal64 (x_5491)
    return (x_5492)
fun round_2 (env_2369: unit, x_5493: real64):
  {returns = Some (real64), raises = Some (exn)} =
L_5891 ()
  block L_5891 ()
    val x_5494: real64 = prim Real64_round (x_5493)
    return (x_5494)
fun <=_5 (env_2370: unit, x_5495: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5892 ()
  block L_5892 ()
    val x_5497: real64 = #1 (x_5495)
    val x_5498: real64 = #0 (x_5495)
    val x_5496: bool = prim Real64_le (x_5498, x_5497)
    return (x_5496)
fun <_8 (env_2371: unit, x_5499: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5893 ()
  block L_5893 ()
    val x_5501: real64 = #1 (x_5499)
    val x_5502: real64 = #0 (x_5499)
    val x_5500: bool = prim Real64_lt (x_5502, x_5501)
    return (x_5500)
fun ~_2 (env_2372: unit, x_5503: real64):
  {returns = Some (real64), raises = Some (exn)} =
L_5894 ()
  block L_5894 ()
    val x_5504: real64 = prim Real64_neg (x_5503)
    return (x_5504)
fun -_4 (env_2373: unit, x_5505: (real64, real64) tuple):
  {returns = Some (real64), raises = Some (exn)} =
L_5895 ()
  block L_5895 ()
    val x_5507: real64 = #1 (x_5505)
    val x_5508: real64 = #0 (x_5505)
    val x_5506: real64 = prim Real64_sub (x_5508, x_5507)
    return (x_5506)
fun +_3 (env_2374: unit, x_5509: (real64, real64) tuple):
  {returns = Some (real64), raises = Some (exn)} =
L_5896 ()
  block L_5896 ()
    val x_5511: real64 = #1 (x_5509)
    val x_5512: real64 = #0 (x_5509)
    val x_5510: real64 = prim Real64_add (x_5512, x_5511)
    return (x_5510)
fun >=_9 (env_2375: unit, x_5513: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5897 ()
  block L_5897 ()
    val b_34: real32 = #1 (x_5513)
    val a_12: real32 = #0 (x_5513)
    val x_5514: (real32, real32) tuple = (b_34, a_12)
    case <=_2 (*con <=Env_2 (x_207)*) of
      <=Env_2 => L_5898
  block L_5898 (env_2376: unit)
    call tail <=_6 (env_2376, x_5514)
fun >_8 (env_2377: unit, x_5515: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5899 ()
  block L_5899 ()
    val b_35: real32 = #1 (x_5515)
    val a_13: real32 = #0 (x_5515)
    val x_5516: (real32, real32) tuple = (b_35, a_13)
    case <_3 (*con <Env_3 (x_206)*) of
      <Env_3 => L_5900
  block L_5900 (env_2378: unit)
    call tail <_9 (env_2378, x_5516)
fun toWord64Unsafe_3 (env_2379: unit, x_5517: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_5901 ()
  block L_5901 ()
    val x_5518: word64 = prim Real32_rndToWordU64 (x_5517)
    return (x_5518)
fun toWord32Unsafe_3 (env_2380: unit, x_5519: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_5902 ()
  block L_5902 ()
    val x_5520: word32 = prim Real32_rndToWordU32 (x_5519)
    return (x_5520)
fun toWord16Unsafe_3 (env_2381: unit, x_5521: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_5903 ()
  block L_5903 ()
    val x_5522: word16 = prim Real32_rndToWordU16 (x_5521)
    return (x_5522)
fun toWord8Unsafe_3 (env_2382: unit, x_5523: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_5904 ()
  block L_5904 ()
    val x_5524: word8 = prim Real32_rndToWordU8 (x_5523)
    return (x_5524)
fun toReal32Unsafe_3 (env_2383: unit, x_5525: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5905 ()
  block L_5905 ()
    return (x_5525)
fun toInt64Unsafe_3 (env_2384: unit, x_5526: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_5906 ()
  block L_5906 ()
    val x_5527: word64 = prim Real32_rndToWordS64 (x_5526)
    return (x_5527)
fun toInt32Unsafe_3 (env_2385: unit, x_5528: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_5907 ()
  block L_5907 ()
    val x_5529: word32 = prim Real32_rndToWordS32 (x_5528)
    return (x_5529)
fun toInt16Unsafe_3 (env_2386: unit, x_5530: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_5908 ()
  block L_5908 ()
    val x_5531: word16 = prim Real32_rndToWordS16 (x_5530)
    return (x_5531)
fun toInt8Unsafe_3 (env_2387: unit, x_5532: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_5909 ()
  block L_5909 ()
    val x_5533: word8 = prim Real32_rndToWordS8 (x_5532)
    return (x_5533)
fun fromWord64Unsafe_2 (env_2388: unit, x_5534: word64):
  {returns = Some (real32), raises = Some (exn)} =
L_5910 ()
  block L_5910 ()
    val x_5535: real32 = prim WordU64_rndToReal32 (x_5534)
    return (x_5535)
fun fromWord32Unsafe_2 (env_2389: unit, x_5536: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_5911 ()
  block L_5911 ()
    val x_5537: real32 = prim WordU32_rndToReal32 (x_5536)
    return (x_5537)
fun fromWord16Unsafe_2 (env_2390: unit, x_5538: word16):
  {returns = Some (real32), raises = Some (exn)} =
L_5912 ()
  block L_5912 ()
    val x_5539: real32 = prim WordU16_rndToReal32 (x_5538)
    return (x_5539)
fun fromWord8Unsafe_2 (env_2391: unit, x_5540: word8):
  {returns = Some (real32), raises = Some (exn)} =
L_5913 ()
  block L_5913 ()
    val x_5541: real32 = prim WordU8_rndToReal32 (x_5540)
    return (x_5541)
fun fromReal32Unsafe_3 (env_2392: unit, x_5542: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5914 ()
  block L_5914 ()
    return (x_5542)
fun fromInt64Unsafe_2 (env_2393: unit, x_5543: word64):
  {returns = Some (real32), raises = Some (exn)} =
L_5915 ()
  block L_5915 ()
    val x_5544: real32 = prim WordS64_rndToReal32 (x_5543)
    return (x_5544)
fun fromInt32Unsafe_2 (env_2394: unit, x_5545: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_5916 ()
  block L_5916 ()
    val x_5546: real32 = prim WordS32_rndToReal32 (x_5545)
    return (x_5546)
fun fromInt16Unsafe_2 (env_2395: unit, x_5547: word16):
  {returns = Some (real32), raises = Some (exn)} =
L_5917 ()
  block L_5917 ()
    val x_5548: real32 = prim WordS16_rndToReal32 (x_5547)
    return (x_5548)
fun fromInt8Unsafe_2 (env_2396: unit, x_5549: word8):
  {returns = Some (real32), raises = Some (exn)} =
L_5918 ()
  block L_5918 ()
    val x_5550: real32 = prim WordS8_rndToReal32 (x_5549)
    return (x_5550)
fun round_3 (env_2397: unit, x_5551: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5919 ()
  block L_5919 ()
    val x_5552: real32 = prim Real32_round (x_5551)
    return (x_5552)
fun <=_6 (env_2398: unit, x_5553: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5920 ()
  block L_5920 ()
    val x_5555: real32 = #1 (x_5553)
    val x_5556: real32 = #0 (x_5553)
    val x_5554: bool = prim Real32_le (x_5556, x_5555)
    return (x_5554)
fun <_9 (env_2399: unit, x_5557: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5921 ()
  block L_5921 ()
    val x_5559: real32 = #1 (x_5557)
    val x_5560: real32 = #0 (x_5557)
    val x_5558: bool = prim Real32_lt (x_5560, x_5559)
    return (x_5558)
fun ~_3 (env_2400: unit, x_5561: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_5922 ()
  block L_5922 ()
    val x_5562: real32 = prim Real32_neg (x_5561)
    return (x_5562)
fun -_5 (env_2401: unit, x_5563: (real32, real32) tuple):
  {returns = Some (real32), raises = Some (exn)} =
L_5923 ()
  block L_5923 ()
    val x_5565: real32 = #1 (x_5563)
    val x_5566: real32 = #0 (x_5563)
    val x_5564: real32 = prim Real32_sub (x_5566, x_5565)
    return (x_5564)
fun +_4 (env_2402: unit, x_5567: (real32, real32) tuple):
  {returns = Some (real32), raises = Some (exn)} =
L_5924 ()
  block L_5924 ()
    val x_5569: real32 = #1 (x_5567)
    val x_5570: real32 = #0 (x_5567)
    val x_5568: real32 = prim Real32_add (x_5570, x_5569)
    return (x_5568)
fun <=_7 (env_2403: unit, x_5571: (word8, word8) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5925 ()
  block L_5925 ()
    val b_36: word8 = #1 (x_5571)
    val a_14: word8 = #0 (x_5571)
    val x_5572: bool = prim WordU8_lt (b_36, a_14)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5926
  block L_5926 (env_2404: unit)
    call tail not_1 (env_2404, x_5572)
fun idFromWord8_1 (env_2405: unit, x_5573: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_5927 ()
  block L_5927 ()
    return (x_5573)
fun toWord_1 (env_2406: unit, x_5574: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_5928 ()
  block L_5928 ()
    val x_5575: word64 = prim IntInf_toWord (x_5574)
    return (x_5575)
fun fromWord_3 (env_2407: unit, x_5576: word64):
  {returns = Some (intInf), raises = Some (exn)} =
L_5929 ()
  block L_5929 ()
    val x_5577: intInf = prim Word_toIntInf (x_5576)
    return (x_5577)
fun print_1 (env_2408: unit, x_5578: (word8) vector):
  {returns = Some (unit), raises = Some (exn)} =
L_5930 ()
  block L_5930 ()
    val x_5579: unit =
      prim CFunction {args = ((word8) vector),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Objptr), res = None},
                      return = unit,
                      symbolScope = private,
                      target = Stdio_print} (x_5578)
    return (x_5579)
fun atomicEnd_1 (env_2409: unit, x_5580: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5931 ()
  block L_5931 ()
    case atomicState_0 (*con atomic ... _192)*) of
      atomicStateEnv_0 => L_5932
  block L_5932 (env_2410: unit)
    call L_5933 (atomicState_1 (env_2410, x_194 (*()*))) handle _ => raise
  block L_5933 (x_5581: word32)
    val x_5582: (word32, word32) tuple = (x_5581, x_195 (*0x0:w32*))
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_5934
  block L_5934 (env_2411: unit)
    call L_5935 (x_2049 (env_2411, x_5582)) handle _ => raise
  block L_5935 (x_5583: bool)
    case x_5583 of
      true => L_5937 | false => L_5936
  block L_5936 ()
    val x_5584: unit = prim Thread_atomicEnd ()
    return (x_5584)
  block L_5937 ()
    raise (x_198 (*con Fail8_0 (x_197)*))
fun atomicBegin_1 (env_2412: unit, x_5585: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_5938 ()
  block L_5938 ()
    val x_5586: unit = prim Thread_atomicBegin ()
    return (x_5586)
fun atomicState_1 (env_2413: unit, x_5587: unit):
  {returns = Some (word32), raises = Some (exn)} =
L_5939 ()
  block L_5939 ()
    val x_5588: word32 = prim Thread_atomicState ()
    return (x_5588)
fun fromWord_2 (env_2414: unit, x_5589: word64):
  {returns = Some (cpointer), raises = Some (exn)} =
L_5940 ()
  block L_5940 ()
    val x_5590: cpointer = prim CPointer_fromWord (x_5589)
    return (x_5590)
fun bug_1 (env_2415: unit, x_5591: (word8) vector):
  {returns = Some (unit), raises = Some (exn)} =
L_5941 ()
  block L_5941 ()
    val _: unit = prim MLton_bug (x_5591)
    bug
fun gcState_1 (env_2416: unit, x_5592: unit):
  {returns = Some (cpointer), raises = Some (exn)} =
L_5942 ()
  block L_5942 ()
    val x_5593: cpointer = prim GC_state ()
    return (x_5593)
fun x_2541 (env_2417: unit, x_5594: ((word8) vector, word64) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_5943 ()
  block L_5943 ()
    val x_5596: word64 = #1 (x_5594)
    val x_5597: (word8) vector = #0 (x_5594)
    val x_5595: word8 = prim Vector_sub[word8] (x_5597, x_5596)
    return (x_5595)
fun x_2416 (env_2418: unit, x_5598: (word8) vector):
  {returns = Some (word64), raises = Some (exn)} =
L_5944 ()
  block L_5944 ()
    val x_5599: word64 = prim Vector_length[word8] (x_5598)
    return (x_5599)
fun x_1790 (env_2419: unit, x_5600: (word8) array):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_5945 ()
  block L_5945 ()
    val x_5601: (word8) vector = prim Array_toVector[word8] (x_5600)
    return (x_5601)
fun x_2544 (env_2420: unit, x_5602: ((word8) array, word64, word8) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5946 ()
  block L_5946 ()
    val x_5604: word8 = #2 (x_5602)
    val x_5605: word64 = #1 (x_5602)
    val x_5606: (word8) array = #0 (x_5602)
    val x_5603: unit = prim Array_update[word8] (x_5606, x_5605, x_5604)
    return (x_5603)
fun x_2444 (env_2421: unit, x_5607: (word8) array):
  {returns = Some (word64), raises = Some (exn)} =
L_5947 ()
  block L_5947 ()
    val x_5608: word64 = prim Array_length[word8] (x_5607)
    return (x_5608)
fun x_2456 (env_2422: unit,
            x_5609:
              ((word8) array, word64, (word8) vector, word64, word64) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_5948 ()
  block L_5948 ()
    val x_5611: word64 = #4 (x_5609)
    val x_5612: word64 = #3 (x_5609)
    val x_5613: (word8) vector = #2 (x_5609)
    val x_5614: word64 = #1 (x_5609)
    val x_5615: (word8) array = #0 (x_5609)
    val x_5610: unit =
      prim Array_copyVector[word8] (x_5615, x_5614, x_5613, x_5612, x_5611)
    return (x_5610)
fun x_5322 (env_2423: unit, x_5616: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_5949 ()
  block L_5949 ()
    val x_5617: (word8) array = prim Array_alloc[word8] (x_5616)
    return (x_5617)
fun x_2902 (env_2424: unit, x_5618: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_5950 ()
  block L_5950 ()
    return (x_5618)
fun >=_7 (env_2425: unit, x_5619: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5951 ()
  block L_5951 ()
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5952
  block L_5952 (env_2426: unit)
    call L_5953 (<_7 (env_2426, x_5619)) handle _ => raise
  block L_5953 (x_5620: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5954
  block L_5954 (env_2427: unit)
    call tail not_1 (env_2427, x_5620)
fun >_6 (env_2428: unit, x_5621: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5955 ()
  block L_5955 ()
    val b_37: word64 = #1 (x_5621)
    val a_15: word64 = #0 (x_5621)
    val x_5622: (word64, word64) tuple = (b_37, a_15)
    case <_2 (*con <Env_2 (x_171)*) of
      <Env_2 => L_5956
  block L_5956 (env_2429: unit)
    call tail <_7 (env_2429, x_5622)
fun <_7 (env_2430: unit, x_5623: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5957 ()
  block L_5957 ()
    val x_5625: word64 = #1 (x_5623)
    val x_5626: word64 = #0 (x_5623)
    val x_5624: bool = prim WordS64_lt (x_5626, x_5625)
    return (x_5624)
fun x_2290 (env_2431: unit, x_5627: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5958 ()
  block L_5958 ()
    case -!_1 (*con -!Env_1 (x_168)*) of
      -!Env_1 => L_5959
  block L_5959 (env_2432: unit)
    call L_5960 (-!_2 (env_2432, x_5627)) handle _ => raise
  block L_5960 (r_2: word64)
    val x_5629: word64 = #1 (x_5627)
    val x_5630: word64 = #0 (x_5627)
    val x_5628: bool = prim WordS64_subCheckP (x_5630, x_5629)
    case x_5628 of
      true => L_5962 | false => L_5961
  block L_5961 ()
    return (r_2)
  block L_5962 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun -!_2 (env_2433: unit, x_5631: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5963 ()
  block L_5963 ()
    val x_5633: word64 = #1 (x_5631)
    val x_5634: word64 = #0 (x_5631)
    val x_5632: word64 = prim Word64_sub (x_5634, x_5633)
    return (x_5632)
fun x_1588 (env_2434: unit, x_5635: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_5964 ()
  block L_5964 ()
    case ~!_1 (*con ~!Env_1 (x_165)*) of
      ~!Env_1 => L_5965
  block L_5965 (env_2435: unit)
    call L_5966 (~!_3 (env_2435, x_5635)) handle _ => raise
  block L_5966 (r_3: word64)
    val x_5636: bool = prim WordS64_negCheckP (x_5635)
    case x_5636 of
      true => L_5968 | false => L_5967
  block L_5967 ()
    return (r_3)
  block L_5968 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun ~!_3 (env_2436: unit, x_5637: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_5969 ()
  block L_5969 ()
    val x_5638: word64 = prim Word64_neg (x_5637)
    return (x_5638)
fun x_3165 (env_2437: unit, x_5639: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5970 ()
  block L_5970 ()
    case +!_1 (*con +!Env_1 (x_162)*) of
      +!Env_1 => L_5971
  block L_5971 (env_2438: unit)
    call L_5972 (+!_2 (env_2438, x_5639)) handle _ => raise
  block L_5972 (r_4: word64)
    val x_5641: word64 = #1 (x_5639)
    val x_5642: word64 = #0 (x_5639)
    val x_5640: bool = prim WordS64_addCheckP (x_5642, x_5641)
    case x_5640 of
      true => L_5974 | false => L_5973
  block L_5973 ()
    return (r_4)
  block L_5974 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun +!_2 (env_2439: unit, x_5643: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_5975 ()
  block L_5975 ()
    val x_5645: word64 = #1 (x_5643)
    val x_5646: word64 = #0 (x_5643)
    val x_5644: word64 = prim Word64_add (x_5646, x_5645)
    return (x_5644)
fun >=_6 (env_2440: unit, x_5647: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5976 ()
  block L_5976 ()
    val b_38: word32 = #1 (x_5647)
    val a_16: word32 = #0 (x_5647)
    val x_5648: (word32, word32) tuple = (b_38, a_16)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_5977
  block L_5977 (env_2441: unit)
    call tail <=_4 (env_2441, x_5648)
fun >_9 (env_2442: unit, x_5649: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5978 ()
  block L_5978 ()
    val b_39: word32 = #1 (x_5649)
    val a_17: word32 = #0 (x_5649)
    val x_5650: (word32, word32) tuple = (b_39, a_17)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5979
  block L_5979 (env_2443: unit)
    call tail <_5 (env_2443, x_5650)
fun <=_4 (env_2444: unit, x_5651: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5980 ()
  block L_5980 ()
    val b_40: word32 = #1 (x_5651)
    val a_18: word32 = #0 (x_5651)
    val x_5652: (word32, word32) tuple = (b_40, a_18)
    case <_1 (*con <Env_1 (x_161)*) of
      <Env_1 => L_5981
  block L_5981 (env_2445: unit)
    call L_5982 (<_5 (env_2445, x_5652)) handle _ => raise
  block L_5982 (x_5653: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_5983
  block L_5983 (env_2446: unit)
    call tail not_1 (env_2446, x_5653)
fun <_5 (env_2447: unit, x_5654: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_5984 ()
  block L_5984 ()
    val x_5656: word32 = #1 (x_5654)
    val x_5657: word32 = #0 (x_5654)
    val x_5655: bool = prim WordS32_lt (x_5657, x_5656)
    return (x_5655)
fun remUnsafe_1 (env_2448: unit, x_5658: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5985 ()
  block L_5985 ()
    val x_5660: word32 = #1 (x_5658)
    val x_5661: word32 = #0 (x_5658)
    val x_5659: word32 = prim WordS32_rem (x_5661, x_5660)
    return (x_5659)
fun x_1780 (env_2449: unit, x_5662: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5986 ()
  block L_5986 ()
    case -!_0 (*con -!Env_0 (x_157)*) of
      -!Env_0 => L_5987
  block L_5987 (env_2450: unit)
    call L_5988 (-!_3 (env_2450, x_5662)) handle _ => raise
  block L_5988 (r_5: word32)
    val x_5664: word32 = #1 (x_5662)
    val x_5665: word32 = #0 (x_5662)
    val x_5663: bool = prim WordS32_subCheckP (x_5665, x_5664)
    case x_5663 of
      true => L_5990 | false => L_5989
  block L_5989 ()
    return (r_5)
  block L_5990 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun -!_3 (env_2451: unit, x_5666: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5991 ()
  block L_5991 ()
    val x_5668: word32 = #1 (x_5666)
    val x_5669: word32 = #0 (x_5666)
    val x_5667: word32 = prim Word32_sub (x_5669, x_5668)
    return (x_5667)
fun x_2766 (env_2452: unit, x_5670: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_5992 ()
  block L_5992 ()
    case ~!_0 (*con ~!Env_0 (x_154)*) of
      ~!Env_0 => L_5993
  block L_5993 (env_2453: unit)
    call L_5994 (~!_2 (env_2453, x_5670)) handle _ => raise
  block L_5994 (r_6: word32)
    val x_5671: bool = prim WordS32_negCheckP (x_5670)
    case x_5671 of
      true => L_5996 | false => L_5995
  block L_5995 ()
    return (r_6)
  block L_5996 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun ~!_2 (env_2454: unit, x_5672: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_5997 ()
  block L_5997 ()
    val x_5673: word32 = prim Word32_neg (x_5672)
    return (x_5673)
fun x_1623 (env_2455: unit, x_5674: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_5998 ()
  block L_5998 ()
    case +!_0 (*con +!Env_0 (x_151)*) of
      +!Env_0 => L_5999
  block L_5999 (env_2456: unit)
    call L_6000 (+!_3 (env_2456, x_5674)) handle _ => raise
  block L_6000 (r_7: word32)
    val x_5676: word32 = #1 (x_5674)
    val x_5677: word32 = #0 (x_5674)
    val x_5675: bool = prim WordS32_addCheckP (x_5677, x_5676)
    case x_5675 of
      true => L_6002 | false => L_6001
  block L_6001 ()
    return (r_7)
  block L_6002 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun +!_3 (env_2457: unit, x_5678: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6003 ()
  block L_6003 ()
    val x_5680: word32 = #1 (x_5678)
    val x_5681: word32 = #0 (x_5678)
    val x_5679: word32 = prim Word32_add (x_5681, x_5680)
    return (x_5679)
fun >>?_4 (env_2458: unit, x_5682: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6004 ()
  block L_6004 ()
    val x_5684: word32 = #1 (x_5682)
    val x_5685: word64 = #0 (x_5682)
    val x_5683: word64 = prim WordU64_rshift (x_5685, x_5684)
    return (x_5683)
fun ~>>?_1 (env_2459: unit, x_5686: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6005 ()
  block L_6005 ()
    val x_5688: word32 = #1 (x_5686)
    val x_5689: word64 = #0 (x_5686)
    val x_5687: word64 = prim WordS64_rshift (x_5689, x_5688)
    return (x_5687)
fun notb_7 (env_2460: unit, x_5690: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6006 ()
  block L_6006 ()
    val x_5691: word64 = prim Word64_notb (x_5690)
    return (x_5691)
fun *_1 (env_2461: unit, x_5692: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6007 ()
  block L_6007 ()
    val x_5694: word64 = #1 (x_5692)
    val x_5695: word64 = #0 (x_5692)
    val x_5693: word64 = prim WordU64_mul (x_5695, x_5694)
    return (x_5693)
fun <<?_4 (env_2462: unit, x_5696: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6008 ()
  block L_6008 ()
    val x_5698: word32 = #1 (x_5696)
    val x_5699: word64 = #0 (x_5696)
    val x_5697: word64 = prim Word64_lshift (x_5699, x_5698)
    return (x_5697)
fun andb_2 (env_2463: unit, x_5700: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6009 ()
  block L_6009 ()
    val x_5702: word64 = #1 (x_5700)
    val x_5703: word64 = #0 (x_5700)
    val x_5701: word64 = prim Word64_andb (x_5703, x_5702)
    return (x_5701)
fun +_5 (env_2464: unit, x_5704: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_6010 ()
  block L_6010 ()
    val x_5706: word64 = #1 (x_5704)
    val x_5707: word64 = #0 (x_5704)
    val x_5705: word64 = prim Word64_add (x_5707, x_5706)
    return (x_5705)
fun >=_10 (env_2465: unit, x_5708: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6011 ()
  block L_6011 ()
    case <_0 (*con <Env_0 (x_143)*) of
      <Env_0 => L_6012
  block L_6012 (env_2466: unit)
    call L_6013 (<_6 (env_2466, x_5708)) handle _ => raise
  block L_6013 (x_5709: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6014
  block L_6014 (env_2467: unit)
    call tail not_1 (env_2467, x_5709)
fun <_6 (env_2468: unit, x_5710: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6015 ()
  block L_6015 ()
    val x_5712: word32 = #1 (x_5710)
    val x_5713: word32 = #0 (x_5710)
    val x_5711: bool = prim WordU32_lt (x_5713, x_5712)
    return (x_5711)
fun xorb_1 (env_2469: unit, x_5714: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6016 ()
  block L_6016 ()
    val x_5716: word32 = #1 (x_5714)
    val x_5717: word32 = #0 (x_5714)
    val x_5715: word32 = prim Word32_xorb (x_5717, x_5716)
    return (x_5715)
fun -_3 (env_2470: unit, x_5718: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6017 ()
  block L_6017 ()
    val x_5720: word32 = #1 (x_5718)
    val x_5721: word32 = #0 (x_5718)
    val x_5719: word32 = prim Word32_sub (x_5721, x_5720)
    return (x_5719)
fun >>?_5 (env_2471: unit, x_5722: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6018 ()
  block L_6018 ()
    val x_5724: word32 = #1 (x_5722)
    val x_5725: word32 = #0 (x_5722)
    val x_5723: word32 = prim WordU32_rshift (x_5725, x_5724)
    return (x_5723)
fun notb_6 (env_2472: unit, x_5726: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6019 ()
  block L_6019 ()
    val x_5727: word32 = prim Word32_notb (x_5726)
    return (x_5727)
fun <<?_5 (env_2473: unit, x_5728: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6020 ()
  block L_6020 ()
    val x_5730: word32 = #1 (x_5728)
    val x_5731: word32 = #0 (x_5728)
    val x_5729: word32 = prim Word32_lshift (x_5731, x_5730)
    return (x_5729)
fun andb_3 (env_2474: unit, x_5732: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_6021 ()
  block L_6021 ()
    val x_5734: word32 = #1 (x_5732)
    val x_5735: word32 = #0 (x_5732)
    val x_5733: word32 = prim Word32_andb (x_5735, x_5734)
    return (x_5733)
fun >>?_6 (env_2475: unit, x_5736: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_6022 ()
  block L_6022 ()
    val x_5738: word32 = #1 (x_5736)
    val x_5739: word16 = #0 (x_5736)
    val x_5737: word16 = prim WordU16_rshift (x_5739, x_5738)
    return (x_5737)
fun notb_5 (env_2476: unit, x_5740: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_6023 ()
  block L_6023 ()
    val x_5741: word16 = prim Word16_notb (x_5740)
    return (x_5741)
fun <<?_6 (env_2477: unit, x_5742: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_6024 ()
  block L_6024 ()
    val x_5744: word32 = #1 (x_5742)
    val x_5745: word16 = #0 (x_5742)
    val x_5743: word16 = prim Word16_lshift (x_5745, x_5744)
    return (x_5743)
fun >>?_7 (env_2478: unit, x_5746: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_6025 ()
  block L_6025 ()
    val x_5748: word32 = #1 (x_5746)
    val x_5749: word8 = #0 (x_5746)
    val x_5747: word8 = prim WordU8_rshift (x_5749, x_5748)
    return (x_5747)
fun notb_4 (env_2479: unit, x_5750: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_6026 ()
  block L_6026 ()
    val x_5751: word8 = prim Word8_notb (x_5750)
    return (x_5751)
fun <<?_7 (env_2480: unit, x_5752: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_6027 ()
  block L_6027 ()
    val x_5754: word32 = #1 (x_5752)
    val x_5755: word8 = #0 (x_5752)
    val x_5753: word8 = prim Word8_lshift (x_5755, x_5754)
    return (x_5753)
fun sextdFromInt64ToInt64_1 (env_2481: unit, x_5756: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6028 ()
  block L_6028 ()
    return (x_5756)
fun sextdFromInt64ToInt32_1 (env_2482: unit, x_5757: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_6029 ()
  block L_6029 ()
    val x_5758: word32 = prim WordS64_extdToWord32 (x_5757)
    return (x_5758)
fun sextdFromInt32ToWord64_1 (env_2483: unit, x_5759: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6030 ()
  block L_6030 ()
    val x_5760: word64 = prim WordS32_extdToWord64 (x_5759)
    return (x_5760)
fun sextdFromInt32ToWord32_1 (env_2484: unit, x_5761: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6031 ()
  block L_6031 ()
    return (x_5761)
fun sextdFromInt32ToInt64_1 (env_2485: unit, x_5762: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6032 ()
  block L_6032 ()
    val x_5763: word64 = prim WordS32_extdToWord64 (x_5762)
    return (x_5763)
fun sextdFromInt32ToInt32_1 (env_2486: unit, x_5764: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6033 ()
  block L_6033 ()
    return (x_5764)
fun sextdFromInt16ToInt64_1 (env_2487: unit, x_5765: word16):
  {returns = Some (word64), raises = Some (exn)} =
L_6034 ()
  block L_6034 ()
    val x_5766: word64 = prim WordS16_extdToWord64 (x_5765)
    return (x_5766)
fun sextdFromInt8ToInt64_1 (env_2488: unit, x_5767: word8):
  {returns = Some (word64), raises = Some (exn)} =
L_6035 ()
  block L_6035 ()
    val x_5768: word64 = prim WordS8_extdToWord64 (x_5767)
    return (x_5768)
fun zextdFromWord64ToInt64_1 (env_2489: unit, x_5769: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6036 ()
  block L_6036 ()
    return (x_5769)
fun zextdFromWord64ToInt32_1 (env_2490: unit, x_5770: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_6037 ()
  block L_6037 ()
    val x_5771: word32 = prim WordU64_extdToWord32 (x_5770)
    return (x_5771)
fun zextdFromWord32ToWord64_1 (env_2491: unit, x_5772: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6038 ()
  block L_6038 ()
    val x_5773: word64 = prim WordU32_extdToWord64 (x_5772)
    return (x_5773)
fun zextdFromWord32ToWord32_1 (env_2492: unit, x_5774: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6039 ()
  block L_6039 ()
    return (x_5774)
fun zextdFromInt64ToWord64_1 (env_2493: unit, x_5775: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6040 ()
  block L_6040 ()
    return (x_5775)
fun zextdFromInt32ToWord64_1 (env_2494: unit, x_5776: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6041 ()
  block L_6041 ()
    val x_5777: word64 = prim WordU32_extdToWord64 (x_5776)
    return (x_5777)
fun zextdFromInt32ToWord32_1 (env_2495: unit, x_5778: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6042 ()
  block L_6042 ()
    return (x_5778)
fun zextdFromInt32ToInt64_1 (env_2496: unit, x_5779: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_6043 ()
  block L_6043 ()
    val x_5780: word64 = prim WordU32_extdToWord64 (x_5779)
    return (x_5780)
fun zextdFromInt32ToInt32_1 (env_2497: unit, x_5781: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6044 ()
  block L_6044 ()
    return (x_5781)
fun zextdFromInt32ToInt16_1 (env_2498: unit, x_5782: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_6045 ()
  block L_6045 ()
    val x_5783: word16 = prim WordU32_extdToWord16 (x_5782)
    return (x_5783)
fun zextdFromInt32ToInt8_1 (env_2499: unit, x_5784: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_6046 ()
  block L_6046 ()
    val x_5785: word8 = prim WordU32_extdToWord8 (x_5784)
    return (x_5785)
fun idFromWord64ToInt64_1 (env_2500: unit, x_5786: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6047 ()
  block L_6047 ()
    return (x_5786)
fun idFromWord32ToInt32_1 (env_2501: unit, x_5787: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6048 ()
  block L_6048 ()
    return (x_5787)
fun idFromWord16ToInt16_1 (env_2502: unit, x_5788: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_6049 ()
  block L_6049 ()
    return (x_5788)
fun idFromWord8ToInt8_1 (env_2503: unit, x_5789: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_6050 ()
  block L_6050 ()
    return (x_5789)
fun idFromInt64ToWord64_1 (env_2504: unit, x_5790: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_6051 ()
  block L_6051 ()
    return (x_5790)
fun idFromInt32ToWord32_1 (env_2505: unit, x_5791: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_6052 ()
  block L_6052 ()
    return (x_5791)
fun idFromInt16ToWord16_1 (env_2506: unit, x_5792: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_6053 ()
  block L_6053 ()
    return (x_5792)
fun idFromInt8ToWord8_1 (env_2507: unit, x_5793: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_6054 ()
  block L_6054 ()
    return (x_5793)
fun x_5288 (env_2508: unit, x_5794: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6055 ()
  block L_6055 ()
    case x_97 (*con xEnv_15 (x_96)*) of
      xEnv_15 => L_6056
  block L_6056 (env_2509: unit)
    call L_6057 (x_2295 (env_2509, x_5794)) handle _ => raise
  block L_6057 (x_5795: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6058
  block L_6058 (env_2510: unit)
    call tail not_1 (env_2510, x_5795)
fun x_1494 (env_2511: unit, x_5796: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6059 ()
  block L_6059 ()
    case x_95 (*con xEnv_14 (x_94)*) of
      xEnv_14 => L_6060
  block L_6060 (env_2512: unit)
    call L_6061 (x_2049 (env_2512, x_5796)) handle _ => raise
  block L_6061 (x_5797: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_6062
  block L_6062 (env_2513: unit)
    call tail not_1 (env_2513, x_5797)
fun x_2558 (env_2514: unit, x_5798: (word8, word8) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6063 ()
  block L_6063 ()
    val x_5800: word8 = #1 (x_5798)
    val x_5801: word8 = #0 (x_5798)
    val x_5799: bool = prim MLton_equal[word8] (x_5801, x_5800)
    return (x_5799)
fun x_2295 (env_2515: unit, x_5802: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6064 ()
  block L_6064 ()
    val x_5804: word64 = #1 (x_5802)
    val x_5805: word64 = #0 (x_5802)
    val x_5803: bool = prim MLton_equal[word64] (x_5805, x_5804)
    return (x_5803)
fun x_2049 (env_2516: unit, x_5806: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6065 ()
  block L_6065 ()
    val x_5808: word32 = #1 (x_5806)
    val x_5809: word32 = #0 (x_5806)
    val x_5807: bool = prim MLton_equal[word32] (x_5809, x_5808)
    return (x_5807)
fun x_2832 (env_2517: unit, x_5810: (t_0, t_0) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_6066 ()
  block L_6066 ()
    val x_5812: t_0 = #1 (x_5810)
    val x_5813: t_0 = #0 (x_5810)
    val x_5811: bool = prim MLton_equal[t_0] (x_5813, x_5812)
    return (x_5811)
fun x_2682 (env_2518: unit, x_5814: ((bool) ref, bool) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_6067 ()
  block L_6067 ()
    val x_5816: bool = #1 (x_5814)
    val x_5817: (bool) ref = #0 (x_5814)
    val x_5815: unit = prim Ref_assign[bool] (x_5817, x_5816)
    return (x_5815)
fun x_3168 (env_2519: unit, x_5818: ((word64) ref, word64) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_6068 ()
  block L_6068 ()
    val x_5820: word64 = #1 (x_5818)
    val x_5821: (word64) ref = #0 (x_5818)
    val x_5819: unit = prim Ref_assign[word64] (x_5821, x_5820)
    return (x_5819)
fun x_2464 (env_2520: unit, x_5822: ((word32) ref, word32) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_6069 ()
  block L_6069 ()
    val x_5824: word32 = #1 (x_5822)
    val x_5825: (word32) ref = #0 (x_5822)
    val x_5823: unit = prim Ref_assign[word32] (x_5825, x_5824)
    return (x_5823)
fun x_2630 (env_2521: unit, x_5826: (bool) ref):
  {returns = Some (bool), raises = Some (exn)} =
L_6070 ()
  block L_6070 ()
    val x_5827: bool = prim Ref_deref[bool] (x_5826)
    return (x_5827)
fun x_1792 (env_2522: unit, x_5828: (list_0) ref):
  {returns = Some (list_0), raises = Some (exn)} =
L_6071 ()
  block L_6071 ()
    val x_5829: list_0 = prim Ref_deref[list_0] (x_5828)
    return (x_5829)
fun x_2409 (env_2523: unit, x_5830: (bufferMode_0) ref):
  {returns = Some (bufferMode_0), raises = Some (exn)} =
L_6072 ()
  block L_6072 ()
    val x_5831: bufferMode_0 = prim Ref_deref[bufferMode_0] (x_5830)
    return (x_5831)
fun x_3161 (env_2524: unit, x_5832: (word64) ref):
  {returns = Some (word64), raises = Some (exn)} =
L_6073 ()
  block L_6073 ()
    val x_5833: word64 = prim Ref_deref[word64] (x_5832)
    return (x_5833)
fun x_2415 (env_2525: unit, x_5834: (word32) ref):
  {returns = Some (word32), raises = Some (exn)} =
L_6074 ()
  block L_6074 ()
    val x_5835: word32 = prim Ref_deref[word32] (x_5834)
    return (x_5835)
fun x_2406 (env_2526: unit, x_5836: (state_0) ref):
  {returns = Some (state_0), raises = Some (exn)} =
L_6075 ()
  block L_6075 ()
    val x_5837: state_0 = prim Ref_deref[state_0] (x_5836)
    return (x_5837)
fun x_2379 (env_2527: unit, x_5838: (list_5) ref):
  {returns = Some (list_5), raises = Some (exn)} =
L_6076 ()
  block L_6076 ()
    val x_5839: list_5 = prim Ref_deref[list_5] (x_5838)
    return (x_5839)
fun x_2311 (env_2528: unit, x_5840: (list_2) ref):
  {returns = Some (list_2), raises = Some (exn)} =
L_6077 ()
  block L_6077 ()
    val x_5841: list_2 = prim Ref_deref[list_2] (x_5840)
    return (x_5841)
fun name_1 (env_2529: unit, x_5842: exn):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_6078 ()
  block L_6078 ()
    case x_5842 of
      UNKNOWN_0 => L_6123
    | Poll_0 => L_6122
    | DoublyRedirected_0 => L_6121
    | MisuseOfForget_0 => L_6120
    | Interrupt_0 => L_6119
    | Io_1 => L_6118
    | Ord_0 => L_6117
    | Ln_0 => L_6116
    | Sqrt_0 => L_6115
    | InvalidArc_0 => L_6114
    | Path_0 => L_6113
    | RandomAccessNotSupported_0 => L_6112
    | NonblockingNotSupported_0 => L_6111
    | Io_0 => L_6110
    | ClosedStream_0 => L_6109
    | BlockingNotSupported_0 => L_6108
    | Date_0 => L_6107
    | Time_0 => L_6106
    | Bad_1 => L_6105
    | Bad_0 => L_6104
    | Unordered_0 => L_6103
    | SysErr_0 => L_6102
    | UnequalLengths_0 => L_6101
    | Empty_0 => L_6100
    | Option_0 => L_6099
    | Fail_0 => L_6098
    | Chr_0 => L_6097
    | CreateVectorNotFull_1 => L_6096
    | CreateAlreadyGotVector_1 => L_6095
    | Vector_updateUnsafe_0 => L_6094
    | Vector_uninitUnsafe_0 => L_6093
    | Vector_uninitIsNop_0 => L_6092
    | CreateVectorNotFull_0 => L_6091
    | CreateAlreadyGotVector_0 => L_6090
    | Subscript_0 => L_6089
    | Span_0 => L_6088
    | Size_0 => L_6087
    | Overflow_0 => L_6086
    | Fail32_0 => L_6085
    | Fail16_0 => L_6084
    | Fail8_0 => L_6083
    | Domain_0 => L_6082
    | Div_0 => L_6081
    | Match_0 => L_6080
    | Bind_0 => L_6079
  block L_6079 (x_5843: (unit) ref)
    return (x_52 (*"Bind"*))
  block L_6080 (x_5844: (unit) ref)
    return (x_51 (*"Match"*))
  block L_6081 (x_5845: (unit) ref)
    return (x_50 (*"Div"*))
  block L_6082 (x_5846: (unit) ref)
    return (x_49 (*"Domain"*))
  block L_6083 (x_5847: ((unit) ref, (word8) vector) tuple)
    return (x_48 (*"Fail8"*))
  block L_6084 (x_5848: ((unit) ref, (word16) vector) tuple)
    return (x_47 (*"Fail16"*))
  block L_6085 (x_5849: ((unit) ref, (word32) vector) tuple)
    return (x_46 (*"Fail32"*))
  block L_6086 (x_5850: (unit) ref)
    return (x_45 (*"Overflow"*))
  block L_6087 (x_5851: (unit) ref)
    return (x_44 (*"Size"*))
  block L_6088 (x_5852: (unit) ref)
    return (x_43 (*"Span"*))
  block L_6089 (x_5853: (unit) ref)
    return (x_42 (*"Subscript"*))
  block L_6090 (x_5854: (unit) ref)
    return (x_41 (*"CreateAlr ... ctor"*))
  block L_6091 (x_5855: (unit) ref)
    return (x_40 (*"CreateVec ... Full"*))
  block L_6092 (x_5856: (unit) ref)
    return (x_39 (*"Vector_uninitIsNop"*))
  block L_6093 (x_5857: (unit) ref)
    return (x_38 (*"Vector_un ... safe"*))
  block L_6094 (x_5858: (unit) ref)
    return (x_37 (*"Vector_up ... safe"*))
  block L_6095 (x_5859: (unit) ref)
    return (x_36 (*"CreateAlr ... ctor"*))
  block L_6096 (x_5860: (unit) ref)
    return (x_35 (*"CreateVec ... Full"*))
  block L_6097 (x_5861: (unit) ref)
    return (x_34 (*"Chr"*))
  block L_6098 (x_5862: ((unit) ref, (word8) vector) tuple)
    return (x_33 (*"Fail"*))
  block L_6099 (x_5863: (unit) ref)
    return (x_32 (*"Option"*))
  block L_6100 (x_5864: (unit) ref)
    return (x_31 (*"Empty"*))
  block L_6101 (x_5865: (unit) ref)
    return (x_30 (*"UnequalLengths"*))
  block L_6102 (x_5866: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    return (x_29 (*"SysErr"*))
  block L_6103 (x_5867: (unit) ref)
    return (x_28 (*"Unordered"*))
  block L_6104 (x_5868: (unit) ref)
    return (x_27 (*"Bad"*))
  block L_6105 (x_5869: (unit) ref)
    return (x_26 (*"Bad"*))
  block L_6106 (x_5870: (unit) ref)
    return (x_25 (*"Time"*))
  block L_6107 (x_5871: (unit) ref)
    return (x_24 (*"Date"*))
  block L_6108 (x_5872: (unit) ref)
    return (x_23 (*"BlockingN ... rted"*))
  block L_6109 (x_5873: (unit) ref)
    return (x_22 (*"ClosedStream"*))
  block L_6110 (x_5874:
                  ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
    return (x_21 (*"Io"*))
  block L_6111 (x_5875: (unit) ref)
    return (x_20 (*"Nonblocki ... rted"*))
  block L_6112 (x_5876: (unit) ref)
    return (x_19 (*"RandomAcc ... rted"*))
  block L_6113 (x_5877: (unit) ref)
    return (x_18 (*"Path"*))
  block L_6114 (x_5878: (unit) ref)
    return (x_17 (*"InvalidArc"*))
  block L_6115 (x_5879: (unit) ref)
    return (x_16 (*"Sqrt"*))
  block L_6116 (x_5880: (unit) ref)
    return (x_15 (*"Ln"*))
  block L_6117 (x_5881: (unit) ref)
    return (x_14 (*"Ord"*))
  block L_6118 (x_5882: ((unit) ref, (word8) vector) tuple)
    return (x_13 (*"Io"*))
  block L_6119 (x_5883: (unit) ref)
    return (x_12 (*"Interrupt"*))
  block L_6120 (x_5884: (unit) ref)
    return (x_11 (*"MisuseOfForget"*))
  block L_6121 (x_5885: (unit) ref)
    return (x_10 (*"DoublyRedirected"*))
  block L_6122 (x_5886: (unit) ref)
    return (x_9 (*"Poll"*))
  block L_6123 (x_5887: (unit) ref)
    return (x_8 (*"UNKNOWN"*))
fun not_1 (env_2530: unit, x_5888: bool):
  {returns = Some (bool), raises = Some (exn)} =
L_6124 ()
  block L_6124 ()
    case x_5888 of
      true => L_6126 | false => L_6125
  block L_6125 ()
    return (x_7 (*con true*))
  block L_6126 ()
    return (x_6 (*con false*))
fun x_2521 (env_2531: unit, x_5889: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_6127 ()
  block L_6127 ()
    val _: unit = prim MLton_bug (x_3 (*"toplevel  ... lled"*))
    bug
fun x_2525 (env_2532: unit, x_5890: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_6128 ()
  block L_6128 ()
    val _: unit = prim MLton_bug (x_0 (*"toplevel  ... lled"*))
    bug


(* Main: *) main_0
