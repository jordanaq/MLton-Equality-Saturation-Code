(* MLton 20210117 on-20210117-release *)


(* Datatypes: *)
datatype exn = UNKNOWN_0 of ((unit) ref)
             | Poll_0 of ((unit) ref)
             | DoublyRedirected_0 of ((unit) ref)
             | MisuseOfForget_0 of ((unit) ref)
             | Interrupt_0 of ((unit) ref)
             | Io_1 of (((unit) ref, (word8) vector) tuple)
             | Ord_0 of ((unit) ref)
             | Ln_0 of ((unit) ref)
             | Sqrt_0 of ((unit) ref)
             | InvalidArc_0 of ((unit) ref)
             | Path_0 of ((unit) ref)
             | RandomAccessNotSupported_0 of ((unit) ref)
             | NonblockingNotSupported_0 of ((unit) ref)
             | Io_0 of (((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
             | ClosedStream_0 of ((unit) ref)
             | BlockingNotSupported_0 of ((unit) ref)
             | Date_0 of ((unit) ref)
             | Time_0 of ((unit) ref)
             | Bad_1 of ((unit) ref)
             | Bad_0 of ((unit) ref)
             | Unordered_0 of ((unit) ref)
             | SysErr_0 of (((unit) ref, ((word8) vector, t_0) tuple) tuple)
             | UnequalLengths_0 of ((unit) ref)
             | Empty_0 of ((unit) ref)
             | Option_0 of ((unit) ref)
             | Fail_0 of (((unit) ref, (word8) vector) tuple)
             | Chr_0 of ((unit) ref)
             | CreateVectorNotFull_1 of ((unit) ref)
             | CreateAlreadyGotVector_1 of ((unit) ref)
             | Vector_updateUnsafe_0 of ((unit) ref)
             | Vector_uninitUnsafe_0 of ((unit) ref)
             | Vector_uninitIsNop_0 of ((unit) ref)
             | CreateVectorNotFull_0 of ((unit) ref)
             | CreateAlreadyGotVector_0 of ((unit) ref)
             | Subscript_0 of ((unit) ref)
             | Span_0 of ((unit) ref)
             | Size_0 of ((unit) ref)
             | Overflow_0 of ((unit) ref)
             | Fail32_0 of (((unit) ref, (word32) vector) tuple)
             | Fail16_0 of (((unit) ref, (word16) vector) tuple)
             | Fail8_0 of (((unit) ref, (word8) vector) tuple)
             | Domain_0 of ((unit) ref)
             | Div_0 of ((unit) ref)
             | Match_0 of ((unit) ref)
             | Bind_0 of ((unit) ref)
datatype bool = false | true
datatype t_0 = NONE_1 | SOME_0 of (word32)
datatype ans_0 = Big_0 of ((bool, bool, word8) tuple) | Small_0 of (word64)
datatype ans_1 = Big_1 of ((bool, bool, word16) tuple) | Small_1 of (word64)
datatype ans_2 = Big_2 of ((bool, bool, word32) tuple) | Small_2 of (word64)
datatype ans_3 = Big_3 of ((bool, bool, word64) tuple) | Small_3 of (word64)
datatype t_1 = NONE_3 | SOME_1 of ((word8) vector)
datatype list_0 = nil_1 | ::_3 of ((lambdas_0, list_0) tuple)
datatype radix_0 = BIN_1 | OCT_1 | DEC_1 | HEX_0
datatype list_1 = nil_2 | ::_4 of ((lambdas_1, list_1) tuple)
datatype t_2 = T_0 of ((lambdas_2, (word8) array, (bool) ref) tuple)
datatype t_3 = NONE_5 | SOME_2 of ((word8, word32) tuple)
datatype t_4 = NONE_6 | SOME_3 of ((word32, word32) tuple)
datatype t_5 = NONE_7 | SOME_4 of ((intInf, word32) tuple)
datatype t_6 = NONE_8 | SOME_5 of (intInf)
datatype t_7 = NONE_2 | SOME_6 of (word8)
datatype list_2 = nil_4 | ::_5 of ((lambdas_3, list_2) tuple)
datatype list_3 = nil_5
                | ::_6 of (((word32, (word8) vector) tuple, list_3) tuple)
datatype t_8 = TO_NEAREST_0 | TO_NEGINF_0 | TO_POSINF_0 | TO_ZERO_0
datatype float_class_0 = INF_0 | NAN_1 | NORMAL_1 | SUBNORMAL_1 | ZERO_1
datatype t_9 = T_1 of (((bool) ref, (bool) ref, cpointer) tuple)
datatype list_4 = nil_6 | ::_7 of ((t_9, list_4) tuple)
datatype list_5 = nil_7 | ::_2 of ((word32, list_5) tuple)
datatype list_6 = nil_3 | ::_1 of (((word8) vector, list_6) tuple)
datatype t_10 = T_2 of ((word64, (word8) array, word64) tuple)
datatype t_11 = NONE_4 | SOME_7 of ((word32, (word8) vector) tuple)
datatype t_12 = NONE_0 | SOME_8 of (word64)
datatype t_13 = NONE_9 | SOME_9 of ((word64, word32) tuple)
datatype t_14 = NONE_10
              | SOME_10 of (((word64, bool, word64) tuple, word32) tuple)
datatype list_7 = nil_8 | ::_8 of ((word8, list_7) tuple)
datatype t_15 = T_3 of ((word64, (bool) array, word64) tuple)
datatype t_16 = T_4 of ((word64, (t_0) array, word64) tuple)
datatype t_17 = T_5 of ((word64, (word8) vector, word64) tuple)
datatype list_8 = nil_0 | ::_0 of (((word64, word64) tuple, list_8) tuple)
datatype t_18 = T_6 of ((word64, (word64) vector, word64) tuple)
datatype t_19 = T_7 of ((word64, (word64) array, word64) tuple)
datatype t_20 = A_0 of ((word8) vector) | E_0 of (exn)
datatype lambdas_4 = oddEnv_0 of (unit)
datatype lambdas_5 = evenEnv_0 of (unit)
datatype lambdas_6 = xEnv_46 of ((lambdas_7, (list_4) ref) tuple)
datatype lambdas_8 = loopEnv_2 of (unit)
datatype lambdas_9 = xEnv_47 of (((list_4) ref,
                                  lambdas_12,
                                  lambdas_11,
                                  (word8) vector,
                                  lambdas_10) tuple)
datatype lambdas_13 = makeEnv_0 of (unit)
datatype lambdas_14 = defaultTopLevelHandlerEnv_0 of ((lambdas_17,
                                                       lambdas_16,
                                                       lambdas_15,
                                                       word32) tuple)
datatype lambdas_18 = defaultTopLevelSuffixEnv_0 of ((lambdas_15, word32, word32) tuple)
datatype lambdas_19 = loopEnv_3 of ((word32,
                                     word32,
                                     word32,
                                     word32,
                                     (word8) array,
                                     lambdas_20,
                                     word32) tuple)
datatype lambdas_21 = xEnv_48 of (((bool) ref, bool) tuple)
datatype lambdas_22 = loopEnv_1 of (unit)
datatype lambdas_23 = haltEnv_0 of (unit)
datatype lambdas_24 = xEnv_45 of (unit)
datatype lambdas_25 = xEnv_44 of (unit)
datatype lambdas_26 = xEnv_49 of ((lambdas_16, lambdas_17) tuple)
datatype lambdas_27 = xEnv_50 of ((word64,
                                   real64,
                                   word64,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_30 = xEnv_51 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word64,
                                   real64,
                                   word64) tuple)
datatype lambdas_31 = xEnv_52 of ((real64,
                                   word64,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_32 = xEnv_53 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word64,
                                   real64) tuple)
datatype lambdas_33 = xEnv_55 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word64,
                                   real64) tuple)
                    | xEnv_54 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word64,
                                   real64,
                                   word64) tuple)
datatype lambdas_34 = xEnv_56 of ((lambdas_36, lambdas_35, word64) tuple)
datatype lambdas_37 = xEnv_57 of ((word32,
                                   real64,
                                   word32,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_38 = xEnv_58 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word32,
                                   real64,
                                   word32) tuple)
datatype lambdas_39 = xEnv_59 of ((real64,
                                   word32,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_40 = xEnv_60 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word32,
                                   real64) tuple)
datatype lambdas_41 = xEnv_62 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word32,
                                   real64) tuple)
                    | xEnv_61 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word32,
                                   real64,
                                   word32) tuple)
datatype lambdas_42 = xEnv_63 of ((lambdas_44, lambdas_43, word32) tuple)
datatype lambdas_45 = xEnv_64 of ((real64,
                                   word16,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_46 = xEnv_65 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word16,
                                   real64) tuple)
datatype lambdas_47 = xEnv_66 of ((real64,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_48 = xEnv_67 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   real64) tuple)
datatype lambdas_49 = xEnv_69 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   real64) tuple)
                    | xEnv_68 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word16,
                                   real64) tuple)
datatype lambdas_50 = xEnv_70 of ((lambdas_52, lambdas_51, word16) tuple)
datatype lambdas_53 = xEnv_71 of ((real64,
                                   word8,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_54 = xEnv_72 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word8,
                                   real64) tuple)
datatype lambdas_55 = xEnv_73 of ((real64,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64,
                                   lambdas_28) tuple)
datatype lambdas_56 = xEnv_74 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   real64) tuple)
datatype lambdas_57 = xEnv_76 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   real64) tuple)
                    | xEnv_75 of ((lambdas_28,
                                   real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word8,
                                   real64) tuple)
datatype lambdas_58 = xEnv_77 of ((lambdas_60, lambdas_59, word8) tuple)
datatype lambdas_61 = xEnv_78 of ((word64,
                                   real64,
                                   word64,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64) tuple)
datatype lambdas_62 = xEnv_79 of ((real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word64,
                                   real64,
                                   word64) tuple)
datatype lambdas_63 = xEnv_80 of ((lambdas_29, t_8, real64, real64) tuple)
datatype lambdas_64 = xEnv_81 of ((real64, real64, lambdas_29) tuple)
datatype lambdas_65 = xEnv_83 of ((real64, real64, lambdas_29) tuple)
                    | xEnv_82 of ((real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word64,
                                   real64,
                                   word64) tuple)
datatype lambdas_66 = xEnv_84 of ((lambdas_68, lambdas_67, word64) tuple)
datatype lambdas_69 = xEnv_85 of ((word32,
                                   real64,
                                   word32,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64) tuple)
datatype lambdas_70 = xEnv_86 of ((real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word32,
                                   real64,
                                   word32) tuple)
datatype lambdas_71 = xEnv_87 of ((lambdas_29, t_8, real64, real64) tuple)
datatype lambdas_72 = xEnv_88 of ((real64, real64, lambdas_29) tuple)
datatype lambdas_73 = xEnv_90 of ((real64, real64, lambdas_29) tuple)
                    | xEnv_89 of ((real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word32,
                                   real64,
                                   word32) tuple)
datatype lambdas_74 = xEnv_91 of ((lambdas_76, lambdas_75, word32) tuple)
datatype lambdas_77 = xEnv_92 of ((word16,
                                   real64,
                                   word16,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64) tuple)
datatype lambdas_78 = xEnv_93 of ((real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word16,
                                   real64,
                                   word16) tuple)
datatype lambdas_79 = xEnv_94 of ((lambdas_29, t_8, real64, real64) tuple)
datatype lambdas_80 = xEnv_95 of ((real64, real64, lambdas_29) tuple)
datatype lambdas_81 = xEnv_97 of ((real64, real64, lambdas_29) tuple)
                    | xEnv_96 of ((real64,
                                   real64,
                                   lambdas_29,
                                   real64,
                                   word16,
                                   real64,
                                   word16) tuple)
datatype lambdas_82 = xEnv_98 of ((lambdas_84, lambdas_83, word16) tuple)
datatype lambdas_85 = xEnv_99 of ((word8,
                                   real64,
                                   word8,
                                   real64,
                                   lambdas_29,
                                   t_8,
                                   real64,
                                   real64) tuple)
datatype lambdas_86 = xEnv_100 of ((real64,
                                    real64,
                                    lambdas_29,
                                    real64,
                                    word8,
                                    real64,
                                    word8) tuple)
datatype lambdas_87 = xEnv_101 of ((lambdas_29, t_8, real64, real64) tuple)
datatype lambdas_88 = xEnv_102 of ((real64, real64, lambdas_29) tuple)
datatype lambdas_89 = xEnv_104 of ((real64, real64, lambdas_29) tuple)
                    | xEnv_103 of ((real64,
                                    real64,
                                    lambdas_29,
                                    real64,
                                    word8,
                                    real64,
                                    word8) tuple)
datatype lambdas_90 = xEnv_105 of ((lambdas_92, lambdas_91, word8) tuple)
datatype lambdas_93 = xEnv_106 of ((t_8, lambdas_29) tuple)
datatype lambdas_94 = xEnv_107 of (lambdas_29)
datatype lambdas_95 = xEnv_43 of (unit)
datatype lambdas_96 = xEnv_109 of (unit) | xEnv_108 of (lambdas_29)
datatype lambdas_28 = classEnv_0 of ((word64, word64, word64) tuple)
datatype lambdas_97 = mkMaskEnv_0 of ((lambdas_36, word64) tuple)
datatype lambdas_98 = xEnv_110 of ((word64,
                                    real32,
                                    word64,
                                    real32,
                                    lambdas_29,
                                    t_8,
                                    real32,
                                    real32,
                                    lambdas_99) tuple)
datatype lambdas_100 = xEnv_111 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_101 = xEnv_112 of ((real32,
                                     word64,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_102 = xEnv_113 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word64,
                                     real32) tuple)
datatype lambdas_103 = xEnv_115 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word64,
                                     real32) tuple)
                     | xEnv_114 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_104 = xEnv_116 of ((lambdas_36, lambdas_35, word64) tuple)
datatype lambdas_105 = xEnv_117 of ((word32,
                                     real32,
                                     word32,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_106 = xEnv_118 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_107 = xEnv_119 of ((real32,
                                     word32,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_108 = xEnv_120 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word32,
                                     real32) tuple)
datatype lambdas_109 = xEnv_122 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word32,
                                     real32) tuple)
                     | xEnv_121 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_110 = xEnv_123 of ((lambdas_44, lambdas_43, word32) tuple)
datatype lambdas_111 = xEnv_124 of ((real32,
                                     word16,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_112 = xEnv_125 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word16,
                                     real32) tuple)
datatype lambdas_113 = xEnv_126 of ((real32,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_114 = xEnv_127 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     real32) tuple)
datatype lambdas_115 = xEnv_129 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     real32) tuple)
                     | xEnv_128 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word16,
                                     real32) tuple)
datatype lambdas_116 = xEnv_130 of ((lambdas_52, lambdas_51, word16) tuple)
datatype lambdas_117 = xEnv_131 of ((real32,
                                     word8,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_118 = xEnv_132 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word8,
                                     real32) tuple)
datatype lambdas_119 = xEnv_133 of ((real32,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32,
                                     lambdas_99) tuple)
datatype lambdas_120 = xEnv_134 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     real32) tuple)
datatype lambdas_121 = xEnv_136 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     real32) tuple)
                     | xEnv_135 of ((lambdas_99,
                                     real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word8,
                                     real32) tuple)
datatype lambdas_122 = xEnv_137 of ((lambdas_60, lambdas_59, word8) tuple)
datatype lambdas_123 = xEnv_138 of ((word64,
                                     real32,
                                     word64,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32) tuple)
datatype lambdas_124 = xEnv_139 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_125 = xEnv_140 of ((lambdas_29, t_8, real32, real32) tuple)
datatype lambdas_126 = xEnv_141 of ((real32, real32, lambdas_29) tuple)
datatype lambdas_127 = xEnv_143 of ((real32, real32, lambdas_29) tuple)
                     | xEnv_142 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word64,
                                     real32,
                                     word64) tuple)
datatype lambdas_128 = xEnv_144 of ((lambdas_68, lambdas_67, word64) tuple)
datatype lambdas_129 = xEnv_145 of ((word32,
                                     real32,
                                     word32,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32) tuple)
datatype lambdas_130 = xEnv_146 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_131 = xEnv_147 of ((lambdas_29, t_8, real32, real32) tuple)
datatype lambdas_132 = xEnv_148 of ((real32, real32, lambdas_29) tuple)
datatype lambdas_133 = xEnv_150 of ((real32, real32, lambdas_29) tuple)
                     | xEnv_149 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word32,
                                     real32,
                                     word32) tuple)
datatype lambdas_134 = xEnv_151 of ((lambdas_76, lambdas_75, word32) tuple)
datatype lambdas_135 = xEnv_152 of ((word16,
                                     real32,
                                     word16,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32) tuple)
datatype lambdas_136 = xEnv_153 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word16,
                                     real32,
                                     word16) tuple)
datatype lambdas_137 = xEnv_154 of ((lambdas_29, t_8, real32, real32) tuple)
datatype lambdas_138 = xEnv_155 of ((real32, real32, lambdas_29) tuple)
datatype lambdas_139 = xEnv_157 of ((real32, real32, lambdas_29) tuple)
                     | xEnv_156 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word16,
                                     real32,
                                     word16) tuple)
datatype lambdas_140 = xEnv_158 of ((lambdas_84, lambdas_83, word16) tuple)
datatype lambdas_141 = xEnv_159 of ((word8,
                                     real32,
                                     word8,
                                     real32,
                                     lambdas_29,
                                     t_8,
                                     real32,
                                     real32) tuple)
datatype lambdas_142 = xEnv_160 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word8,
                                     real32,
                                     word8) tuple)
datatype lambdas_143 = xEnv_161 of ((lambdas_29, t_8, real32, real32) tuple)
datatype lambdas_144 = xEnv_162 of ((real32, real32, lambdas_29) tuple)
datatype lambdas_145 = xEnv_164 of ((real32, real32, lambdas_29) tuple)
                     | xEnv_163 of ((real32,
                                     real32,
                                     lambdas_29,
                                     real32,
                                     word8,
                                     real32,
                                     word8) tuple)
datatype lambdas_146 = xEnv_165 of ((lambdas_92, lambdas_91, word8) tuple)
datatype lambdas_147 = xEnv_166 of ((t_8, lambdas_29) tuple)
datatype lambdas_148 = xEnv_167 of (lambdas_29)
datatype lambdas_149 = xEnv_42 of (unit)
datatype lambdas_150 = xEnv_169 of (unit) | xEnv_168 of (lambdas_29)
datatype lambdas_99 = classEnv_1 of ((word32, word32, word32) tuple)
datatype lambdas_151 = mkMaskEnv_1 of ((lambdas_44, word32) tuple)
datatype lambdas_152 = xEnv_41 of (unit)
datatype lambdas_153 = loopEnv_4 of ((word64, word64, (word8) array) tuple)
datatype lambdas_154 = loopEnv_5 of (word64)
datatype lambdas_29 = setRoundingModeEnv_0 of ((word32, cpointer, lambdas_155) tuple)
datatype lambdas_156 = loopEnv_6 of (word32)
datatype lambdas_157 = xEnv_40 of (unit)
datatype lambdas_158 = xEnv_170 of ((lambdas_16, list_3) tuple)
datatype lambdas_159 = ::?Env_0 of (unit)
datatype lambdas_160 = fromRepEnv_0 of (unit)
datatype lambdas_161 = toRepEnv_0 of (unit)
datatype lambdas_162 = newEnv_0 of (unit)
datatype lambdas_163 = subEnv_0 of (unit)
datatype lambdas_164 = xEnv_39 of (unit)
datatype lambdas_165 = xEnv_171 of (lambdas_16)
datatype lambdas_166 = loopEnv_7 of ((word64, (word8) array, word8) tuple)
datatype lambdas_35 = >>Env_0 of ((word32, word64) tuple)
datatype lambdas_36 = <<Env_0 of ((word32, word64) tuple)
datatype lambdas_167 = xEnv_38 of (unit)
datatype lambdas_168 = xEnv_37 of (unit)
datatype lambdas_169 = xEnv_36 of (unit)
datatype lambdas_170 = xEnv_174 of (unit)
                     | xEnv_173 of (unit)
                     | xEnv_172 of (unit)
                     | stEnv_1 of (unit)
datatype lambdas_171 = stEnv_0 of (unit)
datatype lambdas_43 = >>Env_1 of ((word32, word32) tuple)
datatype lambdas_44 = <<Env_1 of ((word32, word32) tuple)
datatype lambdas_51 = >>Env_2 of (word32)
datatype lambdas_52 = <<Env_2 of (word32)
datatype lambdas_59 = >>Env_3 of (word32)
datatype lambdas_60 = <<Env_3 of (word32)
datatype lambdas_172 = loopEnv_8 of ((word64,
                                      word64,
                                      word64,
                                      word64,
                                      (word8) array,
                                      word64) tuple)
datatype lambdas_173 = xEnv_175 of (((bool) ref, bool) tuple)
datatype lambdas_174 = fmtEnv_0 of ((word32,
                                     word64,
                                     word64,
                                     word64,
                                     (word8) array,
                                     lambdas_175,
                                     (bool) ref) tuple)
datatype lambdas_67 = >>Env_4 of ((word32, word64) tuple)
datatype lambdas_68 = <<Env_4 of ((word32, word64) tuple)
datatype lambdas_75 = >>Env_5 of ((word32, word32) tuple)
datatype lambdas_76 = <<Env_5 of ((word32, word32) tuple)
datatype lambdas_83 = >>Env_6 of ((word32, word16) tuple)
datatype lambdas_84 = <<Env_6 of ((word32, word16) tuple)
datatype lambdas_91 = >>Env_7 of ((word32, word8) tuple)
datatype lambdas_92 = <<Env_7 of ((word32, word8) tuple)
datatype lambdas_176 = xEnv_176 of (exn)
datatype lambdas_177 = digitToCharEnv_0 of (unit)
datatype lambdas_178 = loopEnv_9 of ((word64, (bool) array) tuple)
datatype lambdas_179 = loopEnv_10 of (word8)
datatype lambdas_180 = loopEnv_11 of ((word64, list_1, (t_0) array) tuple)
datatype lambdas_181 = loopEnv_12 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_182 = loopEnv_13 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_183 = loopEnv_14 of ((word64, lambdas_1, (t_0) array) tuple)
datatype lambdas_184 = rangeEnv_0 of (unit)
datatype lambdas_185 = radixToIntEnv_0 of (unit)
datatype lambdas_186 = xEnv_35 of (unit)
datatype lambdas_187 = xEnv_34 of (unit)
datatype lambdas_188 = xEnv_177 of (exn)
datatype lambdas_189 = updateEnv_0 of (unit)
datatype lambdas_190 = xEnv_178 of (exn)
datatype lambdas_191 = sliceEnv_0 of (unit)
datatype lambdas_192 = loopEnv_15 of ((word64, (word8) array, word8) tuple)
datatype lambdas_193 = loopEnv_16 of ((word64,
                                       word64,
                                       word64,
                                       (word8) vector,
                                       (word8) array) tuple)
datatype lambdas_194 = loopEnv_17 of ((word8) array)
datatype lambdas_195 = xEnv_179 of (exn)
datatype lambdas_196 = loopEnv_0 of (unit)
datatype lambdas_197 = loopEnv_18 of ((word64, (word8) array) tuple)
datatype lambdas_198 = xEnv_180 of (exn)
datatype lambdas_199 = fromIntForLengthEnv_0 of (unit)
datatype lambdas_200 = findEnv_0 of (exn)
datatype lambdas_201 = loopEnv_19 of (word32)
datatype lambdas_202 = xEnv_181 of ((word64,
                                     word32,
                                     word32,
                                     word32,
                                     lambdas_20,
                                     word32,
                                     word32,
                                     word32,
                                     (word32, lambdas_203) tuple) tuple)
datatype lambdas_203 = xEnv_182 of ((word32,
                                     word64,
                                     word64,
                                     word64,
                                     radix_0,
                                     (word8) array,
                                     lambdas_175,
                                     (bool) ref) tuple)
datatype lambdas_175 = xEnv_183 of ((lambdas_204, word32) tuple)
datatype lambdas_205 = mkBigCvtEnv_0 of ((word64,
                                          word32,
                                          word32,
                                          word32,
                                          lambdas_20,
                                          word32,
                                          word32,
                                          word32) tuple)
datatype lambdas_206 = loopEnv_20 of ((word64) array)
datatype lambdas_207 = loopEnv_21 of ((word64, word32) tuple)
datatype lambdas_208 = addTagEnv_0 of (unit)
datatype lambdas_209 = isSmallEnv_0 of (unit)
datatype lambdas_210 = baseEnv_0 of (unit)
datatype lambdas_211 = fullEnv_1 of (unit)
datatype lambdas_212 = lengthEnv_0 of (unit)
datatype lambdas_213 = valOfEnv_1 of (unit)
datatype lambdas_214 = loopEnv_22 of ((word64,
                                       word64,
                                       (word8) array,
                                       (word8) array) tuple)
datatype lambdas_215 = vectorEnv_0 of (unit)
datatype lambdas_216 = fullEnv_0 of (unit)
datatype lambdas_217 = unsafeArrayAllocEnv_0 of (unit)
datatype lambdas_218 = valOfEnv_0 of (unit)
datatype lambdas_219 = xEnv_33 of (unit)
datatype lambdas_220 = >=Env_5 of (unit)
datatype lambdas_221 = >Env_4 of (unit)
datatype lambdas_222 = ltuEnv_0 of (unit)
datatype lambdas_223 = xEnv_32 of (unit)
datatype lambdas_224 = xEnv_31 of (unit)
datatype lambdas_225 = xEnv_30 of (unit)
datatype lambdas_226 = xEnv_29 of (unit)
datatype lambdas_227 = xEnv_28 of (unit)
datatype lambdas_228 = xEnv_27 of (unit)
datatype lambdas_229 = xEnv_26 of (unit)
datatype lambdas_230 = xEnv_25 of (unit)
datatype lambdas_231 = xEnv_24 of (unit)
datatype lambdas_232 = xEnv_184 of (exn)
datatype lambdas_233 = xEnv_23 of (unit)
datatype lambdas_234 = castFromWordEnv_1 of (unit)
datatype lambdas_235 = castFromWordEnv_0 of (unit)
datatype lambdas_236 = >=Env_4 of (unit)
datatype lambdas_237 = >Env_3 of (unit)
datatype lambdas_238 = toWord64UnsafeEnv_1 of (unit)
datatype lambdas_239 = toWord32UnsafeEnv_1 of (unit)
datatype lambdas_240 = toWord16UnsafeEnv_1 of (unit)
datatype lambdas_241 = toWord8UnsafeEnv_1 of (unit)
datatype lambdas_242 = toReal32UnsafeEnv_1 of (unit)
datatype lambdas_243 = toInt64UnsafeEnv_1 of (unit)
datatype lambdas_244 = toInt32UnsafeEnv_1 of (unit)
datatype lambdas_245 = toInt16UnsafeEnv_1 of (unit)
datatype lambdas_246 = toInt8UnsafeEnv_1 of (unit)
datatype lambdas_247 = fromWord64UnsafeEnv_1 of (unit)
datatype lambdas_248 = fromWord32UnsafeEnv_1 of (unit)
datatype lambdas_249 = fromWord16UnsafeEnv_1 of (unit)
datatype lambdas_250 = fromWord8UnsafeEnv_1 of (unit)
datatype lambdas_251 = fromReal32UnsafeEnv_1 of (unit)
datatype lambdas_252 = fromInt64UnsafeEnv_1 of (unit)
datatype lambdas_253 = fromInt32UnsafeEnv_1 of (unit)
datatype lambdas_254 = fromInt16UnsafeEnv_1 of (unit)
datatype lambdas_255 = fromInt8UnsafeEnv_1 of (unit)
datatype lambdas_256 = roundEnv_1 of (unit)
datatype lambdas_257 = <=Env_3 of (unit)
datatype lambdas_258 = <Env_4 of (unit)
datatype lambdas_259 = ~Env_1 of (unit)
datatype lambdas_260 = -Env_2 of (unit)
datatype lambdas_261 = +Env_2 of (unit)
datatype lambdas_262 = >=Env_3 of (unit)
datatype lambdas_263 = >Env_2 of (unit)
datatype lambdas_264 = toWord64UnsafeEnv_0 of (unit)
datatype lambdas_265 = toWord32UnsafeEnv_0 of (unit)
datatype lambdas_266 = toWord16UnsafeEnv_0 of (unit)
datatype lambdas_267 = toWord8UnsafeEnv_0 of (unit)
datatype lambdas_268 = toReal32UnsafeEnv_0 of (unit)
datatype lambdas_269 = toInt64UnsafeEnv_0 of (unit)
datatype lambdas_270 = toInt32UnsafeEnv_0 of (unit)
datatype lambdas_271 = toInt16UnsafeEnv_0 of (unit)
datatype lambdas_272 = toInt8UnsafeEnv_0 of (unit)
datatype lambdas_273 = fromWord64UnsafeEnv_0 of (unit)
datatype lambdas_274 = fromWord32UnsafeEnv_0 of (unit)
datatype lambdas_275 = fromWord16UnsafeEnv_0 of (unit)
datatype lambdas_276 = fromWord8UnsafeEnv_0 of (unit)
datatype lambdas_277 = fromReal32UnsafeEnv_0 of (unit)
datatype lambdas_278 = fromInt64UnsafeEnv_0 of (unit)
datatype lambdas_279 = fromInt32UnsafeEnv_0 of (unit)
datatype lambdas_280 = fromInt16UnsafeEnv_0 of (unit)
datatype lambdas_281 = fromInt8UnsafeEnv_0 of (unit)
datatype lambdas_282 = roundEnv_0 of (unit)
datatype lambdas_283 = <=Env_2 of (unit)
datatype lambdas_284 = <Env_3 of (unit)
datatype lambdas_285 = ~Env_0 of (unit)
datatype lambdas_286 = -Env_1 of (unit)
datatype lambdas_287 = +Env_1 of (unit)
datatype lambdas_288 = <=Env_1 of (unit)
datatype lambdas_289 = idFromWord8Env_0 of (unit)
datatype lambdas_290 = toWordEnv_0 of (unit)
datatype lambdas_291 = printEnv_0 of (unit)
datatype lambdas_292 = atomicEndEnv_0 of (unit)
datatype lambdas_293 = fromWordEnv_0 of (unit)
datatype lambdas_294 = bugEnv_0 of (unit)
datatype lambdas_295 = gcStateEnv_0 of (unit)
datatype lambdas_296 = xEnv_22 of (unit)
datatype lambdas_297 = xEnv_21 of (unit)
datatype lambdas_298 = xEnv_20 of (unit)
datatype lambdas_299 = xEnv_19 of (unit)
datatype lambdas_300 = xEnv_18 of (unit)
datatype lambdas_301 = xEnv_17 of (unit)
datatype lambdas_302 = >=Env_2 of (unit)
datatype lambdas_303 = >Env_1 of (unit)
datatype lambdas_304 = <Env_2 of (unit)
datatype lambdas_305 = xEnv_16 of (unit)
datatype lambdas_306 = -!Env_1 of (unit)
datatype lambdas_307 = xEnv_15 of (unit)
datatype lambdas_308 = ~!Env_1 of (unit)
datatype lambdas_309 = xEnv_14 of (unit)
datatype lambdas_310 = +!Env_1 of (unit)
datatype lambdas_311 = >=Env_1 of (unit)
datatype lambdas_312 = >Env_0 of (unit)
datatype lambdas_313 = <=Env_0 of (unit)
datatype lambdas_314 = <Env_1 of (unit)
datatype lambdas_315 = remUnsafeEnv_0 of (unit)
datatype lambdas_316 = xEnv_13 of (unit)
datatype lambdas_317 = -!Env_0 of (unit)
datatype lambdas_318 = xEnv_12 of (unit)
datatype lambdas_319 = ~!Env_0 of (unit)
datatype lambdas_320 = xEnv_11 of (unit)
datatype lambdas_321 = +!Env_0 of (unit)
datatype lambdas_322 = >>?Env_3 of (unit)
datatype lambdas_323 = ~>>?Env_0 of (unit)
datatype lambdas_324 = notbEnv_3 of (unit)
datatype lambdas_325 = <<?Env_3 of (unit)
datatype lambdas_326 = andbEnv_1 of (unit)
datatype lambdas_327 = +Env_0 of (unit)
datatype lambdas_328 = >=Env_0 of (unit)
datatype lambdas_329 = <Env_0 of (unit)
datatype lambdas_330 = xorbEnv_0 of (unit)
datatype lambdas_331 = -Env_0 of (unit)
datatype lambdas_332 = >>?Env_2 of (unit)
datatype lambdas_333 = notbEnv_2 of (unit)
datatype lambdas_334 = <<?Env_2 of (unit)
datatype lambdas_335 = andbEnv_0 of (unit)
datatype lambdas_336 = >>?Env_1 of (unit)
datatype lambdas_337 = notbEnv_1 of (unit)
datatype lambdas_338 = <<?Env_1 of (unit)
datatype lambdas_339 = >>?Env_0 of (unit)
datatype lambdas_340 = notbEnv_0 of (unit)
datatype lambdas_341 = <<?Env_0 of (unit)
datatype lambdas_342 = sextdFromInt64ToInt64Env_0 of (unit)
datatype lambdas_343 = sextdFromInt64ToInt32Env_0 of (unit)
datatype lambdas_344 = sextdFromInt32ToWord64Env_0 of (unit)
datatype lambdas_345 = sextdFromInt32ToWord32Env_0 of (unit)
datatype lambdas_346 = sextdFromInt32ToInt64Env_0 of (unit)
datatype lambdas_347 = sextdFromInt32ToInt32Env_0 of (unit)
datatype lambdas_348 = sextdFromInt16ToInt64Env_0 of (unit)
datatype lambdas_349 = sextdFromInt8ToInt64Env_0 of (unit)
datatype lambdas_350 = zextdFromWord32ToWord64Env_0 of (unit)
datatype lambdas_351 = zextdFromWord32ToWord32Env_0 of (unit)
datatype lambdas_352 = zextdFromInt64ToWord64Env_0 of (unit)
datatype lambdas_353 = zextdFromInt32ToWord64Env_0 of (unit)
datatype lambdas_354 = zextdFromInt32ToWord32Env_0 of (unit)
datatype lambdas_355 = zextdFromInt32ToInt64Env_0 of (unit)
datatype lambdas_356 = zextdFromInt32ToInt32Env_0 of (unit)
datatype lambdas_357 = zextdFromInt32ToInt16Env_0 of (unit)
datatype lambdas_358 = zextdFromInt32ToInt8Env_0 of (unit)
datatype lambdas_359 = idFromWord64ToInt64Env_0 of (unit)
datatype lambdas_360 = idFromWord32ToInt32Env_0 of (unit)
datatype lambdas_361 = idFromWord16ToInt16Env_0 of (unit)
datatype lambdas_362 = idFromWord8ToInt8Env_0 of (unit)
datatype lambdas_363 = idFromInt64ToWord64Env_0 of (unit)
datatype lambdas_364 = idFromInt32ToWord32Env_0 of (unit)
datatype lambdas_365 = idFromInt16ToWord16Env_0 of (unit)
datatype lambdas_366 = idFromInt8ToWord8Env_0 of (unit)
datatype lambdas_367 = xEnv_10 of (unit)
datatype lambdas_368 = xEnv_9 of (unit)
datatype lambdas_369 = xEnv_8 of (unit)
datatype lambdas_370 = xEnv_7 of (unit)
datatype lambdas_371 = xEnv_6 of (unit)
datatype lambdas_372 = xEnv_5 of (unit)
datatype lambdas_373 = xEnv_4 of (unit)
datatype lambdas_374 = xEnv_3 of (unit)
datatype lambdas_375 = xEnv_2 of (unit)
datatype lambdas_376 = nameEnv_0 of (unit)
datatype lambdas_377 = notEnv_0 of (unit)
datatype lambdas_378 = xEnv_186 of (unit)
                     | xEnv_185 of (unit)
                     | defaultTopLevelSuffixEnv_1 of ((lambdas_15,
                                                       word32,
                                                       word32) tuple)
datatype lambdas_379 = xEnv_1 of (unit)
datatype lambdas_380 = xEnv_188 of (unit)
                     | xEnv_187 of (unit)
                     | defaultTopLevelHandlerEnv_1 of ((lambdas_17,
                                                        lambdas_16,
                                                        lambdas_15,
                                                        word32) tuple)
datatype lambdas_15 = exitEnv_0 of (((bool) ref,
                                     (list_2) ref,
                                     (bool) ref,
                                     lambdas_381,
                                     (word8) array,
                                     word32,
                                     word32,
                                     word32,
                                     lambdas_20,
                                     word32,
                                     lambdas_16) tuple)
datatype lambdas_20 = quotEnv_0 of ((word32, word32, word32) tuple)
datatype lambdas_381 = xEnv_189 of ((lambdas_204, word32) tuple)
datatype lambdas_204 = newEnv_1 of (lambdas_155)
datatype lambdas_382 = xEnv_0 of (unit)
datatype lambdas_3 = xEnv_191 of (((list_4) ref,
                                   lambdas_12,
                                   lambdas_11,
                                   (word8) vector,
                                   lambdas_10) tuple)
                   | xEnv_190 of ((lambdas_7, (list_4) ref) tuple)
datatype lambdas_7 = initEnv_0 of ((lambdas_10, (t_9) ref) tuple)
datatype lambdas_10 = currentEnv_0 of ((t_9) ref)
datatype lambdas_2 = 
datatype lambdas_1 = xEnv_192 of ((word32, word32, word8, word8) tuple)
datatype lambdas_0 = xEnv_195 of ((lambdas_16, list_3) tuple)
                   | xEnv_194 of (lambdas_16)
                   | xEnv_193 of ((lambdas_16, lambdas_17) tuple)
datatype lambdas_17 = exnMessageEnv_0 of ((list_0) ref)
datatype lambdas_16 = concatEnv_0 of ((lambdas_12, lambdas_155, lambdas_11) tuple)
datatype lambdas_11 = sequenceEnv_0 of (lambdas_12)
datatype lambdas_155 = arrayAllocEnv_0 of (word64)
datatype lambdas_12 = arrayAllocEnv_1 of (word64)


(* Globals: *)
val x_0: (word8) vector = "toplevel handler not installed"
val x_1: unit = ()
val x_2: lambdas_382 = con xEnv_0 (x_1 (*()*))
val x_3: (word8) vector = "toplevel suffix not installed"
val x_4: unit = ()
val x_5: lambdas_379 = con xEnv_1 (x_4 (*()*))
val tuple_0: unit = ()
val not_0: lambdas_377 = con notEnv_0 (tuple_0 (*()*))
val x_6: bool = con false
val x_7: bool = con true
val x_8: (word8) vector = "UNKNOWN"
val x_9: (word8) vector = "Poll"
val x_10: (word8) vector = "DoublyRedirected"
val x_11: (word8) vector = "MisuseOfForget"
val x_12: (word8) vector = "Interrupt"
val x_13: (word8) vector = "Io"
val x_14: (word8) vector = "Ord"
val x_15: (word8) vector = "Ln"
val x_16: (word8) vector = "Sqrt"
val x_17: (word8) vector = "InvalidArc"
val x_18: (word8) vector = "Path"
val x_19: (word8) vector = "RandomAccessNotSupported"
val x_20: (word8) vector = "NonblockingNotSupported"
val x_21: (word8) vector = "Io"
val x_22: (word8) vector = "ClosedStream"
val x_23: (word8) vector = "BlockingNotSupported"
val x_24: (word8) vector = "Date"
val x_25: (word8) vector = "Time"
val x_26: (word8) vector = "Bad"
val x_27: (word8) vector = "Bad"
val x_28: (word8) vector = "Unordered"
val x_29: (word8) vector = "SysErr"
val x_30: (word8) vector = "UnequalLengths"
val x_31: (word8) vector = "Empty"
val x_32: (word8) vector = "Option"
val x_33: (word8) vector = "Fail"
val x_34: (word8) vector = "Chr"
val x_35: (word8) vector = "CreateVectorNotFull"
val x_36: (word8) vector = "CreateAlreadyGotVector"
val x_37: (word8) vector = "Vector_updateUnsafe"
val x_38: (word8) vector = "Vector_uninitUnsafe"
val x_39: (word8) vector = "Vector_uninitIsNop"
val x_40: (word8) vector = "CreateVectorNotFull"
val x_41: (word8) vector = "CreateAlreadyGotVector"
val x_42: (word8) vector = "Subscript"
val x_43: (word8) vector = "Span"
val x_44: (word8) vector = "Size"
val x_45: (word8) vector = "Overflow"
val x_46: (word8) vector = "Fail32"
val x_47: (word8) vector = "Fail16"
val x_48: (word8) vector = "Fail8"
val x_49: (word8) vector = "Domain"
val x_50: (word8) vector = "Div"
val x_51: (word8) vector = "Match"
val x_52: (word8) vector = "Bind"
val x_53: unit = ()
val name_0: lambdas_376 = con nameEnv_0 (x_53 (*()*))
val x_54: unit = ()
val x_55: (unit) ref = prim Ref_ref[unit] (x_54 (*()*))
val x_56: exn = con Div_0 (x_55)
val x_57: unit = ()
val x_58: (unit) ref = prim Ref_ref[unit] (x_57 (*()*))
val x_59: exn = con Domain_0 (x_58)
val x_60: unit = ()
val x_1086: (unit) ref = prim Ref_ref[unit] (x_60 (*()*))
val x_61: unit = ()
val x_62: (unit) ref = prim Ref_ref[unit] (x_61 (*()*))
val x_63: exn = con Overflow_0 (x_62)
val x_64: unit = ()
val x_65: (unit) ref = prim Ref_ref[unit] (x_64 (*()*))
val x_66: exn = con Size_0 (x_65)
val x_67: unit = ()
val x_68: (unit) ref = prim Ref_ref[unit] (x_67 (*()*))
val x_69: exn = con Subscript_0 (x_68)
val x_70: unit = ()
val x_71: lambdas_375 = con xEnv_2 (x_70 (*()*))
val x_72: unit = ()
val x_73: lambdas_374 = con xEnv_3 (x_72 (*()*))
val x_74: unit = ()
val x_75: lambdas_373 = con xEnv_4 (x_74 (*()*))
val x_76: unit = ()
val x_77: lambdas_372 = con xEnv_5 (x_76 (*()*))
val x_78: unit = ()
val x_79: lambdas_371 = con xEnv_6 (x_78 (*()*))
val x_80: unit = ()
val x_81: lambdas_370 = con xEnv_7 (x_80 (*()*))
val x_82: unit = ()
val x_83: lambdas_369 = con xEnv_8 (x_82 (*()*))
val x_84: unit = ()
val x_85: lambdas_368 = con xEnv_9 (x_84 (*()*))
val x_86: unit = ()
val x_87: lambdas_367 = con xEnv_10 (x_86 (*()*))
val x_88: unit = ()
val idFromInt8ToWord8_0: lambdas_366 = con idFromInt8ToWord8Env_0 (x_88 (*()*))
val x_89: unit = ()
val idFromInt16ToWord16_0: lambdas_365 =
  con idFromInt16ToWord16Env_0 (x_89 (*()*))
val x_90: unit = ()
val idFromInt32ToWord32_0: lambdas_364 =
  con idFromInt32ToWord32Env_0 (x_90 (*()*))
val x_91: unit = ()
val idFromInt64ToWord64_0: lambdas_363 =
  con idFromInt64ToWord64Env_0 (x_91 (*()*))
val x_92: unit = ()
val idFromWord8ToInt8_0: lambdas_362 = con idFromWord8ToInt8Env_0 (x_92 (*()*))
val x_93: unit = ()
val idFromWord16ToInt16_0: lambdas_361 =
  con idFromWord16ToInt16Env_0 (x_93 (*()*))
val x_94: unit = ()
val idFromWord32ToInt32_0: lambdas_360 =
  con idFromWord32ToInt32Env_0 (x_94 (*()*))
val x_95: unit = ()
val idFromWord64ToInt64_0: lambdas_359 =
  con idFromWord64ToInt64Env_0 (x_95 (*()*))
val x_96: unit = ()
val zextdFromInt32ToInt8_0: lambdas_358 =
  con zextdFromInt32ToInt8Env_0 (x_96 (*()*))
val x_97: unit = ()
val zextdFromInt32ToInt16_0: lambdas_357 =
  con zextdFromInt32ToInt16Env_0 (x_97 (*()*))
val x_98: unit = ()
val zextdFromInt32ToInt32_0: lambdas_356 =
  con zextdFromInt32ToInt32Env_0 (x_98 (*()*))
val x_99: unit = ()
val zextdFromInt32ToInt64_0: lambdas_355 =
  con zextdFromInt32ToInt64Env_0 (x_99 (*()*))
val x_100: unit = ()
val zextdFromInt32ToWord32_0: lambdas_354 =
  con zextdFromInt32ToWord32Env_0 (x_100 (*()*))
val x_101: unit = ()
val zextdFromInt32ToWord64_0: lambdas_353 =
  con zextdFromInt32ToWord64Env_0 (x_101 (*()*))
val x_102: unit = ()
val zextdFromInt64ToWord64_0: lambdas_352 =
  con zextdFromInt64ToWord64Env_0 (x_102 (*()*))
val x_103: unit = ()
val zextdFromWord32ToWord32_0: lambdas_351 =
  con zextdFromWord32ToWord32Env_0 (x_103 (*()*))
val x_104: unit = ()
val zextdFromWord32ToWord64_0: lambdas_350 =
  con zextdFromWord32ToWord64Env_0 (x_104 (*()*))
val x_105: unit = ()
val sextdFromInt8ToInt64_0: lambdas_349 =
  con sextdFromInt8ToInt64Env_0 (x_105 (*()*))
val x_106: unit = ()
val sextdFromInt16ToInt64_0: lambdas_348 =
  con sextdFromInt16ToInt64Env_0 (x_106 (*()*))
val x_107: unit = ()
val sextdFromInt32ToInt32_0: lambdas_347 =
  con sextdFromInt32ToInt32Env_0 (x_107 (*()*))
val x_108: unit = ()
val sextdFromInt32ToInt64_0: lambdas_346 =
  con sextdFromInt32ToInt64Env_0 (x_108 (*()*))
val x_109: unit = ()
val sextdFromInt32ToWord32_0: lambdas_345 =
  con sextdFromInt32ToWord32Env_0 (x_109 (*()*))
val x_110: unit = ()
val sextdFromInt32ToWord64_0: lambdas_344 =
  con sextdFromInt32ToWord64Env_0 (x_110 (*()*))
val x_111: unit = ()
val sextdFromInt64ToInt32_0: lambdas_343 =
  con sextdFromInt64ToInt32Env_0 (x_111 (*()*))
val x_112: unit = ()
val sextdFromInt64ToInt64_0: lambdas_342 =
  con sextdFromInt64ToInt64Env_0 (x_112 (*()*))
val sizeInBits_0: word32 = 0x1:w32
val sizeInBits_1: word32 = 0x2:w32
val sizeInBits_2: word32 = 0x3:w32
val sizeInBits_3: word32 = 0x4:w32
val sizeInBits_4: word32 = 0x5:w32
val sizeInBits_5: word32 = 0x6:w32
val sizeInBits_6: word32 = 0x7:w32
val sizeInBits_7: word32 = 0x8:w32
val x_113: unit = ()
val <<?_0: lambdas_341 = con <<?Env_0 (x_113 (*()*))
val x_114: unit = ()
val notb_0: lambdas_340 = con notbEnv_0 (x_114 (*()*))
val x_115: unit = ()
val >>?_0: lambdas_339 = con >>?Env_0 (x_115 (*()*))
val sizeInBits_8: word32 = 0x9:w32
val sizeInBits_9: word32 = 0xA:w32
val sizeInBits_10: word32 = 0xB:w32
val sizeInBits_11: word32 = 0xC:w32
val sizeInBits_12: word32 = 0xD:w32
val sizeInBits_13: word32 = 0xE:w32
val sizeInBits_14: word32 = 0xF:w32
val sizeInBits_15: word32 = 0x10:w32
val x_116: unit = ()
val <<?_1: lambdas_338 = con <<?Env_1 (x_116 (*()*))
val x_117: unit = ()
val notb_1: lambdas_337 = con notbEnv_1 (x_117 (*()*))
val x_118: unit = ()
val >>?_1: lambdas_336 = con >>?Env_1 (x_118 (*()*))
val sizeInBits_16: word32 = 0x11:w32
val sizeInBits_17: word32 = 0x12:w32
val sizeInBits_18: word32 = 0x13:w32
val sizeInBits_19: word32 = 0x14:w32
val sizeInBits_20: word32 = 0x15:w32
val sizeInBits_21: word32 = 0x16:w32
val sizeInBits_22: word32 = 0x17:w32
val sizeInBits_23: word32 = 0x18:w32
val sizeInBits_24: word32 = 0x19:w32
val sizeInBits_25: word32 = 0x1A:w32
val sizeInBits_26: word32 = 0x1B:w32
val sizeInBits_27: word32 = 0x1C:w32
val sizeInBits_28: word32 = 0x1D:w32
val sizeInBits_29: word32 = 0x1E:w32
val sizeInBits_30: word32 = 0x1F:w32
val sizeInBits_31: word32 = 0x20:w32
val x_119: unit = ()
val andb_0: lambdas_335 = con andbEnv_0 (x_119 (*()*))
val x_120: unit = ()
val <<?_2: lambdas_334 = con <<?Env_2 (x_120 (*()*))
val x_121: unit = ()
val notb_2: lambdas_333 = con notbEnv_2 (x_121 (*()*))
val x_122: unit = ()
val >>?_2: lambdas_332 = con >>?Env_2 (x_122 (*()*))
val x_123: unit = ()
val -_0: lambdas_331 = con -Env_0 (x_123 (*()*))
val x_124: unit = ()
val xorb_0: lambdas_330 = con xorbEnv_0 (x_124 (*()*))
val x_125: unit = ()
val <_0: lambdas_329 = con <Env_0 (x_125 (*()*))
val tuple_1: unit = ()
val >=_0: lambdas_328 = con >=Env_0 (tuple_1 (*()*))
val sizeInBits_32: word32 = 0x40:w32
val x_126: unit = ()
val +_0: lambdas_327 = con +Env_0 (x_126 (*()*))
val x_127: unit = ()
val andb_1: lambdas_326 = con andbEnv_1 (x_127 (*()*))
val x_128: unit = ()
val <<?_3: lambdas_325 = con <<?Env_3 (x_128 (*()*))
val x_129: unit = ()
val notb_3: lambdas_324 = con notbEnv_3 (x_129 (*()*))
val x_130: unit = ()
val ~>>?_0: lambdas_323 = con ~>>?Env_0 (x_130 (*()*))
val x_131: unit = ()
val >>?_3: lambdas_322 = con >>?Env_3 (x_131 (*()*))
val sizeInBits_33: word32 = 0x1:w32
val sizeInBits_34: word32 = 0x2:w32
val sizeInBits_35: word32 = 0x3:w32
val sizeInBits_36: word32 = 0x4:w32
val sizeInBits_37: word32 = 0x5:w32
val sizeInBits_38: word32 = 0x6:w32
val sizeInBits_39: word32 = 0x7:w32
val sizeInBits_40: word32 = 0x8:w32
val precision_0: t_0 = con SOME_0 (sizeInBits_40 (*0x8:w32*))
val sizeInBits_41: word32 = 0x9:w32
val sizeInBits_42: word32 = 0xA:w32
val sizeInBits_43: word32 = 0xB:w32
val sizeInBits_44: word32 = 0xC:w32
val sizeInBits_45: word32 = 0xD:w32
val sizeInBits_46: word32 = 0xE:w32
val sizeInBits_47: word32 = 0xF:w32
val sizeInBits_48: word32 = 0x10:w32
val precision_1: t_0 = con SOME_0 (sizeInBits_48 (*0x10:w32*))
val sizeInBits_49: word32 = 0x11:w32
val sizeInBits_50: word32 = 0x12:w32
val sizeInBits_51: word32 = 0x13:w32
val sizeInBits_52: word32 = 0x14:w32
val sizeInBits_53: word32 = 0x15:w32
val sizeInBits_54: word32 = 0x16:w32
val sizeInBits_55: word32 = 0x17:w32
val sizeInBits_56: word32 = 0x18:w32
val sizeInBits_57: word32 = 0x19:w32
val sizeInBits_58: word32 = 0x1A:w32
val sizeInBits_59: word32 = 0x1B:w32
val sizeInBits_60: word32 = 0x1C:w32
val sizeInBits_61: word32 = 0x1D:w32
val sizeInBits_62: word32 = 0x1E:w32
val sizeInBits_63: word32 = 0x1F:w32
val sizeInBits_64: word32 = 0x20:w32
val precision_2: t_0 = con SOME_0 (sizeInBits_64 (*0x20:w32*))
val x_132: unit = ()
val +!_0: lambdas_321 = con +!Env_0 (x_132 (*()*))
val x_133: unit = ()
val x_134: lambdas_320 = con xEnv_11 (x_133 (*()*))
val x_135: unit = ()
val ~!_0: lambdas_319 = con ~!Env_0 (x_135 (*()*))
val x_136: unit = ()
val x_137: lambdas_318 = con xEnv_12 (x_136 (*()*))
val x_138: unit = ()
val -!_0: lambdas_317 = con -!Env_0 (x_138 (*()*))
val x_139: unit = ()
val x_140: lambdas_316 = con xEnv_13 (x_139 (*()*))
val x_141: unit = ()
val remUnsafe_0: lambdas_315 = con remUnsafeEnv_0 (x_141 (*()*))
val x_142: unit = ()
val <_1: lambdas_314 = con <Env_1 (x_142 (*()*))
val tuple_2: unit = ()
val <=_0: lambdas_313 = con <=Env_0 (tuple_2 (*()*))
val tuple_3: unit = ()
val >_0: lambdas_312 = con >Env_0 (tuple_3 (*()*))
val tuple_4: unit = ()
val >=_1: lambdas_311 = con >=Env_1 (tuple_4 (*()*))
val sizeInBits_65: word32 = 0x40:w32
val precision_3: t_0 = con SOME_0 (sizeInBits_65 (*0x40:w32*))
val x_143: unit = ()
val +!_1: lambdas_310 = con +!Env_1 (x_143 (*()*))
val x_144: unit = ()
val x_145: lambdas_309 = con xEnv_14 (x_144 (*()*))
val x_146: unit = ()
val ~!_1: lambdas_308 = con ~!Env_1 (x_146 (*()*))
val x_147: unit = ()
val x_148: lambdas_307 = con xEnv_15 (x_147 (*()*))
val x_149: unit = ()
val -!_1: lambdas_306 = con -!Env_1 (x_149 (*()*))
val x_150: unit = ()
val x_151: lambdas_305 = con xEnv_16 (x_150 (*()*))
val x_152: unit = ()
val <_2: lambdas_304 = con <Env_2 (x_152 (*()*))
val tuple_5: unit = ()
val >_1: lambdas_303 = con >Env_1 (tuple_5 (*()*))
val tuple_6: unit = ()
val >=_2: lambdas_302 = con >=Env_2 (tuple_6 (*()*))
val x_153: unit = ()
val x_154: lambdas_301 = con xEnv_17 (x_153 (*()*))
val x_155: unit = ()
val x_156: lambdas_300 = con xEnv_18 (x_155 (*()*))
val x_157: unit = ()
val x_158: lambdas_299 = con xEnv_19 (x_157 (*()*))
val x_159: unit = ()
val x_160: lambdas_298 = con xEnv_20 (x_159 (*()*))
val x_161: unit = ()
val x_162: lambdas_297 = con xEnv_21 (x_161 (*()*))
val x_163: unit = ()
val x_164: lambdas_296 = con xEnv_22 (x_163 (*()*))
val x_165: unit = ()
val gcState_0: lambdas_295 = con gcStateEnv_0 (x_165 (*()*))
val x_166: unit = ()
val bug_0: lambdas_294 = con bugEnv_0 (x_166 (*()*))
val x_167: unit = ()
val fromWord_0: lambdas_293 = con fromWordEnv_0 (x_167 (*()*))
val x_168: word64 = 0x0:w64
val isOn_0: bool = con false
val tuple_7: unit = ()
val atomicEnd_0: lambdas_292 = con atomicEndEnv_0 (tuple_7 (*()*))
val x_169: word32 = 0x0:w32
val x_170: (word8) vector = "Thread.atomicEnd"
val x_171: ((unit) ref, (word8) vector) tuple =
  (x_1086, x_170 (*"Thread.atomicEnd"*))
val x_172: exn = con Fail8_0 (x_171)
val FE_DOWNWARD_0: word32 = 0x400:w32
val FE_NOSUPPORT_0: word32 = 0xFFFFFFFF:w32
val FE_TONEAREST_0: word32 = 0x0:w32
val FE_TOWARDZERO_0: word32 = 0xC00:w32
val FE_UPWARD_0: word32 = 0x800:w32
val E2BIG_0: word32 = 0x7:w32
val EACCES_0: word32 = 0xD:w32
val EADDRINUSE_0: word32 = 0x62:w32
val EADDRNOTAVAIL_0: word32 = 0x63:w32
val EAFNOSUPPORT_0: word32 = 0x61:w32
val EAGAIN_0: word32 = 0xB:w32
val EALREADY_0: word32 = 0x72:w32
val EBADF_0: word32 = 0x9:w32
val EBADMSG_0: word32 = 0x4A:w32
val EBUSY_0: word32 = 0x10:w32
val ECANCELED_0: word32 = 0x7D:w32
val ECHILD_0: word32 = 0xA:w32
val ECONNABORTED_0: word32 = 0x67:w32
val ECONNREFUSED_0: word32 = 0x6F:w32
val ECONNRESET_0: word32 = 0x68:w32
val EDEADLK_0: word32 = 0x23:w32
val EDESTADDRREQ_0: word32 = 0x59:w32
val EDOM_0: word32 = 0x21:w32
val EDQUOT_0: word32 = 0x7A:w32
val EEXIST_0: word32 = 0x11:w32
val EFAULT_0: word32 = 0xE:w32
val EFBIG_0: word32 = 0x1B:w32
val EHOSTUNREACH_0: word32 = 0x71:w32
val EIDRM_0: word32 = 0x2B:w32
val EILSEQ_0: word32 = 0x54:w32
val EINPROGRESS_0: word32 = 0x73:w32
val EINTR_0: word32 = 0x4:w32
val EINVAL_0: word32 = 0x16:w32
val EIO_0: word32 = 0x5:w32
val EISCONN_0: word32 = 0x6A:w32
val EISDIR_0: word32 = 0x15:w32
val ELOOP_0: word32 = 0x28:w32
val EMFILE_0: word32 = 0x18:w32
val EMLINK_0: word32 = 0x1F:w32
val EMSGSIZE_0: word32 = 0x5A:w32
val EMULTIHOP_0: word32 = 0x48:w32
val ENAMETOOLONG_0: word32 = 0x24:w32
val ENETDOWN_0: word32 = 0x64:w32
val ENETRESET_0: word32 = 0x66:w32
val ENETUNREACH_0: word32 = 0x65:w32
val ENFILE_0: word32 = 0x17:w32
val ENOBUFS_0: word32 = 0x69:w32
val ENODATA_0: word32 = 0x3D:w32
val ENODEV_0: word32 = 0x13:w32
val ENOENT_0: word32 = 0x2:w32
val ENOEXEC_0: word32 = 0x8:w32
val ENOLCK_0: word32 = 0x25:w32
val ENOLINK_0: word32 = 0x43:w32
val ENOMEM_0: word32 = 0xC:w32
val ENOMSG_0: word32 = 0x2A:w32
val ENOPROTOOPT_0: word32 = 0x5C:w32
val ENOSPC_0: word32 = 0x1C:w32
val ENOSR_0: word32 = 0x3F:w32
val ENOSTR_0: word32 = 0x3C:w32
val ENOSYS_0: word32 = 0x26:w32
val ENOTCONN_0: word32 = 0x6B:w32
val ENOTDIR_0: word32 = 0x14:w32
val ENOTEMPTY_0: word32 = 0x27:w32
val ENOTSOCK_0: word32 = 0x58:w32
val ENOTSUP_0: word32 = 0x5F:w32
val ENOTTY_0: word32 = 0x19:w32
val ENXIO_0: word32 = 0x6:w32
val EOPNOTSUPP_0: word32 = 0x5F:w32
val EOVERFLOW_0: word32 = 0x4B:w32
val EPERM_0: word32 = 0x1:w32
val EPIPE_0: word32 = 0x20:w32
val EPROTO_0: word32 = 0x47:w32
val EPROTONOSUPPORT_0: word32 = 0x5D:w32
val EPROTOTYPE_0: word32 = 0x5B:w32
val ERANGE_0: word32 = 0x22:w32
val EROFS_0: word32 = 0x1E:w32
val ESPIPE_0: word32 = 0x1D:w32
val ESRCH_0: word32 = 0x3:w32
val ESTALE_0: word32 = 0x74:w32
val ETIME_0: word32 = 0x3E:w32
val ETIMEDOUT_0: word32 = 0x6E:w32
val ETXTBSY_0: word32 = 0x1A:w32
val EWOULDBLOCK_0: word32 = 0xB:w32
val EXDEV_0: word32 = 0x12:w32
val x_173: unit = ()
val print_0: lambdas_291 = con printEnv_0 (x_173 (*()*))
val x_174: unit = ()
val toWord_0: lambdas_290 = con toWordEnv_0 (x_174 (*()*))
val x_175: unit = ()
val idFromWord8_0: lambdas_289 = con idFromWord8Env_0 (x_175 (*()*))
val tuple_8: unit = ()
val <=_1: lambdas_288 = con <=Env_1 (tuple_8 (*()*))
val realSize_0: word32 = 0x20:w32
val exponentBias_0: word32 = 0x7F:w32
val precision_4: word32 = 0x18:w32
val x_176: unit = ()
val +_1: lambdas_287 = con +Env_1 (x_176 (*()*))
val x_177: unit = ()
val -_1: lambdas_286 = con -Env_1 (x_177 (*()*))
val x_178: unit = ()
val ~_0: lambdas_285 = con ~Env_0 (x_178 (*()*))
val x_179: unit = ()
val <_3: lambdas_284 = con <Env_3 (x_179 (*()*))
val x_180: unit = ()
val <=_2: lambdas_283 = con <=Env_2 (x_180 (*()*))
val x_181: unit = ()
val round_0: lambdas_282 = con roundEnv_0 (x_181 (*()*))
val x_182: unit = ()
val fromInt8Unsafe_0: lambdas_281 = con fromInt8UnsafeEnv_0 (x_182 (*()*))
val x_183: unit = ()
val fromInt16Unsafe_0: lambdas_280 = con fromInt16UnsafeEnv_0 (x_183 (*()*))
val x_184: unit = ()
val fromInt32Unsafe_0: lambdas_279 = con fromInt32UnsafeEnv_0 (x_184 (*()*))
val x_185: unit = ()
val fromInt64Unsafe_0: lambdas_278 = con fromInt64UnsafeEnv_0 (x_185 (*()*))
val x_186: unit = ()
val fromReal32Unsafe_0: lambdas_277 = con fromReal32UnsafeEnv_0 (x_186 (*()*))
val x_187: unit = ()
val fromWord8Unsafe_0: lambdas_276 = con fromWord8UnsafeEnv_0 (x_187 (*()*))
val x_188: unit = ()
val fromWord16Unsafe_0: lambdas_275 = con fromWord16UnsafeEnv_0 (x_188 (*()*))
val x_189: unit = ()
val fromWord32Unsafe_0: lambdas_274 = con fromWord32UnsafeEnv_0 (x_189 (*()*))
val x_190: unit = ()
val fromWord64Unsafe_0: lambdas_273 = con fromWord64UnsafeEnv_0 (x_190 (*()*))
val x_191: unit = ()
val toInt8Unsafe_0: lambdas_272 = con toInt8UnsafeEnv_0 (x_191 (*()*))
val x_192: unit = ()
val toInt16Unsafe_0: lambdas_271 = con toInt16UnsafeEnv_0 (x_192 (*()*))
val x_193: unit = ()
val toInt32Unsafe_0: lambdas_270 = con toInt32UnsafeEnv_0 (x_193 (*()*))
val x_194: unit = ()
val toInt64Unsafe_0: lambdas_269 = con toInt64UnsafeEnv_0 (x_194 (*()*))
val x_195: unit = ()
val toReal32Unsafe_0: lambdas_268 = con toReal32UnsafeEnv_0 (x_195 (*()*))
val x_196: unit = ()
val toWord8Unsafe_0: lambdas_267 = con toWord8UnsafeEnv_0 (x_196 (*()*))
val x_197: unit = ()
val toWord16Unsafe_0: lambdas_266 = con toWord16UnsafeEnv_0 (x_197 (*()*))
val x_198: unit = ()
val toWord32Unsafe_0: lambdas_265 = con toWord32UnsafeEnv_0 (x_198 (*()*))
val x_199: unit = ()
val toWord64Unsafe_0: lambdas_264 = con toWord64UnsafeEnv_0 (x_199 (*()*))
val tuple_9: unit = ()
val >_2: lambdas_263 = con >Env_2 (tuple_9 (*()*))
val tuple_10: unit = ()
val >=_3: lambdas_262 = con >=Env_3 (tuple_10 (*()*))
val realSize_1: word32 = 0x40:w32
val exponentBias_1: word32 = 0x3FF:w32
val precision_5: word32 = 0x35:w32
val x_200: unit = ()
val +_2: lambdas_261 = con +Env_2 (x_200 (*()*))
val x_201: unit = ()
val -_2: lambdas_260 = con -Env_2 (x_201 (*()*))
val x_202: unit = ()
val ~_1: lambdas_259 = con ~Env_1 (x_202 (*()*))
val x_203: unit = ()
val <_4: lambdas_258 = con <Env_4 (x_203 (*()*))
val x_204: unit = ()
val <=_3: lambdas_257 = con <=Env_3 (x_204 (*()*))
val x_205: unit = ()
val round_1: lambdas_256 = con roundEnv_1 (x_205 (*()*))
val x_206: unit = ()
val fromInt8Unsafe_1: lambdas_255 = con fromInt8UnsafeEnv_1 (x_206 (*()*))
val x_207: unit = ()
val fromInt16Unsafe_1: lambdas_254 = con fromInt16UnsafeEnv_1 (x_207 (*()*))
val x_208: unit = ()
val fromInt32Unsafe_1: lambdas_253 = con fromInt32UnsafeEnv_1 (x_208 (*()*))
val x_209: unit = ()
val fromInt64Unsafe_1: lambdas_252 = con fromInt64UnsafeEnv_1 (x_209 (*()*))
val x_210: unit = ()
val fromReal32Unsafe_1: lambdas_251 = con fromReal32UnsafeEnv_1 (x_210 (*()*))
val x_211: unit = ()
val fromWord8Unsafe_1: lambdas_250 = con fromWord8UnsafeEnv_1 (x_211 (*()*))
val x_212: unit = ()
val fromWord16Unsafe_1: lambdas_249 = con fromWord16UnsafeEnv_1 (x_212 (*()*))
val x_213: unit = ()
val fromWord32Unsafe_1: lambdas_248 = con fromWord32UnsafeEnv_1 (x_213 (*()*))
val x_214: unit = ()
val fromWord64Unsafe_1: lambdas_247 = con fromWord64UnsafeEnv_1 (x_214 (*()*))
val x_215: unit = ()
val toInt8Unsafe_1: lambdas_246 = con toInt8UnsafeEnv_1 (x_215 (*()*))
val x_216: unit = ()
val toInt16Unsafe_1: lambdas_245 = con toInt16UnsafeEnv_1 (x_216 (*()*))
val x_217: unit = ()
val toInt32Unsafe_1: lambdas_244 = con toInt32UnsafeEnv_1 (x_217 (*()*))
val x_218: unit = ()
val toInt64Unsafe_1: lambdas_243 = con toInt64UnsafeEnv_1 (x_218 (*()*))
val x_219: unit = ()
val toReal32Unsafe_1: lambdas_242 = con toReal32UnsafeEnv_1 (x_219 (*()*))
val x_220: unit = ()
val toWord8Unsafe_1: lambdas_241 = con toWord8UnsafeEnv_1 (x_220 (*()*))
val x_221: unit = ()
val toWord16Unsafe_1: lambdas_240 = con toWord16UnsafeEnv_1 (x_221 (*()*))
val x_222: unit = ()
val toWord32Unsafe_1: lambdas_239 = con toWord32UnsafeEnv_1 (x_222 (*()*))
val x_223: unit = ()
val toWord64Unsafe_1: lambdas_238 = con toWord64UnsafeEnv_1 (x_223 (*()*))
val tuple_11: unit = ()
val >_3: lambdas_237 = con >Env_3 (tuple_11 (*()*))
val tuple_12: unit = ()
val >=_4: lambdas_236 = con >=Env_4 (tuple_12 (*()*))
val x_224: unit = ()
val castFromWord_0: lambdas_235 = con castFromWordEnv_0 (x_224 (*()*))
val x_225: unit = ()
val castFromWord_1: lambdas_234 = con castFromWordEnv_1 (x_225 (*()*))
val x_226: (word8) vector = "unhandled exception: "
val x_227: unit = ()
val x_228: (word8) vector = "Fail "
val x_229: unit = ()
val x_230: (word8) vector = "\n"
val x_231: (word8) vector = "unhandled exception in Basis Library"
val x_232: unit = ()
val x_233: lambdas_233 = con xEnv_23 (x_232 (*()*))
val x_234: (word8) vector = "missing suffix in Basis Library"
val x_235: unit = ()
val x_236: lambdas_231 = con xEnv_24 (x_235 (*()*))
val x_1087: (word32, word32) tuple =
  (sizeInBits_40 (*0x8:w32*), sizeInBits_7 (*0x8:w32*))
val x_237: bool = con true
val x_238: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_239: ((unit) ref, (word8) vector) tuple =
  (x_1086, x_238 (*"MkNum0: I ... Bits"*))
val x_240: exn = con Fail8_0 (x_239)
val x_241: unit = ()
val x_242: word8 = 0x0:w8
val x_243: word32 = 0x0:w32
val x_244: word32 = 0x1:w32
val x_245: unit = ()
val x_246: lambdas_230 = con xEnv_25 (x_245 (*()*))
val x_247: unit = ()
val x_248: lambdas_229 = con xEnv_26 (x_247 (*()*))
val x_249: word32 = 0x1:w32
val x_250: word32 = 0x1:w32
val x_1088: (word32, word32) tuple =
  (sizeInBits_48 (*0x10:w32*), sizeInBits_15 (*0x10:w32*))
val x_251: bool = con true
val x_252: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_253: ((unit) ref, (word8) vector) tuple =
  (x_1086, x_252 (*"MkNum0: I ... Bits"*))
val x_254: exn = con Fail8_0 (x_253)
val x_255: unit = ()
val x_256: word16 = 0x0:w16
val x_257: word32 = 0x0:w32
val x_258: word32 = 0x1:w32
val x_259: unit = ()
val x_260: lambdas_228 = con xEnv_27 (x_259 (*()*))
val x_261: unit = ()
val x_262: lambdas_227 = con xEnv_28 (x_261 (*()*))
val x_263: word32 = 0x1:w32
val x_264: word32 = 0x1:w32
val x_1089: (word32, word32) tuple =
  (sizeInBits_64 (*0x20:w32*), sizeInBits_31 (*0x20:w32*))
val x_265: bool = con true
val x_266: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_267: ((unit) ref, (word8) vector) tuple =
  (x_1086, x_266 (*"MkNum0: I ... Bits"*))
val x_268: exn = con Fail8_0 (x_267)
val x_269: unit = ()
val x_270: word32 = 0x0:w32
val x_271: word32 = 0x1:w32
val x_272: word32 = 0x0:w32
val x_273: word32 = 0x1:w32
val x_274: unit = ()
val x_275: lambdas_226 = con xEnv_29 (x_274 (*()*))
val x_276: unit = ()
val x_277: lambdas_225 = con xEnv_30 (x_276 (*()*))
val x_278: word32 = 0x1:w32
val x_279: word32 = 0x1:w32
val x_280: bool = con false
val x_1090: (word32, word32) tuple =
  (sizeInBits_65 (*0x40:w32*), sizeInBits_32 (*0x40:w32*))
val x_281: bool = con true
val x_282: (word8) vector = "MkNum0: Int.sizeInBits <> Word.sizeInBits"
val x_283: ((unit) ref, (word8) vector) tuple =
  (x_1086, x_282 (*"MkNum0: I ... Bits"*))
val x_284: exn = con Fail8_0 (x_283)
val x_285: unit = ()
val x_286: word32 = 0x0:w32
val x_287: word32 = 0x1:w32
val x_288: word32 = 0x0:w32
val x_289: word32 = 0x1:w32
val x_290: unit = ()
val x_291: lambdas_224 = con xEnv_31 (x_290 (*()*))
val x_292: unit = ()
val x_293: lambdas_223 = con xEnv_32 (x_292 (*()*))
val x_294: word32 = 0x1:w32
val x_295: word32 = 0x1:w32
val tuple_13: unit = ()
val ltu_0: lambdas_222 = con ltuEnv_0 (tuple_13 (*()*))
val tuple_14: unit = ()
val >_4: lambdas_221 = con >Env_4 (tuple_14 (*()*))
val tuple_15: unit = ()
val >=_5: lambdas_220 = con >=Env_5 (tuple_15 (*()*))
val bytes_0: word32 = 0x18:w32
val x_296: unit = ()
val x_297: lambdas_219 = con xEnv_33 (x_296 (*()*))
val tuple_16: unit = ()
val valOf_0: lambdas_218 = con valOfEnv_0 (tuple_16 (*()*))
val x_298: word32 = 0x0:w32
val tuple_17: unit = ()
val unsafeArrayAlloc_0: lambdas_217 =
  con unsafeArrayAllocEnv_0 (tuple_17 (*()*))
val smallCopyLimit_0: word64 = 0x5:w64
val tuple_18: unit = ()
val full_0: lambdas_216 = con fullEnv_0 (tuple_18 (*()*))
val x_299: word64 = 0x0:w64
val tuple_19: unit = ()
val vector_0: lambdas_215 = con vectorEnv_0 (tuple_19 (*()*))
val x_300: word64 = 0x0:w64
val x_301: word64 = 0x1:w64
val x_302: unit = ()
val x_303: word64 = 0x1:w64
val x_304: word64 = 0x0:w64
val tuple_20: unit = ()
val valOf_1: lambdas_213 = con valOfEnv_1 (tuple_20 (*()*))
val x_305: word32 = 0x0:w32
val tuple_21: unit = ()
val length_0: lambdas_212 = con lengthEnv_0 (tuple_21 (*()*))
val smallCopyLimit_1: word64 = 0x5:w64
val tuple_22: unit = ()
val full_1: lambdas_211 = con fullEnv_1 (tuple_22 (*()*))
val x_306: word64 = 0x0:w64
val tuple_23: unit = ()
val base_0: lambdas_210 = con baseEnv_0 (tuple_23 (*()*))
val x_307: word64 = 0x0:w64
val x_308: bool = con true
val x_309: word64 = 0x0:w64
val tuple_24: unit = ()
val isSmall_0: lambdas_209 = con isSmallEnv_0 (tuple_24 (*()*))
val x_310: word64 = 0x0:w64
val x_311: word64 = 0x1:w64
val tuple_25: unit = ()
val addTag_0: lambdas_208 = con addTagEnv_0 (tuple_25 (*()*))
val x_312: word32 = 0x1:w32
val x_313: word64 = 0x1:w64
val x_314: word32 = 0x8:w32
val x_1091: (word32, word32) tuple =
  (sizeInBits_32 (*0x40:w32*), x_314 (*0x8:w32*))
val x_315: word32 = 0x1:w32
val x_1092: (word32, word32) tuple =
  (sizeInBits_32 (*0x40:w32*), sizeInBits_32 (*0x40:w32*))
val x_316: bool = con true
val x_317: word32 = 0x2:w32
val x_318: bool = con true
val x_319: word64 = 0x1:w64
val x_320: word64 = 0x0:w64
val x_321: word64 = 0x1:w64
val x_322: list_8 = con nil_0
val x_323: word64 = 0x0:w64
val x_324: word64 = 0x1:w64
val x_1093: (word64, word64) tuple = (x_323 (*0x0:w64*), x_324 (*0x1:w64*))
val x_325: ((word64, word64) tuple, list_8) tuple =
  (x_1093, x_322 (*con nil_0*))
val x_326: list_8 = con ::_0 (x_325)
val x_327: word64 = 0x1:w64
val x_328: list_8 = con nil_0
val x_329: word64 = 0x0:w64
val x_330: word64 = 0x0:w64
val x_1094: (word64, word64) tuple = (x_329 (*0x0:w64*), x_330 (*0x0:w64*))
val x_331: ((word64, word64) tuple, list_8) tuple =
  (x_1094, x_328 (*con nil_0*))
val x_332: list_8 = con ::_0 (x_331)
val x_333: unit = ()
val x_334: word64 = 0x0:w64
val x_335: word32 = 0x1:w32
val x_336: word32 = 0x1:w32
val x_337: word32 = 0x1:w32
val x_338: word32 = 0x0:w32
val x_339: bool = con false
val x_340: word32 = 0x0:w32
val x_341: word32 = 0x0:w32
val x_342: word32 = 0x1:w32
val x_343: word64 = 0x1:w64
val x_344: word64 = 0x7:w64
val x_1095: (word64, word64) tuple = (x_343 (*0x1:w64*), x_344 (*0x7:w64*))
val x_345: word64 = 0x1:w64
val x_346: word64 = 0x1:w64
val x_347: unit = ()
val x_348: (unit) ref = prim Ref_ref[unit] (x_347 (*()*))
val x_349: exn = con Chr_0 (x_348)
val x_350: unit = ()
val x_1096: (unit) ref = prim Ref_ref[unit] (x_350 (*()*))
val x_351: list_0 = con nil_1
val tuple_26: unit = ()
val fromIntForLength_0: lambdas_199 =
  con fromIntForLengthEnv_0 (tuple_26 (*()*))
val x_352: unit = ()
val x_353: unit = ()
val x_354: word32 = 0x0:w32
val x_355: unit = ()
val x_356: (word8) vector = "Sequence.seq0"
val x_357: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_356 (*"Sequence.seq0"*))
val x_358: exn = con Fail_0 (x_357)
val x_359: word64 = 0x1:w64
val x_360: word64 = 0x0:w64
val x_1097: (word64, unit) tuple = (x_360 (*0x0:w64*), x_355 (*()*))
val x_361: word64 = 0x0:w64
val tuple_27: unit = ()
val loop_0: lambdas_196 = con loopEnv_0 (tuple_27 (*()*))
val x_362: unit = ()
val x_363: unit = ()
val x_364: word64 = 0x1:w64
val x_365: unit = ()
val x_366: word64 = 0x1:w64
val x_367: word64 = 0x0:w64
val x_368: word64 = 0x0:w64
val x_369: unit = ()
val x_370: unit = ()
val x_371: word64 = 0x1:w64
val x_372: word64 = 0x0:w64
val x_1098: (word64, unit) tuple = (x_372 (*0x0:w64*), x_369 (*()*))
val tuple_28: unit = ()
val slice_0: lambdas_191 = con sliceEnv_0 (tuple_28 (*()*))
val x_373: t_12 = con NONE_0
val x_374: bool = con true
val x_375: unit = ()
val x_376: unit = ()
val tuple_29: unit = ()
val update_0: lambdas_189 = con updateEnv_0 (tuple_29 (*()*))
val x_377: unit = ()
val x_378: unit = ()
val x_379: unit = ()
val x_380: lambdas_187 = con xEnv_34 (x_379 (*()*))
val x_381: unit = ()
val x_382: lambdas_186 = con xEnv_35 (x_381 (*()*))
val x_383: word32 = 0x100:w32
val x_384: word32 = 0x2:w32
val x_385: word32 = 0xA:w32
val x_386: word32 = 0x10:w32
val x_387: word32 = 0x8:w32
val x_388: unit = ()
val radixToInt_0: lambdas_185 = con radixToIntEnv_0 (x_388 (*()*))
val tuple_30: unit = ()
val range_0: lambdas_184 = con rangeEnv_0 (tuple_30 (*()*))
val x_389: bool = con false
val x_390: t_0 = con NONE_1
val x_391: word32 = 0x0:w32
val x_392: word8 = 0x30:w8
val x_393: word8 = 0x31:w8
val x_1099: (word32, word8, word8) tuple =
  (x_391 (*0x0:w32*), x_392 (*0x30:w8*), x_393 (*0x31:w8*))
val x_394: unit = ()
val x_395: unit = ()
val x_396: word64 = 0x1:w64
val x_397: word64 = 0x0:w64
val x_1100: (word64, unit) tuple = (x_397 (*0x0:w64*), x_394 (*()*))
val x_398: word32 = 0x0:w32
val x_399: word8 = 0x30:w8
val x_400: word8 = 0x37:w8
val x_1101: (word32, word8, word8) tuple =
  (x_398 (*0x0:w32*), x_399 (*0x30:w8*), x_400 (*0x37:w8*))
val x_401: unit = ()
val x_402: unit = ()
val x_403: word64 = 0x1:w64
val x_404: word64 = 0x0:w64
val x_1102: (word64, unit) tuple = (x_404 (*0x0:w64*), x_401 (*()*))
val x_405: word32 = 0x0:w32
val x_406: word8 = 0x30:w8
val x_407: word8 = 0x39:w8
val x_1103: (word32, word8, word8) tuple =
  (x_405 (*0x0:w32*), x_406 (*0x30:w8*), x_407 (*0x39:w8*))
val x_408: unit = ()
val x_409: unit = ()
val x_410: word64 = 0x1:w64
val x_411: word64 = 0x0:w64
val x_1104: (word64, unit) tuple = (x_411 (*0x0:w64*), x_408 (*()*))
val x_412: word32 = 0x0:w32
val x_413: word8 = 0x30:w8
val x_414: word8 = 0x39:w8
val x_1105: (word32, word8, word8) tuple =
  (x_412 (*0x0:w32*), x_413 (*0x30:w8*), x_414 (*0x39:w8*))
val x_415: word32 = 0xA:w32
val x_416: word8 = 0x61:w8
val x_417: word8 = 0x66:w8
val x_1106: (word32, word8, word8) tuple =
  (x_415 (*0xA:w32*), x_416 (*0x61:w8*), x_417 (*0x66:w8*))
val x_418: word32 = 0xA:w32
val x_419: word8 = 0x41:w8
val x_420: word8 = 0x46:w8
val x_1107: (word32, word8, word8) tuple =
  (x_418 (*0xA:w32*), x_419 (*0x41:w8*), x_420 (*0x46:w8*))
val x_421: list_1 = con nil_2
val x_422: unit = ()
val x_423: t_0 = con NONE_1
val x_424: unit = ()
val x_425: word64 = 0x1:w64
val x_426: word64 = 0x0:w64
val x_1108: (word64, unit) tuple = (x_426 (*0x0:w64*), x_422 (*()*))
val x_427: unit = ()
val x_428: word8 = 0x20:w8
val x_429: bool = con true
val x_430: word8 = 0x9:w8
val x_431: bool = con true
val x_432: word8 = 0xD:w8
val x_433: bool = con true
val x_434: word8 = 0xA:w8
val x_435: bool = con true
val x_436: word8 = 0xB:w8
val x_437: bool = con true
val x_438: word8 = 0xC:w8
val x_439: unit = ()
val x_440: word64 = 0x1:w64
val x_441: word64 = 0x0:w64
val x_1109: (word64, unit) tuple = (x_441 (*0x0:w64*), x_427 (*()*))
val tuple_31: unit = ()
val digitToChar_0: lambdas_177 = con digitToCharEnv_0 (tuple_31 (*()*))
val x_442: (word8) vector = "0123456789ABCDEF"
val x_443: unit = ()
val x_444: unit = ()
val x_445: word32 = 0x1:w32
val x_446: word8 = 0x0:w8
val x_447: unit = ()
val x_448: bool = con false
val x_449: radix_0 = con DEC_1
val x_450: word32 = 0x1:w32
val x_451: word8 = 0x0:w8
val x_452: unit = ()
val x_453: bool = con false
val x_454: unit = ()
val x_455: unit = ()
val x_456: bool = con true
val x_457: unit = ()
val x_458: unit = ()
val x_459: bool = con false
val x_460: bool = con false
val x_461: bool = con false
val x_462: word32 = 0x1:w32
val x_463: word8 = 0x7E:w8
val x_464: t_0 = con NONE_1
val x_465: word32 = 0x1:w32
val x_466: word32 = 0x1:w32
val x_467: unit = ()
val x_468: unit = ()
val tuple_32: unit = ()
val st_0: lambdas_171 = con stEnv_0 (tuple_32 (*()*))
val x_469: word32 = 0x1:w32
val x_470: word32 = 0x1:w32
val x_471: (word8) vector = "Word.bswap"
val x_472: ((unit) ref, (word8) vector) tuple = (x_1096, x_471 (*"Word.bswap"*))
val x_473: exn = con Fail_0 (x_472)
val x_474: unit = ()
val x_475: lambdas_169 = con xEnv_36 (x_474 (*()*))
val x_476: word32 = 0x4:w32
val x_1110: (lambdas_169, word32) tuple =
  (x_475 (*con xEnv_36 (x_474)*), x_476 (*0x4:w32*))
val x_477: unit = ()
val x_478: lambdas_168 = con xEnv_37 (x_477 (*()*))
val x_479: word32 = 0x10:w32
val x_1111: (lambdas_168, word32) tuple =
  (x_478 (*con xEnv_37 (x_477)*), x_479 (*0x10:w32*))
val x_480: unit = ()
val x_481: lambdas_167 = con xEnv_38 (x_480 (*()*))
val x_482: word32 = 0x20:w32
val x_1112: (lambdas_167, word32) tuple =
  (x_481 (*con xEnv_38 (x_480)*), x_482 (*0x20:w32*))
val x_483: word32 = 0x8:w32
val x_1113: (lambdas_171, word32) tuple =
  (st_0 (*con stEnv_ ... e_32)*), x_483 (*0x8:w32*))
val x_484: word32 = 0x2:w32
val x_485: radix_0 = con BIN_1
val x_486: word32 = 0x8:w32
val x_487: radix_0 = con OCT_1
val x_488: word32 = 0xA:w32
val x_489: radix_0 = con DEC_1
val x_490: word32 = 0x10:w32
val x_491: radix_0 = con HEX_0
val x_492: unit = ()
val x_493: (word8) vector = "EmbedWord"
val x_494: ((unit) ref, (word8) vector) tuple = (x_1096, x_493 (*"EmbedWord"*))
val x_495: exn = con Fail_0 (x_494)
val x_496: unit = ()
val x_497: (word8) vector = "EmbedWord"
val x_498: ((unit) ref, (word8) vector) tuple = (x_1096, x_497 (*"EmbedWord"*))
val x_499: exn = con Fail_0 (x_498)
val x_500: unit = ()
val x_501: (word8) vector = "EmbedWord"
val x_502: ((unit) ref, (word8) vector) tuple = (x_1096, x_501 (*"EmbedWord"*))
val x_503: exn = con Fail_0 (x_502)
val x_504: unit = ()
val x_505: (word8) vector = "EmbedWord"
val x_506: ((unit) ref, (word8) vector) tuple = (x_1096, x_505 (*"EmbedWord"*))
val x_507: exn = con Fail_0 (x_506)
val x_508: unit = ()
val x_509: (word8) vector = "EmbedWord"
val x_510: ((unit) ref, (word8) vector) tuple = (x_1096, x_509 (*"EmbedWord"*))
val x_511: exn = con Fail_0 (x_510)
val x_512: unit = ()
val x_513: (word8) vector = "EmbedWord"
val x_514: ((unit) ref, (word8) vector) tuple = (x_1096, x_513 (*"EmbedWord"*))
val x_515: exn = con Fail_0 (x_514)
val x_516: unit = ()
val x_517: (word8) vector = "EmbedWord"
val x_518: ((unit) ref, (word8) vector) tuple = (x_1096, x_517 (*"EmbedWord"*))
val x_519: exn = con Fail_0 (x_518)
val x_520: unit = ()
val x_521: (word8) vector = "EmbedWord"
val x_522: ((unit) ref, (word8) vector) tuple = (x_1096, x_521 (*"EmbedWord"*))
val x_523: exn = con Fail_0 (x_522)
val x_524: unit = ()
val x_525: (word8) vector = "EmbedWord"
val x_526: ((unit) ref, (word8) vector) tuple = (x_1096, x_525 (*"EmbedWord"*))
val x_527: exn = con Fail_0 (x_526)
val x_528: unit = ()
val x_529: (word8) vector = "EmbedWord"
val x_530: ((unit) ref, (word8) vector) tuple = (x_1096, x_529 (*"EmbedWord"*))
val x_531: exn = con Fail_0 (x_530)
val x_532: unit = ()
val x_533: (word8) vector = "EmbedWord"
val x_534: ((unit) ref, (word8) vector) tuple = (x_1096, x_533 (*"EmbedWord"*))
val x_535: exn = con Fail_0 (x_534)
val x_536: unit = ()
val x_537: (word8) vector = "EmbedWord"
val x_538: ((unit) ref, (word8) vector) tuple = (x_1096, x_537 (*"EmbedWord"*))
val x_539: exn = con Fail_0 (x_538)
val x_540: unit = ()
val x_541: (word8) vector = "EmbedWord"
val x_542: ((unit) ref, (word8) vector) tuple = (x_1096, x_541 (*"EmbedWord"*))
val x_543: exn = con Fail_0 (x_542)
val x_544: unit = ()
val x_545: (word8) vector = "EmbedWord"
val x_546: ((unit) ref, (word8) vector) tuple = (x_1096, x_545 (*"EmbedWord"*))
val x_547: exn = con Fail_0 (x_546)
val x_548: unit = ()
val x_549: (word8) vector = "EmbedWord"
val x_550: ((unit) ref, (word8) vector) tuple = (x_1096, x_549 (*"EmbedWord"*))
val x_551: exn = con Fail_0 (x_550)
val x_552: unit = ()
val x_553: (word8) vector = "EmbedWord"
val x_554: ((unit) ref, (word8) vector) tuple = (x_1096, x_553 (*"EmbedWord"*))
val x_555: exn = con Fail_0 (x_554)
val x_556: unit = ()
val x_557: (word8) vector = "EmbedWord"
val x_558: ((unit) ref, (word8) vector) tuple = (x_1096, x_557 (*"EmbedWord"*))
val x_559: exn = con Fail_0 (x_558)
val x_560: unit = ()
val x_561: (word8) vector = "EmbedWord"
val x_562: ((unit) ref, (word8) vector) tuple = (x_1096, x_561 (*"EmbedWord"*))
val x_563: exn = con Fail_0 (x_562)
val x_564: unit = ()
val x_565: (word8) vector = "EmbedWord"
val x_566: ((unit) ref, (word8) vector) tuple = (x_1096, x_565 (*"EmbedWord"*))
val x_567: exn = con Fail_0 (x_566)
val x_568: unit = ()
val x_569: (word8) vector = "EmbedWord"
val x_570: ((unit) ref, (word8) vector) tuple = (x_1096, x_569 (*"EmbedWord"*))
val x_571: exn = con Fail_0 (x_570)
val x_572: unit = ()
val x_573: (word8) vector = "EmbedWord"
val x_574: ((unit) ref, (word8) vector) tuple = (x_1096, x_573 (*"EmbedWord"*))
val x_575: exn = con Fail_0 (x_574)
val x_576: unit = ()
val x_577: (word8) vector = "EmbedWord"
val x_578: ((unit) ref, (word8) vector) tuple = (x_1096, x_577 (*"EmbedWord"*))
val x_579: exn = con Fail_0 (x_578)
val x_580: unit = ()
val x_581: (word8) vector = "EmbedWord"
val x_582: ((unit) ref, (word8) vector) tuple = (x_1096, x_581 (*"EmbedWord"*))
val x_583: exn = con Fail_0 (x_582)
val x_584: unit = ()
val x_585: (word8) vector = "EmbedWord"
val x_586: ((unit) ref, (word8) vector) tuple = (x_1096, x_585 (*"EmbedWord"*))
val x_587: exn = con Fail_0 (x_586)
val x_588: unit = ()
val x_589: (word8) vector = "EmbedWord"
val x_590: ((unit) ref, (word8) vector) tuple = (x_1096, x_589 (*"EmbedWord"*))
val x_591: exn = con Fail_0 (x_590)
val x_592: unit = ()
val x_593: (word8) vector = "EmbedWord"
val x_594: ((unit) ref, (word8) vector) tuple = (x_1096, x_593 (*"EmbedWord"*))
val x_595: exn = con Fail_0 (x_594)
val x_596: unit = ()
val x_597: (word8) vector = "EmbedWord"
val x_598: ((unit) ref, (word8) vector) tuple = (x_1096, x_597 (*"EmbedWord"*))
val x_599: exn = con Fail_0 (x_598)
val x_600: unit = ()
val x_601: (word8) vector = "EmbedWord"
val x_602: ((unit) ref, (word8) vector) tuple = (x_1096, x_601 (*"EmbedWord"*))
val x_603: exn = con Fail_0 (x_602)
val x_604: unit = ()
val x_605: (word8) vector = "EmbedWord"
val x_606: ((unit) ref, (word8) vector) tuple = (x_1096, x_605 (*"EmbedWord"*))
val x_607: exn = con Fail_0 (x_606)
val x_608: unit = ()
val x_609: (word8) vector = "EmbedWord"
val x_610: ((unit) ref, (word8) vector) tuple = (x_1096, x_609 (*"EmbedWord"*))
val x_611: exn = con Fail_0 (x_610)
val x_612: unit = ()
val x_613: (word8) vector = "EmbedWord"
val x_614: ((unit) ref, (word8) vector) tuple = (x_1096, x_613 (*"EmbedWord"*))
val x_615: exn = con Fail_0 (x_614)
val x_616: unit = ()
val x_617: (word8) vector = "EmbedWord"
val x_618: ((unit) ref, (word8) vector) tuple = (x_1096, x_617 (*"EmbedWord"*))
val x_619: exn = con Fail_0 (x_618)
val x_620: unit = ()
val x_621: (word8) vector = "EmbedWord"
val x_622: ((unit) ref, (word8) vector) tuple = (x_1096, x_621 (*"EmbedWord"*))
val x_623: exn = con Fail_0 (x_622)
val x_624: unit = ()
val x_625: (word8) vector = "EmbedWord"
val x_626: ((unit) ref, (word8) vector) tuple = (x_1096, x_625 (*"EmbedWord"*))
val x_627: exn = con Fail_0 (x_626)
val x_628: unit = ()
val x_629: (word8) vector = "EmbedWord"
val x_630: ((unit) ref, (word8) vector) tuple = (x_1096, x_629 (*"EmbedWord"*))
val x_631: exn = con Fail_0 (x_630)
val x_632: unit = ()
val x_633: (word8) vector = "EmbedWord"
val x_634: ((unit) ref, (word8) vector) tuple = (x_1096, x_633 (*"EmbedWord"*))
val x_635: exn = con Fail_0 (x_634)
val x_636: unit = ()
val x_637: (word8) vector = "EmbedWord"
val x_638: ((unit) ref, (word8) vector) tuple = (x_1096, x_637 (*"EmbedWord"*))
val x_639: exn = con Fail_0 (x_638)
val x_640: unit = ()
val x_641: (word8) vector = "EmbedWord"
val x_642: ((unit) ref, (word8) vector) tuple = (x_1096, x_641 (*"EmbedWord"*))
val x_643: exn = con Fail_0 (x_642)
val x_644: unit = ()
val x_645: (word8) vector = "EmbedWord"
val x_646: ((unit) ref, (word8) vector) tuple = (x_1096, x_645 (*"EmbedWord"*))
val x_647: exn = con Fail_0 (x_646)
val x_648: unit = ()
val x_649: (word8) vector = "EmbedWord"
val x_650: ((unit) ref, (word8) vector) tuple = (x_1096, x_649 (*"EmbedWord"*))
val x_651: exn = con Fail_0 (x_650)
val x_652: unit = ()
val x_653: (word8) vector = "EmbedWord"
val x_654: ((unit) ref, (word8) vector) tuple = (x_1096, x_653 (*"EmbedWord"*))
val x_655: exn = con Fail_0 (x_654)
val x_656: unit = ()
val x_657: (word8) vector = "EmbedWord"
val x_658: ((unit) ref, (word8) vector) tuple = (x_1096, x_657 (*"EmbedWord"*))
val x_659: exn = con Fail_0 (x_658)
val x_660: unit = ()
val x_661: (word8) vector = "EmbedWord"
val x_662: ((unit) ref, (word8) vector) tuple = (x_1096, x_661 (*"EmbedWord"*))
val x_663: exn = con Fail_0 (x_662)
val x_664: unit = ()
val x_665: (word8) vector = "EmbedWord"
val x_666: ((unit) ref, (word8) vector) tuple = (x_1096, x_665 (*"EmbedWord"*))
val x_667: exn = con Fail_0 (x_666)
val x_668: unit = ()
val x_669: (word8) vector = "EmbedWord"
val x_670: ((unit) ref, (word8) vector) tuple = (x_1096, x_669 (*"EmbedWord"*))
val x_671: exn = con Fail_0 (x_670)
val x_672: unit = ()
val x_673: (word8) vector = "EmbedWord"
val x_674: ((unit) ref, (word8) vector) tuple = (x_1096, x_673 (*"EmbedWord"*))
val x_675: exn = con Fail_0 (x_674)
val x_676: unit = ()
val x_677: (word8) vector = "EmbedWord"
val x_678: ((unit) ref, (word8) vector) tuple = (x_1096, x_677 (*"EmbedWord"*))
val x_679: exn = con Fail_0 (x_678)
val x_680: unit = ()
val x_681: (word8) vector = "EmbedWord"
val x_682: ((unit) ref, (word8) vector) tuple = (x_1096, x_681 (*"EmbedWord"*))
val x_683: exn = con Fail_0 (x_682)
val x_684: unit = ()
val x_685: (word8) vector = "EmbedWord"
val x_686: ((unit) ref, (word8) vector) tuple = (x_1096, x_685 (*"EmbedWord"*))
val x_687: exn = con Fail_0 (x_686)
val x_688: unit = ()
val x_689: (word8) vector = "EmbedWord"
val x_690: ((unit) ref, (word8) vector) tuple = (x_1096, x_689 (*"EmbedWord"*))
val x_691: exn = con Fail_0 (x_690)
val x_692: unit = ()
val x_693: (word8) vector = "EmbedWord"
val x_694: ((unit) ref, (word8) vector) tuple = (x_1096, x_693 (*"EmbedWord"*))
val x_695: exn = con Fail_0 (x_694)
val x_696: unit = ()
val x_697: (word8) vector = "EmbedWord"
val x_698: ((unit) ref, (word8) vector) tuple = (x_1096, x_697 (*"EmbedWord"*))
val x_699: exn = con Fail_0 (x_698)
val x_700: unit = ()
val x_701: (word8) vector = "EmbedWord"
val x_702: ((unit) ref, (word8) vector) tuple = (x_1096, x_701 (*"EmbedWord"*))
val x_703: exn = con Fail_0 (x_702)
val x_704: unit = ()
val x_705: (word8) vector = "EmbedWord"
val x_706: ((unit) ref, (word8) vector) tuple = (x_1096, x_705 (*"EmbedWord"*))
val x_707: exn = con Fail_0 (x_706)
val x_708: unit = ()
val x_709: (word8) vector = "EmbedWord"
val x_710: ((unit) ref, (word8) vector) tuple = (x_1096, x_709 (*"EmbedWord"*))
val x_711: exn = con Fail_0 (x_710)
val x_712: unit = ()
val x_713: (word8) vector = "EmbedWord"
val x_714: ((unit) ref, (word8) vector) tuple = (x_1096, x_713 (*"EmbedWord"*))
val x_715: exn = con Fail_0 (x_714)
val x_716: unit = ()
val x_717: (word8) vector = "EmbedWord"
val x_718: ((unit) ref, (word8) vector) tuple = (x_1096, x_717 (*"EmbedWord"*))
val x_719: exn = con Fail_0 (x_718)
val x_720: unit = ()
val x_721: (word8) vector = "EmbedWord"
val x_722: ((unit) ref, (word8) vector) tuple = (x_1096, x_721 (*"EmbedWord"*))
val x_723: exn = con Fail_0 (x_722)
val x_724: word32 = 0x1:w32
val x_1114: (word32, word32) tuple = (x_383 (*0x100:w32*), x_724 (*0x1:w32*))
val x_725: word32 = 0x0:w32
val x_726: t_7 = con NONE_2
val x_727: word32 = 0x1:w32
val x_728: unit = ()
val x_729: unit = ()
val x_730: word64 = 0x1:w64
val x_731: word64 = 0x0:w64
val x_1115: (word64, unit) tuple = (x_731 (*0x0:w64*), x_728 (*()*))
val x_732: t_1 = con NONE_3
val x_733: unit = ()
val x_734: lambdas_164 = con xEnv_39 (x_733 (*()*))
val x_735: unit = ()
val x_736: list_6 = con nil_3
val x_737: (word8) vector = "Fail: "
val x_738: unit = ()
val tuple_33: unit = ()
val sub_0: lambdas_163 = con subEnv_0 (tuple_33 (*()*))
val tuple_34: unit = ()
val new_0: lambdas_162 = con newEnv_0 (tuple_34 (*()*))
val x_739: list_2 = con nil_4
val x_740: unit = ()
val x_741: unit = ()
val x_742: unit = ()
val toRep_0: lambdas_161 = con toRepEnv_0 (x_742 (*()*))
val x_743: unit = ()
val fromRep_0: lambdas_160 = con fromRepEnv_0 (x_743 (*()*))
val tuple_35: unit = ()
val ::?_0: lambdas_159 = con ::?Env_0 (tuple_35 (*()*))
val x_744: word32 = 0xFFFFFFFF:w32
val x_745: (word8) vector = "acces"
val x_746: (word8) vector = "addrinuse"
val x_747: (word8) vector = "addrnotavail"
val x_748: (word8) vector = "afnosupport"
val x_749: (word8) vector = "again"
val x_750: (word8) vector = "already"
val x_751: (word8) vector = "badf"
val x_752: (word8) vector = "badmsg"
val x_753: (word8) vector = "busy"
val x_754: (word8) vector = "canceled"
val x_755: (word8) vector = "child"
val x_756: (word8) vector = "connaborted"
val x_757: (word8) vector = "connrefused"
val x_758: (word8) vector = "connreset"
val x_759: (word8) vector = "deadlk"
val x_760: (word8) vector = "destaddrreq"
val x_761: (word8) vector = "dom"
val x_762: (word8) vector = "dquot"
val x_763: (word8) vector = "exist"
val x_764: (word8) vector = "fault"
val x_765: (word8) vector = "fbig"
val x_766: (word8) vector = "hostunreach"
val x_767: (word8) vector = "idrm"
val x_768: (word8) vector = "ilseq"
val x_769: (word8) vector = "inprogress"
val x_770: (word8) vector = "intr"
val x_771: (word8) vector = "inval"
val x_772: (word8) vector = "io"
val x_773: (word8) vector = "isconn"
val x_774: (word8) vector = "isdir"
val x_775: (word8) vector = "loop"
val x_776: (word8) vector = "mfile"
val x_777: (word8) vector = "mlink"
val x_778: (word8) vector = "msgsize"
val x_779: (word8) vector = "multihop"
val x_780: (word8) vector = "nametoolong"
val x_781: (word8) vector = "netdown"
val x_782: (word8) vector = "netreset"
val x_783: (word8) vector = "netunreach"
val x_784: (word8) vector = "nfile"
val x_785: (word8) vector = "nobufs"
val x_786: (word8) vector = "nodata"
val x_787: (word8) vector = "nodev"
val x_788: (word8) vector = "noent"
val x_789: (word8) vector = "noexec"
val x_790: (word8) vector = "nolck"
val x_791: (word8) vector = "nolink"
val x_792: (word8) vector = "nomem"
val x_793: (word8) vector = "nomsg"
val x_794: (word8) vector = "noprotoopt"
val x_795: (word8) vector = "nospc"
val x_796: (word8) vector = "nosr"
val x_797: (word8) vector = "nostr"
val x_798: (word8) vector = "nosys"
val x_799: (word8) vector = "notconn"
val x_800: (word8) vector = "notdir"
val x_801: (word8) vector = "notempty"
val x_802: (word8) vector = "notsock"
val x_803: (word8) vector = "notsup"
val x_804: (word8) vector = "notty"
val x_805: (word8) vector = "nxio"
val x_806: (word8) vector = "opnotsupp"
val x_807: (word8) vector = "overflow"
val x_808: (word8) vector = "perm"
val x_809: (word8) vector = "pipe"
val x_810: (word8) vector = "proto"
val x_811: (word8) vector = "protonosupport"
val x_812: (word8) vector = "prototype"
val x_813: (word8) vector = "range"
val x_814: (word8) vector = "rofs"
val x_815: (word8) vector = "spipe"
val x_816: (word8) vector = "srch"
val x_817: (word8) vector = "stale"
val x_818: (word8) vector = "time"
val x_819: (word8) vector = "timedout"
val x_820: (word8) vector = "toobig"
val x_821: (word8) vector = "txtbsy"
val x_822: (word8) vector = "wouldblock"
val x_823: (word8) vector = "xdev"
val x_824: list_3 = con nil_5
val x_825: unit = ()
val x_1116: (unit) ref = prim Ref_ref[unit] (x_825 (*()*))
val x_826: t_1 = con NONE_3
val x_827: unit = ()
val x_828: lambdas_157 = con xEnv_40 (x_827 (*()*))
val x_829: unit = ()
val x_830: list_6 = con nil_3
val x_831: (word8) vector = ""
val x_832: list_6 = con nil_3
val x_833: (word8) vector = "]"
val x_834: ((word8) vector, list_6) tuple = (x_833 (*"]"*), x_832 (*con nil_3*))
val x_835: list_6 = con ::_1 (x_834)
val x_836: t_11 = con NONE_4
val x_837: (word8) vector = "<UNKNOWN>"
val x_838: (word8) vector = " ["
val x_839: (word8) vector = "SysErr: "
val x_840: unit = ()
val x_841: (word8) vector = "IEEEReal rounding mode not supported"
val x_842: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_841 (*"IEEEReal  ... rted"*))
val x_843: exn = con Fail_0 (x_842)
val x_844: word32 = 0x0:w32
val x_845: unit = ()
val x_846: (word8) vector = "Unknown error"
val x_847: bool = con false
val x_848: bool = con true
val x_849: word32 = 0x1:w32
val x_850: word32 = 0x0:w32
val x_851: unit = ()
val x_852: unit = ()
val x_853: word64 = 0x1:w64
val x_854: word64 = 0x0:w64
val x_1117: (word64, unit) tuple = (x_854 (*0x0:w64*), x_851 (*()*))
val x_855: t_8 = con TO_NEAREST_0
val x_856: t_8 = con TO_NEGINF_0
val x_857: t_8 = con TO_POSINF_0
val x_858: t_8 = con TO_ZERO_0
val x_859: (word8) vector = "IEEEReal.RoundingMode.fromInt"
val x_860: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_859 (*"IEEEReal. ... mInt"*))
val x_861: exn = con Fail_0 (x_860)
val x_862: unit = ()
val x_863: lambdas_152 = con xEnv_41 (x_862 (*()*))
val x_864: float_class_0 = con INF_0
val x_865: float_class_0 = con NAN_1
val x_866: float_class_0 = con ZERO_1
val x_867: float_class_0 = con SUBNORMAL_1
val x_868: float_class_0 = con NORMAL_1
val x_1118: (word32, word32) tuple =
  (precision_4 (*0x18:w32*), precision_4 (*0x18:w32*))
val x_869: unit = ()
val x_870: lambdas_149 = con xEnv_42 (x_869 (*()*))
val x_1119: (lambdas_149, lambdas_268) tuple =
  (x_870 (*con xEnv_42 (x_869)*), toReal32Unsafe_0 (*con toReal ... _195)*))
val x_871: unit = ()
val x_872: word32 = 0x1:w32
val x_873: t_8 = con TO_NEAREST_0
val x_874: unit = ()
val x_875: word32 = 0x0:w32
val x_876: t_8 = con TO_NEAREST_0
val x_877: unit = ()
val x_878: word32 = 0x1:w32
val x_879: t_8 = con TO_NEAREST_0
val x_880: unit = ()
val x_881: word32 = 0x0:w32
val x_882: t_8 = con TO_NEAREST_0
val x_883: unit = ()
val x_884: word32 = 0x1:w32
val x_885: t_8 = con TO_NEAREST_0
val x_886: unit = ()
val x_887: word32 = 0x0:w32
val x_888: t_8 = con TO_NEAREST_0
val x_889: unit = ()
val x_890: word32 = 0x1:w32
val x_891: t_8 = con TO_NEAREST_0
val x_892: unit = ()
val x_893: word32 = 0x0:w32
val x_894: t_8 = con TO_NEAREST_0
val x_895: unit = ()
val x_896: t_8 = con TO_NEAREST_0
val x_897: unit = ()
val x_898: word32 = 0x0:w32
val x_899: t_8 = con TO_NEAREST_0
val x_900: unit = ()
val x_901: t_8 = con TO_NEAREST_0
val x_902: unit = ()
val x_903: word32 = 0x0:w32
val x_904: t_8 = con TO_NEAREST_0
val x_905: unit = ()
val x_906: t_8 = con TO_NEAREST_0
val x_907: unit = ()
val x_908: word32 = 0x0:w32
val x_909: t_8 = con TO_NEAREST_0
val x_910: unit = ()
val x_911: t_8 = con TO_NEAREST_0
val x_912: unit = ()
val x_913: word32 = 0x0:w32
val x_914: t_8 = con TO_NEAREST_0
val x_915: unit = ()
val x_916: float_class_0 = con INF_0
val x_917: float_class_0 = con NAN_1
val x_918: float_class_0 = con ZERO_1
val x_919: float_class_0 = con SUBNORMAL_1
val x_920: float_class_0 = con NORMAL_1
val x_1120: (word32, word32) tuple =
  (precision_5 (*0x35:w32*), precision_4 (*0x18:w32*))
val x_921: unit = ()
val x_922: lambdas_95 = con xEnv_43 (x_921 (*()*))
val x_1121: (lambdas_95, lambdas_242) tuple =
  (x_922 (*con xEnv_43 (x_921)*), toReal32Unsafe_1 (*con toReal ... _219)*))
val x_923: unit = ()
val x_924: word32 = 0x1:w32
val x_925: t_8 = con TO_NEAREST_0
val x_926: unit = ()
val x_927: word32 = 0x0:w32
val x_928: t_8 = con TO_NEAREST_0
val x_929: unit = ()
val x_930: word32 = 0x1:w32
val x_931: t_8 = con TO_NEAREST_0
val x_932: unit = ()
val x_933: word32 = 0x0:w32
val x_934: t_8 = con TO_NEAREST_0
val x_935: unit = ()
val x_936: word32 = 0x1:w32
val x_937: t_8 = con TO_NEAREST_0
val x_938: unit = ()
val x_939: word32 = 0x0:w32
val x_940: t_8 = con TO_NEAREST_0
val x_941: unit = ()
val x_942: word32 = 0x1:w32
val x_943: t_8 = con TO_NEAREST_0
val x_944: unit = ()
val x_945: word32 = 0x0:w32
val x_946: t_8 = con TO_NEAREST_0
val x_947: unit = ()
val x_948: t_8 = con TO_NEAREST_0
val x_949: unit = ()
val x_950: word32 = 0x0:w32
val x_951: t_8 = con TO_NEAREST_0
val x_952: unit = ()
val x_953: t_8 = con TO_NEAREST_0
val x_954: unit = ()
val x_955: word32 = 0x0:w32
val x_956: t_8 = con TO_NEAREST_0
val x_957: unit = ()
val x_958: t_8 = con TO_NEAREST_0
val x_959: unit = ()
val x_960: word32 = 0x0:w32
val x_961: t_8 = con TO_NEAREST_0
val x_962: unit = ()
val x_963: t_8 = con TO_NEAREST_0
val x_964: unit = ()
val x_965: word32 = 0x0:w32
val x_966: t_8 = con TO_NEAREST_0
val x_967: unit = ()
val x_968: unit = ()
val x_1122: (unit) ref = prim Ref_ref[unit] (x_968 (*()*))
val x_969: t_1 = con NONE_3
val x_970: unit = ()
val x_971: lambdas_25 = con xEnv_44 (x_970 (*()*))
val x_972: unit = ()
val x_973: list_6 = con nil_3
val x_974: (word8) vector = "\" failed with "
val x_975: (word8) vector = " \""
val x_976: (word8) vector = "Io: "
val x_977: unit = ()
val x_978: unit = ()
val x_979: lambdas_24 = con xEnv_45 (x_978 (*()*))
val x_980: word32 = 0x1:w32
val x_981: word32 = 0x0:w32
val x_982: bool = con false
val tuple_36: unit = ()
val halt_0: lambdas_23 = con haltEnv_0 (tuple_36 (*()*))
val x_983: (word8) vector = "MLton.Exit.halt"
val x_984: (word8) vector = "MLton.Exit.exit"
val x_985: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_984 (*"MLton.Exit.exit"*))
val x_986: exn = con Fail_0 (x_985)
val x_987: bool = con true
val x_988: word32 = 0x0:w32
val x_989: word32 = 0x100:w32
val x_990: bool = con false
val x_991: unit = ()
val tuple_37: unit = ()
val loop_1: lambdas_22 = con loopEnv_1 (tuple_37 (*()*))
val x_992: unit = ()
val x_993: unit = ()
val x_994: (word8) vector = "MLton.Exit.exit"
val x_995: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_994 (*"MLton.Exit.exit"*))
val x_996: exn = con Fail_0 (x_995)
val x_997: list_6 = con nil_3
val x_998: (word8) vector = "exit must have 0 <= status < 256"
val x_999: ((word8) vector, list_6) tuple =
  (x_998 (*"exit must ...  256"*), x_997 (*con nil_3*))
val x_1000: list_6 = con ::_1 (x_999)
val x_1001: (word8) vector = "): "
val x_1002: ((word8) vector, list_6) tuple =
  (x_1001 (*"): "*), x_1000 (*con ::_1 (x_999)*))
val x_1003: list_6 = con ::_1 (x_1002)
val x_1004: unit = ()
val x_1005: unit = ()
val x_1006: bool = con true
val x_1007: unit = ()
val x_1008: unit = ()
val x_1009: bool = con false
val x_1010: bool = con false
val x_1011: word32 = 0x1:w32
val x_1012: word8 = 0x7E:w8
val x_1013: t_0 = con NONE_1
val x_1014: word32 = 0x1:w32
val x_1015: word32 = 0x1:w32
val x_1016: unit = ()
val x_1017: unit = ()
val x_1018: (word8) vector = "MLton.Exit.exit("
val x_1019: (word8) vector = "Top-level suffix returned.\n"
val x_1020: (word8) vector = "Top-level suffix raised exception.\n"
val x_1021: (word8) vector = "MLton.Exit.wrapSuffix"
val x_1022: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_1021 (*"MLton.Exi ... ffix"*))
val x_1023: exn = con Fail_0 (x_1022)
val x_1024: list_6 = con nil_3
val x_1025: (word8) vector = "\n"
val x_1026: ((word8) vector, list_6) tuple =
  (x_1025 (*"\n"*), x_1024 (*con nil_3*))
val x_1027: list_6 = con ::_1 (x_1026)
val x_1028: (word8) vector = "unhandled exception: "
val x_1029: (word8) vector = "Top-level handler returned.\n"
val x_1030: (word8) vector = "Top-level handler raised exception.\n"
val x_1031: (word8) vector = "MLton.Exn.wrapHandler"
val x_1032: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_1031 (*"MLton.Exn ... dler"*))
val x_1033: exn = con Fail_0 (x_1032)
val x_1034: list_4 = con nil_6
val tuple_38: unit = ()
val make_0: lambdas_13 = con makeEnv_0 (tuple_38 (*()*))
val x_1035: bool = con false
val x_1036: bool = con false
val x_1037: unit = ()
val x_1038: unit = ()
val x_1039: (word8) vector = "setCurrent of freed profile data"
val x_1040: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_1039 (*"setCurren ... data"*))
val x_1041: exn = con Fail_0 (x_1040)
val x_1042: unit = ()
val x_1043: bool = con false
val x_1044: bool = con true
val x_1045: unit = ()
val x_1046: unit = ()
val x_1047: unit = ()
val x_1048: unit = ()
val x_1049: unit = ()
val x_1050: (word8) vector = "mlmon.out"
val x_1051: unit = ()
val x_1052: (word8) vector = "write of freed profile data"
val x_1053: ((unit) ref, (word8) vector) tuple =
  (x_1096, x_1052 (*"write of  ... data"*))
val x_1054: exn = con Fail_0 (x_1053)
val x_1055: unit = ()
val x_1056: word64 = 0x0:w64
val x_1057: word64 = 0x0:w64
val x_1058: word64 = 0x0:w64
val x_1059: word8 = 0x0:w8
val x_1060: word64 = 0x1:w64
val x_1061: (word8) vector = "NullString.fromString"
val x_1062: ((unit) ref, (word8) vector) tuple =
  (x_1086, x_1061 (*"NullStrin ... ring"*))
val x_1063: exn = con Fail8_0 (x_1062)
val x_1064: unit = ()
val tuple_39: unit = ()
val loop_2: lambdas_8 = con loopEnv_2 (tuple_39 (*()*))
val x_1065: unit = ()
val x_1066: list_4 = con nil_6
val x_1067: unit = ()
val x_1068: unit = ()
val tuple_40: unit = ()
val odd_0: lambdas_4 = con oddEnv_0 (tuple_40 (*()*))
val even_0: lambdas_5 = con evenEnv_0 (tuple_40 (*()*))
val x_1069: bool = con true
val x_1070: bool = con false
val x_1071: list_5 = con nil_7
val x_1072: word32 = 0x4:w32
val x_1073: (word32, list_5) tuple = (x_1072 (*0x4:w32*), x_1071 (*con nil_7*))
val x_1074: list_5 = con ::_2 (x_1073)
val x_1075: word32 = 0x3:w32
val x_1076: (word32, list_5) tuple =
  (x_1075 (*0x3:w32*), x_1074 (*con ::_2 (x_1073)*))
val x_1077: list_5 = con ::_2 (x_1076)
val x_1078: word32 = 0x2:w32
val x_1079: (word32, list_5) tuple =
  (x_1078 (*0x2:w32*), x_1077 (*con ::_2 (x_1076)*))
val x_1080: list_5 = con ::_2 (x_1079)
val x_1081: word32 = 0x1:w32
val x_1082: (word32, list_5) tuple =
  (x_1081 (*0x1:w32*), x_1080 (*con ::_2 (x_1079)*))
val x_1083: list_5 = con ::_2 (x_1082)
val x_1084: unit = ()
val x_1085: (word8) vector = "toplevel handler not installed"


(* Functions: *)
fun noinline main_0 (): {returns = Some (unit), raises = None} = L_0 ()
  block L_0 ()
    case x_2 (*con xEnv_0 (x_1)*) of
      xEnv_0 => L_1
  block L_1 (x_1123: unit)
    val x_1125: lambdas_380 = con xEnv_187 (x_1123)
    val x_1124: (lambdas_380) ref = prim Ref_ref[lambdas_380] (x_1125)
    case x_5 (*con xEnv_1 (x_4)*) of
      xEnv_1 => L_2
  block L_2 (x_1126: unit)
    val x_1128: lambdas_378 = con xEnv_185 (x_1126)
    val x_1127: (lambdas_378) ref = prim Ref_ref[lambdas_378] (x_1128)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_3
  block L_3 (env_0: unit)
    call L_4 (zextdFromInt32ToWord32_1 (env_0, sizeInBits_7 (*0x8:w32*))) handle _ => L_5
  block L_4 (sizeInBitsWord_0: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_6
  block L_6 (env_1: unit)
    call L_7 (zextdFromInt32ToWord32_1 (env_1, sizeInBits_15 (*0x10:w32*))) handle _ => L_5
  block L_7 (sizeInBitsWord_1: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_8
  block L_8 (env_2: unit)
    call L_9 (zextdFromInt32ToWord32_1 (env_2, sizeInBits_31 (*0x20:w32*))) handle _ => L_5
  block L_9 (sizeInBitsWord_2: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_10
  block L_10 (env_3: unit)
    call L_11 (zextdFromInt32ToWord32_1 (env_3, sizeInBits_32 (*0x40:w32*))) handle _ => L_5
  block L_11 (sizeInBitsWord_3: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_12
  block L_12 (env_4: unit)
    call L_13 (zextdFromInt32ToWord32_1 (env_4, sizeInBits_40 (*0x8:w32*))) handle _ => L_5
  block L_13 (sizeInBitsWord_4: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_14
  block L_14 (env_5: unit)
    call L_15 (zextdFromInt32ToWord32_1 (env_5, sizeInBits_48 (*0x10:w32*))) handle _ => L_5
  block L_15 (sizeInBitsWord_5: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_16
  block L_16 (env_6: unit)
    call L_17 (zextdFromInt32ToWord32_1 (env_6, sizeInBits_64 (*0x20:w32*))) handle _ => L_5
  block L_17 (sizeInBitsWord_6: word32)
    case zextdFromInt32ToWord32_0 (*con zextdF ... _100)*) of
      zextdFromInt32ToWord32Env_0 => L_18
  block L_18 (env_7: unit)
    call L_19 (zextdFromInt32ToWord32_1 (env_7, sizeInBits_65 (*0x40:w32*))) handle _ => L_5
  block L_19 (sizeInBitsWord_7: word32)
    case fromWord_0 (*con fromWo ... _167)*) of
      fromWordEnv_0 => L_20
  block L_20 (env_8: unit)
    call L_21 (fromWord_1 (env_8, x_168 (*0x0:w64*))) handle _ => L_5
  block L_21 (null_0: cpointer)
    case x_233 (*con xEnv_23 (x_232)*) of
      xEnv_23 => L_22
  block L_22 (x_1129: unit)
    val x_1130: lambdas_380 = con xEnv_188 (x_1129)
    val _: unit = prim Ref_assign[lambdas_380] (x_1124, x_1130)
    case x_236 (*con xEnv_24 (x_235)*) of
      xEnv_24 => L_23
  block L_23 (x_1131: unit)
    val x_1132: lambdas_378 = con xEnv_186 (x_1131)
    val _: unit = prim Ref_assign[lambdas_378] (x_1127, x_1132)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_24
  block L_24 (env_9: unit)
    call L_25 (x_1133 (env_9, x_1087)) handle _ => L_5
  block L_25 (x_1134: bool)
    case x_1134 of
      true => L_27 | false => L_26
  block L_26 ()
    val x_1135: (word32, word32) tuple = (sizeInBitsWord_4, sizeInBitsWord_0)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_28
  block L_28 (env_10: unit)
    call L_29 (x_1133 (env_10, x_1135)) handle _ => L_5
  block L_27 ()
    goto L_29 (x_237 (*con true*))
  block L_29 (x_1136: bool)
    case x_1136 of
      true => L_31 | false => L_30
  block L_30 ()
    case notb_0 (*con notbEn ... _114)*) of
      notbEnv_0 => L_32
  block L_32 (env_11: unit)
    call L_33 (notb_4 (env_11, x_242 (*0x0:w8*))) handle _ => L_5
  block L_33 (maxWord'_0: word8)
    case zextdFromInt32ToInt8_0 (*con zextdF ... x_96)*) of
      zextdFromInt32ToInt8Env_0 => L_34
  block L_34 (env_12: unit)
    call L_35 (zextdFromInt32ToInt8_1 (env_12, x_243 (*0x0:w32*))) handle _ => L_5
  block L_35 (zero_0: word8)
    case zextdFromInt32ToInt8_0 (*con zextdF ... x_96)*) of
      zextdFromInt32ToInt8Env_0 => L_36
  block L_36 (env_13: unit)
    call L_37 (zextdFromInt32ToInt8_1 (env_13, x_244 (*0x1:w32*))) handle _ => L_5
  block L_37 (one_0: word8)
    val x_1137: (word32, word32) tuple = (sizeInBitsWord_4, x_249 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_38
  block L_38 (env_14: unit)
    call L_39 (-_3 (env_14, x_1137)) handle _ => L_5
  block L_39 (x_1138: word32)
    val x_1139: (word8, word32) tuple = (one_0, x_1138)
    case x_246 (*con xEnv_25 (x_245)*) of
      xEnv_25 => L_40
  block L_40 (env_15: unit)
    call L_41 (x_1140 (env_15, x_1139)) handle _ => L_5
  block L_41 (minInt'_0: word8)
    case idFromInt8ToWord8_0 (*con idFrom ... x_88)*) of
      idFromInt8ToWord8Env_0 => L_42
  block L_42 (env_16: unit)
    call L_43 (idFromInt8ToWord8_1 (env_16, zero_0)) handle _ => L_5
  block L_43 (x_1141: word8)
    case notb_0 (*con notbEn ... _114)*) of
      notbEnv_0 => L_44
  block L_44 (env_17: unit)
    call L_45 (notb_4 (env_17, x_1141)) handle _ => L_5
  block L_45 (x_1142: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... x_92)*) of
      idFromWord8ToInt8Env_0 => L_46
  block L_46 (env_18: unit)
    call L_47 (idFromWord8ToInt8_1 (env_18, x_1142)) handle _ => L_5
  block L_47 (x_1143: word8)
    val x_1144: (word8, word32) tuple = (x_1143, x_250 (*0x1:w32*))
    case x_248 (*con xEnv_26 (x_247)*) of
      xEnv_26 => L_48
  block L_48 (env_19: unit)
    call L_49 (x_1145 (env_19, x_1144)) handle _ => L_5
  block L_49 (maxInt'_0: word8)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_50
  block L_50 (env_20: unit)
    call L_51 (x_1133 (env_20, x_1088)) handle _ => L_5
  block L_51 (x_1146: bool)
    case x_1146 of
      true => L_53 | false => L_52
  block L_52 ()
    val x_1147: (word32, word32) tuple = (sizeInBitsWord_5, sizeInBitsWord_1)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_54
  block L_54 (env_21: unit)
    call L_55 (x_1133 (env_21, x_1147)) handle _ => L_5
  block L_53 ()
    goto L_55 (x_251 (*con true*))
  block L_55 (x_1148: bool)
    case x_1148 of
      true => L_57 | false => L_56
  block L_56 ()
    case notb_1 (*con notbEn ... _117)*) of
      notbEnv_1 => L_58
  block L_58 (env_22: unit)
    call L_59 (notb_5 (env_22, x_256 (*0x0:w16*))) handle _ => L_5
  block L_59 (maxWord'_1: word16)
    case zextdFromInt32ToInt16_0 (*con zextdF ... x_97)*) of
      zextdFromInt32ToInt16Env_0 => L_60
  block L_60 (env_23: unit)
    call L_61 (zextdFromInt32ToInt16_1 (env_23, x_257 (*0x0:w32*))) handle _ => L_5
  block L_61 (zero_1: word16)
    case zextdFromInt32ToInt16_0 (*con zextdF ... x_97)*) of
      zextdFromInt32ToInt16Env_0 => L_62
  block L_62 (env_24: unit)
    call L_63 (zextdFromInt32ToInt16_1 (env_24, x_258 (*0x1:w32*))) handle _ => L_5
  block L_63 (one_1: word16)
    val x_1149: (word32, word32) tuple = (sizeInBitsWord_5, x_263 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_64
  block L_64 (env_25: unit)
    call L_65 (-_3 (env_25, x_1149)) handle _ => L_5
  block L_65 (x_1150: word32)
    val x_1151: (word16, word32) tuple = (one_1, x_1150)
    case x_260 (*con xEnv_27 (x_259)*) of
      xEnv_27 => L_66
  block L_66 (env_26: unit)
    call L_67 (x_1152 (env_26, x_1151)) handle _ => L_5
  block L_67 (minInt'_1: word16)
    case idFromInt16ToWord16_0 (*con idFrom ... x_89)*) of
      idFromInt16ToWord16Env_0 => L_68
  block L_68 (env_27: unit)
    call L_69 (idFromInt16ToWord16_1 (env_27, zero_1)) handle _ => L_5
  block L_69 (x_1153: word16)
    case notb_1 (*con notbEn ... _117)*) of
      notbEnv_1 => L_70
  block L_70 (env_28: unit)
    call L_71 (notb_5 (env_28, x_1153)) handle _ => L_5
  block L_71 (x_1154: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... x_93)*) of
      idFromWord16ToInt16Env_0 => L_72
  block L_72 (env_29: unit)
    call L_73 (idFromWord16ToInt16_1 (env_29, x_1154)) handle _ => L_5
  block L_73 (x_1155: word16)
    val x_1156: (word16, word32) tuple = (x_1155, x_264 (*0x1:w32*))
    case x_262 (*con xEnv_28 (x_261)*) of
      xEnv_28 => L_74
  block L_74 (env_30: unit)
    call L_75 (x_1157 (env_30, x_1156)) handle _ => L_5
  block L_75 (maxInt'_1: word16)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_76
  block L_76 (env_31: unit)
    call L_77 (x_1133 (env_31, x_1089)) handle _ => L_5
  block L_77 (x_1158: bool)
    case x_1158 of
      true => L_79 | false => L_78
  block L_78 ()
    val x_1159: (word32, word32) tuple = (sizeInBitsWord_6, sizeInBitsWord_2)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_80
  block L_80 (env_32: unit)
    call L_81 (x_1133 (env_32, x_1159)) handle _ => L_5
  block L_79 ()
    goto L_81 (x_265 (*con true*))
  block L_81 (x_1160: bool)
    case x_1160 of
      true => L_83 | false => L_82
  block L_82 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_84
  block L_84 (env_33: unit)
    call L_85 (zextdFromWord32ToWord32_1 (env_33, x_270 (*0x0:w32*))) handle _ => L_5
  block L_85 (zero_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_86
  block L_86 (env_34: unit)
    call L_87 (zextdFromWord32ToWord32_1 (env_34, x_271 (*0x1:w32*))) handle _ => L_5
  block L_87 (one_2: word32)
    case notb_2 (*con notbEn ... _121)*) of
      notbEnv_2 => L_88
  block L_88 (env_35: unit)
    call L_89 (notb_6 (env_35, zero_2)) handle _ => L_5
  block L_89 (maxWord'_2: word32)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_90
  block L_90 (env_36: unit)
    call L_91 (zextdFromInt32ToInt32_1 (env_36, x_272 (*0x0:w32*))) handle _ => L_5
  block L_91 (zero_3: word32)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_92
  block L_92 (env_37: unit)
    call L_93 (zextdFromInt32ToInt32_1 (env_37, x_273 (*0x1:w32*))) handle _ => L_5
  block L_93 (one_3: word32)
    val x_1161: (word32, word32) tuple = (sizeInBitsWord_6, x_278 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_94
  block L_94 (env_38: unit)
    call L_95 (-_3 (env_38, x_1161)) handle _ => L_5
  block L_95 (x_1162: word32)
    val x_1163: (word32, word32) tuple = (one_3, x_1162)
    case x_275 (*con xEnv_29 (x_274)*) of
      xEnv_29 => L_96
  block L_96 (env_39: unit)
    call L_97 (x_1164 (env_39, x_1163)) handle _ => L_5
  block L_97 (minInt'_2: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... x_90)*) of
      idFromInt32ToWord32Env_0 => L_98
  block L_98 (env_40: unit)
    call L_99 (idFromInt32ToWord32_1 (env_40, zero_3)) handle _ => L_5
  block L_99 (x_1165: word32)
    case notb_2 (*con notbEn ... _121)*) of
      notbEnv_2 => L_100
  block L_100 (env_41: unit)
    call L_101 (notb_6 (env_41, x_1165)) handle _ => L_5
  block L_101 (x_1166: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... x_94)*) of
      idFromWord32ToInt32Env_0 => L_102
  block L_102 (env_42: unit)
    call L_103 (idFromWord32ToInt32_1 (env_42, x_1166)) handle _ => L_5
  block L_103 (x_1167: word32)
    val x_1168: (word32, word32) tuple = (x_1167, x_279 (*0x1:w32*))
    case x_277 (*con xEnv_30 (x_276)*) of
      xEnv_30 => L_104
  block L_104 (env_43: unit)
    call L_105 (x_1169 (env_43, x_1168)) handle _ => L_5
  block L_105 (maxInt'_2: word32)
    val tuple_41: (word32, word32, word32) tuple = (zero_3, minInt'_2, one_3)
    val quot_0: lambdas_20 = con quotEnv_0 (tuple_41)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_106
  block L_106 (env_44: unit)
    call L_107 (x_1133 (env_44, x_1090)) handle _ => L_5
  block L_107 (x_1170: bool)
    case x_1170 of
      true => L_109 | false => L_108
  block L_108 ()
    val x_1171: (word32, word32) tuple = (sizeInBitsWord_7, sizeInBitsWord_3)
    case x_85 (*con xEnv_9 (x_84)*) of
      xEnv_9 => L_110
  block L_110 (env_45: unit)
    call L_111 (x_1133 (env_45, x_1171)) handle _ => L_5
  block L_109 ()
    goto L_111 (x_281 (*con true*))
  block L_111 (x_1172: bool)
    case x_1172 of
      true => L_113 | false => L_112
  block L_112 ()
    case zextdFromWord32ToWord64_0 (*con zextdF ... _104)*) of
      zextdFromWord32ToWord64Env_0 => L_114
  block L_114 (env_46: unit)
    call L_115 (zextdFromWord32ToWord64_1 (env_46, x_286 (*0x0:w32*))) handle _ => L_5
  block L_115 (zero_4: word64)
    case zextdFromWord32ToWord64_0 (*con zextdF ... _104)*) of
      zextdFromWord32ToWord64Env_0 => L_116
  block L_116 (env_47: unit)
    call L_117 (zextdFromWord32ToWord64_1 (env_47, x_287 (*0x1:w32*))) handle _ => L_5
  block L_117 (one_4: word64)
    case notb_3 (*con notbEn ... _129)*) of
      notbEnv_3 => L_118
  block L_118 (env_48: unit)
    call L_119 (notb_7 (env_48, zero_4)) handle _ => L_5
  block L_119 (maxWord'_3: word64)
    case zextdFromInt32ToInt64_0 (*con zextdF ... x_99)*) of
      zextdFromInt32ToInt64Env_0 => L_120
  block L_120 (env_49: unit)
    call L_121 (zextdFromInt32ToInt64_1 (env_49, x_288 (*0x0:w32*))) handle _ => L_5
  block L_121 (zero_5: word64)
    case zextdFromInt32ToInt64_0 (*con zextdF ... x_99)*) of
      zextdFromInt32ToInt64Env_0 => L_122
  block L_122 (env_50: unit)
    call L_123 (zextdFromInt32ToInt64_1 (env_50, x_289 (*0x1:w32*))) handle _ => L_5
  block L_123 (one_5: word64)
    val x_1173: (word32, word32) tuple = (sizeInBitsWord_7, x_294 (*0x1:w32*))
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_124
  block L_124 (env_51: unit)
    call L_125 (-_3 (env_51, x_1173)) handle _ => L_5
  block L_125 (x_1174: word32)
    val x_1175: (word64, word32) tuple = (one_5, x_1174)
    case x_291 (*con xEnv_31 (x_290)*) of
      xEnv_31 => L_126
  block L_126 (env_52: unit)
    call L_127 (x_1176 (env_52, x_1175)) handle _ => L_5
  block L_127 (minInt'_3: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_128
  block L_128 (env_53: unit)
    call L_129 (idFromInt64ToWord64_1 (env_53, zero_5)) handle _ => L_5
  block L_129 (x_1177: word64)
    case notb_3 (*con notbEn ... _129)*) of
      notbEnv_3 => L_130
  block L_130 (env_54: unit)
    call L_131 (notb_7 (env_54, x_1177)) handle _ => L_5
  block L_131 (x_1178: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... x_95)*) of
      idFromWord64ToInt64Env_0 => L_132
  block L_132 (env_55: unit)
    call L_133 (idFromWord64ToInt64_1 (env_55, x_1178)) handle _ => L_5
  block L_133 (x_1179: word64)
    val x_1180: (word64, word32) tuple = (x_1179, x_295 (*0x1:w32*))
    case x_293 (*con xEnv_32 (x_292)*) of
      xEnv_32 => L_134
  block L_134 (env_56: unit)
    call L_135 (x_1181 (env_56, x_1180)) handle _ => L_5
  block L_135 (maxInt'_3: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_136
  block L_136 (env_57: unit)
    call L_137 (valOf_2 (env_57, precision_0 (*con SOME_0 ... s_40)*))) handle _ => L_5
  block L_137 (x_1182: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_138
  block L_138 (env_58: unit)
    call L_139 (valOf_2 (env_58, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_139 (x_1183: word32)
    val x_1184: (word32, word32) tuple = (x_1183, x_1182)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_140
  block L_140 (env_59: unit)
    call L_141 (>=_6 (env_59, x_1184)) handle _ => L_5
  block L_141 (x_1185: bool)
    case x_1185 of
      true => L_143 | false => L_142
  block L_142 ()
    goto L_144 (maxInt'_3)
  block L_143 ()
    case sextdFromInt8ToInt64_0 (*con sextdF ... _105)*) of
      sextdFromInt8ToInt64Env_0 => L_145
  block L_145 (env_60: unit)
    call L_144 (sextdFromInt8ToInt64_1 (env_60, maxInt'_0)) handle _ => L_5
  block L_144 (x_1186: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_146
  block L_146 (env_61: unit)
    call L_147 (valOf_2 (env_61, precision_1 (*con SOME_0 ... s_48)*))) handle _ => L_5
  block L_147 (x_1187: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_148
  block L_148 (env_62: unit)
    call L_149 (valOf_2 (env_62, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_149 (x_1188: word32)
    val x_1189: (word32, word32) tuple = (x_1188, x_1187)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_150
  block L_150 (env_63: unit)
    call L_151 (>=_6 (env_63, x_1189)) handle _ => L_5
  block L_151 (x_1190: bool)
    case x_1190 of
      true => L_153 | false => L_152
  block L_152 ()
    goto L_154 (maxInt'_3)
  block L_153 ()
    case sextdFromInt16ToInt64_0 (*con sextdF ... _106)*) of
      sextdFromInt16ToInt64Env_0 => L_155
  block L_155 (env_64: unit)
    call L_154 (sextdFromInt16ToInt64_1 (env_64, maxInt'_1)) handle _ => L_5
  block L_154 (x_1191: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_156
  block L_156 (env_65: unit)
    call L_157 (valOf_2 (env_65, precision_2 (*con SOME_0 ... s_64)*))) handle _ => L_5
  block L_157 (x_1192: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_158
  block L_158 (env_66: unit)
    call L_159 (valOf_2 (env_66, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_159 (x_1193: word32)
    val x_1194: (word32, word32) tuple = (x_1193, x_1192)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_160
  block L_160 (env_67: unit)
    call L_161 (>=_6 (env_67, x_1194)) handle _ => L_5
  block L_161 (x_1195: bool)
    case x_1195 of
      true => L_163 | false => L_162
  block L_162 ()
    goto L_164 (maxInt'_3)
  block L_163 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_165
  block L_165 (env_68: unit)
    call L_164 (sextdFromInt32ToInt64_1 (env_68, maxInt'_2)) handle _ => L_5
  block L_164 (x_1196: word64)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_166
  block L_166 (env_69: unit)
    call L_167 (valOf_2 (env_69, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_167 (x_1197: word32)
    case valOf_0 (*con valOfE ... e_16)*) of
      valOfEnv_0 => L_168
  block L_168 (env_70: unit)
    call L_169 (valOf_2 (env_70, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_169 (x_1198: word32)
    val x_1199: (word32, word32) tuple = (x_1198, x_1197)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_170
  block L_170 (env_71: unit)
    call L_171 (>=_6 (env_71, x_1199)) handle _ => L_5
  block L_171 (x_1200: bool)
    case x_1200 of
      true => L_173 | false => L_172
  block L_172 ()
    goto L_174 (maxInt'_3)
  block L_173 ()
    case sextdFromInt64ToInt64_0 (*con sextdF ... _112)*) of
      sextdFromInt64ToInt64Env_0 => L_175
  block L_175 (env_72: unit)
    call L_174 (sextdFromInt64ToInt64_1 (env_72, maxInt'_3)) handle _ => L_5
  block L_174 (x_1201: word64)
    val arrayAlloc_0: lambdas_155 = con arrayAllocEnv_0 (x_1196)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_176
  block L_176 (env_73: unit)
    call L_177 (valOf_3 (env_73, precision_0 (*con SOME_0 ... s_40)*))) handle _ => L_5
  block L_177 (x_1202: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_178
  block L_178 (env_74: unit)
    call L_179 (valOf_3 (env_74, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_179 (x_1203: word32)
    val x_1204: (word32, word32) tuple = (x_1203, x_1202)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_180
  block L_180 (env_75: unit)
    call L_181 (>=_6 (env_75, x_1204)) handle _ => L_5
  block L_181 (x_1205: bool)
    case x_1205 of
      true => L_183 | false => L_182
  block L_182 ()
    goto L_184 (maxInt'_3)
  block L_183 ()
    case sextdFromInt8ToInt64_0 (*con sextdF ... _105)*) of
      sextdFromInt8ToInt64Env_0 => L_185
  block L_185 (env_76: unit)
    call L_184 (sextdFromInt8ToInt64_1 (env_76, maxInt'_0)) handle _ => L_5
  block L_184 (x_1206: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_186
  block L_186 (env_77: unit)
    call L_187 (valOf_3 (env_77, precision_1 (*con SOME_0 ... s_48)*))) handle _ => L_5
  block L_187 (x_1207: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_188
  block L_188 (env_78: unit)
    call L_189 (valOf_3 (env_78, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_189 (x_1208: word32)
    val x_1209: (word32, word32) tuple = (x_1208, x_1207)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_190
  block L_190 (env_79: unit)
    call L_191 (>=_6 (env_79, x_1209)) handle _ => L_5
  block L_191 (x_1210: bool)
    case x_1210 of
      true => L_193 | false => L_192
  block L_192 ()
    goto L_194 (maxInt'_3)
  block L_193 ()
    case sextdFromInt16ToInt64_0 (*con sextdF ... _106)*) of
      sextdFromInt16ToInt64Env_0 => L_195
  block L_195 (env_80: unit)
    call L_194 (sextdFromInt16ToInt64_1 (env_80, maxInt'_1)) handle _ => L_5
  block L_194 (x_1211: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_196
  block L_196 (env_81: unit)
    call L_197 (valOf_3 (env_81, precision_2 (*con SOME_0 ... s_64)*))) handle _ => L_5
  block L_197 (x_1212: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_198
  block L_198 (env_82: unit)
    call L_199 (valOf_3 (env_82, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_199 (x_1213: word32)
    val x_1214: (word32, word32) tuple = (x_1213, x_1212)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_200
  block L_200 (env_83: unit)
    call L_201 (>=_6 (env_83, x_1214)) handle _ => L_5
  block L_201 (x_1215: bool)
    case x_1215 of
      true => L_203 | false => L_202
  block L_202 ()
    goto L_204 (maxInt'_3)
  block L_203 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_205
  block L_205 (env_84: unit)
    call L_204 (sextdFromInt32ToInt64_1 (env_84, maxInt'_2)) handle _ => L_5
  block L_204 (x_1216: word64)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_206
  block L_206 (env_85: unit)
    call L_207 (valOf_3 (env_85, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_207 (x_1217: word32)
    case valOf_1 (*con valOfE ... e_20)*) of
      valOfEnv_1 => L_208
  block L_208 (env_86: unit)
    call L_209 (valOf_3 (env_86, precision_3 (*con SOME_0 ... s_65)*))) handle _ => L_5
  block L_209 (x_1218: word32)
    val x_1219: (word32, word32) tuple = (x_1218, x_1217)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_210
  block L_210 (env_87: unit)
    call L_211 (>=_6 (env_87, x_1219)) handle _ => L_5
  block L_211 (x_1220: bool)
    case x_1220 of
      true => L_213 | false => L_212
  block L_212 ()
    goto L_214 (maxInt'_3)
  block L_213 ()
    case sextdFromInt64ToInt64_0 (*con sextdF ... _112)*) of
      sextdFromInt64ToInt64Env_0 => L_215
  block L_215 (env_88: unit)
    call L_214 (sextdFromInt64ToInt64_1 (env_88, maxInt'_3)) handle _ => L_5
  block L_214 (x_1221: word64)
    val arrayAlloc_1: lambdas_12 = con arrayAllocEnv_1 (x_1216)
    val sequence_0: lambdas_11 = con sequenceEnv_0 (arrayAlloc_1)
    call L_216 (quot_1 (tuple_41, x_1091)) handle _ => L_5
  block L_216 (x_1222: word32)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _101)*) of
      zextdFromInt32ToWord64Env_0 => L_217
  block L_217 (env_89: unit)
    call L_218 (zextdFromInt32ToWord64_1 (env_89, x_1222)) handle _ => L_5
  block L_218 (bytesPerMPLimb_0: word64)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _101)*) of
      zextdFromInt32ToWord64Env_0 => L_219
  block L_219 (env_90: unit)
    call L_220 (zextdFromInt32ToWord64_1 (env_90, bytes_0 (*0x18:w32*))) handle _ => L_5
  block L_220 (bytesPerSequenceMetaData_0: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_221
  block L_221 (env_91: unit)
    call L_222 (idFromInt64ToWord64_1 (env_91, minInt'_3)) handle _ => L_5
  block L_222 (x_1223: word64)
    val x_1224: (word64, word32) tuple = (x_1223, x_315 (*0x1:w32*))
    case ~>>?_0 (*con ~>>?En ... _130)*) of
      ~>>?Env_0 => L_223
  block L_223 (env_92: unit)
    call L_224 (~>>?_1 (env_92, x_1224)) handle _ => L_5
  block L_224 (x_1225: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... x_95)*) of
      idFromWord64ToInt64Env_0 => L_225
  block L_225 (env_93: unit)
    call L_226 (idFromWord64ToInt64_1 (env_93, x_1225)) handle _ => L_5
  block L_226 (x_1226: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _102)*) of
      zextdFromInt64ToWord64Env_0 => L_227
  block L_227 (env_94: unit)
    call L_228 (zextdFromInt64ToWord64_1 (env_94, x_1226)) handle _ => L_5
  block L_228 (badObjptrWord_0: word64)
    case addTag_0 (*con addTag ... e_25)*) of
      addTagEnv_0 => L_229
  block L_229 (env_95: unit)
    call L_230 (addTag_1 (env_95, badObjptrWord_0)) handle _ => L_5
  block L_230 (badObjptrWordTagged_0: word64)
    case x_148 (*con xEnv_15 (x_147)*) of
      xEnv_15 => L_231
  block L_231 (env_96: unit)
    call L_232 (x_1227 (env_96, x_1226)) handle _ => L_5
  block L_232 (x_1228: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_233
  block L_233 (env_97: unit)
    call L_234 (idFromInt64ToWord64_1 (env_97, x_1228)) handle _ => L_5
  block L_234 (x_1229: word64)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_235
  block L_235 (env_98: unit)
    call L_236 (>_5 (env_98, x_1092)) handle _ => L_5
  block L_236 (x_1230: bool)
    case x_1230 of
      true => L_238 | false => L_237
  block L_237 ()
    val x_1231: (word32, word32) tuple = (sizeInBitsWord_3, x_317 (*0x2:w32*))
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_239
  block L_239 (env_99: unit)
    call L_240 (-_3 (env_99, x_1231)) handle _ => L_5
  block L_240 (shift_0: word32)
    val x_1232: (word64, word32) tuple = (x_1229, shift_0)
    case ~>>?_0 (*con ~>>?En ... _130)*) of
      ~>>?Env_0 => L_241
  block L_241 (env_100: unit)
    call L_242 (~>>?_1 (env_100, x_1232)) handle _ => L_5
  block L_242 (upperBits_0: word64)
    case notb_3 (*con notbEn ... _129)*) of
      notbEnv_3 => L_243
  block L_243 (env_101: unit)
    call L_244 (notb_7 (env_101, zero_4)) handle _ => L_5
  block L_244 (oneBits_0: word64)
    val x_1233: (word64, word64) tuple = (upperBits_0, zero_4)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_245
  block L_245 (env_102: unit)
    call L_246 (x_1234 (env_102, x_1233)) handle _ => L_5
  block L_246 (x_1235: bool)
    case x_1235 of
      true => L_248 | false => L_247
  block L_247 ()
    val x_1236: (word64, word64) tuple = (upperBits_0, oneBits_0)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_249
  block L_249 (env_103: unit)
    call L_250 (x_1234 (env_103, x_1236)) handle _ => L_5
  block L_248 ()
    goto L_250 (x_318 (*con true*))
  block L_238 ()
    goto L_250 (x_316 (*con true*))
  block L_250 (x_1237: bool)
    case x_1237 of
      true => L_252 | false => L_251
  block L_251 ()
    val tuple_42: (word64, word32) tuple = (zero_4, sizeInBitsWord_3)
    case idFromWord64ToInt64_0 (*con idFrom ... x_95)*) of
      idFromWord64ToInt64Env_0 => L_253
  block L_253 (env_104: unit)
    call L_254 (idFromWord64ToInt64_1 (env_104, x_1229)) handle _ => L_5
  block L_254 (x_1238: word64)
    val x_1239: (word64, word64) tuple = (x_1238, x_320 (*0x0:w64*))
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_255
  block L_255 (env_105: unit)
    call L_256 (<_5 (env_105, x_1239)) handle _ => L_5
  block L_256 (x_1240: bool)
    case x_1240 of
      true => L_258 | false => L_257
  block L_257 ()
    val x_1241: (word64, word64, list_8) tuple =
      (x_1229, x_327 (*0x1:w64*), x_332 (*con ::_0 (x_331)*))
    call L_259 (loop_3 (tuple_42, x_1241)) handle _ => L_5
  block L_258 ()
    val x_1243: word64 = prim Word64_neg (x_1229)
    val x_1242: (word64, word64, list_8) tuple =
      (x_1243, x_321 (*0x1:w64*), x_326 (*con ::_0 (x_325)*))
    call L_259 (loop_3 (tuple_42, x_1242)) handle _ => L_5
  block L_259 (x_1244: (word64, list_8) tuple)
    val acc_0: list_8 = #1 (x_1244)
    val n_0: word64 = #0 (x_1244)
    val x_1245: (word64) array = prim Array_alloc[word64] (n_0)
    call L_260 (loop_4 (x_1245, acc_0)) handle _ => L_5
  block L_260 (x_1246: unit)
    val x_1248: (word64) vector = prim Array_toVector[word64] (x_1245)
    val x_1247: intInf = prim WordVector_toIntInf (x_1248)
    goto L_261 (x_1247)
  block L_252 ()
    case addTag_0 (*con addTag ... e_25)*) of
      addTagEnv_0 => L_262
  block L_262 (env_106: unit)
    call L_263 (addTag_1 (env_106, x_1229)) handle _ => L_5
  block L_263 (x_1249: word64)
    val x_1250: intInf = prim Word_toIntInf (x_1249)
    goto L_261 (x_1250)
  block L_261 (x_1251: intInf)
    val tuple_44:
      (word64, word32, word32, word32, lambdas_20, word32, word32, word32) tuple =
      (bytesPerSequenceMetaData_0,
       minInt'_2,
       one_3,
       zero_3,
       quot_0,
       sizeInBitsWord_2,
       zero_2,
       one_2)
    val messagers_0: (list_0) ref = prim Ref_ref[list_0] (x_351 (*con nil_1*))
    val exnMessage_0: lambdas_17 = con exnMessageEnv_0 (messagers_0)
    val tuple_43: (lambdas_12, lambdas_155, lambdas_11) tuple =
      (arrayAlloc_1, arrayAlloc_0, sequence_0)
    val concat_0: lambdas_16 = con concatEnv_0 (tuple_43)
    val new_1: lambdas_204 = con newEnv_1 (arrayAlloc_0)
    case range_0 (*con rangeE ... e_30)*) of
      rangeEnv_0 => L_264
  block L_264 (env_107: unit)
    call L_265 (range_1 (env_107, x_1099)) handle _ => L_5
  block L_265 (x_1252: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_266
  block L_266 (env_108: unit)
    call L_267 (fromIntForLength_1 (env_108, x_383 (*0x100:w32*))) handle _ => L_5
  block L_267 (x_1253: word64)
    val x_1254: (word64, word64) tuple = (x_1253, x_1196)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_268
  block L_268 (env_109: unit)
    call L_269 (>_6 (env_109, x_1254)) handle _ => L_5
  block L_269 (x_1255: bool)
    case x_1255 of
      true => L_271 | false => L_270
  block L_270 ()
    val x_1256: (t_0) array = prim Array_alloc[t_0] (x_1253)
    val tuple_45: (word64, lambdas_1, (t_0) array) tuple =
      (x_1253, x_1252, x_1256)
    call L_272 (loop_5 (tuple_45, x_1100)) handle _ => L_5
  block L_272 (b_0: unit)
    case range_0 (*con rangeE ... e_30)*) of
      rangeEnv_0 => L_273
  block L_273 (env_110: unit)
    call L_274 (range_1 (env_110, x_1101)) handle _ => L_5
  block L_274 (x_1257: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_275
  block L_275 (env_111: unit)
    call L_276 (fromIntForLength_1 (env_111, x_383 (*0x100:w32*))) handle _ => L_5
  block L_276 (x_1258: word64)
    val x_1259: (word64, word64) tuple = (x_1258, x_1196)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_277
  block L_277 (env_112: unit)
    call L_278 (>_6 (env_112, x_1259)) handle _ => L_5
  block L_278 (x_1260: bool)
    case x_1260 of
      true => L_280 | false => L_279
  block L_279 ()
    val x_1261: (t_0) array = prim Array_alloc[t_0] (x_1258)
    val tuple_46: (word64, lambdas_1, (t_0) array) tuple =
      (x_1258, x_1257, x_1261)
    call L_281 (loop_6 (tuple_46, x_1102)) handle _ => L_5
  block L_281 (b_1: unit)
    case range_0 (*con rangeE ... e_30)*) of
      rangeEnv_0 => L_282
  block L_282 (env_113: unit)
    call L_283 (range_1 (env_113, x_1103)) handle _ => L_5
  block L_283 (x_1262: lambdas_1)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_284
  block L_284 (env_114: unit)
    call L_285 (fromIntForLength_1 (env_114, x_383 (*0x100:w32*))) handle _ => L_5
  block L_285 (x_1263: word64)
    val x_1264: (word64, word64) tuple = (x_1263, x_1196)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_286
  block L_286 (env_115: unit)
    call L_287 (>_6 (env_115, x_1264)) handle _ => L_5
  block L_287 (x_1265: bool)
    case x_1265 of
      true => L_289 | false => L_288
  block L_288 ()
    val x_1266: (t_0) array = prim Array_alloc[t_0] (x_1263)
    val tuple_47: (word64, lambdas_1, (t_0) array) tuple =
      (x_1263, x_1262, x_1266)
    call L_290 (loop_7 (tuple_47, x_1104)) handle _ => L_5
  block L_290 (b_2: unit)
    case range_0 (*con rangeE ... e_30)*) of
      rangeEnv_0 => L_291
  block L_291 (env_116: unit)
    call L_292 (range_1 (env_116, x_1105)) handle _ => L_5
  block L_292 (x_1267: lambdas_1)
    case range_0 (*con rangeE ... e_30)*) of
      rangeEnv_0 => L_293
  block L_293 (env_117: unit)
    call L_294 (range_1 (env_117, x_1106)) handle _ => L_5
  block L_294 (x_1268: lambdas_1)
    case range_0 (*con rangeE ... e_30)*) of
      rangeEnv_0 => L_295
  block L_295 (env_118: unit)
    call L_296 (range_1 (env_118, x_1107)) handle _ => L_5
  block L_296 (x_1269: lambdas_1)
    val x_1275: (lambdas_1, list_1) tuple = (x_1269, x_421 (*con nil_2*))
    val x_1274: list_1 = con ::_4 (x_1275)
    val x_1273: (lambdas_1, list_1) tuple = (x_1268, x_1274)
    val x_1272: list_1 = con ::_4 (x_1273)
    val x_1271: (lambdas_1, list_1) tuple = (x_1267, x_1272)
    val x_1270: list_1 = con ::_4 (x_1271)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_297
  block L_297 (env_119: unit)
    call L_298 (fromIntForLength_1 (env_119, x_383 (*0x100:w32*))) handle _ => L_5
  block L_298 (x_1276: word64)
    val x_1277: (word64, word64) tuple = (x_1276, x_1196)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_299
  block L_299 (env_120: unit)
    call L_300 (>_6 (env_120, x_1277)) handle _ => L_5
  block L_300 (x_1278: bool)
    case x_1278 of
      true => L_302 | false => L_301
  block L_301 ()
    val x_1279: (t_0) array = prim Array_alloc[t_0] (x_1276)
    val tuple_48: (word64, list_1, (t_0) array) tuple = (x_1276, x_1270, x_1279)
    call L_303 (loop_8 (tuple_48, x_1108)) handle _ => L_5
  block L_303 (b_3: unit)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_304
  block L_304 (env_121: unit)
    call L_305 (fromIntForLength_1 (env_121, x_383 (*0x100:w32*))) handle _ => L_5
  block L_305 (x_1280: word64)
    val x_1281: (word64, word64) tuple = (x_1280, x_1196)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_306
  block L_306 (env_122: unit)
    call L_307 (>_6 (env_122, x_1281)) handle _ => L_5
  block L_307 (x_1282: bool)
    case x_1282 of
      true => L_309 | false => L_308
  block L_308 ()
    val x_1283: (bool) array = prim Array_alloc[bool] (x_1280)
    val tuple_49: (word64, (bool) array) tuple = (x_1280, x_1283)
    call L_310 (loop_9 (tuple_49, x_1109)) handle _ => L_5
  block L_310 (b_4: unit)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_311
  block L_311 (env_123: unit)
    call L_312 (zextdFromInt32ToInt32_1 (env_123, sizeInBits_40 (*0x8:w32*))) handle _ => L_5
  block L_312 (precision'_0: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_313
  block L_313 (env_124: unit)
    call L_314 (zextdFromWord32ToWord32_1 (env_124, sizeInBitsWord_4)) handle _ => L_5
  block L_314 (sizeInBitsWord_8: word32)
    val tuple_51: (word32, word8) tuple = (sizeInBitsWord_8, zero_0)
    val <<_0: lambdas_92 = con <<Env_7 (tuple_51)
    val tuple_50: (word32, word8) tuple = (sizeInBitsWord_8, zero_0)
    val >>_0: lambdas_91 = con >>Env_7 (tuple_50)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_315
  block L_315 (env_125: unit)
    call L_316 (zextdFromInt32ToInt32_1 (env_125, sizeInBits_48 (*0x10:w32*))) handle _ => L_5
  block L_316 (precision'_1: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_317
  block L_317 (env_126: unit)
    call L_318 (zextdFromWord32ToWord32_1 (env_126, sizeInBitsWord_5)) handle _ => L_5
  block L_318 (sizeInBitsWord_9: word32)
    val tuple_53: (word32, word16) tuple = (sizeInBitsWord_9, zero_1)
    val <<_1: lambdas_84 = con <<Env_6 (tuple_53)
    val tuple_52: (word32, word16) tuple = (sizeInBitsWord_9, zero_1)
    val >>_1: lambdas_83 = con >>Env_6 (tuple_52)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_319
  block L_319 (env_127: unit)
    call L_320 (zextdFromInt32ToInt32_1 (env_127, sizeInBits_64 (*0x20:w32*))) handle _ => L_5
  block L_320 (precision'_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_321
  block L_321 (env_128: unit)
    call L_322 (zextdFromWord32ToWord32_1 (env_128, sizeInBitsWord_6)) handle _ => L_5
  block L_322 (sizeInBitsWord_10: word32)
    val tuple_55: (word32, word32) tuple = (sizeInBitsWord_10, zero_3)
    val <<_2: lambdas_76 = con <<Env_5 (tuple_55)
    val tuple_54: (word32, word32) tuple = (sizeInBitsWord_10, zero_3)
    val >>_2: lambdas_75 = con >>Env_5 (tuple_54)
    val x_1284: (word32, word32) tuple = (precision'_2, x_445 (*0x1:w32*))
    case x_134 (*con xEnv_11 (x_133)*) of
      xEnv_11 => L_323
  block L_323 (env_129: unit)
    call L_324 (x_1285 (env_129, x_1284)) handle _ => L_5
  block L_324 (maxNumDigits_0: word32)
    val x_1287: (lambdas_204, word32) tuple = (new_1, maxNumDigits_0)
    val x_1286: lambdas_381 = con xEnv_189 (x_1287)
    call L_325 (x_1288 (x_1287, x_447 (*()*))) handle _ => L_5
  block L_325 (x_1289: (word8) array)
    val x_1290: (bool) ref = prim Ref_ref[bool] (x_448 (*con false*))
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_326
  block L_326 (env_130: unit)
    call L_327 (zextdFromInt32ToInt32_1 (env_130, sizeInBits_65 (*0x40:w32*))) handle _ => L_5
  block L_327 (precision'_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_328
  block L_328 (env_131: unit)
    call L_329 (zextdFromWord32ToWord32_1 (env_131, sizeInBitsWord_7)) handle _ => L_5
  block L_329 (sizeInBitsWord_11: word32)
    val tuple_57: (word32, word64) tuple = (sizeInBitsWord_11, zero_5)
    val <<_3: lambdas_68 = con <<Env_4 (tuple_57)
    val tuple_56: (word32, word64) tuple = (sizeInBitsWord_11, zero_5)
    val >>_3: lambdas_67 = con >>Env_4 (tuple_56)
    val x_1291: (word32, word32) tuple = (precision'_3, x_450 (*0x1:w32*))
    case x_134 (*con xEnv_11 (x_133)*) of
      xEnv_11 => L_330
  block L_330 (env_132: unit)
    call L_331 (x_1285 (env_132, x_1291)) handle _ => L_5
  block L_331 (maxNumDigits_1: word32)
    val x_1293: (lambdas_204, word32) tuple = (new_1, maxNumDigits_1)
    val x_1292: lambdas_175 = con xEnv_183 (x_1293)
    call L_332 (x_1294 (x_1293, x_452 (*()*))) handle _ => L_5
  block L_332 (x_1295: (word8) array)
    val x_1296: (bool) ref = prim Ref_ref[bool] (x_453 (*con false*))
    val tuple_58:
      (word32, word64, word64, word64, (word8) array, lambdas_175, (bool) ref) tuple =
      (maxNumDigits_1, one_5, minInt'_3, zero_5, x_1295, x_1292, x_1296)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_333
  block L_333 (env_133: unit)
    call L_334 (zextdFromInt32ToInt32_1 (env_133, sizeInBits_7 (*0x8:w32*))) handle _ => L_5
  block L_334 (wordSize_0: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_335
  block L_335 (env_134: unit)
    call L_336 (zextdFromWord32ToWord32_1 (env_134, sizeInBitsWord_0)) handle _ => L_5
  block L_336 (sizeInBitsWord_12: word32)
    val <<_4: lambdas_60 = con <<Env_3 (sizeInBitsWord_12)
    val >>_4: lambdas_59 = con >>Env_3 (sizeInBitsWord_12)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_337
  block L_337 (env_135: unit)
    call L_338 (zextdFromInt32ToInt32_1 (env_135, sizeInBits_15 (*0x10:w32*))) handle _ => L_5
  block L_338 (wordSize_1: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_339
  block L_339 (env_136: unit)
    call L_340 (zextdFromWord32ToWord32_1 (env_136, sizeInBitsWord_1)) handle _ => L_5
  block L_340 (sizeInBitsWord_13: word32)
    val <<_5: lambdas_52 = con <<Env_2 (sizeInBitsWord_13)
    val >>_5: lambdas_51 = con >>Env_2 (sizeInBitsWord_13)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_341
  block L_341 (env_137: unit)
    call L_342 (zextdFromInt32ToInt32_1 (env_137, sizeInBits_31 (*0x20:w32*))) handle _ => L_5
  block L_342 (wordSize_2: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_343
  block L_343 (env_138: unit)
    call L_344 (zextdFromWord32ToWord32_1 (env_138, sizeInBitsWord_2)) handle _ => L_5
  block L_344 (sizeInBitsWord_14: word32)
    val tuple_60: (word32, word32) tuple = (sizeInBitsWord_14, zero_2)
    val <<_6: lambdas_44 = con <<Env_1 (tuple_60)
    val tuple_59: (word32, word32) tuple = (sizeInBitsWord_14, zero_2)
    val >>_6: lambdas_43 = con >>Env_1 (tuple_59)
    case32 sizeInBitsWord_2 of
      0x8:w32 => L_348
    | 0x20:w32 => L_347
    | 0x40:w32 => L_346
    | 0x10:w32 => L_345
    | _ => L_349
  block L_349 ()
    goto L_5 (x_473 (*con Fail_0 (x_472)*))
  block L_345 ()
    val x_1298: lambdas_171 = #0 (x_1113)
    val x_1297: word32 = #1 (x_1113)
    case x_1298 of
      stEnv_0 => L_350
  block L_350 (x_1299: unit)
    val x_1301: lambdas_170 = con stEnv_1 (x_1299)
    val x_1300: (lambdas_170, word32) tuple = (x_1301, x_1297)
    goto L_351 (x_1300)
  block L_346 ()
    val x_1303: lambdas_167 = #0 (x_1112)
    val x_1302: word32 = #1 (x_1112)
    case x_1303 of
      xEnv_38 => L_352
  block L_352 (x_1304: unit)
    val x_1306: lambdas_170 = con xEnv_174 (x_1304)
    val x_1305: (lambdas_170, word32) tuple = (x_1306, x_1302)
    goto L_351 (x_1305)
  block L_347 ()
    val x_1308: lambdas_168 = #0 (x_1111)
    val x_1307: word32 = #1 (x_1111)
    case x_1308 of
      xEnv_37 => L_353
  block L_353 (x_1309: unit)
    val x_1311: lambdas_170 = con xEnv_172 (x_1309)
    val x_1310: (lambdas_170, word32) tuple = (x_1311, x_1307)
    goto L_351 (x_1310)
  block L_348 ()
    val x_1313: lambdas_169 = #0 (x_1110)
    val x_1312: word32 = #1 (x_1110)
    case x_1313 of
      xEnv_36 => L_354
  block L_354 (x_1314: unit)
    val x_1316: lambdas_170 = con xEnv_173 (x_1314)
    val x_1315: (lambdas_170, word32) tuple = (x_1316, x_1312)
    goto L_351 (x_1315)
  block L_351 (x_1317: (lambdas_170, word32) tuple)
    case zextdFromInt32ToInt32_0 (*con zextdF ... x_98)*) of
      zextdFromInt32ToInt32Env_0 => L_355
  block L_355 (env_139: unit)
    call L_356 (zextdFromInt32ToInt32_1 (env_139, sizeInBits_32 (*0x40:w32*))) handle _ => L_5
  block L_356 (wordSize_3: word32)
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_357
  block L_357 (env_140: unit)
    call L_358 (zextdFromWord32ToWord32_1 (env_140, sizeInBitsWord_3)) handle _ => L_5
  block L_358 (sizeInBitsWord_15: word32)
    val tuple_62: (word32, word64) tuple = (sizeInBitsWord_15, zero_4)
    val <<_7: lambdas_36 = con <<Env_0 (tuple_62)
    val tuple_61: (word32, word64) tuple = (sizeInBitsWord_15, zero_4)
    val >>_7: lambdas_35 = con >>Env_0 (tuple_61)
    call L_359 (fmt_0 (tuple_58, x_485 (*con BIN_1*))) handle _ => L_5
  block L_359 (x_1318: lambdas_203)
    val x_1319: (word32, lambdas_203) tuple = (x_484 (*0x2:w32*), x_1318)
    call L_360 (mkBigCvt_0 (tuple_44, x_1319)) handle _ => L_5
  block L_360 (binCvt_0: lambdas_202)
    call L_361 (fmt_0 (tuple_58, x_487 (*con OCT_1*))) handle _ => L_5
  block L_361 (x_1320: lambdas_203)
    val x_1321: (word32, lambdas_203) tuple = (x_486 (*0x8:w32*), x_1320)
    call L_362 (mkBigCvt_0 (tuple_44, x_1321)) handle _ => L_5
  block L_362 (octCvt_0: lambdas_202)
    call L_363 (fmt_0 (tuple_58, x_489 (*con DEC_1*))) handle _ => L_5
  block L_363 (x_1322: lambdas_203)
    val x_1323: (word32, lambdas_203) tuple = (x_488 (*0xA:w32*), x_1322)
    call L_364 (mkBigCvt_0 (tuple_44, x_1323)) handle _ => L_5
  block L_364 (decCvt_0: lambdas_202)
    call L_365 (fmt_0 (tuple_58, x_491 (*con HEX_0*))) handle _ => L_5
  block L_365 (x_1324: lambdas_203)
    val x_1325: (word32, lambdas_203) tuple = (x_490 (*0x10:w32*), x_1324)
    call L_366 (mkBigCvt_0 (tuple_44, x_1325)) handle _ => L_5
  block L_366 (hexCvt_0: lambdas_202)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_367
  block L_367 (env_141: unit)
    call L_368 (sextdFromInt32ToInt32_1 (env_141, sizeInBits_33 (*0x1:w32*))) handle _ => L_5
  block L_368 (precision'_4: word32)
    val x_1326: (word32, word32) tuple = (precision'_4, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_369
  block L_369 (env_142: unit)
    call L_370 (<_6 (env_142, x_1326)) handle _ => L_5
  block L_370 (x_1327: bool)
    case x_1327 of
      true => L_372 | false => L_371
  block L_371 ()
    goto L_5 (x_495 (*con Fail_0 (x_494)*))
  block L_372 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_373
  block L_373 (env_143: unit)
    call L_374 (sextdFromInt32ToInt32_1 (env_143, sizeInBits_34 (*0x2:w32*))) handle _ => L_5
  block L_374 (precision'_5: word32)
    val x_1328: (word32, word32) tuple = (precision'_5, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_375
  block L_375 (env_144: unit)
    call L_376 (<_6 (env_144, x_1328)) handle _ => L_5
  block L_376 (x_1329: bool)
    case x_1329 of
      true => L_378 | false => L_377
  block L_377 ()
    goto L_5 (x_499 (*con Fail_0 (x_498)*))
  block L_378 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_379
  block L_379 (env_145: unit)
    call L_380 (sextdFromInt32ToInt32_1 (env_145, sizeInBits_35 (*0x3:w32*))) handle _ => L_5
  block L_380 (precision'_6: word32)
    val x_1330: (word32, word32) tuple = (precision'_6, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_381
  block L_381 (env_146: unit)
    call L_382 (<_6 (env_146, x_1330)) handle _ => L_5
  block L_382 (x_1331: bool)
    case x_1331 of
      true => L_384 | false => L_383
  block L_383 ()
    goto L_5 (x_503 (*con Fail_0 (x_502)*))
  block L_384 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_385
  block L_385 (env_147: unit)
    call L_386 (sextdFromInt32ToInt32_1 (env_147, sizeInBits_36 (*0x4:w32*))) handle _ => L_5
  block L_386 (precision'_7: word32)
    val x_1332: (word32, word32) tuple = (precision'_7, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_387
  block L_387 (env_148: unit)
    call L_388 (<_6 (env_148, x_1332)) handle _ => L_5
  block L_388 (x_1333: bool)
    case x_1333 of
      true => L_390 | false => L_389
  block L_389 ()
    goto L_5 (x_507 (*con Fail_0 (x_506)*))
  block L_390 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_391
  block L_391 (env_149: unit)
    call L_392 (sextdFromInt32ToInt32_1 (env_149, sizeInBits_37 (*0x5:w32*))) handle _ => L_5
  block L_392 (precision'_8: word32)
    val x_1334: (word32, word32) tuple = (precision'_8, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_393
  block L_393 (env_150: unit)
    call L_394 (<_6 (env_150, x_1334)) handle _ => L_5
  block L_394 (x_1335: bool)
    case x_1335 of
      true => L_396 | false => L_395
  block L_395 ()
    goto L_5 (x_511 (*con Fail_0 (x_510)*))
  block L_396 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_397
  block L_397 (env_151: unit)
    call L_398 (sextdFromInt32ToInt32_1 (env_151, sizeInBits_38 (*0x6:w32*))) handle _ => L_5
  block L_398 (precision'_9: word32)
    val x_1336: (word32, word32) tuple = (precision'_9, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_399
  block L_399 (env_152: unit)
    call L_400 (<_6 (env_152, x_1336)) handle _ => L_5
  block L_400 (x_1337: bool)
    case x_1337 of
      true => L_402 | false => L_401
  block L_401 ()
    goto L_5 (x_515 (*con Fail_0 (x_514)*))
  block L_402 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_403
  block L_403 (env_153: unit)
    call L_404 (sextdFromInt32ToInt32_1 (env_153, sizeInBits_39 (*0x7:w32*))) handle _ => L_5
  block L_404 (precision'_10: word32)
    val x_1338: (word32, word32) tuple = (precision'_10, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_405
  block L_405 (env_154: unit)
    call L_406 (<_6 (env_154, x_1338)) handle _ => L_5
  block L_406 (x_1339: bool)
    case x_1339 of
      true => L_408 | false => L_407
  block L_407 ()
    goto L_5 (x_519 (*con Fail_0 (x_518)*))
  block L_408 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_409
  block L_409 (env_155: unit)
    call L_410 (sextdFromInt32ToInt32_1 (env_155, sizeInBits_41 (*0x9:w32*))) handle _ => L_5
  block L_410 (precision'_11: word32)
    val x_1340: (word32, word32) tuple = (precision'_11, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_411
  block L_411 (env_156: unit)
    call L_412 (<_6 (env_156, x_1340)) handle _ => L_5
  block L_412 (x_1341: bool)
    case x_1341 of
      true => L_414 | false => L_413
  block L_413 ()
    goto L_5 (x_523 (*con Fail_0 (x_522)*))
  block L_414 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_415
  block L_415 (env_157: unit)
    call L_416 (sextdFromInt32ToInt32_1 (env_157, sizeInBits_42 (*0xA:w32*))) handle _ => L_5
  block L_416 (precision'_12: word32)
    val x_1342: (word32, word32) tuple = (precision'_12, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_417
  block L_417 (env_158: unit)
    call L_418 (<_6 (env_158, x_1342)) handle _ => L_5
  block L_418 (x_1343: bool)
    case x_1343 of
      true => L_420 | false => L_419
  block L_419 ()
    goto L_5 (x_527 (*con Fail_0 (x_526)*))
  block L_420 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_421
  block L_421 (env_159: unit)
    call L_422 (sextdFromInt32ToInt32_1 (env_159, sizeInBits_43 (*0xB:w32*))) handle _ => L_5
  block L_422 (precision'_13: word32)
    val x_1344: (word32, word32) tuple = (precision'_13, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_423
  block L_423 (env_160: unit)
    call L_424 (<_6 (env_160, x_1344)) handle _ => L_5
  block L_424 (x_1345: bool)
    case x_1345 of
      true => L_426 | false => L_425
  block L_425 ()
    goto L_5 (x_531 (*con Fail_0 (x_530)*))
  block L_426 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_427
  block L_427 (env_161: unit)
    call L_428 (sextdFromInt32ToInt32_1 (env_161, sizeInBits_44 (*0xC:w32*))) handle _ => L_5
  block L_428 (precision'_14: word32)
    val x_1346: (word32, word32) tuple = (precision'_14, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_429
  block L_429 (env_162: unit)
    call L_430 (<_6 (env_162, x_1346)) handle _ => L_5
  block L_430 (x_1347: bool)
    case x_1347 of
      true => L_432 | false => L_431
  block L_431 ()
    goto L_5 (x_535 (*con Fail_0 (x_534)*))
  block L_432 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_433
  block L_433 (env_163: unit)
    call L_434 (sextdFromInt32ToInt32_1 (env_163, sizeInBits_45 (*0xD:w32*))) handle _ => L_5
  block L_434 (precision'_15: word32)
    val x_1348: (word32, word32) tuple = (precision'_15, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_435
  block L_435 (env_164: unit)
    call L_436 (<_6 (env_164, x_1348)) handle _ => L_5
  block L_436 (x_1349: bool)
    case x_1349 of
      true => L_438 | false => L_437
  block L_437 ()
    goto L_5 (x_539 (*con Fail_0 (x_538)*))
  block L_438 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_439
  block L_439 (env_165: unit)
    call L_440 (sextdFromInt32ToInt32_1 (env_165, sizeInBits_46 (*0xE:w32*))) handle _ => L_5
  block L_440 (precision'_16: word32)
    val x_1350: (word32, word32) tuple = (precision'_16, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_441
  block L_441 (env_166: unit)
    call L_442 (<_6 (env_166, x_1350)) handle _ => L_5
  block L_442 (x_1351: bool)
    case x_1351 of
      true => L_444 | false => L_443
  block L_443 ()
    goto L_5 (x_543 (*con Fail_0 (x_542)*))
  block L_444 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_445
  block L_445 (env_167: unit)
    call L_446 (sextdFromInt32ToInt32_1 (env_167, sizeInBits_47 (*0xF:w32*))) handle _ => L_5
  block L_446 (precision'_17: word32)
    val x_1352: (word32, word32) tuple = (precision'_17, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_447
  block L_447 (env_168: unit)
    call L_448 (<_6 (env_168, x_1352)) handle _ => L_5
  block L_448 (x_1353: bool)
    case x_1353 of
      true => L_450 | false => L_449
  block L_449 ()
    goto L_5 (x_547 (*con Fail_0 (x_546)*))
  block L_450 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_451
  block L_451 (env_169: unit)
    call L_452 (sextdFromInt32ToInt32_1 (env_169, sizeInBits_49 (*0x11:w32*))) handle _ => L_5
  block L_452 (precision'_18: word32)
    val x_1354: (word32, word32) tuple = (precision'_18, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_453
  block L_453 (env_170: unit)
    call L_454 (<_6 (env_170, x_1354)) handle _ => L_5
  block L_454 (x_1355: bool)
    case x_1355 of
      true => L_456 | false => L_455
  block L_455 ()
    goto L_5 (x_551 (*con Fail_0 (x_550)*))
  block L_456 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_457
  block L_457 (env_171: unit)
    call L_458 (sextdFromInt32ToInt32_1 (env_171, sizeInBits_50 (*0x12:w32*))) handle _ => L_5
  block L_458 (precision'_19: word32)
    val x_1356: (word32, word32) tuple = (precision'_19, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_459
  block L_459 (env_172: unit)
    call L_460 (<_6 (env_172, x_1356)) handle _ => L_5
  block L_460 (x_1357: bool)
    case x_1357 of
      true => L_462 | false => L_461
  block L_461 ()
    goto L_5 (x_555 (*con Fail_0 (x_554)*))
  block L_462 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_463
  block L_463 (env_173: unit)
    call L_464 (sextdFromInt32ToInt32_1 (env_173, sizeInBits_51 (*0x13:w32*))) handle _ => L_5
  block L_464 (precision'_20: word32)
    val x_1358: (word32, word32) tuple = (precision'_20, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_465
  block L_465 (env_174: unit)
    call L_466 (<_6 (env_174, x_1358)) handle _ => L_5
  block L_466 (x_1359: bool)
    case x_1359 of
      true => L_468 | false => L_467
  block L_467 ()
    goto L_5 (x_559 (*con Fail_0 (x_558)*))
  block L_468 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_469
  block L_469 (env_175: unit)
    call L_470 (sextdFromInt32ToInt32_1 (env_175, sizeInBits_52 (*0x14:w32*))) handle _ => L_5
  block L_470 (precision'_21: word32)
    val x_1360: (word32, word32) tuple = (precision'_21, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_471
  block L_471 (env_176: unit)
    call L_472 (<_6 (env_176, x_1360)) handle _ => L_5
  block L_472 (x_1361: bool)
    case x_1361 of
      true => L_474 | false => L_473
  block L_473 ()
    goto L_5 (x_563 (*con Fail_0 (x_562)*))
  block L_474 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_475
  block L_475 (env_177: unit)
    call L_476 (sextdFromInt32ToInt32_1 (env_177, sizeInBits_53 (*0x15:w32*))) handle _ => L_5
  block L_476 (precision'_22: word32)
    val x_1362: (word32, word32) tuple = (precision'_22, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_477
  block L_477 (env_178: unit)
    call L_478 (<_6 (env_178, x_1362)) handle _ => L_5
  block L_478 (x_1363: bool)
    case x_1363 of
      true => L_480 | false => L_479
  block L_479 ()
    goto L_5 (x_567 (*con Fail_0 (x_566)*))
  block L_480 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_481
  block L_481 (env_179: unit)
    call L_482 (sextdFromInt32ToInt32_1 (env_179, sizeInBits_54 (*0x16:w32*))) handle _ => L_5
  block L_482 (precision'_23: word32)
    val x_1364: (word32, word32) tuple = (precision'_23, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_483
  block L_483 (env_180: unit)
    call L_484 (<_6 (env_180, x_1364)) handle _ => L_5
  block L_484 (x_1365: bool)
    case x_1365 of
      true => L_486 | false => L_485
  block L_485 ()
    goto L_5 (x_571 (*con Fail_0 (x_570)*))
  block L_486 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_487
  block L_487 (env_181: unit)
    call L_488 (sextdFromInt32ToInt32_1 (env_181, sizeInBits_55 (*0x17:w32*))) handle _ => L_5
  block L_488 (precision'_24: word32)
    val x_1366: (word32, word32) tuple = (precision'_24, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_489
  block L_489 (env_182: unit)
    call L_490 (<_6 (env_182, x_1366)) handle _ => L_5
  block L_490 (x_1367: bool)
    case x_1367 of
      true => L_492 | false => L_491
  block L_491 ()
    goto L_5 (x_575 (*con Fail_0 (x_574)*))
  block L_492 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_493
  block L_493 (env_183: unit)
    call L_494 (sextdFromInt32ToInt32_1 (env_183, sizeInBits_56 (*0x18:w32*))) handle _ => L_5
  block L_494 (precision'_25: word32)
    val x_1368: (word32, word32) tuple = (precision'_25, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_495
  block L_495 (env_184: unit)
    call L_496 (<_6 (env_184, x_1368)) handle _ => L_5
  block L_496 (x_1369: bool)
    case x_1369 of
      true => L_498 | false => L_497
  block L_497 ()
    goto L_5 (x_579 (*con Fail_0 (x_578)*))
  block L_498 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_499
  block L_499 (env_185: unit)
    call L_500 (sextdFromInt32ToInt32_1 (env_185, sizeInBits_57 (*0x19:w32*))) handle _ => L_5
  block L_500 (precision'_26: word32)
    val x_1370: (word32, word32) tuple = (precision'_26, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_501
  block L_501 (env_186: unit)
    call L_502 (<_6 (env_186, x_1370)) handle _ => L_5
  block L_502 (x_1371: bool)
    case x_1371 of
      true => L_504 | false => L_503
  block L_503 ()
    goto L_5 (x_583 (*con Fail_0 (x_582)*))
  block L_504 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_505
  block L_505 (env_187: unit)
    call L_506 (sextdFromInt32ToInt32_1 (env_187, sizeInBits_58 (*0x1A:w32*))) handle _ => L_5
  block L_506 (precision'_27: word32)
    val x_1372: (word32, word32) tuple = (precision'_27, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_507
  block L_507 (env_188: unit)
    call L_508 (<_6 (env_188, x_1372)) handle _ => L_5
  block L_508 (x_1373: bool)
    case x_1373 of
      true => L_510 | false => L_509
  block L_509 ()
    goto L_5 (x_587 (*con Fail_0 (x_586)*))
  block L_510 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_511
  block L_511 (env_189: unit)
    call L_512 (sextdFromInt32ToInt32_1 (env_189, sizeInBits_59 (*0x1B:w32*))) handle _ => L_5
  block L_512 (precision'_28: word32)
    val x_1374: (word32, word32) tuple = (precision'_28, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_513
  block L_513 (env_190: unit)
    call L_514 (<_6 (env_190, x_1374)) handle _ => L_5
  block L_514 (x_1375: bool)
    case x_1375 of
      true => L_516 | false => L_515
  block L_515 ()
    goto L_5 (x_591 (*con Fail_0 (x_590)*))
  block L_516 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_517
  block L_517 (env_191: unit)
    call L_518 (sextdFromInt32ToInt32_1 (env_191, sizeInBits_60 (*0x1C:w32*))) handle _ => L_5
  block L_518 (precision'_29: word32)
    val x_1376: (word32, word32) tuple = (precision'_29, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_519
  block L_519 (env_192: unit)
    call L_520 (<_6 (env_192, x_1376)) handle _ => L_5
  block L_520 (x_1377: bool)
    case x_1377 of
      true => L_522 | false => L_521
  block L_521 ()
    goto L_5 (x_595 (*con Fail_0 (x_594)*))
  block L_522 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_523
  block L_523 (env_193: unit)
    call L_524 (sextdFromInt32ToInt32_1 (env_193, sizeInBits_61 (*0x1D:w32*))) handle _ => L_5
  block L_524 (precision'_30: word32)
    val x_1378: (word32, word32) tuple = (precision'_30, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_525
  block L_525 (env_194: unit)
    call L_526 (<_6 (env_194, x_1378)) handle _ => L_5
  block L_526 (x_1379: bool)
    case x_1379 of
      true => L_528 | false => L_527
  block L_527 ()
    goto L_5 (x_599 (*con Fail_0 (x_598)*))
  block L_528 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_529
  block L_529 (env_195: unit)
    call L_530 (sextdFromInt32ToInt32_1 (env_195, sizeInBits_62 (*0x1E:w32*))) handle _ => L_5
  block L_530 (precision'_31: word32)
    val x_1380: (word32, word32) tuple = (precision'_31, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_531
  block L_531 (env_196: unit)
    call L_532 (<_6 (env_196, x_1380)) handle _ => L_5
  block L_532 (x_1381: bool)
    case x_1381 of
      true => L_534 | false => L_533
  block L_533 ()
    goto L_5 (x_603 (*con Fail_0 (x_602)*))
  block L_534 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_535
  block L_535 (env_197: unit)
    call L_536 (sextdFromInt32ToInt32_1 (env_197, sizeInBits_63 (*0x1F:w32*))) handle _ => L_5
  block L_536 (precision'_32: word32)
    val x_1382: (word32, word32) tuple = (precision'_32, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_537
  block L_537 (env_198: unit)
    call L_538 (<_6 (env_198, x_1382)) handle _ => L_5
  block L_538 (x_1383: bool)
    case x_1383 of
      true => L_540 | false => L_539
  block L_539 ()
    goto L_5 (x_607 (*con Fail_0 (x_606)*))
  block L_540 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_541
  block L_541 (env_199: unit)
    call L_542 (sextdFromInt32ToInt32_1 (env_199, sizeInBits_0 (*0x1:w32*))) handle _ => L_5
  block L_542 (wordSize_4: word32)
    val x_1384: (word32, word32) tuple = (wordSize_4, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_543
  block L_543 (env_200: unit)
    call L_544 (<_6 (env_200, x_1384)) handle _ => L_5
  block L_544 (x_1385: bool)
    case x_1385 of
      true => L_546 | false => L_545
  block L_545 ()
    goto L_5 (x_611 (*con Fail_0 (x_610)*))
  block L_546 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_547
  block L_547 (env_201: unit)
    call L_548 (sextdFromInt32ToInt32_1 (env_201, sizeInBits_1 (*0x2:w32*))) handle _ => L_5
  block L_548 (wordSize_5: word32)
    val x_1386: (word32, word32) tuple = (wordSize_5, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_549
  block L_549 (env_202: unit)
    call L_550 (<_6 (env_202, x_1386)) handle _ => L_5
  block L_550 (x_1387: bool)
    case x_1387 of
      true => L_552 | false => L_551
  block L_551 ()
    goto L_5 (x_615 (*con Fail_0 (x_614)*))
  block L_552 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_553
  block L_553 (env_203: unit)
    call L_554 (sextdFromInt32ToInt32_1 (env_203, sizeInBits_2 (*0x3:w32*))) handle _ => L_5
  block L_554 (wordSize_6: word32)
    val x_1388: (word32, word32) tuple = (wordSize_6, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_555
  block L_555 (env_204: unit)
    call L_556 (<_6 (env_204, x_1388)) handle _ => L_5
  block L_556 (x_1389: bool)
    case x_1389 of
      true => L_558 | false => L_557
  block L_557 ()
    goto L_5 (x_619 (*con Fail_0 (x_618)*))
  block L_558 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_559
  block L_559 (env_205: unit)
    call L_560 (sextdFromInt32ToInt32_1 (env_205, sizeInBits_3 (*0x4:w32*))) handle _ => L_5
  block L_560 (wordSize_7: word32)
    val x_1390: (word32, word32) tuple = (wordSize_7, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_561
  block L_561 (env_206: unit)
    call L_562 (<_6 (env_206, x_1390)) handle _ => L_5
  block L_562 (x_1391: bool)
    case x_1391 of
      true => L_564 | false => L_563
  block L_563 ()
    goto L_5 (x_623 (*con Fail_0 (x_622)*))
  block L_564 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_565
  block L_565 (env_207: unit)
    call L_566 (sextdFromInt32ToInt32_1 (env_207, sizeInBits_4 (*0x5:w32*))) handle _ => L_5
  block L_566 (wordSize_8: word32)
    val x_1392: (word32, word32) tuple = (wordSize_8, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_567
  block L_567 (env_208: unit)
    call L_568 (<_6 (env_208, x_1392)) handle _ => L_5
  block L_568 (x_1393: bool)
    case x_1393 of
      true => L_570 | false => L_569
  block L_569 ()
    goto L_5 (x_627 (*con Fail_0 (x_626)*))
  block L_570 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_571
  block L_571 (env_209: unit)
    call L_572 (sextdFromInt32ToInt32_1 (env_209, sizeInBits_5 (*0x6:w32*))) handle _ => L_5
  block L_572 (wordSize_9: word32)
    val x_1394: (word32, word32) tuple = (wordSize_9, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_573
  block L_573 (env_210: unit)
    call L_574 (<_6 (env_210, x_1394)) handle _ => L_5
  block L_574 (x_1395: bool)
    case x_1395 of
      true => L_576 | false => L_575
  block L_575 ()
    goto L_5 (x_631 (*con Fail_0 (x_630)*))
  block L_576 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_577
  block L_577 (env_211: unit)
    call L_578 (sextdFromInt32ToInt32_1 (env_211, sizeInBits_6 (*0x7:w32*))) handle _ => L_5
  block L_578 (wordSize_10: word32)
    val x_1396: (word32, word32) tuple = (wordSize_10, wordSize_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_579
  block L_579 (env_212: unit)
    call L_580 (<_6 (env_212, x_1396)) handle _ => L_5
  block L_580 (x_1397: bool)
    case x_1397 of
      true => L_582 | false => L_581
  block L_581 ()
    goto L_5 (x_635 (*con Fail_0 (x_634)*))
  block L_582 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_583
  block L_583 (env_213: unit)
    call L_584 (sextdFromInt32ToInt32_1 (env_213, sizeInBits_8 (*0x9:w32*))) handle _ => L_5
  block L_584 (wordSize_11: word32)
    val x_1398: (word32, word32) tuple = (wordSize_11, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_585
  block L_585 (env_214: unit)
    call L_586 (<_6 (env_214, x_1398)) handle _ => L_5
  block L_586 (x_1399: bool)
    case x_1399 of
      true => L_588 | false => L_587
  block L_587 ()
    goto L_5 (x_639 (*con Fail_0 (x_638)*))
  block L_588 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_589
  block L_589 (env_215: unit)
    call L_590 (sextdFromInt32ToInt32_1 (env_215, sizeInBits_9 (*0xA:w32*))) handle _ => L_5
  block L_590 (wordSize_12: word32)
    val x_1400: (word32, word32) tuple = (wordSize_12, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_591
  block L_591 (env_216: unit)
    call L_592 (<_6 (env_216, x_1400)) handle _ => L_5
  block L_592 (x_1401: bool)
    case x_1401 of
      true => L_594 | false => L_593
  block L_593 ()
    goto L_5 (x_643 (*con Fail_0 (x_642)*))
  block L_594 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_595
  block L_595 (env_217: unit)
    call L_596 (sextdFromInt32ToInt32_1 (env_217, sizeInBits_10 (*0xB:w32*))) handle _ => L_5
  block L_596 (wordSize_13: word32)
    val x_1402: (word32, word32) tuple = (wordSize_13, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_597
  block L_597 (env_218: unit)
    call L_598 (<_6 (env_218, x_1402)) handle _ => L_5
  block L_598 (x_1403: bool)
    case x_1403 of
      true => L_600 | false => L_599
  block L_599 ()
    goto L_5 (x_647 (*con Fail_0 (x_646)*))
  block L_600 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_601
  block L_601 (env_219: unit)
    call L_602 (sextdFromInt32ToInt32_1 (env_219, sizeInBits_11 (*0xC:w32*))) handle _ => L_5
  block L_602 (wordSize_14: word32)
    val x_1404: (word32, word32) tuple = (wordSize_14, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_603
  block L_603 (env_220: unit)
    call L_604 (<_6 (env_220, x_1404)) handle _ => L_5
  block L_604 (x_1405: bool)
    case x_1405 of
      true => L_606 | false => L_605
  block L_605 ()
    goto L_5 (x_651 (*con Fail_0 (x_650)*))
  block L_606 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_607
  block L_607 (env_221: unit)
    call L_608 (sextdFromInt32ToInt32_1 (env_221, sizeInBits_12 (*0xD:w32*))) handle _ => L_5
  block L_608 (wordSize_15: word32)
    val x_1406: (word32, word32) tuple = (wordSize_15, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_609
  block L_609 (env_222: unit)
    call L_610 (<_6 (env_222, x_1406)) handle _ => L_5
  block L_610 (x_1407: bool)
    case x_1407 of
      true => L_612 | false => L_611
  block L_611 ()
    goto L_5 (x_655 (*con Fail_0 (x_654)*))
  block L_612 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_613
  block L_613 (env_223: unit)
    call L_614 (sextdFromInt32ToInt32_1 (env_223, sizeInBits_13 (*0xE:w32*))) handle _ => L_5
  block L_614 (wordSize_16: word32)
    val x_1408: (word32, word32) tuple = (wordSize_16, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_615
  block L_615 (env_224: unit)
    call L_616 (<_6 (env_224, x_1408)) handle _ => L_5
  block L_616 (x_1409: bool)
    case x_1409 of
      true => L_618 | false => L_617
  block L_617 ()
    goto L_5 (x_659 (*con Fail_0 (x_658)*))
  block L_618 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_619
  block L_619 (env_225: unit)
    call L_620 (sextdFromInt32ToInt32_1 (env_225, sizeInBits_14 (*0xF:w32*))) handle _ => L_5
  block L_620 (wordSize_17: word32)
    val x_1410: (word32, word32) tuple = (wordSize_17, wordSize_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_621
  block L_621 (env_226: unit)
    call L_622 (<_6 (env_226, x_1410)) handle _ => L_5
  block L_622 (x_1411: bool)
    case x_1411 of
      true => L_624 | false => L_623
  block L_623 ()
    goto L_5 (x_663 (*con Fail_0 (x_662)*))
  block L_624 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_625
  block L_625 (env_227: unit)
    call L_626 (sextdFromInt32ToInt32_1 (env_227, sizeInBits_16 (*0x11:w32*))) handle _ => L_5
  block L_626 (wordSize_18: word32)
    val x_1412: (word32, word32) tuple = (wordSize_18, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_627
  block L_627 (env_228: unit)
    call L_628 (<_6 (env_228, x_1412)) handle _ => L_5
  block L_628 (x_1413: bool)
    case x_1413 of
      true => L_630 | false => L_629
  block L_629 ()
    goto L_5 (x_667 (*con Fail_0 (x_666)*))
  block L_630 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_631
  block L_631 (env_229: unit)
    call L_632 (sextdFromInt32ToInt32_1 (env_229, sizeInBits_17 (*0x12:w32*))) handle _ => L_5
  block L_632 (wordSize_19: word32)
    val x_1414: (word32, word32) tuple = (wordSize_19, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_633
  block L_633 (env_230: unit)
    call L_634 (<_6 (env_230, x_1414)) handle _ => L_5
  block L_634 (x_1415: bool)
    case x_1415 of
      true => L_636 | false => L_635
  block L_635 ()
    goto L_5 (x_671 (*con Fail_0 (x_670)*))
  block L_636 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_637
  block L_637 (env_231: unit)
    call L_638 (sextdFromInt32ToInt32_1 (env_231, sizeInBits_18 (*0x13:w32*))) handle _ => L_5
  block L_638 (wordSize_20: word32)
    val x_1416: (word32, word32) tuple = (wordSize_20, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_639
  block L_639 (env_232: unit)
    call L_640 (<_6 (env_232, x_1416)) handle _ => L_5
  block L_640 (x_1417: bool)
    case x_1417 of
      true => L_642 | false => L_641
  block L_641 ()
    goto L_5 (x_675 (*con Fail_0 (x_674)*))
  block L_642 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_643
  block L_643 (env_233: unit)
    call L_644 (sextdFromInt32ToInt32_1 (env_233, sizeInBits_19 (*0x14:w32*))) handle _ => L_5
  block L_644 (wordSize_21: word32)
    val x_1418: (word32, word32) tuple = (wordSize_21, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_645
  block L_645 (env_234: unit)
    call L_646 (<_6 (env_234, x_1418)) handle _ => L_5
  block L_646 (x_1419: bool)
    case x_1419 of
      true => L_648 | false => L_647
  block L_647 ()
    goto L_5 (x_679 (*con Fail_0 (x_678)*))
  block L_648 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_649
  block L_649 (env_235: unit)
    call L_650 (sextdFromInt32ToInt32_1 (env_235, sizeInBits_20 (*0x15:w32*))) handle _ => L_5
  block L_650 (wordSize_22: word32)
    val x_1420: (word32, word32) tuple = (wordSize_22, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_651
  block L_651 (env_236: unit)
    call L_652 (<_6 (env_236, x_1420)) handle _ => L_5
  block L_652 (x_1421: bool)
    case x_1421 of
      true => L_654 | false => L_653
  block L_653 ()
    goto L_5 (x_683 (*con Fail_0 (x_682)*))
  block L_654 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_655
  block L_655 (env_237: unit)
    call L_656 (sextdFromInt32ToInt32_1 (env_237, sizeInBits_21 (*0x16:w32*))) handle _ => L_5
  block L_656 (wordSize_23: word32)
    val x_1422: (word32, word32) tuple = (wordSize_23, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_657
  block L_657 (env_238: unit)
    call L_658 (<_6 (env_238, x_1422)) handle _ => L_5
  block L_658 (x_1423: bool)
    case x_1423 of
      true => L_660 | false => L_659
  block L_659 ()
    goto L_5 (x_687 (*con Fail_0 (x_686)*))
  block L_660 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_661
  block L_661 (env_239: unit)
    call L_662 (sextdFromInt32ToInt32_1 (env_239, sizeInBits_22 (*0x17:w32*))) handle _ => L_5
  block L_662 (wordSize_24: word32)
    val x_1424: (word32, word32) tuple = (wordSize_24, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_663
  block L_663 (env_240: unit)
    call L_664 (<_6 (env_240, x_1424)) handle _ => L_5
  block L_664 (x_1425: bool)
    case x_1425 of
      true => L_666 | false => L_665
  block L_665 ()
    goto L_5 (x_691 (*con Fail_0 (x_690)*))
  block L_666 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_667
  block L_667 (env_241: unit)
    call L_668 (sextdFromInt32ToInt32_1 (env_241, sizeInBits_23 (*0x18:w32*))) handle _ => L_5
  block L_668 (wordSize_25: word32)
    val x_1426: (word32, word32) tuple = (wordSize_25, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_669
  block L_669 (env_242: unit)
    call L_670 (<_6 (env_242, x_1426)) handle _ => L_5
  block L_670 (x_1427: bool)
    case x_1427 of
      true => L_672 | false => L_671
  block L_671 ()
    goto L_5 (x_695 (*con Fail_0 (x_694)*))
  block L_672 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_673
  block L_673 (env_243: unit)
    call L_674 (sextdFromInt32ToInt32_1 (env_243, sizeInBits_24 (*0x19:w32*))) handle _ => L_5
  block L_674 (wordSize_26: word32)
    val x_1428: (word32, word32) tuple = (wordSize_26, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_675
  block L_675 (env_244: unit)
    call L_676 (<_6 (env_244, x_1428)) handle _ => L_5
  block L_676 (x_1429: bool)
    case x_1429 of
      true => L_678 | false => L_677
  block L_677 ()
    goto L_5 (x_699 (*con Fail_0 (x_698)*))
  block L_678 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_679
  block L_679 (env_245: unit)
    call L_680 (sextdFromInt32ToInt32_1 (env_245, sizeInBits_25 (*0x1A:w32*))) handle _ => L_5
  block L_680 (wordSize_27: word32)
    val x_1430: (word32, word32) tuple = (wordSize_27, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_681
  block L_681 (env_246: unit)
    call L_682 (<_6 (env_246, x_1430)) handle _ => L_5
  block L_682 (x_1431: bool)
    case x_1431 of
      true => L_684 | false => L_683
  block L_683 ()
    goto L_5 (x_703 (*con Fail_0 (x_702)*))
  block L_684 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_685
  block L_685 (env_247: unit)
    call L_686 (sextdFromInt32ToInt32_1 (env_247, sizeInBits_26 (*0x1B:w32*))) handle _ => L_5
  block L_686 (wordSize_28: word32)
    val x_1432: (word32, word32) tuple = (wordSize_28, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_687
  block L_687 (env_248: unit)
    call L_688 (<_6 (env_248, x_1432)) handle _ => L_5
  block L_688 (x_1433: bool)
    case x_1433 of
      true => L_690 | false => L_689
  block L_689 ()
    goto L_5 (x_707 (*con Fail_0 (x_706)*))
  block L_690 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_691
  block L_691 (env_249: unit)
    call L_692 (sextdFromInt32ToInt32_1 (env_249, sizeInBits_27 (*0x1C:w32*))) handle _ => L_5
  block L_692 (wordSize_29: word32)
    val x_1434: (word32, word32) tuple = (wordSize_29, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_693
  block L_693 (env_250: unit)
    call L_694 (<_6 (env_250, x_1434)) handle _ => L_5
  block L_694 (x_1435: bool)
    case x_1435 of
      true => L_696 | false => L_695
  block L_695 ()
    goto L_5 (x_711 (*con Fail_0 (x_710)*))
  block L_696 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_697
  block L_697 (env_251: unit)
    call L_698 (sextdFromInt32ToInt32_1 (env_251, sizeInBits_28 (*0x1D:w32*))) handle _ => L_5
  block L_698 (wordSize_30: word32)
    val x_1436: (word32, word32) tuple = (wordSize_30, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_699
  block L_699 (env_252: unit)
    call L_700 (<_6 (env_252, x_1436)) handle _ => L_5
  block L_700 (x_1437: bool)
    case x_1437 of
      true => L_702 | false => L_701
  block L_701 ()
    goto L_5 (x_715 (*con Fail_0 (x_714)*))
  block L_702 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_703
  block L_703 (env_253: unit)
    call L_704 (sextdFromInt32ToInt32_1 (env_253, sizeInBits_29 (*0x1E:w32*))) handle _ => L_5
  block L_704 (wordSize_31: word32)
    val x_1438: (word32, word32) tuple = (wordSize_31, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_705
  block L_705 (env_254: unit)
    call L_706 (<_6 (env_254, x_1438)) handle _ => L_5
  block L_706 (x_1439: bool)
    case x_1439 of
      true => L_708 | false => L_707
  block L_707 ()
    goto L_5 (x_719 (*con Fail_0 (x_718)*))
  block L_708 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_709
  block L_709 (env_255: unit)
    call L_710 (sextdFromInt32ToInt32_1 (env_255, sizeInBits_30 (*0x1F:w32*))) handle _ => L_5
  block L_710 (wordSize_32: word32)
    val x_1440: (word32, word32) tuple = (wordSize_32, wordSize_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_711
  block L_711 (env_256: unit)
    call L_712 (<_6 (env_256, x_1440)) handle _ => L_5
  block L_712 (x_1441: bool)
    case x_1441 of
      true => L_714 | false => L_713
  block L_713 ()
    goto L_5 (x_723 (*con Fail_0 (x_722)*))
  block L_714 ()
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_715
  block L_715 (env_257: unit)
    call L_716 (x_1442 (env_257, x_1114)) handle _ => L_5
  block L_716 (maxOrd_0: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... x_90)*) of
      idFromInt32ToWord32Env_0 => L_717
  block L_717 (env_258: unit)
    call L_718 (idFromInt32ToWord32_1 (env_258, maxOrd_0)) handle _ => L_5
  block L_718 (x_1443: word32)
    case idFromInt32ToWord32_0 (*con idFrom ... x_90)*) of
      idFromInt32ToWord32Env_0 => L_719
  block L_719 (env_259: unit)
    call L_720 (idFromInt32ToWord32_1 (env_259, x_725 (*0x0:w32*))) handle _ => L_5
  block L_720 (x_1444: word32)
    val x_1445: (word32, word32) tuple = (x_1443, x_1444)
    case <_0 (*con <Env_0 (x_125)*) of
      <Env_0 => L_721
  block L_721 (env_260: unit)
    call L_722 (<_7 (env_260, x_1445)) handle _ => L_5
  block L_722 (x_1446: bool)
    case x_1446 of
      true => L_724 | false => L_723
  block L_723 ()
    case x_380 (*con xEnv_34 (x_379)*) of
      xEnv_34 => L_725
  block L_725 (env_261: unit)
    call L_726 (x_1447 (env_261, x_725 (*0x0:w32*))) handle _ => L_5
  block L_726 (x_1448: word8)
    goto L_727 (x_1448)
  block L_724 ()
    goto L_728 (x_726 (*con NONE_2*))
  block L_728 (x_1449: t_7)
    case x_1449 of
      NONE_2 => L_729 | SOME_6 => L_727
  block L_727 (x_1450: word8)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_730
  block L_730 (env_262: unit)
    call L_731 (fromIntForLength_1 (env_262, x_727 (*0x1:w32*))) handle _ => L_5
  block L_731 (x_1451: word64)
    call L_732 (arrayAlloc_2 (x_1216, x_1451)) handle _ => L_5
  block L_732 (a_0: (word8) array)
    val tuple_63: (word64, (word8) array, word8) tuple = (x_1451, a_0, x_1450)
    call L_733 (loop_10 (tuple_63, x_1115)) handle _ => L_5
  block L_733 (b_5: unit)
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_734
  block L_734 (env_263: unit)
    call L_735 (x_1452 (env_263, a_0)) handle _ => L_5
  block L_735 (x_1453: (word8) vector)
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_736
  block L_736 (env_264: unit)
    call L_737 (x_1454 (env_264, messagers_0)) handle _ => L_5
  block L_737 (x_1455: list_0)
    val x_1458: lambdas_0 = con xEnv_194 (concat_0)
    val x_1457: (lambdas_0, list_0) tuple = (x_1458, x_1455)
    val x_1456: list_0 = con ::_3 (x_1457)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_1456)
    case new_0 (*con newEnv ... e_34)*) of
      newEnv_0 => L_738
  block L_738 (env_265: unit)
    call L_739 (new_2 (env_265, x_740 (*()*))) handle _ => L_5
  block L_739 (atExit_0: (list_2) ref)
    case new_0 (*con newEnv ... e_34)*) of
      newEnv_0 => L_740
  block L_740 (env_266: unit)
    call L_741 (new_2 (env_266, x_741 (*()*))) handle _ => L_5
  block L_741 (atLoadWorld_0: (list_2) ref)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_742
  block L_742 (env_267: unit)
    call L_743 (fromRep_1 (env_267, EACCES_0 (*0xD:w32*))) handle _ => L_5
  block L_743 (acces_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_744
  block L_744 (env_268: unit)
    call L_745 (fromRep_1 (env_268, EADDRINUSE_0 (*0x62:w32*))) handle _ => L_5
  block L_745 (addrinuse_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_746
  block L_746 (env_269: unit)
    call L_747 (fromRep_1 (env_269, EADDRNOTAVAIL_0 (*0x63:w32*))) handle _ => L_5
  block L_747 (addrnotavail_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_748
  block L_748 (env_270: unit)
    call L_749 (fromRep_1 (env_270, EAFNOSUPPORT_0 (*0x61:w32*))) handle _ => L_5
  block L_749 (afnosupport_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_750
  block L_750 (env_271: unit)
    call L_751 (fromRep_1 (env_271, EAGAIN_0 (*0xB:w32*))) handle _ => L_5
  block L_751 (again_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_752
  block L_752 (env_272: unit)
    call L_753 (fromRep_1 (env_272, EALREADY_0 (*0x72:w32*))) handle _ => L_5
  block L_753 (already_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_754
  block L_754 (env_273: unit)
    call L_755 (fromRep_1 (env_273, EBADF_0 (*0x9:w32*))) handle _ => L_5
  block L_755 (badf_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_756
  block L_756 (env_274: unit)
    call L_757 (fromRep_1 (env_274, EBADMSG_0 (*0x4A:w32*))) handle _ => L_5
  block L_757 (badmsg_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_758
  block L_758 (env_275: unit)
    call L_759 (fromRep_1 (env_275, EBUSY_0 (*0x10:w32*))) handle _ => L_5
  block L_759 (busy_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_760
  block L_760 (env_276: unit)
    call L_761 (fromRep_1 (env_276, ECANCELED_0 (*0x7D:w32*))) handle _ => L_5
  block L_761 (canceled_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_762
  block L_762 (env_277: unit)
    call L_763 (fromRep_1 (env_277, ECHILD_0 (*0xA:w32*))) handle _ => L_5
  block L_763 (child_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_764
  block L_764 (env_278: unit)
    call L_765 (fromRep_1 (env_278, ECONNABORTED_0 (*0x67:w32*))) handle _ => L_5
  block L_765 (connaborted_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_766
  block L_766 (env_279: unit)
    call L_767 (fromRep_1 (env_279, ECONNREFUSED_0 (*0x6F:w32*))) handle _ => L_5
  block L_767 (connrefused_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_768
  block L_768 (env_280: unit)
    call L_769 (fromRep_1 (env_280, ECONNRESET_0 (*0x68:w32*))) handle _ => L_5
  block L_769 (connreset_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_770
  block L_770 (env_281: unit)
    call L_771 (fromRep_1 (env_281, EDEADLK_0 (*0x23:w32*))) handle _ => L_5
  block L_771 (deadlk_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_772
  block L_772 (env_282: unit)
    call L_773 (fromRep_1 (env_282, EDESTADDRREQ_0 (*0x59:w32*))) handle _ => L_5
  block L_773 (destaddrreq_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_774
  block L_774 (env_283: unit)
    call L_775 (fromRep_1 (env_283, EDOM_0 (*0x21:w32*))) handle _ => L_5
  block L_775 (dom_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_776
  block L_776 (env_284: unit)
    call L_777 (fromRep_1 (env_284, EDQUOT_0 (*0x7A:w32*))) handle _ => L_5
  block L_777 (dquot_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_778
  block L_778 (env_285: unit)
    call L_779 (fromRep_1 (env_285, EEXIST_0 (*0x11:w32*))) handle _ => L_5
  block L_779 (exist_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_780
  block L_780 (env_286: unit)
    call L_781 (fromRep_1 (env_286, EFAULT_0 (*0xE:w32*))) handle _ => L_5
  block L_781 (fault_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_782
  block L_782 (env_287: unit)
    call L_783 (fromRep_1 (env_287, EFBIG_0 (*0x1B:w32*))) handle _ => L_5
  block L_783 (fbig_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_784
  block L_784 (env_288: unit)
    call L_785 (fromRep_1 (env_288, EHOSTUNREACH_0 (*0x71:w32*))) handle _ => L_5
  block L_785 (hostunreach_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_786
  block L_786 (env_289: unit)
    call L_787 (fromRep_1 (env_289, EIDRM_0 (*0x2B:w32*))) handle _ => L_5
  block L_787 (idrm_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_788
  block L_788 (env_290: unit)
    call L_789 (fromRep_1 (env_290, EILSEQ_0 (*0x54:w32*))) handle _ => L_5
  block L_789 (ilseq_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_790
  block L_790 (env_291: unit)
    call L_791 (fromRep_1 (env_291, EINPROGRESS_0 (*0x73:w32*))) handle _ => L_5
  block L_791 (inprogress_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_792
  block L_792 (env_292: unit)
    call L_793 (fromRep_1 (env_292, EINTR_0 (*0x4:w32*))) handle _ => L_5
  block L_793 (intr_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_794
  block L_794 (env_293: unit)
    call L_795 (fromRep_1 (env_293, EINVAL_0 (*0x16:w32*))) handle _ => L_5
  block L_795 (inval_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_796
  block L_796 (env_294: unit)
    call L_797 (fromRep_1 (env_294, EIO_0 (*0x5:w32*))) handle _ => L_5
  block L_797 (io_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_798
  block L_798 (env_295: unit)
    call L_799 (fromRep_1 (env_295, EISCONN_0 (*0x6A:w32*))) handle _ => L_5
  block L_799 (isconn_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_800
  block L_800 (env_296: unit)
    call L_801 (fromRep_1 (env_296, EISDIR_0 (*0x15:w32*))) handle _ => L_5
  block L_801 (isdir_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_802
  block L_802 (env_297: unit)
    call L_803 (fromRep_1 (env_297, ELOOP_0 (*0x28:w32*))) handle _ => L_5
  block L_803 (loop_11: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_804
  block L_804 (env_298: unit)
    call L_805 (fromRep_1 (env_298, EMFILE_0 (*0x18:w32*))) handle _ => L_5
  block L_805 (mfile_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_806
  block L_806 (env_299: unit)
    call L_807 (fromRep_1 (env_299, EMLINK_0 (*0x1F:w32*))) handle _ => L_5
  block L_807 (mlink_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_808
  block L_808 (env_300: unit)
    call L_809 (fromRep_1 (env_300, EMSGSIZE_0 (*0x5A:w32*))) handle _ => L_5
  block L_809 (msgsize_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_810
  block L_810 (env_301: unit)
    call L_811 (fromRep_1 (env_301, EMULTIHOP_0 (*0x48:w32*))) handle _ => L_5
  block L_811 (multihop_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_812
  block L_812 (env_302: unit)
    call L_813 (fromRep_1 (env_302, ENAMETOOLONG_0 (*0x24:w32*))) handle _ => L_5
  block L_813 (nametoolong_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_814
  block L_814 (env_303: unit)
    call L_815 (fromRep_1 (env_303, ENETDOWN_0 (*0x64:w32*))) handle _ => L_5
  block L_815 (netdown_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_816
  block L_816 (env_304: unit)
    call L_817 (fromRep_1 (env_304, ENETRESET_0 (*0x66:w32*))) handle _ => L_5
  block L_817 (netreset_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_818
  block L_818 (env_305: unit)
    call L_819 (fromRep_1 (env_305, ENETUNREACH_0 (*0x65:w32*))) handle _ => L_5
  block L_819 (netunreach_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_820
  block L_820 (env_306: unit)
    call L_821 (fromRep_1 (env_306, ENFILE_0 (*0x17:w32*))) handle _ => L_5
  block L_821 (nfile_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_822
  block L_822 (env_307: unit)
    call L_823 (fromRep_1 (env_307, ENOBUFS_0 (*0x69:w32*))) handle _ => L_5
  block L_823 (nobufs_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_824
  block L_824 (env_308: unit)
    call L_825 (fromRep_1 (env_308, ENODATA_0 (*0x3D:w32*))) handle _ => L_5
  block L_825 (nodata_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_826
  block L_826 (env_309: unit)
    call L_827 (fromRep_1 (env_309, ENODEV_0 (*0x13:w32*))) handle _ => L_5
  block L_827 (nodev_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_828
  block L_828 (env_310: unit)
    call L_829 (fromRep_1 (env_310, ENOENT_0 (*0x2:w32*))) handle _ => L_5
  block L_829 (noent_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_830
  block L_830 (env_311: unit)
    call L_831 (fromRep_1 (env_311, ENOEXEC_0 (*0x8:w32*))) handle _ => L_5
  block L_831 (noexec_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_832
  block L_832 (env_312: unit)
    call L_833 (fromRep_1 (env_312, ENOLCK_0 (*0x25:w32*))) handle _ => L_5
  block L_833 (nolck_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_834
  block L_834 (env_313: unit)
    call L_835 (fromRep_1 (env_313, ENOLINK_0 (*0x43:w32*))) handle _ => L_5
  block L_835 (nolink_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_836
  block L_836 (env_314: unit)
    call L_837 (fromRep_1 (env_314, ENOMEM_0 (*0xC:w32*))) handle _ => L_5
  block L_837 (nomem_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_838
  block L_838 (env_315: unit)
    call L_839 (fromRep_1 (env_315, ENOMSG_0 (*0x2A:w32*))) handle _ => L_5
  block L_839 (nomsg_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_840
  block L_840 (env_316: unit)
    call L_841 (fromRep_1 (env_316, ENOPROTOOPT_0 (*0x5C:w32*))) handle _ => L_5
  block L_841 (noprotoopt_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_842
  block L_842 (env_317: unit)
    call L_843 (fromRep_1 (env_317, ENOSPC_0 (*0x1C:w32*))) handle _ => L_5
  block L_843 (nospc_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_844
  block L_844 (env_318: unit)
    call L_845 (fromRep_1 (env_318, ENOSR_0 (*0x3F:w32*))) handle _ => L_5
  block L_845 (nosr_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_846
  block L_846 (env_319: unit)
    call L_847 (fromRep_1 (env_319, ENOSTR_0 (*0x3C:w32*))) handle _ => L_5
  block L_847 (nostr_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_848
  block L_848 (env_320: unit)
    call L_849 (fromRep_1 (env_320, ENOSYS_0 (*0x26:w32*))) handle _ => L_5
  block L_849 (nosys_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_850
  block L_850 (env_321: unit)
    call L_851 (fromRep_1 (env_321, ENOTCONN_0 (*0x6B:w32*))) handle _ => L_5
  block L_851 (notconn_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_852
  block L_852 (env_322: unit)
    call L_853 (fromRep_1 (env_322, ENOTDIR_0 (*0x14:w32*))) handle _ => L_5
  block L_853 (notdir_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_854
  block L_854 (env_323: unit)
    call L_855 (fromRep_1 (env_323, ENOTEMPTY_0 (*0x27:w32*))) handle _ => L_5
  block L_855 (notempty_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_856
  block L_856 (env_324: unit)
    call L_857 (fromRep_1 (env_324, ENOTSOCK_0 (*0x58:w32*))) handle _ => L_5
  block L_857 (notsock_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_858
  block L_858 (env_325: unit)
    call L_859 (fromRep_1 (env_325, ENOTSUP_0 (*0x5F:w32*))) handle _ => L_5
  block L_859 (notsup_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_860
  block L_860 (env_326: unit)
    call L_861 (fromRep_1 (env_326, ENOTTY_0 (*0x19:w32*))) handle _ => L_5
  block L_861 (notty_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_862
  block L_862 (env_327: unit)
    call L_863 (fromRep_1 (env_327, ENXIO_0 (*0x6:w32*))) handle _ => L_5
  block L_863 (nxio_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_864
  block L_864 (env_328: unit)
    call L_865 (fromRep_1 (env_328, EOPNOTSUPP_0 (*0x5F:w32*))) handle _ => L_5
  block L_865 (opnotsupp_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_866
  block L_866 (env_329: unit)
    call L_867 (fromRep_1 (env_329, EOVERFLOW_0 (*0x4B:w32*))) handle _ => L_5
  block L_867 (overflow_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_868
  block L_868 (env_330: unit)
    call L_869 (fromRep_1 (env_330, EPERM_0 (*0x1:w32*))) handle _ => L_5
  block L_869 (perm_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_870
  block L_870 (env_331: unit)
    call L_871 (fromRep_1 (env_331, EPIPE_0 (*0x20:w32*))) handle _ => L_5
  block L_871 (pipe_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_872
  block L_872 (env_332: unit)
    call L_873 (fromRep_1 (env_332, EPROTO_0 (*0x47:w32*))) handle _ => L_5
  block L_873 (proto_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_874
  block L_874 (env_333: unit)
    call L_875 (fromRep_1 (env_333, EPROTONOSUPPORT_0 (*0x5D:w32*))) handle _ => L_5
  block L_875 (protonosupport_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_876
  block L_876 (env_334: unit)
    call L_877 (fromRep_1 (env_334, EPROTOTYPE_0 (*0x5B:w32*))) handle _ => L_5
  block L_877 (prototype_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_878
  block L_878 (env_335: unit)
    call L_879 (fromRep_1 (env_335, ERANGE_0 (*0x22:w32*))) handle _ => L_5
  block L_879 (range_2: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_880
  block L_880 (env_336: unit)
    call L_881 (fromRep_1 (env_336, EROFS_0 (*0x1E:w32*))) handle _ => L_5
  block L_881 (rofs_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_882
  block L_882 (env_337: unit)
    call L_883 (fromRep_1 (env_337, ESPIPE_0 (*0x1D:w32*))) handle _ => L_5
  block L_883 (spipe_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_884
  block L_884 (env_338: unit)
    call L_885 (fromRep_1 (env_338, ESRCH_0 (*0x3:w32*))) handle _ => L_5
  block L_885 (srch_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_886
  block L_886 (env_339: unit)
    call L_887 (fromRep_1 (env_339, ESTALE_0 (*0x74:w32*))) handle _ => L_5
  block L_887 (stale_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_888
  block L_888 (env_340: unit)
    call L_889 (fromRep_1 (env_340, ETIME_0 (*0x3E:w32*))) handle _ => L_5
  block L_889 (time_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_890
  block L_890 (env_341: unit)
    call L_891 (fromRep_1 (env_341, ETIMEDOUT_0 (*0x6E:w32*))) handle _ => L_5
  block L_891 (timedout_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_892
  block L_892 (env_342: unit)
    call L_893 (fromRep_1 (env_342, E2BIG_0 (*0x7:w32*))) handle _ => L_5
  block L_893 (toobig_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_894
  block L_894 (env_343: unit)
    call L_895 (fromRep_1 (env_343, ETXTBSY_0 (*0x1A:w32*))) handle _ => L_5
  block L_895 (txtbsy_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_896
  block L_896 (env_344: unit)
    call L_897 (fromRep_1 (env_344, EWOULDBLOCK_0 (*0xB:w32*))) handle _ => L_5
  block L_897 (wouldblock_0: word32)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_898
  block L_898 (env_345: unit)
    call L_899 (fromRep_1 (env_345, EXDEV_0 (*0x12:w32*))) handle _ => L_5
  block L_899 (xdev_0: word32)
    val x_1538: (word32, (word8) vector) tuple = (acces_0, x_745 (*"acces"*))
    val x_1537: (word32, (word8) vector) tuple =
      (addrinuse_0, x_746 (*"addrinuse"*))
    val x_1536: (word32, (word8) vector) tuple =
      (addrnotavail_0, x_747 (*"addrnotavail"*))
    val x_1535: (word32, (word8) vector) tuple =
      (afnosupport_0, x_748 (*"afnosupport"*))
    val x_1534: (word32, (word8) vector) tuple = (again_0, x_749 (*"again"*))
    val x_1533: (word32, (word8) vector) tuple =
      (already_0, x_750 (*"already"*))
    val x_1532: (word32, (word8) vector) tuple = (badf_0, x_751 (*"badf"*))
    val x_1531: (word32, (word8) vector) tuple = (badmsg_0, x_752 (*"badmsg"*))
    val x_1530: (word32, (word8) vector) tuple = (busy_0, x_753 (*"busy"*))
    val x_1529: (word32, (word8) vector) tuple =
      (canceled_0, x_754 (*"canceled"*))
    val x_1528: (word32, (word8) vector) tuple = (child_0, x_755 (*"child"*))
    val x_1527: (word32, (word8) vector) tuple =
      (connaborted_0, x_756 (*"connaborted"*))
    val x_1526: (word32, (word8) vector) tuple =
      (connrefused_0, x_757 (*"connrefused"*))
    val x_1525: (word32, (word8) vector) tuple =
      (connreset_0, x_758 (*"connreset"*))
    val x_1524: (word32, (word8) vector) tuple = (deadlk_0, x_759 (*"deadlk"*))
    val x_1523: (word32, (word8) vector) tuple =
      (destaddrreq_0, x_760 (*"destaddrreq"*))
    val x_1522: (word32, (word8) vector) tuple = (dom_0, x_761 (*"dom"*))
    val x_1521: (word32, (word8) vector) tuple = (dquot_0, x_762 (*"dquot"*))
    val x_1520: (word32, (word8) vector) tuple = (exist_0, x_763 (*"exist"*))
    val x_1519: (word32, (word8) vector) tuple = (fault_0, x_764 (*"fault"*))
    val x_1518: (word32, (word8) vector) tuple = (fbig_0, x_765 (*"fbig"*))
    val x_1517: (word32, (word8) vector) tuple =
      (hostunreach_0, x_766 (*"hostunreach"*))
    val x_1516: (word32, (word8) vector) tuple = (idrm_0, x_767 (*"idrm"*))
    val x_1515: (word32, (word8) vector) tuple = (ilseq_0, x_768 (*"ilseq"*))
    val x_1514: (word32, (word8) vector) tuple =
      (inprogress_0, x_769 (*"inprogress"*))
    val x_1513: (word32, (word8) vector) tuple = (intr_0, x_770 (*"intr"*))
    val x_1512: (word32, (word8) vector) tuple = (inval_0, x_771 (*"inval"*))
    val x_1511: (word32, (word8) vector) tuple = (io_0, x_772 (*"io"*))
    val x_1510: (word32, (word8) vector) tuple = (isconn_0, x_773 (*"isconn"*))
    val x_1509: (word32, (word8) vector) tuple = (isdir_0, x_774 (*"isdir"*))
    val x_1508: (word32, (word8) vector) tuple = (loop_11, x_775 (*"loop"*))
    val x_1507: (word32, (word8) vector) tuple = (mfile_0, x_776 (*"mfile"*))
    val x_1506: (word32, (word8) vector) tuple = (mlink_0, x_777 (*"mlink"*))
    val x_1505: (word32, (word8) vector) tuple =
      (msgsize_0, x_778 (*"msgsize"*))
    val x_1504: (word32, (word8) vector) tuple =
      (multihop_0, x_779 (*"multihop"*))
    val x_1503: (word32, (word8) vector) tuple =
      (nametoolong_0, x_780 (*"nametoolong"*))
    val x_1502: (word32, (word8) vector) tuple =
      (netdown_0, x_781 (*"netdown"*))
    val x_1501: (word32, (word8) vector) tuple =
      (netreset_0, x_782 (*"netreset"*))
    val x_1500: (word32, (word8) vector) tuple =
      (netunreach_0, x_783 (*"netunreach"*))
    val x_1499: (word32, (word8) vector) tuple = (nfile_0, x_784 (*"nfile"*))
    val x_1498: (word32, (word8) vector) tuple = (nobufs_0, x_785 (*"nobufs"*))
    val x_1497: (word32, (word8) vector) tuple = (nodata_0, x_786 (*"nodata"*))
    val x_1496: (word32, (word8) vector) tuple = (nodev_0, x_787 (*"nodev"*))
    val x_1495: (word32, (word8) vector) tuple = (noent_0, x_788 (*"noent"*))
    val x_1494: (word32, (word8) vector) tuple = (noexec_0, x_789 (*"noexec"*))
    val x_1493: (word32, (word8) vector) tuple = (nolck_0, x_790 (*"nolck"*))
    val x_1492: (word32, (word8) vector) tuple = (nolink_0, x_791 (*"nolink"*))
    val x_1491: (word32, (word8) vector) tuple = (nomem_0, x_792 (*"nomem"*))
    val x_1490: (word32, (word8) vector) tuple = (nomsg_0, x_793 (*"nomsg"*))
    val x_1489: (word32, (word8) vector) tuple =
      (noprotoopt_0, x_794 (*"noprotoopt"*))
    val x_1488: (word32, (word8) vector) tuple = (nospc_0, x_795 (*"nospc"*))
    val x_1487: (word32, (word8) vector) tuple = (nosr_0, x_796 (*"nosr"*))
    val x_1486: (word32, (word8) vector) tuple = (nostr_0, x_797 (*"nostr"*))
    val x_1485: (word32, (word8) vector) tuple = (nosys_0, x_798 (*"nosys"*))
    val x_1484: (word32, (word8) vector) tuple =
      (notconn_0, x_799 (*"notconn"*))
    val x_1483: (word32, (word8) vector) tuple = (notdir_0, x_800 (*"notdir"*))
    val x_1482: (word32, (word8) vector) tuple =
      (notempty_0, x_801 (*"notempty"*))
    val x_1481: (word32, (word8) vector) tuple =
      (notsock_0, x_802 (*"notsock"*))
    val x_1480: (word32, (word8) vector) tuple = (notsup_0, x_803 (*"notsup"*))
    val x_1479: (word32, (word8) vector) tuple = (notty_0, x_804 (*"notty"*))
    val x_1478: (word32, (word8) vector) tuple = (nxio_0, x_805 (*"nxio"*))
    val x_1477: (word32, (word8) vector) tuple =
      (opnotsupp_0, x_806 (*"opnotsupp"*))
    val x_1476: (word32, (word8) vector) tuple =
      (overflow_0, x_807 (*"overflow"*))
    val x_1475: (word32, (word8) vector) tuple = (perm_0, x_808 (*"perm"*))
    val x_1474: (word32, (word8) vector) tuple = (pipe_0, x_809 (*"pipe"*))
    val x_1473: (word32, (word8) vector) tuple = (proto_0, x_810 (*"proto"*))
    val x_1472: (word32, (word8) vector) tuple =
      (protonosupport_0, x_811 (*"protonosupport"*))
    val x_1471: (word32, (word8) vector) tuple =
      (prototype_0, x_812 (*"prototype"*))
    val x_1470: (word32, (word8) vector) tuple = (range_2, x_813 (*"range"*))
    val x_1469: (word32, (word8) vector) tuple = (rofs_0, x_814 (*"rofs"*))
    val x_1468: (word32, (word8) vector) tuple = (spipe_0, x_815 (*"spipe"*))
    val x_1467: (word32, (word8) vector) tuple = (srch_0, x_816 (*"srch"*))
    val x_1466: (word32, (word8) vector) tuple = (stale_0, x_817 (*"stale"*))
    val x_1465: (word32, (word8) vector) tuple = (time_0, x_818 (*"time"*))
    val x_1464: (word32, (word8) vector) tuple =
      (timedout_0, x_819 (*"timedout"*))
    val x_1463: (word32, (word8) vector) tuple = (toobig_0, x_820 (*"toobig"*))
    val x_1462: (word32, (word8) vector) tuple = (txtbsy_0, x_821 (*"txtbsy"*))
    val x_1461: (word32, (word8) vector) tuple =
      (wouldblock_0, x_822 (*"wouldblock"*))
    val x_1460: (word32, (word8) vector) tuple = (xdev_0, x_823 (*"xdev"*))
    val x_1459: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1460, x_824 (*con nil_5*))
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_900
  block L_900 (env_346: unit)
    call L_901 (::?_1 (env_346, x_1459)) handle _ => L_5
  block L_901 (x_1539: list_3)
    val x_1540: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1461, x_1539)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_902
  block L_902 (env_347: unit)
    call L_903 (::?_1 (env_347, x_1540)) handle _ => L_5
  block L_903 (x_1541: list_3)
    val x_1542: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1462, x_1541)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_904
  block L_904 (env_348: unit)
    call L_905 (::?_1 (env_348, x_1542)) handle _ => L_5
  block L_905 (x_1543: list_3)
    val x_1544: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1463, x_1543)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_906
  block L_906 (env_349: unit)
    call L_907 (::?_1 (env_349, x_1544)) handle _ => L_5
  block L_907 (x_1545: list_3)
    val x_1546: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1464, x_1545)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_908
  block L_908 (env_350: unit)
    call L_909 (::?_1 (env_350, x_1546)) handle _ => L_5
  block L_909 (x_1547: list_3)
    val x_1548: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1465, x_1547)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_910
  block L_910 (env_351: unit)
    call L_911 (::?_1 (env_351, x_1548)) handle _ => L_5
  block L_911 (x_1549: list_3)
    val x_1550: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1466, x_1549)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_912
  block L_912 (env_352: unit)
    call L_913 (::?_1 (env_352, x_1550)) handle _ => L_5
  block L_913 (x_1551: list_3)
    val x_1552: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1467, x_1551)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_914
  block L_914 (env_353: unit)
    call L_915 (::?_1 (env_353, x_1552)) handle _ => L_5
  block L_915 (x_1553: list_3)
    val x_1554: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1468, x_1553)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_916
  block L_916 (env_354: unit)
    call L_917 (::?_1 (env_354, x_1554)) handle _ => L_5
  block L_917 (x_1555: list_3)
    val x_1556: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1469, x_1555)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_918
  block L_918 (env_355: unit)
    call L_919 (::?_1 (env_355, x_1556)) handle _ => L_5
  block L_919 (x_1557: list_3)
    val x_1558: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1470, x_1557)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_920
  block L_920 (env_356: unit)
    call L_921 (::?_1 (env_356, x_1558)) handle _ => L_5
  block L_921 (x_1559: list_3)
    val x_1560: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1471, x_1559)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_922
  block L_922 (env_357: unit)
    call L_923 (::?_1 (env_357, x_1560)) handle _ => L_5
  block L_923 (x_1561: list_3)
    val x_1562: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1472, x_1561)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_924
  block L_924 (env_358: unit)
    call L_925 (::?_1 (env_358, x_1562)) handle _ => L_5
  block L_925 (x_1563: list_3)
    val x_1564: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1473, x_1563)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_926
  block L_926 (env_359: unit)
    call L_927 (::?_1 (env_359, x_1564)) handle _ => L_5
  block L_927 (x_1565: list_3)
    val x_1566: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1474, x_1565)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_928
  block L_928 (env_360: unit)
    call L_929 (::?_1 (env_360, x_1566)) handle _ => L_5
  block L_929 (x_1567: list_3)
    val x_1568: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1475, x_1567)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_930
  block L_930 (env_361: unit)
    call L_931 (::?_1 (env_361, x_1568)) handle _ => L_5
  block L_931 (x_1569: list_3)
    val x_1570: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1476, x_1569)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_932
  block L_932 (env_362: unit)
    call L_933 (::?_1 (env_362, x_1570)) handle _ => L_5
  block L_933 (x_1571: list_3)
    val x_1572: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1477, x_1571)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_934
  block L_934 (env_363: unit)
    call L_935 (::?_1 (env_363, x_1572)) handle _ => L_5
  block L_935 (x_1573: list_3)
    val x_1574: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1478, x_1573)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_936
  block L_936 (env_364: unit)
    call L_937 (::?_1 (env_364, x_1574)) handle _ => L_5
  block L_937 (x_1575: list_3)
    val x_1576: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1479, x_1575)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_938
  block L_938 (env_365: unit)
    call L_939 (::?_1 (env_365, x_1576)) handle _ => L_5
  block L_939 (x_1577: list_3)
    val x_1578: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1480, x_1577)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_940
  block L_940 (env_366: unit)
    call L_941 (::?_1 (env_366, x_1578)) handle _ => L_5
  block L_941 (x_1579: list_3)
    val x_1580: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1481, x_1579)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_942
  block L_942 (env_367: unit)
    call L_943 (::?_1 (env_367, x_1580)) handle _ => L_5
  block L_943 (x_1581: list_3)
    val x_1582: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1482, x_1581)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_944
  block L_944 (env_368: unit)
    call L_945 (::?_1 (env_368, x_1582)) handle _ => L_5
  block L_945 (x_1583: list_3)
    val x_1584: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1483, x_1583)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_946
  block L_946 (env_369: unit)
    call L_947 (::?_1 (env_369, x_1584)) handle _ => L_5
  block L_947 (x_1585: list_3)
    val x_1586: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1484, x_1585)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_948
  block L_948 (env_370: unit)
    call L_949 (::?_1 (env_370, x_1586)) handle _ => L_5
  block L_949 (x_1587: list_3)
    val x_1588: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1485, x_1587)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_950
  block L_950 (env_371: unit)
    call L_951 (::?_1 (env_371, x_1588)) handle _ => L_5
  block L_951 (x_1589: list_3)
    val x_1590: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1486, x_1589)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_952
  block L_952 (env_372: unit)
    call L_953 (::?_1 (env_372, x_1590)) handle _ => L_5
  block L_953 (x_1591: list_3)
    val x_1592: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1487, x_1591)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_954
  block L_954 (env_373: unit)
    call L_955 (::?_1 (env_373, x_1592)) handle _ => L_5
  block L_955 (x_1593: list_3)
    val x_1594: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1488, x_1593)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_956
  block L_956 (env_374: unit)
    call L_957 (::?_1 (env_374, x_1594)) handle _ => L_5
  block L_957 (x_1595: list_3)
    val x_1596: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1489, x_1595)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_958
  block L_958 (env_375: unit)
    call L_959 (::?_1 (env_375, x_1596)) handle _ => L_5
  block L_959 (x_1597: list_3)
    val x_1598: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1490, x_1597)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_960
  block L_960 (env_376: unit)
    call L_961 (::?_1 (env_376, x_1598)) handle _ => L_5
  block L_961 (x_1599: list_3)
    val x_1600: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1491, x_1599)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_962
  block L_962 (env_377: unit)
    call L_963 (::?_1 (env_377, x_1600)) handle _ => L_5
  block L_963 (x_1601: list_3)
    val x_1602: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1492, x_1601)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_964
  block L_964 (env_378: unit)
    call L_965 (::?_1 (env_378, x_1602)) handle _ => L_5
  block L_965 (x_1603: list_3)
    val x_1604: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1493, x_1603)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_966
  block L_966 (env_379: unit)
    call L_967 (::?_1 (env_379, x_1604)) handle _ => L_5
  block L_967 (x_1605: list_3)
    val x_1606: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1494, x_1605)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_968
  block L_968 (env_380: unit)
    call L_969 (::?_1 (env_380, x_1606)) handle _ => L_5
  block L_969 (x_1607: list_3)
    val x_1608: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1495, x_1607)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_970
  block L_970 (env_381: unit)
    call L_971 (::?_1 (env_381, x_1608)) handle _ => L_5
  block L_971 (x_1609: list_3)
    val x_1610: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1496, x_1609)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_972
  block L_972 (env_382: unit)
    call L_973 (::?_1 (env_382, x_1610)) handle _ => L_5
  block L_973 (x_1611: list_3)
    val x_1612: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1497, x_1611)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_974
  block L_974 (env_383: unit)
    call L_975 (::?_1 (env_383, x_1612)) handle _ => L_5
  block L_975 (x_1613: list_3)
    val x_1614: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1498, x_1613)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_976
  block L_976 (env_384: unit)
    call L_977 (::?_1 (env_384, x_1614)) handle _ => L_5
  block L_977 (x_1615: list_3)
    val x_1616: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1499, x_1615)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_978
  block L_978 (env_385: unit)
    call L_979 (::?_1 (env_385, x_1616)) handle _ => L_5
  block L_979 (x_1617: list_3)
    val x_1618: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1500, x_1617)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_980
  block L_980 (env_386: unit)
    call L_981 (::?_1 (env_386, x_1618)) handle _ => L_5
  block L_981 (x_1619: list_3)
    val x_1620: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1501, x_1619)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_982
  block L_982 (env_387: unit)
    call L_983 (::?_1 (env_387, x_1620)) handle _ => L_5
  block L_983 (x_1621: list_3)
    val x_1622: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1502, x_1621)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_984
  block L_984 (env_388: unit)
    call L_985 (::?_1 (env_388, x_1622)) handle _ => L_5
  block L_985 (x_1623: list_3)
    val x_1624: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1503, x_1623)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_986
  block L_986 (env_389: unit)
    call L_987 (::?_1 (env_389, x_1624)) handle _ => L_5
  block L_987 (x_1625: list_3)
    val x_1626: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1504, x_1625)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_988
  block L_988 (env_390: unit)
    call L_989 (::?_1 (env_390, x_1626)) handle _ => L_5
  block L_989 (x_1627: list_3)
    val x_1628: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1505, x_1627)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_990
  block L_990 (env_391: unit)
    call L_991 (::?_1 (env_391, x_1628)) handle _ => L_5
  block L_991 (x_1629: list_3)
    val x_1630: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1506, x_1629)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_992
  block L_992 (env_392: unit)
    call L_993 (::?_1 (env_392, x_1630)) handle _ => L_5
  block L_993 (x_1631: list_3)
    val x_1632: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1507, x_1631)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_994
  block L_994 (env_393: unit)
    call L_995 (::?_1 (env_393, x_1632)) handle _ => L_5
  block L_995 (x_1633: list_3)
    val x_1634: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1508, x_1633)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_996
  block L_996 (env_394: unit)
    call L_997 (::?_1 (env_394, x_1634)) handle _ => L_5
  block L_997 (x_1635: list_3)
    val x_1636: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1509, x_1635)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_998
  block L_998 (env_395: unit)
    call L_999 (::?_1 (env_395, x_1636)) handle _ => L_5
  block L_999 (x_1637: list_3)
    val x_1638: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1510, x_1637)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1000
  block L_1000 (env_396: unit)
    call L_1001 (::?_1 (env_396, x_1638)) handle _ => L_5
  block L_1001 (x_1639: list_3)
    val x_1640: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1511, x_1639)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1002
  block L_1002 (env_397: unit)
    call L_1003 (::?_1 (env_397, x_1640)) handle _ => L_5
  block L_1003 (x_1641: list_3)
    val x_1642: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1512, x_1641)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1004
  block L_1004 (env_398: unit)
    call L_1005 (::?_1 (env_398, x_1642)) handle _ => L_5
  block L_1005 (x_1643: list_3)
    val x_1644: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1513, x_1643)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1006
  block L_1006 (env_399: unit)
    call L_1007 (::?_1 (env_399, x_1644)) handle _ => L_5
  block L_1007 (x_1645: list_3)
    val x_1646: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1514, x_1645)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1008
  block L_1008 (env_400: unit)
    call L_1009 (::?_1 (env_400, x_1646)) handle _ => L_5
  block L_1009 (x_1647: list_3)
    val x_1648: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1515, x_1647)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1010
  block L_1010 (env_401: unit)
    call L_1011 (::?_1 (env_401, x_1648)) handle _ => L_5
  block L_1011 (x_1649: list_3)
    val x_1650: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1516, x_1649)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1012
  block L_1012 (env_402: unit)
    call L_1013 (::?_1 (env_402, x_1650)) handle _ => L_5
  block L_1013 (x_1651: list_3)
    val x_1652: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1517, x_1651)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1014
  block L_1014 (env_403: unit)
    call L_1015 (::?_1 (env_403, x_1652)) handle _ => L_5
  block L_1015 (x_1653: list_3)
    val x_1654: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1518, x_1653)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1016
  block L_1016 (env_404: unit)
    call L_1017 (::?_1 (env_404, x_1654)) handle _ => L_5
  block L_1017 (x_1655: list_3)
    val x_1656: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1519, x_1655)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1018
  block L_1018 (env_405: unit)
    call L_1019 (::?_1 (env_405, x_1656)) handle _ => L_5
  block L_1019 (x_1657: list_3)
    val x_1658: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1520, x_1657)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1020
  block L_1020 (env_406: unit)
    call L_1021 (::?_1 (env_406, x_1658)) handle _ => L_5
  block L_1021 (x_1659: list_3)
    val x_1660: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1521, x_1659)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1022
  block L_1022 (env_407: unit)
    call L_1023 (::?_1 (env_407, x_1660)) handle _ => L_5
  block L_1023 (x_1661: list_3)
    val x_1662: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1522, x_1661)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1024
  block L_1024 (env_408: unit)
    call L_1025 (::?_1 (env_408, x_1662)) handle _ => L_5
  block L_1025 (x_1663: list_3)
    val x_1664: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1523, x_1663)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1026
  block L_1026 (env_409: unit)
    call L_1027 (::?_1 (env_409, x_1664)) handle _ => L_5
  block L_1027 (x_1665: list_3)
    val x_1666: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1524, x_1665)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1028
  block L_1028 (env_410: unit)
    call L_1029 (::?_1 (env_410, x_1666)) handle _ => L_5
  block L_1029 (x_1667: list_3)
    val x_1668: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1525, x_1667)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1030
  block L_1030 (env_411: unit)
    call L_1031 (::?_1 (env_411, x_1668)) handle _ => L_5
  block L_1031 (x_1669: list_3)
    val x_1670: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1526, x_1669)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1032
  block L_1032 (env_412: unit)
    call L_1033 (::?_1 (env_412, x_1670)) handle _ => L_5
  block L_1033 (x_1671: list_3)
    val x_1672: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1527, x_1671)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1034
  block L_1034 (env_413: unit)
    call L_1035 (::?_1 (env_413, x_1672)) handle _ => L_5
  block L_1035 (x_1673: list_3)
    val x_1674: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1528, x_1673)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1036
  block L_1036 (env_414: unit)
    call L_1037 (::?_1 (env_414, x_1674)) handle _ => L_5
  block L_1037 (x_1675: list_3)
    val x_1676: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1529, x_1675)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1038
  block L_1038 (env_415: unit)
    call L_1039 (::?_1 (env_415, x_1676)) handle _ => L_5
  block L_1039 (x_1677: list_3)
    val x_1678: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1530, x_1677)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1040
  block L_1040 (env_416: unit)
    call L_1041 (::?_1 (env_416, x_1678)) handle _ => L_5
  block L_1041 (x_1679: list_3)
    val x_1680: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1531, x_1679)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1042
  block L_1042 (env_417: unit)
    call L_1043 (::?_1 (env_417, x_1680)) handle _ => L_5
  block L_1043 (x_1681: list_3)
    val x_1682: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1532, x_1681)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1044
  block L_1044 (env_418: unit)
    call L_1045 (::?_1 (env_418, x_1682)) handle _ => L_5
  block L_1045 (x_1683: list_3)
    val x_1684: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1533, x_1683)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1046
  block L_1046 (env_419: unit)
    call L_1047 (::?_1 (env_419, x_1684)) handle _ => L_5
  block L_1047 (x_1685: list_3)
    val x_1686: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1534, x_1685)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1048
  block L_1048 (env_420: unit)
    call L_1049 (::?_1 (env_420, x_1686)) handle _ => L_5
  block L_1049 (x_1687: list_3)
    val x_1688: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1535, x_1687)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1050
  block L_1050 (env_421: unit)
    call L_1051 (::?_1 (env_421, x_1688)) handle _ => L_5
  block L_1051 (x_1689: list_3)
    val x_1690: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1536, x_1689)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1052
  block L_1052 (env_422: unit)
    call L_1053 (::?_1 (env_422, x_1690)) handle _ => L_5
  block L_1053 (x_1691: list_3)
    val x_1692: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1537, x_1691)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1054
  block L_1054 (env_423: unit)
    call L_1055 (::?_1 (env_423, x_1692)) handle _ => L_5
  block L_1055 (x_1693: list_3)
    val x_1694: ((word32, (word8) vector) tuple, list_3) tuple =
      (x_1538, x_1693)
    case ::?_0 (*con ::?Env ... e_35)*) of
      ::?Env_0 => L_1056
  block L_1056 (env_424: unit)
    call L_1057 (::?_1 (env_424, x_1694)) handle _ => L_5
  block L_1057 (errorNames_0: list_3)
    val x_1695: (lambdas_16, list_3) tuple = (concat_0, errorNames_0)
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1058
  block L_1058 (env_425: unit)
    call L_1059 (x_1454 (env_425, messagers_0)) handle _ => L_5
  block L_1059 (x_1696: list_0)
    val x_1699: lambdas_0 = con xEnv_195 (x_1695)
    val x_1698: (lambdas_0, list_0) tuple = (x_1699, x_1696)
    val x_1697: list_0 = con ::_3 (x_1698)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_1697)
    val tuple_64: (word32, cpointer, lambdas_155) tuple =
      (inval_0, null_0, arrayAlloc_0)
    val setRoundingMode_0: lambdas_29 = con setRoundingModeEnv_0 (tuple_64)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1060
  block L_1060 (env_426: unit)
    call L_1061 (sextdFromInt32ToInt32_1 (env_426, realSize_0 (*0x20:w32*))) handle _ => L_5
  block L_1061 (realSize_2: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1062
  block L_1062 (env_427: unit)
    call L_1063 (sextdFromInt32ToInt32_1 (env_427, exponentBias_0 (*0x7F:w32*))) handle _ => L_5
  block L_1063 (exponentBias_2: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1064
  block L_1064 (env_428: unit)
    call L_1065 (sextdFromInt32ToInt32_1 (env_428, precision_4 (*0x18:w32*))) handle _ => L_5
  block L_1065 (precision_6: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1066
  block L_1066 (env_429: unit)
    call L_1067 (sextdFromInt32ToWord32_1 (env_429, realSize_2)) handle _ => L_5
  block L_1067 (x_1700: word32)
    val x_1701: (word32, word32) tuple = (x_1700, one_2)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1068
  block L_1068 (env_430: unit)
    call L_1069 (-_3 (env_430, x_1701)) handle _ => L_5
  block L_1069 (exponentSignificandBits_0: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1070
  block L_1070 (env_431: unit)
    call L_1071 (sextdFromInt32ToWord32_1 (env_431, precision_6)) handle _ => L_5
  block L_1071 (x_1702: word32)
    val x_1703: (word32, word32) tuple = (x_1702, one_2)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1072
  block L_1072 (env_432: unit)
    call L_1073 (-_3 (env_432, x_1703)) handle _ => L_5
  block L_1073 (significandBits_0: word32)
    val x_1704: (word32, word32) tuple =
      (exponentSignificandBits_0, significandBits_0)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1074
  block L_1074 (env_433: unit)
    call L_1075 (-_3 (env_433, x_1704)) handle _ => L_5
  block L_1075 (exponentBits_0: word32)
    val x_1705: (lambdas_44, word32) tuple = (<<_6, zero_2)
    call L_1076 (mkMask_0 (x_1705, one_2)) handle _ => L_5
  block L_1076 (x_1706: word32)
    val x_1707: (word32, word32) tuple = (x_1706, exponentSignificandBits_0)
    call L_1077 (<<_8 (tuple_60, x_1707)) handle _ => L_5
  block L_1077 (signMask_0: word32)
    call L_1078 (mkMask_0 (x_1705, exponentBits_0)) handle _ => L_5
  block L_1078 (x_1708: word32)
    val x_1709: (word32, word32) tuple = (x_1708, significandBits_0)
    call L_1079 (<<_8 (tuple_60, x_1709)) handle _ => L_5
  block L_1079 (exponentMask_0: word32)
    call L_1080 (mkMask_0 (x_1705, significandBits_0)) handle _ => L_5
  block L_1080 (significandMask_0: word32)
    val x_1710: (word32, word32, word32) tuple =
      (zero_2, significandMask_0, exponentMask_0)
    val class_0: lambdas_99 = con classEnv_1 (x_1710)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1081
  block L_1081 (env_434: unit)
    call L_1082 (x_1711 (env_434, x_1118)) handle _ => L_5
  block L_1082 (x_1712: bool)
    case x_1712 of
      true => L_1084 | false => L_1083
  block L_1083 ()
    val x_1714: lambdas_150 = con xEnv_168 (setRoundingMode_0)
    val x_1713: (lambdas_150, lambdas_268) tuple =
      (x_1714, toReal32Unsafe_0 (*con toReal ... _195)*))
    goto L_1085 (x_1713)
  block L_1084 ()
    val x_1716: lambdas_149 = #0 (x_1119)
    val x_1715: lambdas_268 = #1 (x_1119)
    case x_1716 of
      xEnv_42 => L_1086
  block L_1086 (x_1717: unit)
    val x_1719: lambdas_150 = con xEnv_169 (x_1717)
    val x_1718: (lambdas_150, lambdas_268) tuple = (x_1719, x_1715)
    goto L_1085 (x_1718)
  block L_1085 (x_1720: (lambdas_150, lambdas_268) tuple)
    case castFromWord_0 (*con castFr ... _224)*) of
      castFromWordEnv_0 => L_1087
  block L_1087 (env_435: unit)
    call L_1088 (castFromWord_2 (env_435, zero_2)) handle _ => L_5
  block L_1088 (zero_6: real32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1089
  block L_1089 (env_436: unit)
    call L_1090 (sextdFromInt32ToWord32_1 (env_436, exponentBias_2)) handle _ => L_5
  block L_1090 (x_1721: word32)
    val x_1722: (word32, word32) tuple = (x_1721, one_2)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1091
  block L_1091 (env_437: unit)
    call L_1092 (-_3 (env_437, x_1722)) handle _ => L_5
  block L_1092 (x_1723: word32)
    val x_1724: (word32, word32) tuple = (x_1723, significandBits_0)
    call L_1093 (<<_8 (tuple_60, x_1724)) handle _ => L_5
  block L_1093 (x_1725: word32)
    case castFromWord_0 (*con castFr ... _224)*) of
      castFromWordEnv_0 => L_1094
  block L_1094 (env_438: unit)
    call L_1095 (castFromWord_2 (env_438, x_1725)) handle _ => L_5
  block L_1095 (half_0: real32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1096
  block L_1096 (env_439: unit)
    call L_1097 (sextdFromInt32ToWord32_1 (env_439, exponentBias_2)) handle _ => L_5
  block L_1097 (x_1726: word32)
    val x_1727: (word32, word32) tuple = (x_1726, significandBits_0)
    call L_1098 (<<_8 (tuple_60, x_1727)) handle _ => L_5
  block L_1098 (x_1728: word32)
    case castFromWord_0 (*con castFr ... _224)*) of
      castFromWordEnv_0 => L_1099
  block L_1099 (env_440: unit)
    call L_1100 (castFromWord_2 (env_440, x_1728)) handle _ => L_5
  block L_1100 (one_6: real32)
    val x_1730: (lambdas_92, lambdas_91, word8) tuple = (<<_0, >>_0, maxInt'_0)
    val x_1729: (word32, word32) tuple = (precision_6, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1101
  block L_1101 (env_441: unit)
    call L_1102 (<_6 (env_441, x_1729)) handle _ => L_5
  block L_1102 (x_1731: bool)
    case x_1731 of
      true => L_1104 | false => L_1103
  block L_1103 ()
    call L_1105 (x_1732 (x_1730, x_875 (*0x0:w32*))) handle _ => L_5
  block L_1105 (maxInt'_4: word8)
    case fromInt8Unsafe_0 (*con fromIn ... _182)*) of
      fromInt8UnsafeEnv_0 => L_1106
  block L_1106 (env_442: unit)
    call L_1107 (fromInt8Unsafe_2 (env_442, maxInt'_4)) handle _ => L_5
  block L_1107 (maxInt_0: real32)
    case fromInt8Unsafe_0 (*con fromIn ... _182)*) of
      fromInt8UnsafeEnv_0 => L_1108
  block L_1108 (env_443: unit)
    call L_1109 (fromInt8Unsafe_2 (env_443, minInt'_0)) handle _ => L_5
  block L_1109 (minInt_0: real32)
    val x_1734:
      (real32, real32, lambdas_29, real32, word8, real32, word8) tuple =
      (minInt_0,
       maxInt_0,
       setRoundingMode_0,
       one_6,
       maxInt'_4,
       half_0,
       minInt'_0)
    val x_1733: lambdas_145 = con xEnv_163 (x_1734)
    goto L_1110 (x_1733)
  block L_1104 ()
    val x_1735: (word32, word32) tuple = (precision'_0, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1111
  block L_1111 (env_444: unit)
    call L_1112 (x_1442 (env_444, x_1735)) handle _ => L_5
  block L_1112 (x_1736: word32)
    val x_1737: (word32, word32) tuple = (x_1736, x_872 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1113
  block L_1113 (env_445: unit)
    call L_1114 (x_1442 (env_445, x_1737)) handle _ => L_5
  block L_1114 (trim_0: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1115
  block L_1115 (env_446: unit)
    call L_1116 (sextdFromInt32ToWord32_1 (env_446, trim_0)) handle _ => L_5
  block L_1116 (x_1738: word32)
    call L_1117 (x_1732 (x_1730, x_1738)) handle _ => L_5
  block L_1117 (maxInt'_5: word8)
    case fromInt8Unsafe_0 (*con fromIn ... _182)*) of
      fromInt8UnsafeEnv_0 => L_1118
  block L_1118 (env_447: unit)
    call L_1119 (fromInt8Unsafe_2 (env_447, maxInt'_5)) handle _ => L_5
  block L_1119 (maxInt_1: real32)
    case fromInt8Unsafe_0 (*con fromIn ... _182)*) of
      fromInt8UnsafeEnv_0 => L_1120
  block L_1120 (env_448: unit)
    call L_1121 (fromInt8Unsafe_2 (env_448, minInt'_0)) handle _ => L_5
  block L_1121 (minInt_1: real32)
    val x_1740: (real32, real32, lambdas_29) tuple =
      (minInt_1, maxInt_1, setRoundingMode_0)
    val x_1739: lambdas_145 = con xEnv_164 (x_1740)
    goto L_1110 (x_1739)
  block L_1110 (x_1741: lambdas_145)
    val x_1743: (lambdas_84, lambdas_83, word16) tuple = (<<_1, >>_1, maxInt'_1)
    val x_1742: (word32, word32) tuple = (precision_6, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1122
  block L_1122 (env_449: unit)
    call L_1123 (<_6 (env_449, x_1742)) handle _ => L_5
  block L_1123 (x_1744: bool)
    case x_1744 of
      true => L_1125 | false => L_1124
  block L_1124 ()
    call L_1126 (x_1745 (x_1743, x_881 (*0x0:w32*))) handle _ => L_5
  block L_1126 (maxInt'_6: word16)
    case fromInt16Unsafe_0 (*con fromIn ... _183)*) of
      fromInt16UnsafeEnv_0 => L_1127
  block L_1127 (env_450: unit)
    call L_1128 (fromInt16Unsafe_2 (env_450, maxInt'_6)) handle _ => L_5
  block L_1128 (maxInt_2: real32)
    case fromInt16Unsafe_0 (*con fromIn ... _183)*) of
      fromInt16UnsafeEnv_0 => L_1129
  block L_1129 (env_451: unit)
    call L_1130 (fromInt16Unsafe_2 (env_451, minInt'_1)) handle _ => L_5
  block L_1130 (minInt_2: real32)
    val x_1747:
      (real32, real32, lambdas_29, real32, word16, real32, word16) tuple =
      (minInt_2,
       maxInt_2,
       setRoundingMode_0,
       one_6,
       maxInt'_6,
       half_0,
       minInt'_1)
    val x_1746: lambdas_139 = con xEnv_156 (x_1747)
    goto L_1131 (x_1746)
  block L_1125 ()
    val x_1748: (word32, word32) tuple = (precision'_1, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1132
  block L_1132 (env_452: unit)
    call L_1133 (x_1442 (env_452, x_1748)) handle _ => L_5
  block L_1133 (x_1749: word32)
    val x_1750: (word32, word32) tuple = (x_1749, x_878 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1134
  block L_1134 (env_453: unit)
    call L_1135 (x_1442 (env_453, x_1750)) handle _ => L_5
  block L_1135 (trim_1: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1136
  block L_1136 (env_454: unit)
    call L_1137 (sextdFromInt32ToWord32_1 (env_454, trim_1)) handle _ => L_5
  block L_1137 (x_1751: word32)
    call L_1138 (x_1745 (x_1743, x_1751)) handle _ => L_5
  block L_1138 (maxInt'_7: word16)
    case fromInt16Unsafe_0 (*con fromIn ... _183)*) of
      fromInt16UnsafeEnv_0 => L_1139
  block L_1139 (env_455: unit)
    call L_1140 (fromInt16Unsafe_2 (env_455, maxInt'_7)) handle _ => L_5
  block L_1140 (maxInt_3: real32)
    case fromInt16Unsafe_0 (*con fromIn ... _183)*) of
      fromInt16UnsafeEnv_0 => L_1141
  block L_1141 (env_456: unit)
    call L_1142 (fromInt16Unsafe_2 (env_456, minInt'_1)) handle _ => L_5
  block L_1142 (minInt_3: real32)
    val x_1753: (real32, real32, lambdas_29) tuple =
      (minInt_3, maxInt_3, setRoundingMode_0)
    val x_1752: lambdas_139 = con xEnv_157 (x_1753)
    goto L_1131 (x_1752)
  block L_1131 (x_1754: lambdas_139)
    val x_1756: (lambdas_76, lambdas_75, word32) tuple = (<<_2, >>_2, maxInt'_2)
    val x_1755: (word32, word32) tuple = (precision_6, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1143
  block L_1143 (env_457: unit)
    call L_1144 (<_6 (env_457, x_1755)) handle _ => L_5
  block L_1144 (x_1757: bool)
    case x_1757 of
      true => L_1146 | false => L_1145
  block L_1145 ()
    call L_1147 (x_1758 (x_1756, x_887 (*0x0:w32*))) handle _ => L_5
  block L_1147 (maxInt'_8: word32)
    case fromInt32Unsafe_0 (*con fromIn ... _184)*) of
      fromInt32UnsafeEnv_0 => L_1148
  block L_1148 (env_458: unit)
    call L_1149 (fromInt32Unsafe_2 (env_458, maxInt'_8)) handle _ => L_5
  block L_1149 (maxInt_4: real32)
    case fromInt32Unsafe_0 (*con fromIn ... _184)*) of
      fromInt32UnsafeEnv_0 => L_1150
  block L_1150 (env_459: unit)
    call L_1151 (fromInt32Unsafe_2 (env_459, minInt'_2)) handle _ => L_5
  block L_1151 (minInt_4: real32)
    val x_1760:
      (real32, real32, lambdas_29, real32, word32, real32, word32) tuple =
      (minInt_4,
       maxInt_4,
       setRoundingMode_0,
       one_6,
       maxInt'_8,
       half_0,
       minInt'_2)
    val x_1759: lambdas_133 = con xEnv_149 (x_1760)
    goto L_1152 (x_1759)
  block L_1146 ()
    val x_1761: (word32, word32) tuple = (precision'_2, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1153
  block L_1153 (env_460: unit)
    call L_1154 (x_1442 (env_460, x_1761)) handle _ => L_5
  block L_1154 (x_1762: word32)
    val x_1763: (word32, word32) tuple = (x_1762, x_884 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1155
  block L_1155 (env_461: unit)
    call L_1156 (x_1442 (env_461, x_1763)) handle _ => L_5
  block L_1156 (trim_2: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1157
  block L_1157 (env_462: unit)
    call L_1158 (sextdFromInt32ToWord32_1 (env_462, trim_2)) handle _ => L_5
  block L_1158 (x_1764: word32)
    call L_1159 (x_1758 (x_1756, x_1764)) handle _ => L_5
  block L_1159 (maxInt'_9: word32)
    case fromInt32Unsafe_0 (*con fromIn ... _184)*) of
      fromInt32UnsafeEnv_0 => L_1160
  block L_1160 (env_463: unit)
    call L_1161 (fromInt32Unsafe_2 (env_463, maxInt'_9)) handle _ => L_5
  block L_1161 (maxInt_5: real32)
    case fromInt32Unsafe_0 (*con fromIn ... _184)*) of
      fromInt32UnsafeEnv_0 => L_1162
  block L_1162 (env_464: unit)
    call L_1163 (fromInt32Unsafe_2 (env_464, minInt'_2)) handle _ => L_5
  block L_1163 (minInt_5: real32)
    val x_1766: (real32, real32, lambdas_29) tuple =
      (minInt_5, maxInt_5, setRoundingMode_0)
    val x_1765: lambdas_133 = con xEnv_150 (x_1766)
    goto L_1152 (x_1765)
  block L_1152 (x_1767: lambdas_133)
    val x_1769: (lambdas_68, lambdas_67, word64) tuple = (<<_3, >>_3, maxInt'_3)
    val x_1768: (word32, word32) tuple = (precision_6, precision'_3)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1164
  block L_1164 (env_465: unit)
    call L_1165 (<_6 (env_465, x_1768)) handle _ => L_5
  block L_1165 (x_1770: bool)
    case x_1770 of
      true => L_1167 | false => L_1166
  block L_1166 ()
    call L_1168 (x_1771 (x_1769, x_893 (*0x0:w32*))) handle _ => L_5
  block L_1168 (maxInt'_10: word64)
    case fromInt64Unsafe_0 (*con fromIn ... _185)*) of
      fromInt64UnsafeEnv_0 => L_1169
  block L_1169 (env_466: unit)
    call L_1170 (fromInt64Unsafe_2 (env_466, maxInt'_10)) handle _ => L_5
  block L_1170 (maxInt_6: real32)
    case fromInt64Unsafe_0 (*con fromIn ... _185)*) of
      fromInt64UnsafeEnv_0 => L_1171
  block L_1171 (env_467: unit)
    call L_1172 (fromInt64Unsafe_2 (env_467, minInt'_3)) handle _ => L_5
  block L_1172 (minInt_6: real32)
    val x_1773:
      (real32, real32, lambdas_29, real32, word64, real32, word64) tuple =
      (minInt_6,
       maxInt_6,
       setRoundingMode_0,
       one_6,
       maxInt'_10,
       half_0,
       minInt'_3)
    val x_1772: lambdas_127 = con xEnv_142 (x_1773)
    goto L_1173 (x_1772)
  block L_1167 ()
    val x_1774: (word32, word32) tuple = (precision'_3, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1174
  block L_1174 (env_468: unit)
    call L_1175 (x_1442 (env_468, x_1774)) handle _ => L_5
  block L_1175 (x_1775: word32)
    val x_1776: (word32, word32) tuple = (x_1775, x_890 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1176
  block L_1176 (env_469: unit)
    call L_1177 (x_1442 (env_469, x_1776)) handle _ => L_5
  block L_1177 (trim_3: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1178
  block L_1178 (env_470: unit)
    call L_1179 (sextdFromInt32ToWord32_1 (env_470, trim_3)) handle _ => L_5
  block L_1179 (x_1777: word32)
    call L_1180 (x_1771 (x_1769, x_1777)) handle _ => L_5
  block L_1180 (maxInt'_11: word64)
    case fromInt64Unsafe_0 (*con fromIn ... _185)*) of
      fromInt64UnsafeEnv_0 => L_1181
  block L_1181 (env_471: unit)
    call L_1182 (fromInt64Unsafe_2 (env_471, maxInt'_11)) handle _ => L_5
  block L_1182 (maxInt_7: real32)
    case fromInt64Unsafe_0 (*con fromIn ... _185)*) of
      fromInt64UnsafeEnv_0 => L_1183
  block L_1183 (env_472: unit)
    call L_1184 (fromInt64Unsafe_2 (env_472, minInt'_3)) handle _ => L_5
  block L_1184 (minInt_7: real32)
    val x_1779: (real32, real32, lambdas_29) tuple =
      (minInt_7, maxInt_7, setRoundingMode_0)
    val x_1778: lambdas_127 = con xEnv_143 (x_1779)
    goto L_1173 (x_1778)
  block L_1173 (x_1780: lambdas_127)
    val x_1782: (lambdas_60, lambdas_59, word8) tuple = (<<_4, >>_4, maxWord'_0)
    val x_1781: (word32, word32) tuple = (precision_6, wordSize_0)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1185
  block L_1185 (env_473: unit)
    call L_1186 (<=_4 (env_473, x_1781)) handle _ => L_5
  block L_1186 (x_1783: bool)
    case x_1783 of
      true => L_1188 | false => L_1187
  block L_1187 ()
    call L_1189 (x_1784 (x_1782, x_898 (*0x0:w32*))) handle _ => L_5
  block L_1189 (maxWord'_4: word8)
    case fromWord8Unsafe_0 (*con fromWo ... _187)*) of
      fromWord8UnsafeEnv_0 => L_1190
  block L_1190 (env_474: unit)
    call L_1191 (fromWord8Unsafe_2 (env_474, maxWord'_4)) handle _ => L_5
  block L_1191 (maxWord_0: real32)
    val x_1786:
      (lambdas_99, real32, real32, lambdas_29, real32, word8, real32) tuple =
      (class_0, zero_6, maxWord_0, setRoundingMode_0, one_6, maxWord'_4, half_0)
    val x_1785: lambdas_121 = con xEnv_135 (x_1786)
    goto L_1192 (x_1785)
  block L_1188 ()
    val x_1787: (word32, word32) tuple = (wordSize_0, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1193
  block L_1193 (env_475: unit)
    call L_1194 (x_1442 (env_475, x_1787)) handle _ => L_5
  block L_1194 (trim_4: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1195
  block L_1195 (env_476: unit)
    call L_1196 (sextdFromInt32ToWord32_1 (env_476, trim_4)) handle _ => L_5
  block L_1196 (x_1788: word32)
    call L_1197 (x_1784 (x_1782, x_1788)) handle _ => L_5
  block L_1197 (maxWord'_5: word8)
    case fromWord8Unsafe_0 (*con fromWo ... _187)*) of
      fromWord8UnsafeEnv_0 => L_1198
  block L_1198 (env_477: unit)
    call L_1199 (fromWord8Unsafe_2 (env_477, maxWord'_5)) handle _ => L_5
  block L_1199 (maxWord_1: real32)
    val x_1790: (lambdas_99, real32, real32, lambdas_29, real32, real32) tuple =
      (class_0, zero_6, maxWord_1, setRoundingMode_0, one_6, half_0)
    val x_1789: lambdas_121 = con xEnv_136 (x_1790)
    goto L_1192 (x_1789)
  block L_1192 (x_1791: lambdas_121)
    val x_1793: (lambdas_52, lambdas_51, word16) tuple =
      (<<_5, >>_5, maxWord'_1)
    val x_1792: (word32, word32) tuple = (precision_6, wordSize_1)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1200
  block L_1200 (env_478: unit)
    call L_1201 (<=_4 (env_478, x_1792)) handle _ => L_5
  block L_1201 (x_1794: bool)
    case x_1794 of
      true => L_1203 | false => L_1202
  block L_1202 ()
    call L_1204 (x_1795 (x_1793, x_903 (*0x0:w32*))) handle _ => L_5
  block L_1204 (maxWord'_6: word16)
    case fromWord16Unsafe_0 (*con fromWo ... _188)*) of
      fromWord16UnsafeEnv_0 => L_1205
  block L_1205 (env_479: unit)
    call L_1206 (fromWord16Unsafe_2 (env_479, maxWord'_6)) handle _ => L_5
  block L_1206 (maxWord_2: real32)
    val x_1797:
      (lambdas_99, real32, real32, lambdas_29, real32, word16, real32) tuple =
      (class_0, zero_6, maxWord_2, setRoundingMode_0, one_6, maxWord'_6, half_0)
    val x_1796: lambdas_115 = con xEnv_128 (x_1797)
    goto L_1207 (x_1796)
  block L_1203 ()
    val x_1798: (word32, word32) tuple = (wordSize_1, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1208
  block L_1208 (env_480: unit)
    call L_1209 (x_1442 (env_480, x_1798)) handle _ => L_5
  block L_1209 (trim_5: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1210
  block L_1210 (env_481: unit)
    call L_1211 (sextdFromInt32ToWord32_1 (env_481, trim_5)) handle _ => L_5
  block L_1211 (x_1799: word32)
    call L_1212 (x_1795 (x_1793, x_1799)) handle _ => L_5
  block L_1212 (maxWord'_7: word16)
    case fromWord16Unsafe_0 (*con fromWo ... _188)*) of
      fromWord16UnsafeEnv_0 => L_1213
  block L_1213 (env_482: unit)
    call L_1214 (fromWord16Unsafe_2 (env_482, maxWord'_7)) handle _ => L_5
  block L_1214 (maxWord_3: real32)
    val x_1801: (lambdas_99, real32, real32, lambdas_29, real32, real32) tuple =
      (class_0, zero_6, maxWord_3, setRoundingMode_0, one_6, half_0)
    val x_1800: lambdas_115 = con xEnv_129 (x_1801)
    goto L_1207 (x_1800)
  block L_1207 (x_1802: lambdas_115)
    val x_1804: (lambdas_44, lambdas_43, word32) tuple =
      (<<_6, >>_6, maxWord'_2)
    val x_1803: (word32, word32) tuple = (precision_6, wordSize_2)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1215
  block L_1215 (env_483: unit)
    call L_1216 (<=_4 (env_483, x_1803)) handle _ => L_5
  block L_1216 (x_1805: bool)
    case x_1805 of
      true => L_1218 | false => L_1217
  block L_1217 ()
    call L_1219 (x_1806 (x_1804, x_908 (*0x0:w32*))) handle _ => L_5
  block L_1219 (maxWord'_8: word32)
    case fromWord32Unsafe_0 (*con fromWo ... _189)*) of
      fromWord32UnsafeEnv_0 => L_1220
  block L_1220 (env_484: unit)
    call L_1221 (fromWord32Unsafe_2 (env_484, maxWord'_8)) handle _ => L_5
  block L_1221 (maxWord_4: real32)
    val x_1808:
      (lambdas_99, real32, real32, lambdas_29, real32, word32, real32, word32) tuple =
      (class_0,
       zero_6,
       maxWord_4,
       setRoundingMode_0,
       one_6,
       maxWord'_8,
       half_0,
       zero_2)
    val x_1807: lambdas_109 = con xEnv_121 (x_1808)
    goto L_1222 (x_1807)
  block L_1218 ()
    val x_1809: (word32, word32) tuple = (wordSize_2, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1223
  block L_1223 (env_485: unit)
    call L_1224 (x_1442 (env_485, x_1809)) handle _ => L_5
  block L_1224 (trim_6: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1225
  block L_1225 (env_486: unit)
    call L_1226 (sextdFromInt32ToWord32_1 (env_486, trim_6)) handle _ => L_5
  block L_1226 (x_1810: word32)
    call L_1227 (x_1806 (x_1804, x_1810)) handle _ => L_5
  block L_1227 (maxWord'_9: word32)
    case fromWord32Unsafe_0 (*con fromWo ... _189)*) of
      fromWord32UnsafeEnv_0 => L_1228
  block L_1228 (env_487: unit)
    call L_1229 (fromWord32Unsafe_2 (env_487, maxWord'_9)) handle _ => L_5
  block L_1229 (maxWord_5: real32)
    val x_1812:
      (lambdas_99, real32, real32, lambdas_29, real32, word32, real32) tuple =
      (class_0, zero_6, maxWord_5, setRoundingMode_0, one_6, zero_2, half_0)
    val x_1811: lambdas_109 = con xEnv_122 (x_1812)
    goto L_1222 (x_1811)
  block L_1222 (x_1813: lambdas_109)
    val x_1815: (lambdas_36, lambdas_35, word64) tuple =
      (<<_7, >>_7, maxWord'_3)
    val x_1814: (word32, word32) tuple = (precision_6, wordSize_3)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1230
  block L_1230 (env_488: unit)
    call L_1231 (<=_4 (env_488, x_1814)) handle _ => L_5
  block L_1231 (x_1816: bool)
    case x_1816 of
      true => L_1233 | false => L_1232
  block L_1232 ()
    call L_1234 (x_1817 (x_1815, x_913 (*0x0:w32*))) handle _ => L_5
  block L_1234 (maxWord'_10: word64)
    case fromWord64Unsafe_0 (*con fromWo ... _190)*) of
      fromWord64UnsafeEnv_0 => L_1235
  block L_1235 (env_489: unit)
    call L_1236 (fromWord64Unsafe_2 (env_489, maxWord'_10)) handle _ => L_5
  block L_1236 (maxWord_6: real32)
    val x_1819:
      (lambdas_99, real32, real32, lambdas_29, real32, word64, real32, word64) tuple =
      (class_0,
       zero_6,
       maxWord_6,
       setRoundingMode_0,
       one_6,
       maxWord'_10,
       half_0,
       zero_4)
    val x_1818: lambdas_103 = con xEnv_114 (x_1819)
    goto L_1237 (x_1818)
  block L_1233 ()
    val x_1820: (word32, word32) tuple = (wordSize_3, precision_6)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1238
  block L_1238 (env_490: unit)
    call L_1239 (x_1442 (env_490, x_1820)) handle _ => L_5
  block L_1239 (trim_7: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1240
  block L_1240 (env_491: unit)
    call L_1241 (sextdFromInt32ToWord32_1 (env_491, trim_7)) handle _ => L_5
  block L_1241 (x_1821: word32)
    call L_1242 (x_1817 (x_1815, x_1821)) handle _ => L_5
  block L_1242 (maxWord'_11: word64)
    case fromWord64Unsafe_0 (*con fromWo ... _190)*) of
      fromWord64UnsafeEnv_0 => L_1243
  block L_1243 (env_492: unit)
    call L_1244 (fromWord64Unsafe_2 (env_492, maxWord'_11)) handle _ => L_5
  block L_1244 (maxWord_7: real32)
    val x_1823:
      (lambdas_99, real32, real32, lambdas_29, real32, word64, real32) tuple =
      (class_0, zero_6, maxWord_7, setRoundingMode_0, one_6, zero_4, half_0)
    val x_1822: lambdas_103 = con xEnv_115 (x_1823)
    goto L_1237 (x_1822)
  block L_1237 (x_1824: lambdas_103)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1245
  block L_1245 (env_493: unit)
    call L_1246 (sextdFromInt32ToInt32_1 (env_493, realSize_1 (*0x40:w32*))) handle _ => L_5
  block L_1246 (realSize_3: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1247
  block L_1247 (env_494: unit)
    call L_1248 (sextdFromInt32ToInt32_1 (env_494, exponentBias_1 (*0x3FF:w32*))) handle _ => L_5
  block L_1248 (exponentBias_3: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1249
  block L_1249 (env_495: unit)
    call L_1250 (sextdFromInt32ToInt32_1 (env_495, precision_5 (*0x35:w32*))) handle _ => L_5
  block L_1250 (precision_7: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1251
  block L_1251 (env_496: unit)
    call L_1252 (sextdFromInt32ToWord32_1 (env_496, realSize_3)) handle _ => L_5
  block L_1252 (x_1825: word32)
    val x_1826: (word32, word32) tuple = (x_1825, one_2)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1253
  block L_1253 (env_497: unit)
    call L_1254 (-_3 (env_497, x_1826)) handle _ => L_5
  block L_1254 (exponentSignificandBits_1: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1255
  block L_1255 (env_498: unit)
    call L_1256 (sextdFromInt32ToWord32_1 (env_498, precision_7)) handle _ => L_5
  block L_1256 (x_1827: word32)
    val x_1828: (word32, word32) tuple = (x_1827, one_2)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1257
  block L_1257 (env_499: unit)
    call L_1258 (-_3 (env_499, x_1828)) handle _ => L_5
  block L_1258 (significandBits_1: word32)
    val x_1829: (word32, word32) tuple =
      (exponentSignificandBits_1, significandBits_1)
    case -_0 (*con -Env_0 (x_123)*) of
      -Env_0 => L_1259
  block L_1259 (env_500: unit)
    call L_1260 (-_3 (env_500, x_1829)) handle _ => L_5
  block L_1260 (exponentBits_1: word32)
    val x_1830: (lambdas_36, word64) tuple = (<<_7, zero_4)
    call L_1261 (mkMask_1 (x_1830, one_2)) handle _ => L_5
  block L_1261 (x_1831: word64)
    val x_1832: (word64, word32) tuple = (x_1831, exponentSignificandBits_1)
    call L_1262 (<<_9 (tuple_62, x_1832)) handle _ => L_5
  block L_1262 (signMask_1: word64)
    call L_1263 (mkMask_1 (x_1830, exponentBits_1)) handle _ => L_5
  block L_1263 (x_1833: word64)
    val x_1834: (word64, word32) tuple = (x_1833, significandBits_1)
    call L_1264 (<<_9 (tuple_62, x_1834)) handle _ => L_5
  block L_1264 (exponentMask_1: word64)
    call L_1265 (mkMask_1 (x_1830, significandBits_1)) handle _ => L_5
  block L_1265 (significandMask_1: word64)
    val x_1835: (word64, word64, word64) tuple =
      (zero_4, significandMask_1, exponentMask_1)
    val class_1: lambdas_28 = con classEnv_0 (x_1835)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1266
  block L_1266 (env_501: unit)
    call L_1267 (x_1711 (env_501, x_1120)) handle _ => L_5
  block L_1267 (x_1836: bool)
    case x_1836 of
      true => L_1269 | false => L_1268
  block L_1268 ()
    val x_1838: lambdas_96 = con xEnv_108 (setRoundingMode_0)
    val x_1837: (lambdas_96, lambdas_242) tuple =
      (x_1838, toReal32Unsafe_1 (*con toReal ... _219)*))
    goto L_1270 (x_1837)
  block L_1269 ()
    val x_1840: lambdas_95 = #0 (x_1121)
    val x_1839: lambdas_242 = #1 (x_1121)
    case x_1840 of
      xEnv_43 => L_1271
  block L_1271 (x_1841: unit)
    val x_1843: lambdas_96 = con xEnv_109 (x_1841)
    val x_1842: (lambdas_96, lambdas_242) tuple = (x_1843, x_1839)
    goto L_1270 (x_1842)
  block L_1270 (x_1844: (lambdas_96, lambdas_242) tuple)
    case castFromWord_1 (*con castFr ... _225)*) of
      castFromWordEnv_1 => L_1272
  block L_1272 (env_502: unit)
    call L_1273 (castFromWord_3 (env_502, zero_4)) handle _ => L_5
  block L_1273 (zero_7: real64)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _110)*) of
      sextdFromInt32ToWord64Env_0 => L_1274
  block L_1274 (env_503: unit)
    call L_1275 (sextdFromInt32ToWord64_1 (env_503, exponentBias_3)) handle _ => L_5
  block L_1275 (x_1845: word64)
    val x_1847: word64 = prim Word64_sub (x_1845, one_4)
    val x_1846: (word64, word32) tuple = (x_1847, significandBits_1)
    call L_1276 (<<_9 (tuple_62, x_1846)) handle _ => L_5
  block L_1276 (x_1848: word64)
    case castFromWord_1 (*con castFr ... _225)*) of
      castFromWordEnv_1 => L_1277
  block L_1277 (env_504: unit)
    call L_1278 (castFromWord_3 (env_504, x_1848)) handle _ => L_5
  block L_1278 (half_1: real64)
    case sextdFromInt32ToWord64_0 (*con sextdF ... _110)*) of
      sextdFromInt32ToWord64Env_0 => L_1279
  block L_1279 (env_505: unit)
    call L_1280 (sextdFromInt32ToWord64_1 (env_505, exponentBias_3)) handle _ => L_5
  block L_1280 (x_1849: word64)
    val x_1850: (word64, word32) tuple = (x_1849, significandBits_1)
    call L_1281 (<<_9 (tuple_62, x_1850)) handle _ => L_5
  block L_1281 (x_1851: word64)
    case castFromWord_1 (*con castFr ... _225)*) of
      castFromWordEnv_1 => L_1282
  block L_1282 (env_506: unit)
    call L_1283 (castFromWord_3 (env_506, x_1851)) handle _ => L_5
  block L_1283 (one_7: real64)
    val x_1853: (lambdas_92, lambdas_91, word8) tuple = (<<_0, >>_0, maxInt'_0)
    val x_1852: (word32, word32) tuple = (precision_7, precision'_0)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1284
  block L_1284 (env_507: unit)
    call L_1285 (<_6 (env_507, x_1852)) handle _ => L_5
  block L_1285 (x_1854: bool)
    case x_1854 of
      true => L_1287 | false => L_1286
  block L_1286 ()
    call L_1288 (x_1855 (x_1853, x_927 (*0x0:w32*))) handle _ => L_5
  block L_1288 (maxInt'_12: word8)
    case fromInt8Unsafe_1 (*con fromIn ... _206)*) of
      fromInt8UnsafeEnv_1 => L_1289
  block L_1289 (env_508: unit)
    call L_1290 (fromInt8Unsafe_3 (env_508, maxInt'_12)) handle _ => L_5
  block L_1290 (maxInt_8: real64)
    case fromInt8Unsafe_1 (*con fromIn ... _206)*) of
      fromInt8UnsafeEnv_1 => L_1291
  block L_1291 (env_509: unit)
    call L_1292 (fromInt8Unsafe_3 (env_509, minInt'_0)) handle _ => L_5
  block L_1292 (minInt_8: real64)
    val x_1857:
      (real64, real64, lambdas_29, real64, word8, real64, word8) tuple =
      (minInt_8,
       maxInt_8,
       setRoundingMode_0,
       one_7,
       maxInt'_12,
       half_1,
       minInt'_0)
    val x_1856: lambdas_89 = con xEnv_103 (x_1857)
    goto L_1293 (x_1856)
  block L_1287 ()
    val x_1858: (word32, word32) tuple = (precision'_0, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1294
  block L_1294 (env_510: unit)
    call L_1295 (x_1442 (env_510, x_1858)) handle _ => L_5
  block L_1295 (x_1859: word32)
    val x_1860: (word32, word32) tuple = (x_1859, x_924 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1296
  block L_1296 (env_511: unit)
    call L_1297 (x_1442 (env_511, x_1860)) handle _ => L_5
  block L_1297 (trim_8: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1298
  block L_1298 (env_512: unit)
    call L_1299 (sextdFromInt32ToWord32_1 (env_512, trim_8)) handle _ => L_5
  block L_1299 (x_1861: word32)
    call L_1300 (x_1855 (x_1853, x_1861)) handle _ => L_5
  block L_1300 (maxInt'_13: word8)
    case fromInt8Unsafe_1 (*con fromIn ... _206)*) of
      fromInt8UnsafeEnv_1 => L_1301
  block L_1301 (env_513: unit)
    call L_1302 (fromInt8Unsafe_3 (env_513, maxInt'_13)) handle _ => L_5
  block L_1302 (maxInt_9: real64)
    case fromInt8Unsafe_1 (*con fromIn ... _206)*) of
      fromInt8UnsafeEnv_1 => L_1303
  block L_1303 (env_514: unit)
    call L_1304 (fromInt8Unsafe_3 (env_514, minInt'_0)) handle _ => L_5
  block L_1304 (minInt_9: real64)
    val x_1863: (real64, real64, lambdas_29) tuple =
      (minInt_9, maxInt_9, setRoundingMode_0)
    val x_1862: lambdas_89 = con xEnv_104 (x_1863)
    goto L_1293 (x_1862)
  block L_1293 (x_1864: lambdas_89)
    val x_1866: (lambdas_84, lambdas_83, word16) tuple = (<<_1, >>_1, maxInt'_1)
    val x_1865: (word32, word32) tuple = (precision_7, precision'_1)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1305
  block L_1305 (env_515: unit)
    call L_1306 (<_6 (env_515, x_1865)) handle _ => L_5
  block L_1306 (x_1867: bool)
    case x_1867 of
      true => L_1308 | false => L_1307
  block L_1307 ()
    call L_1309 (x_1868 (x_1866, x_933 (*0x0:w32*))) handle _ => L_5
  block L_1309 (maxInt'_14: word16)
    case fromInt16Unsafe_1 (*con fromIn ... _207)*) of
      fromInt16UnsafeEnv_1 => L_1310
  block L_1310 (env_516: unit)
    call L_1311 (fromInt16Unsafe_3 (env_516, maxInt'_14)) handle _ => L_5
  block L_1311 (maxInt_10: real64)
    case fromInt16Unsafe_1 (*con fromIn ... _207)*) of
      fromInt16UnsafeEnv_1 => L_1312
  block L_1312 (env_517: unit)
    call L_1313 (fromInt16Unsafe_3 (env_517, minInt'_1)) handle _ => L_5
  block L_1313 (minInt_10: real64)
    val x_1870:
      (real64, real64, lambdas_29, real64, word16, real64, word16) tuple =
      (minInt_10,
       maxInt_10,
       setRoundingMode_0,
       one_7,
       maxInt'_14,
       half_1,
       minInt'_1)
    val x_1869: lambdas_81 = con xEnv_96 (x_1870)
    goto L_1314 (x_1869)
  block L_1308 ()
    val x_1871: (word32, word32) tuple = (precision'_1, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1315
  block L_1315 (env_518: unit)
    call L_1316 (x_1442 (env_518, x_1871)) handle _ => L_5
  block L_1316 (x_1872: word32)
    val x_1873: (word32, word32) tuple = (x_1872, x_930 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1317
  block L_1317 (env_519: unit)
    call L_1318 (x_1442 (env_519, x_1873)) handle _ => L_5
  block L_1318 (trim_9: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1319
  block L_1319 (env_520: unit)
    call L_1320 (sextdFromInt32ToWord32_1 (env_520, trim_9)) handle _ => L_5
  block L_1320 (x_1874: word32)
    call L_1321 (x_1868 (x_1866, x_1874)) handle _ => L_5
  block L_1321 (maxInt'_15: word16)
    case fromInt16Unsafe_1 (*con fromIn ... _207)*) of
      fromInt16UnsafeEnv_1 => L_1322
  block L_1322 (env_521: unit)
    call L_1323 (fromInt16Unsafe_3 (env_521, maxInt'_15)) handle _ => L_5
  block L_1323 (maxInt_11: real64)
    case fromInt16Unsafe_1 (*con fromIn ... _207)*) of
      fromInt16UnsafeEnv_1 => L_1324
  block L_1324 (env_522: unit)
    call L_1325 (fromInt16Unsafe_3 (env_522, minInt'_1)) handle _ => L_5
  block L_1325 (minInt_11: real64)
    val x_1876: (real64, real64, lambdas_29) tuple =
      (minInt_11, maxInt_11, setRoundingMode_0)
    val x_1875: lambdas_81 = con xEnv_97 (x_1876)
    goto L_1314 (x_1875)
  block L_1314 (x_1877: lambdas_81)
    val x_1879: (lambdas_76, lambdas_75, word32) tuple = (<<_2, >>_2, maxInt'_2)
    val x_1878: (word32, word32) tuple = (precision_7, precision'_2)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1326
  block L_1326 (env_523: unit)
    call L_1327 (<_6 (env_523, x_1878)) handle _ => L_5
  block L_1327 (x_1880: bool)
    case x_1880 of
      true => L_1329 | false => L_1328
  block L_1328 ()
    call L_1330 (x_1881 (x_1879, x_939 (*0x0:w32*))) handle _ => L_5
  block L_1330 (maxInt'_16: word32)
    case fromInt32Unsafe_1 (*con fromIn ... _208)*) of
      fromInt32UnsafeEnv_1 => L_1331
  block L_1331 (env_524: unit)
    call L_1332 (fromInt32Unsafe_3 (env_524, maxInt'_16)) handle _ => L_5
  block L_1332 (maxInt_12: real64)
    case fromInt32Unsafe_1 (*con fromIn ... _208)*) of
      fromInt32UnsafeEnv_1 => L_1333
  block L_1333 (env_525: unit)
    call L_1334 (fromInt32Unsafe_3 (env_525, minInt'_2)) handle _ => L_5
  block L_1334 (minInt_12: real64)
    val x_1883:
      (real64, real64, lambdas_29, real64, word32, real64, word32) tuple =
      (minInt_12,
       maxInt_12,
       setRoundingMode_0,
       one_7,
       maxInt'_16,
       half_1,
       minInt'_2)
    val x_1882: lambdas_73 = con xEnv_89 (x_1883)
    goto L_1335 (x_1882)
  block L_1329 ()
    val x_1884: (word32, word32) tuple = (precision'_2, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1336
  block L_1336 (env_526: unit)
    call L_1337 (x_1442 (env_526, x_1884)) handle _ => L_5
  block L_1337 (x_1885: word32)
    val x_1886: (word32, word32) tuple = (x_1885, x_936 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1338
  block L_1338 (env_527: unit)
    call L_1339 (x_1442 (env_527, x_1886)) handle _ => L_5
  block L_1339 (trim_10: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1340
  block L_1340 (env_528: unit)
    call L_1341 (sextdFromInt32ToWord32_1 (env_528, trim_10)) handle _ => L_5
  block L_1341 (x_1887: word32)
    call L_1342 (x_1881 (x_1879, x_1887)) handle _ => L_5
  block L_1342 (maxInt'_17: word32)
    case fromInt32Unsafe_1 (*con fromIn ... _208)*) of
      fromInt32UnsafeEnv_1 => L_1343
  block L_1343 (env_529: unit)
    call L_1344 (fromInt32Unsafe_3 (env_529, maxInt'_17)) handle _ => L_5
  block L_1344 (maxInt_13: real64)
    case fromInt32Unsafe_1 (*con fromIn ... _208)*) of
      fromInt32UnsafeEnv_1 => L_1345
  block L_1345 (env_530: unit)
    call L_1346 (fromInt32Unsafe_3 (env_530, minInt'_2)) handle _ => L_5
  block L_1346 (minInt_13: real64)
    val x_1889: (real64, real64, lambdas_29) tuple =
      (minInt_13, maxInt_13, setRoundingMode_0)
    val x_1888: lambdas_73 = con xEnv_90 (x_1889)
    goto L_1335 (x_1888)
  block L_1335 (x_1890: lambdas_73)
    val x_1892: (lambdas_68, lambdas_67, word64) tuple = (<<_3, >>_3, maxInt'_3)
    val x_1891: (word32, word32) tuple = (precision_7, precision'_3)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1347
  block L_1347 (env_531: unit)
    call L_1348 (<_6 (env_531, x_1891)) handle _ => L_5
  block L_1348 (x_1893: bool)
    case x_1893 of
      true => L_1350 | false => L_1349
  block L_1349 ()
    call L_1351 (x_1894 (x_1892, x_945 (*0x0:w32*))) handle _ => L_5
  block L_1351 (maxInt'_18: word64)
    case fromInt64Unsafe_1 (*con fromIn ... _209)*) of
      fromInt64UnsafeEnv_1 => L_1352
  block L_1352 (env_532: unit)
    call L_1353 (fromInt64Unsafe_3 (env_532, maxInt'_18)) handle _ => L_5
  block L_1353 (maxInt_14: real64)
    case fromInt64Unsafe_1 (*con fromIn ... _209)*) of
      fromInt64UnsafeEnv_1 => L_1354
  block L_1354 (env_533: unit)
    call L_1355 (fromInt64Unsafe_3 (env_533, minInt'_3)) handle _ => L_5
  block L_1355 (minInt_14: real64)
    val x_1896:
      (real64, real64, lambdas_29, real64, word64, real64, word64) tuple =
      (minInt_14,
       maxInt_14,
       setRoundingMode_0,
       one_7,
       maxInt'_18,
       half_1,
       minInt'_3)
    val x_1895: lambdas_65 = con xEnv_82 (x_1896)
    goto L_1356 (x_1895)
  block L_1350 ()
    val x_1897: (word32, word32) tuple = (precision'_3, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1357
  block L_1357 (env_534: unit)
    call L_1358 (x_1442 (env_534, x_1897)) handle _ => L_5
  block L_1358 (x_1898: word32)
    val x_1899: (word32, word32) tuple = (x_1898, x_942 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1359
  block L_1359 (env_535: unit)
    call L_1360 (x_1442 (env_535, x_1899)) handle _ => L_5
  block L_1360 (trim_11: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1361
  block L_1361 (env_536: unit)
    call L_1362 (sextdFromInt32ToWord32_1 (env_536, trim_11)) handle _ => L_5
  block L_1362 (x_1900: word32)
    call L_1363 (x_1894 (x_1892, x_1900)) handle _ => L_5
  block L_1363 (maxInt'_19: word64)
    case fromInt64Unsafe_1 (*con fromIn ... _209)*) of
      fromInt64UnsafeEnv_1 => L_1364
  block L_1364 (env_537: unit)
    call L_1365 (fromInt64Unsafe_3 (env_537, maxInt'_19)) handle _ => L_5
  block L_1365 (maxInt_15: real64)
    case fromInt64Unsafe_1 (*con fromIn ... _209)*) of
      fromInt64UnsafeEnv_1 => L_1366
  block L_1366 (env_538: unit)
    call L_1367 (fromInt64Unsafe_3 (env_538, minInt'_3)) handle _ => L_5
  block L_1367 (minInt_15: real64)
    val x_1902: (real64, real64, lambdas_29) tuple =
      (minInt_15, maxInt_15, setRoundingMode_0)
    val x_1901: lambdas_65 = con xEnv_83 (x_1902)
    goto L_1356 (x_1901)
  block L_1356 (x_1903: lambdas_65)
    val x_1905: (lambdas_60, lambdas_59, word8) tuple = (<<_4, >>_4, maxWord'_0)
    val x_1904: (word32, word32) tuple = (precision_7, wordSize_0)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1368
  block L_1368 (env_539: unit)
    call L_1369 (<=_4 (env_539, x_1904)) handle _ => L_5
  block L_1369 (x_1906: bool)
    case x_1906 of
      true => L_1371 | false => L_1370
  block L_1370 ()
    call L_1372 (x_1907 (x_1905, x_950 (*0x0:w32*))) handle _ => L_5
  block L_1372 (maxWord'_12: word8)
    case fromWord8Unsafe_1 (*con fromWo ... _211)*) of
      fromWord8UnsafeEnv_1 => L_1373
  block L_1373 (env_540: unit)
    call L_1374 (fromWord8Unsafe_3 (env_540, maxWord'_12)) handle _ => L_5
  block L_1374 (maxWord_8: real64)
    val x_1909:
      (lambdas_28, real64, real64, lambdas_29, real64, word8, real64) tuple =
      (class_1, zero_7, maxWord_8, setRoundingMode_0, one_7, maxWord'_12, half_1)
    val x_1908: lambdas_57 = con xEnv_75 (x_1909)
    goto L_1375 (x_1908)
  block L_1371 ()
    val x_1910: (word32, word32) tuple = (wordSize_0, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1376
  block L_1376 (env_541: unit)
    call L_1377 (x_1442 (env_541, x_1910)) handle _ => L_5
  block L_1377 (trim_12: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1378
  block L_1378 (env_542: unit)
    call L_1379 (sextdFromInt32ToWord32_1 (env_542, trim_12)) handle _ => L_5
  block L_1379 (x_1911: word32)
    call L_1380 (x_1907 (x_1905, x_1911)) handle _ => L_5
  block L_1380 (maxWord'_13: word8)
    case fromWord8Unsafe_1 (*con fromWo ... _211)*) of
      fromWord8UnsafeEnv_1 => L_1381
  block L_1381 (env_543: unit)
    call L_1382 (fromWord8Unsafe_3 (env_543, maxWord'_13)) handle _ => L_5
  block L_1382 (maxWord_9: real64)
    val x_1913: (lambdas_28, real64, real64, lambdas_29, real64, real64) tuple =
      (class_1, zero_7, maxWord_9, setRoundingMode_0, one_7, half_1)
    val x_1912: lambdas_57 = con xEnv_76 (x_1913)
    goto L_1375 (x_1912)
  block L_1375 (x_1914: lambdas_57)
    val x_1916: (lambdas_52, lambdas_51, word16) tuple =
      (<<_5, >>_5, maxWord'_1)
    val x_1915: (word32, word32) tuple = (precision_7, wordSize_1)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1383
  block L_1383 (env_544: unit)
    call L_1384 (<=_4 (env_544, x_1915)) handle _ => L_5
  block L_1384 (x_1917: bool)
    case x_1917 of
      true => L_1386 | false => L_1385
  block L_1385 ()
    call L_1387 (x_1918 (x_1916, x_955 (*0x0:w32*))) handle _ => L_5
  block L_1387 (maxWord'_14: word16)
    case fromWord16Unsafe_1 (*con fromWo ... _212)*) of
      fromWord16UnsafeEnv_1 => L_1388
  block L_1388 (env_545: unit)
    call L_1389 (fromWord16Unsafe_3 (env_545, maxWord'_14)) handle _ => L_5
  block L_1389 (maxWord_10: real64)
    val x_1920:
      (lambdas_28, real64, real64, lambdas_29, real64, word16, real64) tuple =
      (class_1,
       zero_7,
       maxWord_10,
       setRoundingMode_0,
       one_7,
       maxWord'_14,
       half_1)
    val x_1919: lambdas_49 = con xEnv_68 (x_1920)
    goto L_1390 (x_1919)
  block L_1386 ()
    val x_1921: (word32, word32) tuple = (wordSize_1, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1391
  block L_1391 (env_546: unit)
    call L_1392 (x_1442 (env_546, x_1921)) handle _ => L_5
  block L_1392 (trim_13: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1393
  block L_1393 (env_547: unit)
    call L_1394 (sextdFromInt32ToWord32_1 (env_547, trim_13)) handle _ => L_5
  block L_1394 (x_1922: word32)
    call L_1395 (x_1918 (x_1916, x_1922)) handle _ => L_5
  block L_1395 (maxWord'_15: word16)
    case fromWord16Unsafe_1 (*con fromWo ... _212)*) of
      fromWord16UnsafeEnv_1 => L_1396
  block L_1396 (env_548: unit)
    call L_1397 (fromWord16Unsafe_3 (env_548, maxWord'_15)) handle _ => L_5
  block L_1397 (maxWord_11: real64)
    val x_1924: (lambdas_28, real64, real64, lambdas_29, real64, real64) tuple =
      (class_1, zero_7, maxWord_11, setRoundingMode_0, one_7, half_1)
    val x_1923: lambdas_49 = con xEnv_69 (x_1924)
    goto L_1390 (x_1923)
  block L_1390 (x_1925: lambdas_49)
    val x_1927: (lambdas_44, lambdas_43, word32) tuple =
      (<<_6, >>_6, maxWord'_2)
    val x_1926: (word32, word32) tuple = (precision_7, wordSize_2)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1398
  block L_1398 (env_549: unit)
    call L_1399 (<=_4 (env_549, x_1926)) handle _ => L_5
  block L_1399 (x_1928: bool)
    case x_1928 of
      true => L_1401 | false => L_1400
  block L_1400 ()
    call L_1402 (x_1929 (x_1927, x_960 (*0x0:w32*))) handle _ => L_5
  block L_1402 (maxWord'_16: word32)
    case fromWord32Unsafe_1 (*con fromWo ... _213)*) of
      fromWord32UnsafeEnv_1 => L_1403
  block L_1403 (env_550: unit)
    call L_1404 (fromWord32Unsafe_3 (env_550, maxWord'_16)) handle _ => L_5
  block L_1404 (maxWord_12: real64)
    val x_1931:
      (lambdas_28, real64, real64, lambdas_29, real64, word32, real64, word32) tuple =
      (class_1,
       zero_7,
       maxWord_12,
       setRoundingMode_0,
       one_7,
       maxWord'_16,
       half_1,
       zero_2)
    val x_1930: lambdas_41 = con xEnv_61 (x_1931)
    goto L_1405 (x_1930)
  block L_1401 ()
    val x_1932: (word32, word32) tuple = (wordSize_2, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1406
  block L_1406 (env_551: unit)
    call L_1407 (x_1442 (env_551, x_1932)) handle _ => L_5
  block L_1407 (trim_14: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1408
  block L_1408 (env_552: unit)
    call L_1409 (sextdFromInt32ToWord32_1 (env_552, trim_14)) handle _ => L_5
  block L_1409 (x_1933: word32)
    call L_1410 (x_1929 (x_1927, x_1933)) handle _ => L_5
  block L_1410 (maxWord'_17: word32)
    case fromWord32Unsafe_1 (*con fromWo ... _213)*) of
      fromWord32UnsafeEnv_1 => L_1411
  block L_1411 (env_553: unit)
    call L_1412 (fromWord32Unsafe_3 (env_553, maxWord'_17)) handle _ => L_5
  block L_1412 (maxWord_13: real64)
    val x_1935:
      (lambdas_28, real64, real64, lambdas_29, real64, word32, real64) tuple =
      (class_1, zero_7, maxWord_13, setRoundingMode_0, one_7, zero_2, half_1)
    val x_1934: lambdas_41 = con xEnv_62 (x_1935)
    goto L_1405 (x_1934)
  block L_1405 (x_1936: lambdas_41)
    val x_1938: (lambdas_36, lambdas_35, word64) tuple =
      (<<_7, >>_7, maxWord'_3)
    val x_1937: (word32, word32) tuple = (precision_7, wordSize_3)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1413
  block L_1413 (env_554: unit)
    call L_1414 (<=_4 (env_554, x_1937)) handle _ => L_5
  block L_1414 (x_1939: bool)
    case x_1939 of
      true => L_1416 | false => L_1415
  block L_1415 ()
    call L_1417 (x_1940 (x_1938, x_965 (*0x0:w32*))) handle _ => L_5
  block L_1417 (maxWord'_18: word64)
    case fromWord64Unsafe_1 (*con fromWo ... _214)*) of
      fromWord64UnsafeEnv_1 => L_1418
  block L_1418 (env_555: unit)
    call L_1419 (fromWord64Unsafe_3 (env_555, maxWord'_18)) handle _ => L_5
  block L_1419 (maxWord_14: real64)
    val x_1942:
      (lambdas_28, real64, real64, lambdas_29, real64, word64, real64, word64) tuple =
      (class_1,
       zero_7,
       maxWord_14,
       setRoundingMode_0,
       one_7,
       maxWord'_18,
       half_1,
       zero_4)
    val x_1941: lambdas_33 = con xEnv_54 (x_1942)
    goto L_1420 (x_1941)
  block L_1416 ()
    val x_1943: (word32, word32) tuple = (wordSize_3, precision_7)
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1421
  block L_1421 (env_556: unit)
    call L_1422 (x_1442 (env_556, x_1943)) handle _ => L_5
  block L_1422 (trim_15: word32)
    case sextdFromInt32ToWord32_0 (*con sextdF ... _109)*) of
      sextdFromInt32ToWord32Env_0 => L_1423
  block L_1423 (env_557: unit)
    call L_1424 (sextdFromInt32ToWord32_1 (env_557, trim_15)) handle _ => L_5
  block L_1424 (x_1944: word32)
    call L_1425 (x_1940 (x_1938, x_1944)) handle _ => L_5
  block L_1425 (maxWord'_19: word64)
    case fromWord64Unsafe_1 (*con fromWo ... _214)*) of
      fromWord64UnsafeEnv_1 => L_1426
  block L_1426 (env_558: unit)
    call L_1427 (fromWord64Unsafe_3 (env_558, maxWord'_19)) handle _ => L_5
  block L_1427 (maxWord_15: real64)
    val x_1946:
      (lambdas_28, real64, real64, lambdas_29, real64, word64, real64) tuple =
      (class_1, zero_7, maxWord_15, setRoundingMode_0, one_7, zero_4, half_1)
    val x_1945: lambdas_33 = con xEnv_55 (x_1946)
    goto L_1420 (x_1945)
  block L_1420 (x_1947: lambdas_33)
    val x_1948: (lambdas_16, lambdas_17) tuple = (concat_0, exnMessage_0)
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_1428
  block L_1428 (env_559: unit)
    call L_1429 (x_1454 (env_559, messagers_0)) handle _ => L_5
  block L_1429 (x_1949: list_0)
    val x_1952: lambdas_0 = con xEnv_193 (x_1948)
    val x_1951: (lambdas_0, list_0) tuple = (x_1952, x_1949)
    val x_1950: list_0 = con ::_3 (x_1951)
    val _: unit = prim Ref_assign[list_0] (messagers_0, x_1950)
    case x_979 (*con xEnv_45 (x_978)*) of
      xEnv_45 => L_1430
  block L_1430 (env_560: unit)
    call L_1431 (x_1953 (env_560, x_980 (*0x1:w32*))) handle _ => L_5
  block L_1431 (failure_0: word32)
    case x_979 (*con xEnv_45 (x_978)*) of
      xEnv_45 => L_1432
  block L_1432 (env_561: unit)
    call L_1433 (x_1953 (env_561, x_981 (*0x0:w32*))) handle _ => L_5
  block L_1433 (success_0: word32)
    val exiting_0: (bool) ref = prim Ref_ref[bool] (x_982 (*con false*))
    val tuple_67:
      ((bool) ref,
       (list_2) ref,
       (bool) ref,
       lambdas_381,
       (word8) array,
       word32,
       word32,
       word32,
       lambdas_20,
       word32,
       lambdas_16) tuple =
      (exiting_0,
       atExit_0,
       x_1290,
       x_1286,
       x_1289,
       zero_3,
       minInt'_2,
       one_3,
       quot_0,
       maxNumDigits_0,
       concat_0)
    val exit_0: lambdas_15 = con exitEnv_0 (tuple_67)
    val tuple_66: (lambdas_15, word32, word32) tuple =
      (exit_0, success_0, failure_0)
    val tuple_65: (lambdas_17, lambdas_16, lambdas_15, word32) tuple =
      (exnMessage_0, concat_0, exit_0, failure_0)
    val all_0: (list_4) ref = prim Ref_ref[list_4] (x_1034 (*con nil_6*))
    case make_0 (*con makeEn ... e_38)*) of
      makeEnv_0 => L_1434
  block L_1434 (env_562: unit)
    call L_1435 (make_1 (env_562, null_0)) handle _ => L_5
  block L_1435 (x_1954: t_9)
    val r_0: (t_9) ref = prim Ref_ref[t_9] (x_1954)
    val current_0: lambdas_10 = con currentEnv_0 (r_0)
    val tuple_68: (lambdas_10, (t_9) ref) tuple = (current_0, r_0)
    val init_0: lambdas_7 = con initEnv_0 (tuple_68)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1436
  block L_1436 (env_563: unit)
    call L_1437 (not_1 (env_563, isOn_0 (*con false*))) handle _ => L_5
  block L_1437 (x_1955: bool)
    case x_1955 of
      true => L_1439 | false => L_1438
  block L_1438 ()
    val x_1956:
      ((list_4) ref, lambdas_12, lambdas_11, (word8) vector, lambdas_10) tuple =
      (all_0, arrayAlloc_1, sequence_0, x_1453, current_0)
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_1440
  block L_1440 (env_564: unit)
    call L_1441 (x_1957 (env_564, atExit_0)) handle _ => L_5
  block L_1441 (x_1958: list_2)
    val x_1962: lambdas_3 = con xEnv_191 (x_1956)
    val x_1961: (lambdas_3, list_2) tuple = (x_1962, x_1958)
    val x_1960: list_2 = con ::_5 (x_1961)
    val _: unit = prim Ref_assign[list_2] (atExit_0, x_1960)
    val x_1959: (lambdas_7, (list_4) ref) tuple = (init_0, all_0)
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_1442
  block L_1442 (env_565: unit)
    call L_1443 (x_1957 (env_565, atLoadWorld_0)) handle _ => L_5
  block L_1443 (x_1963: list_2)
    val x_1966: lambdas_3 = con xEnv_190 (x_1959)
    val x_1965: (lambdas_3, list_2) tuple = (x_1966, x_1963)
    val x_1964: list_2 = con ::_5 (x_1965)
    val _: unit = prim Ref_assign[list_2] (atLoadWorld_0, x_1964)
    call L_1444 (init_1 (tuple_68, x_1068 (*()*))) handle _ => L_5
  block L_1439 ()
    goto L_1444 (x_1047 (*()*))
  block L_1444 (x_1967: unit)
    val x_1969: lambdas_380 = con defaultTopLevelHandlerEnv_1 (tuple_65)
    val _: unit = prim Ref_assign[lambdas_380] (x_1124, x_1969)
    val x_1968: lambdas_378 = con defaultTopLevelSuffixEnv_1 (tuple_66)
    val _: unit = prim Ref_assign[lambdas_378] (x_1127, x_1968)
    case even_0 (*con evenEn ... e_40)*) of
      evenEnv_0 => L_1445
  block L_1445 (env_566: unit)
    call L_1446 (even_1 (env_566, x_1083 (*con ::_2 (x_1082)*))) handle _ => L_5
  block L_1446 (x_1970: bool)
    val x_1971: lambdas_378 = prim Ref_deref[lambdas_378] (x_1127)
    case x_1971 of
      xEnv_186 => L_1449
    | xEnv_185 => L_1448
    | defaultTopLevelSuffixEnv_1 => L_1447
  block L_1447 (env_567: (lambdas_15, word32, word32) tuple)
    call L_1450 (defaultTopLevelSuffix_0 (env_567, x_1084 (*()*))) handle _ => L_5
  block L_1448 (env_568: unit)
    call L_1450 (x_1972 (env_568, x_1084 (*()*))) handle _ => L_5
  block L_1449 (env_569: unit)
    call L_1450 (x_1973 (env_569, x_1084 (*()*))) handle _ => L_5
  block L_729 ()
    goto L_5 (x_349 (*con Chr_0 (x_348)*))
  block L_309 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_302 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_289 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_280 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_271 ()
    goto L_5 (x_66 (*con Size_0 (x_65)*))
  block L_113 ()
    goto L_5 (x_284 (*con Fail8_0 (x_283)*))
  block L_83 ()
    goto L_5 (x_268 (*con Fail8_0 (x_267)*))
  block L_57 ()
    goto L_5 (x_254 (*con Fail8_0 (x_253)*))
  block L_31 ()
    goto L_5 (x_240 (*con Fail8_0 (x_239)*))
  block L_5 (x_1974: exn)
    val x_1975: lambdas_380 = prim Ref_deref[lambdas_380] (x_1124)
    case x_1975 of
      xEnv_188 => L_1453
    | xEnv_187 => L_1452
    | defaultTopLevelHandlerEnv_1 => L_1451
  block L_1451 (env_570: (lambdas_17, lambdas_16, lambdas_15, word32) tuple)
    call L_1450 (defaultTopLevelHandler_0 (env_570, x_1974)) handle _ => L_1454
  block L_1452 (env_571: unit)
    call L_1450 (x_1976 (env_571, x_1974)) handle _ => L_1454
  block L_1453 (env_572: unit)
    call L_1450 (x_1977 (env_572, x_1974)) handle _ => L_1454
  block L_1454 (x_1978: exn)
    val _: unit = prim MLton_bug (x_1085 (*"toplevel  ... lled"*))
    bug
  block L_1450 (x_1979: unit)
    return (x_1979)
fun odd_1 (env_573: unit, x_1980: list_5):
  {returns = Some (bool), raises = Some (exn)} =
L_1455 ()
  block L_1455 ()
    case x_1980 of
      nil_7 => L_1457 | ::_2 => L_1456
  block L_1456 (x_1981: (word32, list_5) tuple)
    val x_1982: list_5 = #1 (x_1981)
    case even_0 (*con evenEn ... e_40)*) of
      evenEnv_0 => L_1458
  block L_1458 (env_574: unit)
    call tail even_1 (env_574, x_1982)
  block L_1457 ()
    return (x_1070 (*con false*))
fun even_1 (env_575: unit, x_1983: list_5):
  {returns = Some (bool), raises = Some (exn)} =
L_1459 ()
  block L_1459 ()
    case x_1983 of
      nil_7 => L_1461 | ::_2 => L_1460
  block L_1460 (x_1984: (word32, list_5) tuple)
    val x_1985: list_5 = #1 (x_1984)
    case odd_0 (*con oddEnv ... e_40)*) of
      oddEnv_0 => L_1462
  block L_1462 (env_576: unit)
    call tail odd_1 (env_576, x_1985)
  block L_1461 ()
    return (x_1069 (*con true*))
fun x_1986 (env_577: (lambdas_7, (list_4) ref) tuple, x_1987: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1463 ()
  block L_1463 ()
    val init_2: lambdas_7 = #0 (env_577)
    val all_1: (list_4) ref = #1 (env_577)
    val _: unit = prim Ref_assign[list_4] (all_1, x_1066 (*con nil_6*))
    case init_2 of
      initEnv_0 => L_1464
  block L_1464 (env_578: (lambdas_10, (t_9) ref) tuple)
    call tail init_1 (env_578, x_1067 (*()*))
fun x_1988 (env_579:
              ((list_4) ref, lambdas_12, lambdas_11, (word8) vector, lambdas_10) tuple,
            x_1989: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1465 ()
  block L_1465 ()
    val all_2: (list_4) ref = #0 (env_579)
    val arrayAlloc_3: lambdas_12 = #1 (env_579)
    val sequence_1: lambdas_11 = #2 (env_579)
    val x_1990: (word8) vector = #3 (env_579)
    val current_1: lambdas_10 = #4 (env_579)
    case gcState_0 (*con gcStat ... _165)*) of
      gcStateEnv_0 => L_1466
  block L_1466 (env_580: unit)
    call L_1467 (gcState_1 (env_580, x_1048 (*()*))) handle _ => raise
  block L_1467 (x_1991: cpointer)
    val _: unit =
      prim CFunction {args = (cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileDone} (x_1991)
    case current_1 of
      currentEnv_0 => L_1468
  block L_1468 (env_581: (t_9) ref)
    call L_1469 (current_2 (env_581, x_1049 (*()*))) handle _ => raise
  block L_1469 (x_1992: t_9)
    case x_1992 of
      T_1 => L_1470
  block L_1470 (x_1993: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_1995: cpointer = #2 (x_1993)
    val x_1994: (bool) ref = #1 (x_1993)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1471
  block L_1471 (env_582: unit)
    call L_1472 (not_1 (env_582, isOn_0 (*con false*))) handle _ => raise
  block L_1472 (x_1996: bool)
    case x_1996 of
      true => L_1474 | false => L_1473
  block L_1473 ()
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1475
  block L_1475 (env_583: unit)
    call L_1476 (x_1997 (env_583, x_1994)) handle _ => raise
  block L_1476 (x_1998: bool)
    case x_1998 of
      true => L_1478 | false => L_1477
  block L_1477 ()
    case gcState_0 (*con gcStat ... _165)*) of
      gcStateEnv_0 => L_1479
  block L_1479 (env_584: unit)
    call L_1480 (gcState_1 (env_584, x_1055 (*()*))) handle _ => raise
  block L_1480 (x_1999: cpointer)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1481
  block L_1481 (env_585: unit)
    call L_1482 (full_2 (env_585, x_1050 (*"mlmon.out"*))) handle _ => raise
  block L_1482 (x_2000: t_17)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_1483
  block L_1483 (env_586: unit)
    call L_1484 (full_2 (env_586, x_1990)) handle _ => raise
  block L_1484 (x_2001: t_17)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_1485
  block L_1485 (env_587: unit)
    call L_1486 (length_1 (env_587, x_2000)) handle _ => raise
  block L_1486 (x_2002: word64)
    val x_2003: (word64, word64) tuple = (x_2002, x_1056 (*0x0:w64*))
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_1487
  block L_1487 (env_588: unit)
    call L_1488 (x_1234 (env_588, x_2003)) handle _ => raise
  block L_1488 (x_2004: bool)
    case x_2004 of
      true => L_1490 | false => L_1489
  block L_1489 ()
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_1491
  block L_1491 (env_589: unit)
    call L_1492 (length_1 (env_589, x_2001)) handle _ => raise
  block L_1492 (x_2005: word64)
    val x_2006: (word64, word64) tuple = (x_2005, x_1057 (*0x0:w64*))
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_1493
  block L_1493 (env_590: unit)
    call L_1494 (x_1234 (env_590, x_2006)) handle _ => raise
  block L_1494 (x_2007: bool)
    case x_2007 of
      true => L_1496 | false => L_1495
  block L_1495 ()
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_1497
  block L_1497 (env_591: unit)
    call L_1498 (base_1 (env_591, x_2000)) handle _ => raise
  block L_1498 (x_2008: ((word8) vector, word64, word64) tuple)
    val len1_0: word64 = #2 (x_2008)
    val start1_0: word64 = #1 (x_2008)
    val seq1_0: (word8) vector = #0 (x_2008)
    case base_0 (*con baseEn ... e_23)*) of
      baseEnv_0 => L_1499
  block L_1499 (env_592: unit)
    call L_1500 (base_1 (env_592, x_2001)) handle _ => raise
  block L_1500 (x_2009: ((word8) vector, word64, word64) tuple)
    val len2_0: word64 = #2 (x_2009)
    val start2_0: word64 = #1 (x_2009)
    val seq2_0: (word8) vector = #0 (x_2009)
    val x_2010: (word64, word64) tuple = (len1_0, len2_0)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_1501
  block L_1501 (env_593: unit)
    call L_1502 (+!_2 (env_593, x_2010)) handle _ => raise
  block L_1502 (n_1: word64)
    case arrayAlloc_3 of
      arrayAllocEnv_1 => L_1503
  block L_1503 (env_594: word64)
    call L_1504 (arrayAlloc_2 (env_594, n_1)) handle _ => raise
  block L_1504 (a_1: (word8) array)
    val x_2011: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_1, x_1058 (*0x0:w64*), seq1_0, start1_0, len1_0)
    case x_156 (*con xEnv_18 (x_155)*) of
      xEnv_18 => L_1505
  block L_1505 (env_595: unit)
    call L_1506 (x_2012 (env_595, x_2011)) handle _ => raise
  block L_1506 (x_2013: unit)
    val x_2014: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_1, len1_0, seq2_0, start2_0, len2_0)
    case x_156 (*con xEnv_18 (x_155)*) of
      xEnv_18 => L_1507
  block L_1507 (env_596: unit)
    call L_1508 (x_2012 (env_596, x_2014)) handle _ => raise
  block L_1508 (x_2015: unit)
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_1509
  block L_1509 (env_597: unit)
    call L_1510 (x_1452 (env_597, a_1)) handle _ => raise
  block L_1496 ()
    case sequence_1 of
      sequenceEnv_0 => L_1511
  block L_1511 (env_598: lambdas_12)
    call L_1510 (sequence_2 (env_598, x_2000)) handle _ => raise
  block L_1490 ()
    case sequence_1 of
      sequenceEnv_0 => L_1512
  block L_1512 (env_599: lambdas_12)
    call L_1510 (sequence_2 (env_599, x_2001)) handle _ => raise
  block L_1510 (x_2016: (word8) vector)
    case x_162 (*con xEnv_21 (x_161)*) of
      xEnv_21 => L_1513
  block L_1513 (env_600: unit)
    call L_1514 (x_2017 (env_600, x_2016)) handle _ => raise
  block L_1514 (x_2018: word64)
    val x_2019: (word64, word64) tuple = (x_2018, x_1060 (*0x1:w64*))
    case x_151 (*con xEnv_16 (x_150)*) of
      xEnv_16 => L_1515
  block L_1515 (env_601: unit)
    call L_1516 (x_2020 (env_601, x_2019)) handle _ => raise
  block L_1516 (x_2021: word64)
    val x_2022: ((word8) vector, word64) tuple = (x_2016, x_2021)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_1517
  block L_1517 (env_602: unit)
    call L_1518 (x_2023 (env_602, x_2022)) handle _ => raise
  block L_1518 (x_2024: word8)
    val x_2025: (word8, word8) tuple = (x_1059 (*0x0:w8*), x_2024)
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_1519
  block L_1519 (env_603: unit)
    call L_1520 (x_2026 (env_603, x_2025)) handle _ => raise
  block L_1520 (x_2027: bool)
    case x_2027 of
      true => L_1522 | false => L_1521
  block L_1521 ()
    raise (x_1063 (*con Fail8_0 (x_1062)*))
  block L_1522 ()
    val x_2028: unit =
      prim CFunction {args = (cpointer, cpointer, (word8) vector),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer, Objptr),
                                   res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileWrite} (x_1999, x_1995, x_2016)
    goto L_1523 (x_2028)
  block L_1478 ()
    raise (x_1054 (*con Fail_0 (x_1053)*))
  block L_1474 ()
    goto L_1523 (x_1051 (*()*))
  block L_1523 (x_2029: unit)
    val x_2031: list_4 = prim Ref_deref[list_4] (all_2)
    val x_2030: (list_4, unit) tuple = (x_2031, x_1064 (*()*))
    case loop_2 (*con loopEn ... e_39)*) of
      loopEnv_2 => L_1524
  block L_1524 (env_604: unit)
    call tail loop_12 (env_604, x_2030)
fun loop_12 (env_605: unit, x_2032: (list_4, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_1525 ()
  block L_1525 ()
    val b_6: unit = #1 (x_2032)
    val l_0: list_4 = #0 (x_2032)
    case l_0 of
      nil_6 => L_1527 | ::_7 => L_1526
  block L_1526 (x_2033: (t_9, list_4) tuple)
    val x_2035: list_4 = #1 (x_2033)
    val x_2034: t_9 = #0 (x_2033)
    case gcState_0 (*con gcStat ... _165)*) of
      gcStateEnv_0 => L_1528
  block L_1528 (env_606: unit)
    call L_1529 (gcState_1 (env_606, x_1065 (*()*))) handle _ => raise
  block L_1529 (x_2036: cpointer)
    case x_2034 of
      T_1 => L_1530
  block L_1530 (x_2037: ((bool) ref, (bool) ref, cpointer) tuple)
    val #_0: cpointer = #2 (x_2037)
    val x_2039: unit =
      prim CFunction {args = (cpointer, cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_profileFree} (x_2036, #_0)
    val x_2038: (list_4, unit) tuple = (x_2035, x_2039)
    case loop_2 (*con loopEn ... e_39)*) of
      loopEnv_2 => L_1531
  block L_1531 (env_607: unit)
    call tail loop_12 (env_607, x_2038)
  block L_1527 ()
    return (b_6)
fun init_1 (env_608: (lambdas_10, (t_9) ref) tuple, x_2040: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1532 ()
  block L_1532 ()
    val current_3: lambdas_10 = #0 (env_608)
    val r_1: (t_9) ref = #1 (env_608)
    case gcState_0 (*con gcStat ... _165)*) of
      gcStateEnv_0 => L_1533
  block L_1533 (env_609: unit)
    call L_1534 (gcState_1 (env_609, x_1037 (*()*))) handle _ => raise
  block L_1534 (x_2041: cpointer)
    val x_2042: cpointer =
      prim CFunction {args = (cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer), res = Some CPointer},
                      return = cpointer,
                      symbolScope = private,
                      target = GC_getProfileCurrent} (x_2041)
    case make_0 (*con makeEn ... e_38)*) of
      makeEnv_0 => L_1535
  block L_1535 (env_610: unit)
    call L_1536 (make_1 (env_610, x_2042)) handle _ => raise
  block L_1536 (x_2043: t_9)
    case x_2043 of
      T_1 => L_1537
  block L_1537 (x_2044: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2047: cpointer = #2 (x_2044)
    val x_2046: (bool) ref = #1 (x_2044)
    val x_2045: (bool) ref = #0 (x_2044)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_1538
  block L_1538 (env_611: unit)
    call L_1539 (not_1 (env_611, isOn_0 (*con false*))) handle _ => raise
  block L_1539 (x_2048: bool)
    case x_2048 of
      true => L_1541 | false => L_1540
  block L_1540 ()
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1542
  block L_1542 (env_612: unit)
    call L_1543 (x_1997 (env_612, x_2046)) handle _ => raise
  block L_1543 (x_2049: bool)
    case x_2049 of
      true => L_1545 | false => L_1544
  block L_1544 ()
    case current_3 of
      currentEnv_0 => L_1546
  block L_1546 (env_613: (t_9) ref)
    call L_1547 (current_2 (env_613, x_1042 (*()*))) handle _ => raise
  block L_1547 (x_2050: t_9)
    case x_2050 of
      T_1 => L_1548
  block L_1548 (x_2051: ((bool) ref, (bool) ref, cpointer) tuple)
    val x_2053: (bool) ref = #0 (x_2051)
    val x_2052: ((bool) ref, bool) tuple = (x_2053, x_1043 (*con false*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1549
  block L_1549 (env_614: unit)
    call L_1550 (x_2054 (env_614, x_2052)) handle _ => raise
  block L_1550 (x_2055: unit)
    val x_2056: ((bool) ref, bool) tuple = (x_2045, x_1044 (*con true*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1551
  block L_1551 (env_615: unit)
    call L_1552 (x_2054 (env_615, x_2056)) handle _ => raise
  block L_1552 (x_2057: unit)
    val _: unit = prim Ref_assign[t_9] (r_1, x_2043)
    case gcState_0 (*con gcStat ... _165)*) of
      gcStateEnv_0 => L_1553
  block L_1553 (env_616: unit)
    call L_1554 (gcState_1 (env_616, x_1045 (*()*))) handle _ => raise
  block L_1554 (x_2058: cpointer)
    val _: unit =
      prim CFunction {args = (cpointer, cpointer),
                      convention = cdecl,
                      inline = false,
                      kind = Runtime {bytesNeeded = None,
                                      ensuresBytesFree = None,
                                      mayGC = true,
                                      maySwitchThreadsFrom = false,
                                      maySwitchThreadsTo = false,
                                      modifiesFrontier = true,
                                      readsStackTop = true,
                                      writesStackTop = true},
                      prototype = {args = (CPointer, CPointer), res = None},
                      return = unit,
                      symbolScope = private,
                      target = GC_setProfileCurrent} (x_2058, x_2047)
    return (x_1046 (*()*))
  block L_1545 ()
    raise (x_1041 (*con Fail_0 (x_1040)*))
  block L_1541 ()
    return (x_1038 (*()*))
fun current_2 (env_617: (t_9) ref, x_2059: unit):
  {returns = Some (t_9), raises = Some (exn)} =
L_1555 ()
  block L_1555 ()
    val x_2060: t_9 = prim Ref_deref[t_9] (env_617)
    return (x_2060)
fun make_1 (env_618: unit, x_2061: cpointer):
  {returns = Some (t_9), raises = Some (exn)} =
L_1556 ()
  block L_1556 ()
    val x_2065: (bool) ref = prim Ref_ref[bool] (x_1035 (*con false*))
    val x_2064: (bool) ref = prim Ref_ref[bool] (x_1036 (*con false*))
    val x_2063: ((bool) ref, (bool) ref, cpointer) tuple =
      (x_2065, x_2064, x_2061)
    val x_2062: t_9 = con T_1 (x_2063)
    return (x_2062)
fun defaultTopLevelHandler_0 (env_619:
                                (lambdas_17, lambdas_16, lambdas_15, word32) tuple,
                              x_2066: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_1557 ()
  block L_1557 ()
    val exnMessage_1: lambdas_17 = #0 (env_619)
    val concat_1: lambdas_16 = #1 (env_619)
    val exit_1: lambdas_15 = #2 (env_619)
    val failure_1: word32 = #3 (env_619)
    case exnMessage_1 of
      exnMessageEnv_0 => L_1558
  block L_1558 (env_620: (list_0) ref)
    call L_1559 (exnMessage_2 (env_620, x_2066)) handle _ => L_1560
  block L_1559 (x_2067: (word8) vector)
    val x_2071: ((word8) vector, list_6) tuple =
      (x_2067, x_1027 (*con ::_1 (x_1026)*))
    val x_2070: list_6 = con ::_1 (x_2071)
    val x_2069: ((word8) vector, list_6) tuple =
      (x_1028 (*"unhandled ... on: "*), x_2070)
    val x_2068: list_6 = con ::_1 (x_2069)
    case concat_1 of
      concatEnv_0 => L_1561
  block L_1561 (env_621: (lambdas_12, lambdas_155, lambdas_11) tuple)
    call L_1562 (concat_2 (env_621, x_2068)) handle _ => L_1560
  block L_1562 (x_2072: (word8) vector)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_1563
  block L_1563 (env_622: unit)
    call L_1564 (print_1 (env_622, x_2072)) handle _ => L_1560
  block L_1564 (x_2073: unit)
    case exit_1 of
      exitEnv_0 => L_1565
  block L_1565 (env_623:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_381,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_20,
                   word32,
                   lambdas_16) tuple)
    call L_1566 (exit_2 (env_623, failure_1)) handle _ => L_1560
  block L_1566 (x_2074: unit)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_1567
  block L_1567 (env_624: unit)
    call L_1568 (print_1 (env_624, x_1029 (*"Top-level ... d.\n"*))) handle _ => L_1560
  block L_1568 (x_2075: unit)
    case exit_1 of
      exitEnv_0 => L_1569
  block L_1569 (env_625:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_381,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_20,
                   word32,
                   lambdas_16) tuple)
    call L_1570 (exit_2 (env_625, failure_1)) handle _ => L_1560
  block L_1560 (x_2076: exn)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_1571
  block L_1571 (env_626: unit)
    call L_1572 (print_1 (env_626, x_1030 (*"Top-level ... n.\n"*))) handle _ => raise
  block L_1572 (x_2077: unit)
    case halt_0 (*con haltEn ... e_36)*) of
      haltEnv_0 => L_1573
  block L_1573 (env_627: unit)
    call L_1574 (halt_1 (env_627, failure_1)) handle _ => raise
  block L_1574 (x_2078: unit)
    raise (x_1033 (*con Fail_0 (x_1032)*))
  block L_1570 (x_2079: unit)
    return (x_2079)
fun defaultTopLevelSuffix_0 (env_628: (lambdas_15, word32, word32) tuple,
                             x_2080: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1575 ()
  block L_1575 ()
    val exit_3: lambdas_15 = #0 (env_628)
    val success_1: word32 = #1 (env_628)
    val failure_2: word32 = #2 (env_628)
    case exit_3 of
      exitEnv_0 => L_1576
  block L_1576 (env_629:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_381,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_20,
                   word32,
                   lambdas_16) tuple)
    call L_1577 (exit_2 (env_629, success_1)) handle _ => L_1578
  block L_1577 (x_2081: unit)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_1579
  block L_1579 (env_630: unit)
    call L_1580 (print_1 (env_630, x_1019 (*"Top-level ... d.\n"*))) handle _ => L_1578
  block L_1580 (x_2082: unit)
    case exit_3 of
      exitEnv_0 => L_1581
  block L_1581 (env_631:
                  ((bool) ref,
                   (list_2) ref,
                   (bool) ref,
                   lambdas_381,
                   (word8) array,
                   word32,
                   word32,
                   word32,
                   lambdas_20,
                   word32,
                   lambdas_16) tuple)
    call L_1582 (exit_2 (env_631, failure_2)) handle _ => L_1578
  block L_1578 (x_2083: exn)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_1583
  block L_1583 (env_632: unit)
    call L_1584 (print_1 (env_632, x_1020 (*"Top-level ... n.\n"*))) handle _ => raise
  block L_1584 (x_2084: unit)
    case halt_0 (*con haltEn ... e_36)*) of
      haltEnv_0 => L_1585
  block L_1585 (env_633: unit)
    call L_1586 (halt_1 (env_633, failure_2)) handle _ => raise
  block L_1586 (x_2085: unit)
    raise (x_1023 (*con Fail_0 (x_1022)*))
  block L_1582 (x_2086: unit)
    return (x_2086)
fun exit_2 (env_634:
              ((bool) ref,
               (list_2) ref,
               (bool) ref,
               lambdas_381,
               (word8) array,
               word32,
               word32,
               word32,
               lambdas_20,
               word32,
               lambdas_16) tuple,
            x_2087: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1587 ()
  block L_1587 ()
    val exiting_1: (bool) ref = #0 (env_634)
    val atExit_1: (list_2) ref = #1 (env_634)
    val x_2090: (bool) ref = #2 (env_634)
    val x_2089: lambdas_381 = #3 (env_634)
    val x_2088: (word8) array = #4 (env_634)
    val zero_8: word32 = #5 (env_634)
    val minInt'_4: word32 = #6 (env_634)
    val one_8: word32 = #7 (env_634)
    val quot_2: lambdas_20 = #8 (env_634)
    val maxNumDigits_2: word32 = #9 (env_634)
    val concat_3: lambdas_16 = #10 (env_634)
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1588
  block L_1588 (env_635: unit)
    call L_1589 (x_1997 (env_635, exiting_1)) handle _ => raise
  block L_1589 (x_2091: bool)
    case x_2091 of
      true => L_1591 | false => L_1590
  block L_1590 ()
    val x_2092: ((bool) ref, bool) tuple = (exiting_1, x_987 (*con true*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1592
  block L_1592 (env_636: unit)
    call L_1593 (x_2054 (env_636, x_2092)) handle _ => raise
  block L_1593 (x_2093: unit)
    case toRep_0 (*con toRepE ... _742)*) of
      toRepEnv_0 => L_1594
  block L_1594 (env_637: unit)
    call L_1595 (toRep_1 (env_637, x_2087)) handle _ => raise
  block L_1595 (x_2094: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1596
  block L_1596 (env_638: unit)
    call L_1597 (sextdFromInt32ToInt32_1 (env_638, x_2094)) handle _ => raise
  block L_1597 (x_2095: word32)
    val x_2096: (word32, word32) tuple = (x_988 (*0x0:w32*), x_2095)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_1598
  block L_1598 (env_639: unit)
    call L_1599 (<=_4 (env_639, x_2096)) handle _ => raise
  block L_1599 (x_2097: bool)
    case x_2097 of
      true => L_1601 | false => L_1600
  block L_1600 ()
    goto L_1602 (x_990 (*con false*))
  block L_1601 ()
    val x_2098: (word32, word32) tuple = (x_2095, x_989 (*0x100:w32*))
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1603
  block L_1603 (env_640: unit)
    call L_1602 (<_6 (env_640, x_2098)) handle _ => raise
  block L_1602 (x_2099: bool)
    case x_2099 of
      true => L_1605 | false => L_1604
  block L_1604 ()
    val _: unit = prim Thread_atomicBegin ()
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_1606
  block L_1606 (env_641: unit)
    call L_1607 (x_1997 (env_641, x_2090)) handle _ => raise
  block L_1607 (b_7: bool)
    case b_7 of
      true => L_1609 | false => L_1608
  block L_1608 ()
    val x_2100: ((bool) ref, bool) tuple = (x_2090, x_1006 (*con true*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1610
  block L_1610 (env_642: unit)
    call L_1611 (x_2054 (env_642, x_2100)) handle _ => raise
  block L_1611 (x_2101: unit)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_1612
  block L_1612 (env_643: unit)
    call L_1613 (atomicEnd_1 (env_643, x_1007 (*()*))) handle _ => raise
  block L_1613 (x_2102: unit)
    goto L_1614 (x_2088)
  block L_1609 ()
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_1615
  block L_1615 (env_644: unit)
    call L_1616 (atomicEnd_1 (env_644, x_1004 (*()*))) handle _ => raise
  block L_1616 (x_2103: unit)
    case x_2089 of
      xEnv_189 => L_1617
  block L_1617 (env_645: (lambdas_204, word32) tuple)
    call L_1614 (x_1288 (env_645, x_1005 (*()*))) handle _ => raise
  block L_1614 (x_2104: (word8) array)
    val x_2105: ((bool) ref, bool) tuple = (x_2090, b_7)
    case radixToInt_0 (*con radixT ... _388)*) of
      radixToIntEnv_0 => L_1618
  block L_1618 (env_646: unit)
    call L_1619 (radixToInt_1 (env_646, x_449 (*con DEC_1*))) handle _ => L_1620
  block L_1619 (x_2106: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1621
  block L_1621 (env_647: unit)
    call L_1622 (sextdFromInt32ToInt32_1 (env_647, x_2106)) handle _ => L_1620
  block L_1622 (radix_1: word32)
    val tuple_69:
      (word32, word32, word32, word32, (word8) array, lambdas_20, word32) tuple =
      (radix_1, zero_8, minInt'_4, one_8, x_2104, quot_2, x_2095)
    val x_2107: (word32, word32) tuple = (x_2095, zero_8)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1623
  block L_1623 (env_648: unit)
    call L_1624 (<_6 (env_648, x_2107)) handle _ => L_1620
  block L_1624 (x_2108: bool)
    case x_2108 of
      true => L_1626 | false => L_1625
  block L_1625 ()
    case ~!_0 (*con ~!Env_0 (x_135)*) of
      ~!Env_0 => L_1627
  block L_1627 (env_649: unit)
    call L_1628 (~!_2 (env_649, x_2095)) handle _ => L_1620
  block L_1626 ()
    goto L_1628 (x_2095)
  block L_1628 (x_2109: word32)
    val x_2110: (word32, word32) tuple = (maxNumDigits_2, x_1015 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1629
  block L_1629 (env_650: unit)
    call L_1630 (x_1442 (env_650, x_2110)) handle _ => L_1620
  block L_1630 (x_2111: word32)
    val x_2112: (word32, word32) tuple = (x_2109, x_2111)
    call L_1631 (loop_13 (tuple_69, x_2112)) handle _ => L_1620
  block L_1620 (x_2113: exn)
    call L_1632 (x_2114 (x_2105, x_1017 (*()*))) handle _ => raise
  block L_1632 (x_2115: unit)
    raise (x_2113)
  block L_1631 (x_2116: (word8) vector)
    goto L_1633 (x_2116)
  block L_1633 (x_2117: (word8) vector)
    call L_1634 (x_2114 (x_2105, x_1016 (*()*))) handle _ => raise
  block L_1634 (x_2118: unit)
    val x_2122: ((word8) vector, list_6) tuple =
      (x_2117, x_1003 (*con ::_1 (x_1002)*))
    val x_2121: list_6 = con ::_1 (x_2122)
    val x_2120: ((word8) vector, list_6) tuple =
      (x_1018 (*"MLton.Exit.exit("*), x_2121)
    val x_2119: list_6 = con ::_1 (x_2120)
    case concat_3 of
      concatEnv_0 => L_1635
  block L_1635 (env_651: (lambdas_12, lambdas_155, lambdas_11) tuple)
    call L_1636 (concat_2 (env_651, x_2119)) handle _ => raise
  block L_1636 (x_2123: (word8) vector)
    val x_2125: ((unit) ref, (word8) vector) tuple = (x_1096, x_2123)
    val x_2124: exn = con Fail_0 (x_2125)
    raise (x_2124)
  block L_1605 ()
    case x_75 (*con xEnv_4 (x_74)*) of
      xEnv_4 => L_1637
  block L_1637 (env_652: unit)
    call L_1638 (x_1957 (env_652, atExit_1)) handle _ => raise
  block L_1638 (x_2126: list_2)
    val x_2127: (list_2, unit) tuple = (x_2126, x_991 (*()*))
    case loop_1 (*con loopEn ... e_37)*) of
      loopEnv_1 => L_1639
  block L_1639 (env_653: unit)
    call L_1640 (loop_14 (env_653, x_2127)) handle _ => raise
  block L_1640 (x_2128: unit)
    case halt_0 (*con haltEn ... e_36)*) of
      haltEnv_0 => L_1641
  block L_1641 (env_654: unit)
    call L_1642 (halt_1 (env_654, x_2087)) handle _ => raise
  block L_1642 (x_2129: unit)
    raise (x_996 (*con Fail_0 (x_995)*))
  block L_1591 ()
    raise (x_986 (*con Fail_0 (x_985)*))
fun loop_13 (env_655:
               (word32,
                word32,
                word32,
                word32,
                (word8) array,
                lambdas_20,
                word32) tuple,
             x_2130: (word32, word32) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_1643 ()
  block L_1643 ()
    val radix_2: word32 = #0 (env_655)
    val zero_9: word32 = #1 (env_655)
    val minInt'_5: word32 = #2 (env_655)
    val one_9: word32 = #3 (env_655)
    val x_2133: (word8) array = #4 (env_655)
    val quot_3: lambdas_20 = #5 (env_655)
    val x_2132: word32 = #6 (env_655)
    val i_0: word32 = #1 (x_2130)
    val q_0: word32 = #0 (x_2130)
    val x_2131: (word32, word32) tuple = (radix_2, zero_9)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1644
  block L_1644 (env_656: unit)
    call L_1645 (x_1711 (env_656, x_2131)) handle _ => raise
  block L_1645 (x_2134: bool)
    case x_2134 of
      true => L_1647 | false => L_1646
  block L_1646 ()
    val x_2135: (word32, word32) tuple = (q_0, minInt'_5)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1648
  block L_1648 (env_657: unit)
    call L_1649 (x_1711 (env_657, x_2135)) handle _ => raise
  block L_1649 (x_2136: bool)
    case x_2136 of
      true => L_1651 | false => L_1650
  block L_1650 ()
    goto L_1652 (x_1010 (*con false*))
  block L_1651 ()
    case x_137 (*con xEnv_12 (x_136)*) of
      xEnv_12 => L_1653
  block L_1653 (env_658: unit)
    call L_1654 (x_2137 (env_658, one_9)) handle _ => raise
  block L_1654 (x_2138: word32)
    val x_2139: (word32, word32) tuple = (radix_2, x_2138)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1655
  block L_1655 (env_659: unit)
    call L_1652 (x_1711 (env_659, x_2139)) handle _ => raise
  block L_1652 (x_2140: bool)
    case x_2140 of
      true => L_1657 | false => L_1656
  block L_1656 ()
    val x_2141: (word32, word32) tuple = (q_0, radix_2)
    case remUnsafe_0 (*con remUns ... _141)*) of
      remUnsafeEnv_0 => L_1658
  block L_1658 (env_660: unit)
    call L_1659 (remUnsafe_1 (env_660, x_2141)) handle _ => raise
  block L_1657 ()
    goto L_1659 (zero_9)
  block L_1659 (x_2142: word32)
    case ~!_0 (*con ~!Env_0 (x_135)*) of
      ~!Env_0 => L_1660
  block L_1660 (env_661: unit)
    call L_1661 (~!_2 (env_661, x_2142)) handle _ => raise
  block L_1661 (x_2143: word32)
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1662
  block L_1662 (env_662: unit)
    call L_1663 (sextdFromInt32ToInt32_1 (env_662, x_2143)) handle _ => raise
  block L_1663 (x_2144: word32)
    case digitToChar_0 (*con digitT ... e_31)*) of
      digitToCharEnv_0 => L_1664
  block L_1664 (env_663: unit)
    call L_1665 (digitToChar_1 (env_663, x_2144)) handle _ => raise
  block L_1665 (x_2145: word8)
    val x_2146: ((word8) array, word32, word8) tuple = (x_2133, i_0, x_2145)
    case update_0 (*con update ... e_29)*) of
      updateEnv_0 => L_1666
  block L_1666 (env_664: unit)
    call L_1667 (update_1 (env_664, x_2146)) handle _ => raise
  block L_1667 (x_2147: unit)
    val x_2148: (word32, word32) tuple = (q_0, radix_2)
    case quot_3 of
      quotEnv_0 => L_1668
  block L_1668 (env_665: (word32, word32, word32) tuple)
    call L_1669 (quot_1 (env_665, x_2148)) handle _ => raise
  block L_1669 (q_1: word32)
    val x_2149: (word32, word32) tuple = (q_1, zero_9)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_1670
  block L_1670 (env_666: unit)
    call L_1671 (x_1711 (env_666, x_2149)) handle _ => raise
  block L_1671 (x_2150: bool)
    case x_2150 of
      true => L_1673 | false => L_1672
  block L_1672 ()
    val x_2151: (word32, word32) tuple = (i_0, x_1014 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1674
  block L_1674 (env_667: unit)
    call L_1675 (x_1442 (env_667, x_2151)) handle _ => raise
  block L_1675 (x_2152: word32)
    val x_2153: (word32, word32) tuple = (q_1, x_2152)
    call tail loop_13 (env_655, x_2153)
  block L_1673 ()
    val x_2154: (word32, word32) tuple = (x_2132, zero_9)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_1676
  block L_1676 (env_668: unit)
    call L_1677 (<_6 (env_668, x_2154)) handle _ => raise
  block L_1677 (x_2155: bool)
    case x_2155 of
      true => L_1679 | false => L_1678
  block L_1678 ()
    goto L_1680 (i_0)
  block L_1679 ()
    val x_2156: (word32, word32) tuple = (i_0, x_1011 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_1681
  block L_1681 (env_669: unit)
    call L_1682 (x_1442 (env_669, x_2156)) handle _ => raise
  block L_1682 (i_1: word32)
    val x_2157: ((word8) array, word32, word8) tuple =
      (x_2133, i_1, x_1012 (*0x7E:w8*))
    case update_0 (*con update ... e_29)*) of
      updateEnv_0 => L_1683
  block L_1683 (env_670: unit)
    call L_1684 (update_1 (env_670, x_2157)) handle _ => raise
  block L_1684 (x_2158: unit)
    goto L_1680 (i_1)
  block L_1680 (x_2159: word32)
    val x_2160: ((word8) array, word32, t_0) tuple =
      (x_2133, x_2159, x_1013 (*con NONE_1*))
    case slice_0 (*con sliceE ... e_28)*) of
      sliceEnv_0 => L_1685
  block L_1685 (env_671: unit)
    call L_1686 (slice_1 (env_671, x_2160)) handle _ => raise
  block L_1686 (x_2161: t_10)
    case vector_0 (*con vector ... e_19)*) of
      vectorEnv_0 => L_1687
  block L_1687 (env_672: unit)
    call tail vector_1 (env_672, x_2161)
  block L_1647 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_2114 (env_673: ((bool) ref, bool) tuple, x_2162: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_1688 ()
  block L_1688 ()
    val x_2163: (bool) ref = #0 (env_673)
    val b_8: bool = #1 (env_673)
    case b_8 of
      true => L_1690 | false => L_1689
  block L_1689 ()
    val x_2164: ((bool) ref, bool) tuple = (x_2163, x_1009 (*con false*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_1691
  block L_1691 (env_674: unit)
    call tail x_2054 (env_674, x_2164)
  block L_1690 ()
    return (x_1008 (*()*))
fun loop_14 (env_675: unit, x_2165: (list_2, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_1692 ()
  block L_1692 ()
    val b_9: unit = #1 (x_2165)
    val l_1: list_2 = #0 (x_2165)
    case l_1 of
      nil_4 => L_1694 | ::_5 => L_1693
  block L_1693 (x_2166: (lambdas_3, list_2) tuple)
    val x_2168: list_2 = #1 (x_2166)
    val x_2167: lambdas_3 = #0 (x_2166)
    case x_2167 of
      xEnv_191 => L_1696 | xEnv_190 => L_1695
  block L_1695 (env_676: (lambdas_7, (list_4) ref) tuple)
    call L_1697 (x_1986 (env_676, x_992 (*()*))) handle _ => L_1698
  block L_1696 (env_677:
                  ((list_4) ref,
                   lambdas_12,
                   lambdas_11,
                   (word8) vector,
                   lambdas_10) tuple)
    call L_1697 (x_1988 (env_677, x_992 (*()*))) handle _ => L_1698
  block L_1698 (x_2169: exn)
    goto L_1697 (x_993 (*()*))
  block L_1697 (x_2170: unit)
    val x_2171: (list_2, unit) tuple = (x_2168, x_2170)
    case loop_1 (*con loopEn ... e_37)*) of
      loopEnv_1 => L_1699
  block L_1699 (env_678: unit)
    call tail loop_14 (env_678, x_2171)
  block L_1694 ()
    return (b_9)
fun halt_1 (env_679: unit, x_2172: word32):
  {returns = Some (unit), raises = Some (exn)} =
L_1700 ()
  block L_1700 ()
    case toRep_0 (*con toRepE ... _742)*) of
      toRepEnv_0 => L_1701
  block L_1701 (env_680: unit)
    call L_1702 (toRep_1 (env_680, x_2172)) handle _ => raise
  block L_1702 (x_2173: word32)
    val _: unit = prim MLton_halt (x_2173)
    case bug_0 (*con bugEnv_0 (x_166)*) of
      bugEnv_0 => L_1703
  block L_1703 (env_681: unit)
    call tail bug_1 (env_681, x_983 (*"MLton.Exit.halt"*))
fun x_1953 (env_682: unit, x_2174: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_1704 ()
  block L_1704 ()
    case sextdFromInt32ToInt32_0 (*con sextdF ... _107)*) of
      sextdFromInt32ToInt32Env_0 => L_1705
  block L_1705 (env_683: unit)
    call tail sextdFromInt32ToInt32_1 (env_683, x_2174)
fun x_2175 (env_684: (lambdas_16, lambdas_17) tuple, x_2176: exn):
  {returns = Some (t_1), raises = Some (exn)} =
L_1706 ()
  block L_1706 ()
    val concat_4: lambdas_16 = #0 (env_684)
    val exnMessage_3: lambdas_17 = #1 (env_684)
    case x_2176 of
      Io_0 => L_1707 | _ => L_1708
  block L_1708 ()
    case x_971 (*con xEnv_44 (x_970)*) of
      xEnv_44 => L_1709
  block L_1709 (env_685: unit)
    call tail x_2177 (env_685, x_972 (*()*))
  block L_1707 (x_2178:
                  ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
    val x_2181: (exn, (word8) vector, (word8) vector) tuple = #1 (x_2178)
    val x_2180: (unit) ref = #0 (x_2178)
    val x_2179: bool = prim MLton_equal[(unit) ref] (x_2180, x_1122)
    case x_2179 of
      true => L_1711 | false => L_1710
  block L_1710 ()
    case x_971 (*con xEnv_44 (x_970)*) of
      xEnv_44 => L_1712
  block L_1712 (env_686: unit)
    call tail x_2177 (env_686, x_977 (*()*))
  block L_1711 ()
    val x_2184: (word8) vector = #2 (x_2181)
    val x_2183: (word8) vector = #1 (x_2181)
    val x_2182: exn = #0 (x_2181)
    case exnMessage_3 of
      exnMessageEnv_0 => L_1713
  block L_1713 (env_687: (list_0) ref)
    call L_1714 (exnMessage_2 (env_687, x_2182)) handle _ => raise
  block L_1714 (x_2185: (word8) vector)
    val x_2197: ((word8) vector, list_6) tuple = (x_2185, x_973 (*con nil_3*))
    val x_2196: list_6 = con ::_1 (x_2197)
    val x_2195: ((word8) vector, list_6) tuple =
      (x_974 (*"\" failed with "*), x_2196)
    val x_2194: list_6 = con ::_1 (x_2195)
    val x_2193: ((word8) vector, list_6) tuple = (x_2184, x_2194)
    val x_2192: list_6 = con ::_1 (x_2193)
    val x_2191: ((word8) vector, list_6) tuple = (x_975 (*" \""*), x_2192)
    val x_2190: list_6 = con ::_1 (x_2191)
    val x_2189: ((word8) vector, list_6) tuple = (x_2183, x_2190)
    val x_2188: list_6 = con ::_1 (x_2189)
    val x_2187: ((word8) vector, list_6) tuple = (x_976 (*"Io: "*), x_2188)
    val x_2186: list_6 = con ::_1 (x_2187)
    case concat_4 of
      concatEnv_0 => L_1715
  block L_1715 (env_688: (lambdas_12, lambdas_155, lambdas_11) tuple)
    call L_1716 (concat_2 (env_688, x_2186)) handle _ => raise
  block L_1716 (x_2198: (word8) vector)
    val x_2199: t_1 = con SOME_1 (x_2198)
    return (x_2199)
fun x_2177 (env_689: unit, unit_0: unit):
  {returns = Some (t_1), raises = Some (exn)} =
L_1717 ()
  block L_1717 ()
    return (x_969 (*con NONE_3*))
fun x_2200 (env_690:
              (lambdas_28,
               real64,
               real64,
               lambdas_29,
               real64,
               word64,
               real64,
               word64) tuple,
            x_2201: t_8):
  {returns = Some (lambdas_27), raises = Some (exn)} =
L_1718 ()
  block L_1718 ()
    val class_2: lambdas_28 = #0 (env_690)
    val zero_10: real64 = #1 (env_690)
    val maxWord_16: real64 = #2 (env_690)
    val setRoundingMode_1: lambdas_29 = #3 (env_690)
    val one_10: real64 = #4 (env_690)
    val maxWord'_20: word64 = #5 (env_690)
    val half_2: real64 = #6 (env_690)
    val zero_11: word64 = #7 (env_690)
    val x_2203:
      (word64,
       real64,
       word64,
       real64,
       lambdas_29,
       t_8,
       real64,
       real64,
       lambdas_28) tuple =
      (zero_11,
       half_2,
       maxWord'_20,
       one_10,
       setRoundingMode_1,
       x_2201,
       maxWord_16,
       zero_10,
       class_2)
    val x_2202: lambdas_27 = con xEnv_50 (x_2203)
    return (x_2202)
fun x_2204 (env_691:
              (word64,
               real64,
               word64,
               real64,
               lambdas_29,
               t_8,
               real64,
               real64,
               lambdas_28) tuple,
            x_2205: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_1719 ()
  block L_1719 ()
    val zero_13: word64 = #0 (env_691)
    val half_3: real64 = #1 (env_691)
    val maxWord'_21: word64 = #2 (env_691)
    val one_11: real64 = #3 (env_691)
    val setRoundingMode_2: lambdas_29 = #4 (env_691)
    val x_2206: t_8 = #5 (env_691)
    val maxWord_17: real64 = #6 (env_691)
    val zero_12: real64 = #7 (env_691)
    val class_3: lambdas_28 = #8 (env_691)
    case class_3 of
      classEnv_0 => L_1720
  block L_1720 (env_692: (word64, word64, word64) tuple)
    call L_1721 (class_4 (env_692, x_2205)) handle _ => raise
  block L_1721 (x_2207: float_class_0)
    case x_2207 of
      INF_0 => L_1723 | NAN_1 => L_1722 | _ => L_1724
  block L_1724 ()
    val x_2208: (real64, real64) tuple = (zero_12, x_2205)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1725
  block L_1725 (env_693: unit)
    call L_1726 (<=_5 (env_693, x_2208)) handle _ => raise
  block L_1726 (x_2209: bool)
    case x_2209 of
      true => L_1728 | false => L_1727
  block L_1727 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1729
  block L_1729 (env_694: unit)
    call L_1730 (~_2 (env_694, one_11)) handle _ => raise
  block L_1730 (x_2210: real64)
    val x_2211: (real64, real64) tuple = (x_2205, x_2210)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_1731
  block L_1731 (env_695: unit)
    call L_1732 (>_7 (env_695, x_2211)) handle _ => raise
  block L_1732 (x_2212: bool)
    case x_2212 of
      true => L_1734 | false => L_1733
  block L_1733 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1734 ()
    case x_2206 of
      TO_NEGINF_0 => L_1738
    | TO_ZERO_0 => L_1737
    | TO_NEAREST_0 => L_1736
    | TO_POSINF_0 => L_1735
  block L_1735 ()
    return (zero_13)
  block L_1736 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1739
  block L_1739 (env_696: unit)
    call L_1740 (~_2 (env_696, half_3)) handle _ => raise
  block L_1740 (x_2213: real64)
    val x_2214: (real64, real64) tuple = (x_2205, x_2213)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1741
  block L_1741 (env_697: unit)
    call L_1742 (<_8 (env_697, x_2214)) handle _ => raise
  block L_1742 (x_2215: bool)
    case x_2215 of
      true => L_1744 | false => L_1743
  block L_1743 ()
    return (zero_13)
  block L_1744 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1737 ()
    return (zero_13)
  block L_1738 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1728 ()
    val x_2216: (real64, real64) tuple = (x_2205, maxWord_17)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1745
  block L_1745 (env_698: unit)
    call L_1746 (<=_5 (env_698, x_2216)) handle _ => raise
  block L_1746 (x_2217: bool)
    case x_2217 of
      true => L_1748 | false => L_1747
  block L_1747 ()
    val x_2218: (real64, real64) tuple = (maxWord_17, one_11)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_1749
  block L_1749 (env_699: unit)
    call L_1750 (+_3 (env_699, x_2218)) handle _ => raise
  block L_1750 (x_2219: real64)
    val x_2220: (real64, real64) tuple = (x_2205, x_2219)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1751
  block L_1751 (env_700: unit)
    call L_1752 (<_8 (env_700, x_2220)) handle _ => raise
  block L_1752 (x_2221: bool)
    case x_2221 of
      true => L_1754 | false => L_1753
  block L_1753 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1754 ()
    case x_2206 of
      TO_NEGINF_0 => L_1758
    | TO_ZERO_0 => L_1757
    | TO_NEAREST_0 => L_1756
    | TO_POSINF_0 => L_1755
  block L_1755 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1756 ()
    val x_2222: (real64, real64) tuple = (x_2205, maxWord_17)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_1759
  block L_1759 (env_701: unit)
    call L_1760 (-_4 (env_701, x_2222)) handle _ => raise
  block L_1760 (x_2223: real64)
    val x_2224: (real64, real64) tuple = (x_2223, half_3)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_1761
  block L_1761 (env_702: unit)
    call L_1762 (>=_7 (env_702, x_2224)) handle _ => raise
  block L_1762 (x_2225: bool)
    case x_2225 of
      true => L_1764 | false => L_1763
  block L_1763 ()
    return (maxWord'_21)
  block L_1764 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1757 ()
    return (maxWord'_21)
  block L_1758 ()
    return (maxWord'_21)
  block L_1748 ()
    case x_2206 of
      TO_POSINF_0 => L_1768
    | TO_NEAREST_0 => L_1767
    | TO_ZERO_0 => L_1766
    | TO_NEGINF_0 => L_1765
  block L_1765 ()
    val x_2226: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2205)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1769
  block L_1769 (env_703: unit)
    call tail toWord64Unsafe_2 (env_703, x_2226)
  block L_1766 ()
    val x_2227: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2205)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1770
  block L_1770 (env_704: unit)
    call tail toWord64Unsafe_2 (env_704, x_2227)
  block L_1767 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_1771
  block L_1771 (env_705: unit)
    call L_1772 (x_2228 (env_705, x_967 (*()*))) handle _ => raise
  block L_1772 (m'_0: t_8)
    case setRoundingMode_2 of
      setRoundingModeEnv_0 => L_1773
  block L_1773 (env_706: (word32, cpointer, lambdas_155) tuple)
    call L_1774 (setRoundingMode_3 (env_706, x_966 (*con TO_NEAREST_0*))) handle _ => raise
  block L_1774 (x_2229: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_1775
  block L_1775 (env_707: unit)
    call L_1776 (round_2 (env_707, x_2205)) handle _ => raise
  block L_1776 (x_2230: real64)
    case setRoundingMode_2 of
      setRoundingModeEnv_0 => L_1777
  block L_1777 (env_708: (word32, cpointer, lambdas_155) tuple)
    call L_1778 (setRoundingMode_3 (env_708, m'_0)) handle _ => raise
  block L_1778 (x_2231: unit)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1779
  block L_1779 (env_709: unit)
    call tail toWord64Unsafe_2 (env_709, x_2230)
  block L_1768 ()
    val x_2232: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2205)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1780
  block L_1780 (env_710: unit)
    call tail toWord64Unsafe_2 (env_710, x_2232)
  block L_1722 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_1723 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2233 (env_711:
              (lambdas_28, real64, real64, lambdas_29, real64, word64, real64) tuple,
            x_2234: t_8):
  {returns = Some (lambdas_31), raises = Some (exn)} =
L_1781 ()
  block L_1781 ()
    val class_5: lambdas_28 = #0 (env_711)
    val zero_14: real64 = #1 (env_711)
    val maxWord_18: real64 = #2 (env_711)
    val setRoundingMode_4: lambdas_29 = #3 (env_711)
    val one_12: real64 = #4 (env_711)
    val zero_15: word64 = #5 (env_711)
    val half_4: real64 = #6 (env_711)
    val x_2236:
      (real64, word64, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple =
      (half_4,
       zero_15,
       one_12,
       setRoundingMode_4,
       x_2234,
       maxWord_18,
       zero_14,
       class_5)
    val x_2235: lambdas_31 = con xEnv_52 (x_2236)
    return (x_2235)
fun x_2237 (env_712:
              (real64,
               word64,
               real64,
               lambdas_29,
               t_8,
               real64,
               real64,
               lambdas_28) tuple,
            x_2238: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_1782 ()
  block L_1782 ()
    val half_5: real64 = #0 (env_712)
    val zero_17: word64 = #1 (env_712)
    val one_13: real64 = #2 (env_712)
    val setRoundingMode_5: lambdas_29 = #3 (env_712)
    val x_2239: t_8 = #4 (env_712)
    val maxWord_19: real64 = #5 (env_712)
    val zero_16: real64 = #6 (env_712)
    val class_6: lambdas_28 = #7 (env_712)
    case class_6 of
      classEnv_0 => L_1783
  block L_1783 (env_713: (word64, word64, word64) tuple)
    call L_1784 (class_4 (env_713, x_2238)) handle _ => raise
  block L_1784 (x_2240: float_class_0)
    case x_2240 of
      INF_0 => L_1786 | NAN_1 => L_1785 | _ => L_1787
  block L_1787 ()
    val x_2241: (real64, real64) tuple = (zero_16, x_2238)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1788
  block L_1788 (env_714: unit)
    call L_1789 (<=_5 (env_714, x_2241)) handle _ => raise
  block L_1789 (x_2242: bool)
    case x_2242 of
      true => L_1791 | false => L_1790
  block L_1790 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1792
  block L_1792 (env_715: unit)
    call L_1793 (~_2 (env_715, one_13)) handle _ => raise
  block L_1793 (x_2243: real64)
    val x_2244: (real64, real64) tuple = (x_2238, x_2243)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_1794
  block L_1794 (env_716: unit)
    call L_1795 (>_7 (env_716, x_2244)) handle _ => raise
  block L_1795 (x_2245: bool)
    case x_2245 of
      true => L_1797 | false => L_1796
  block L_1796 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1797 ()
    case x_2239 of
      TO_NEGINF_0 => L_1801
    | TO_ZERO_0 => L_1800
    | TO_NEAREST_0 => L_1799
    | TO_POSINF_0 => L_1798
  block L_1798 ()
    return (zero_17)
  block L_1799 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1802
  block L_1802 (env_717: unit)
    call L_1803 (~_2 (env_717, half_5)) handle _ => raise
  block L_1803 (x_2246: real64)
    val x_2247: (real64, real64) tuple = (x_2238, x_2246)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1804
  block L_1804 (env_718: unit)
    call L_1805 (<_8 (env_718, x_2247)) handle _ => raise
  block L_1805 (x_2248: bool)
    case x_2248 of
      true => L_1807 | false => L_1806
  block L_1806 ()
    return (zero_17)
  block L_1807 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1800 ()
    return (zero_17)
  block L_1801 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1791 ()
    val x_2249: (real64, real64) tuple = (x_2238, maxWord_19)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1808
  block L_1808 (env_719: unit)
    call L_1809 (<=_5 (env_719, x_2249)) handle _ => raise
  block L_1809 (x_2250: bool)
    case x_2250 of
      true => L_1811 | false => L_1810
  block L_1810 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1811 ()
    case x_2239 of
      TO_POSINF_0 => L_1815
    | TO_NEAREST_0 => L_1814
    | TO_ZERO_0 => L_1813
    | TO_NEGINF_0 => L_1812
  block L_1812 ()
    val x_2251: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2238)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1816
  block L_1816 (env_720: unit)
    call tail toWord64Unsafe_2 (env_720, x_2251)
  block L_1813 ()
    val x_2252: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2238)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1817
  block L_1817 (env_721: unit)
    call tail toWord64Unsafe_2 (env_721, x_2252)
  block L_1814 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_1818
  block L_1818 (env_722: unit)
    call L_1819 (x_2228 (env_722, x_964 (*()*))) handle _ => raise
  block L_1819 (m'_1: t_8)
    case setRoundingMode_5 of
      setRoundingModeEnv_0 => L_1820
  block L_1820 (env_723: (word32, cpointer, lambdas_155) tuple)
    call L_1821 (setRoundingMode_3 (env_723, x_963 (*con TO_NEAREST_0*))) handle _ => raise
  block L_1821 (x_2253: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_1822
  block L_1822 (env_724: unit)
    call L_1823 (round_2 (env_724, x_2238)) handle _ => raise
  block L_1823 (x_2254: real64)
    case setRoundingMode_5 of
      setRoundingModeEnv_0 => L_1824
  block L_1824 (env_725: (word32, cpointer, lambdas_155) tuple)
    call L_1825 (setRoundingMode_3 (env_725, m'_1)) handle _ => raise
  block L_1825 (x_2255: unit)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1826
  block L_1826 (env_726: unit)
    call tail toWord64Unsafe_2 (env_726, x_2254)
  block L_1815 ()
    val x_2256: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2238)
    case toWord64Unsafe_1 (*con toWord ... _223)*) of
      toWord64UnsafeEnv_1 => L_1827
  block L_1827 (env_727: unit)
    call tail toWord64Unsafe_2 (env_727, x_2256)
  block L_1785 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_1786 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1940 (env_728: (lambdas_36, lambdas_35, word64) tuple, x_2257: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_1828 ()
  block L_1828 ()
    val <<_10: lambdas_36 = #0 (env_728)
    val >>_8: lambdas_35 = #1 (env_728)
    val maxWord'_22: word64 = #2 (env_728)
    val x_2258: (word64, word32) tuple = (maxWord'_22, x_2257)
    case >>_8 of
      >>Env_0 => L_1829
  block L_1829 (env_729: (word32, word64) tuple)
    call L_1830 (>>_9 (env_729, x_2258)) handle _ => raise
  block L_1830 (x_2259: word64)
    val x_2260: (word64, word32) tuple = (x_2259, x_2257)
    case <<_10 of
      <<Env_0 => L_1831
  block L_1831 (env_730: (word32, word64) tuple)
    call tail <<_9 (env_730, x_2260)
fun x_2261 (env_731:
              (lambdas_28,
               real64,
               real64,
               lambdas_29,
               real64,
               word32,
               real64,
               word32) tuple,
            x_2262: t_8):
  {returns = Some (lambdas_37), raises = Some (exn)} =
L_1832 ()
  block L_1832 ()
    val class_7: lambdas_28 = #0 (env_731)
    val zero_18: real64 = #1 (env_731)
    val maxWord_20: real64 = #2 (env_731)
    val setRoundingMode_6: lambdas_29 = #3 (env_731)
    val one_14: real64 = #4 (env_731)
    val maxWord'_23: word32 = #5 (env_731)
    val half_6: real64 = #6 (env_731)
    val zero_19: word32 = #7 (env_731)
    val x_2264:
      (word32,
       real64,
       word32,
       real64,
       lambdas_29,
       t_8,
       real64,
       real64,
       lambdas_28) tuple =
      (zero_19,
       half_6,
       maxWord'_23,
       one_14,
       setRoundingMode_6,
       x_2262,
       maxWord_20,
       zero_18,
       class_7)
    val x_2263: lambdas_37 = con xEnv_57 (x_2264)
    return (x_2263)
fun x_2265 (env_732:
              (word32,
               real64,
               word32,
               real64,
               lambdas_29,
               t_8,
               real64,
               real64,
               lambdas_28) tuple,
            x_2266: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_1833 ()
  block L_1833 ()
    val zero_21: word32 = #0 (env_732)
    val half_7: real64 = #1 (env_732)
    val maxWord'_24: word32 = #2 (env_732)
    val one_15: real64 = #3 (env_732)
    val setRoundingMode_7: lambdas_29 = #4 (env_732)
    val x_2267: t_8 = #5 (env_732)
    val maxWord_21: real64 = #6 (env_732)
    val zero_20: real64 = #7 (env_732)
    val class_8: lambdas_28 = #8 (env_732)
    case class_8 of
      classEnv_0 => L_1834
  block L_1834 (env_733: (word64, word64, word64) tuple)
    call L_1835 (class_4 (env_733, x_2266)) handle _ => raise
  block L_1835 (x_2268: float_class_0)
    case x_2268 of
      INF_0 => L_1837 | NAN_1 => L_1836 | _ => L_1838
  block L_1838 ()
    val x_2269: (real64, real64) tuple = (zero_20, x_2266)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1839
  block L_1839 (env_734: unit)
    call L_1840 (<=_5 (env_734, x_2269)) handle _ => raise
  block L_1840 (x_2270: bool)
    case x_2270 of
      true => L_1842 | false => L_1841
  block L_1841 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1843
  block L_1843 (env_735: unit)
    call L_1844 (~_2 (env_735, one_15)) handle _ => raise
  block L_1844 (x_2271: real64)
    val x_2272: (real64, real64) tuple = (x_2266, x_2271)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_1845
  block L_1845 (env_736: unit)
    call L_1846 (>_7 (env_736, x_2272)) handle _ => raise
  block L_1846 (x_2273: bool)
    case x_2273 of
      true => L_1848 | false => L_1847
  block L_1847 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1848 ()
    case x_2267 of
      TO_NEGINF_0 => L_1852
    | TO_ZERO_0 => L_1851
    | TO_NEAREST_0 => L_1850
    | TO_POSINF_0 => L_1849
  block L_1849 ()
    return (zero_21)
  block L_1850 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1853
  block L_1853 (env_737: unit)
    call L_1854 (~_2 (env_737, half_7)) handle _ => raise
  block L_1854 (x_2274: real64)
    val x_2275: (real64, real64) tuple = (x_2266, x_2274)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1855
  block L_1855 (env_738: unit)
    call L_1856 (<_8 (env_738, x_2275)) handle _ => raise
  block L_1856 (x_2276: bool)
    case x_2276 of
      true => L_1858 | false => L_1857
  block L_1857 ()
    return (zero_21)
  block L_1858 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1851 ()
    return (zero_21)
  block L_1852 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1842 ()
    val x_2277: (real64, real64) tuple = (x_2266, maxWord_21)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1859
  block L_1859 (env_739: unit)
    call L_1860 (<=_5 (env_739, x_2277)) handle _ => raise
  block L_1860 (x_2278: bool)
    case x_2278 of
      true => L_1862 | false => L_1861
  block L_1861 ()
    val x_2279: (real64, real64) tuple = (maxWord_21, one_15)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_1863
  block L_1863 (env_740: unit)
    call L_1864 (+_3 (env_740, x_2279)) handle _ => raise
  block L_1864 (x_2280: real64)
    val x_2281: (real64, real64) tuple = (x_2266, x_2280)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1865
  block L_1865 (env_741: unit)
    call L_1866 (<_8 (env_741, x_2281)) handle _ => raise
  block L_1866 (x_2282: bool)
    case x_2282 of
      true => L_1868 | false => L_1867
  block L_1867 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1868 ()
    case x_2267 of
      TO_NEGINF_0 => L_1872
    | TO_ZERO_0 => L_1871
    | TO_NEAREST_0 => L_1870
    | TO_POSINF_0 => L_1869
  block L_1869 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1870 ()
    val x_2283: (real64, real64) tuple = (x_2266, maxWord_21)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_1873
  block L_1873 (env_742: unit)
    call L_1874 (-_4 (env_742, x_2283)) handle _ => raise
  block L_1874 (x_2284: real64)
    val x_2285: (real64, real64) tuple = (x_2284, half_7)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_1875
  block L_1875 (env_743: unit)
    call L_1876 (>=_7 (env_743, x_2285)) handle _ => raise
  block L_1876 (x_2286: bool)
    case x_2286 of
      true => L_1878 | false => L_1877
  block L_1877 ()
    return (maxWord'_24)
  block L_1878 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1871 ()
    return (maxWord'_24)
  block L_1872 ()
    return (maxWord'_24)
  block L_1862 ()
    case x_2267 of
      TO_POSINF_0 => L_1882
    | TO_NEAREST_0 => L_1881
    | TO_ZERO_0 => L_1880
    | TO_NEGINF_0 => L_1879
  block L_1879 ()
    val x_2287: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2266)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1883
  block L_1883 (env_744: unit)
    call tail toWord32Unsafe_2 (env_744, x_2287)
  block L_1880 ()
    val x_2288: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2266)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1884
  block L_1884 (env_745: unit)
    call tail toWord32Unsafe_2 (env_745, x_2288)
  block L_1881 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_1885
  block L_1885 (env_746: unit)
    call L_1886 (x_2228 (env_746, x_962 (*()*))) handle _ => raise
  block L_1886 (m'_2: t_8)
    case setRoundingMode_7 of
      setRoundingModeEnv_0 => L_1887
  block L_1887 (env_747: (word32, cpointer, lambdas_155) tuple)
    call L_1888 (setRoundingMode_3 (env_747, x_961 (*con TO_NEAREST_0*))) handle _ => raise
  block L_1888 (x_2289: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_1889
  block L_1889 (env_748: unit)
    call L_1890 (round_2 (env_748, x_2266)) handle _ => raise
  block L_1890 (x_2290: real64)
    case setRoundingMode_7 of
      setRoundingModeEnv_0 => L_1891
  block L_1891 (env_749: (word32, cpointer, lambdas_155) tuple)
    call L_1892 (setRoundingMode_3 (env_749, m'_2)) handle _ => raise
  block L_1892 (x_2291: unit)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1893
  block L_1893 (env_750: unit)
    call tail toWord32Unsafe_2 (env_750, x_2290)
  block L_1882 ()
    val x_2292: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2266)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1894
  block L_1894 (env_751: unit)
    call tail toWord32Unsafe_2 (env_751, x_2292)
  block L_1836 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_1837 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2293 (env_752:
              (lambdas_28, real64, real64, lambdas_29, real64, word32, real64) tuple,
            x_2294: t_8):
  {returns = Some (lambdas_39), raises = Some (exn)} =
L_1895 ()
  block L_1895 ()
    val class_9: lambdas_28 = #0 (env_752)
    val zero_22: real64 = #1 (env_752)
    val maxWord_22: real64 = #2 (env_752)
    val setRoundingMode_8: lambdas_29 = #3 (env_752)
    val one_16: real64 = #4 (env_752)
    val zero_23: word32 = #5 (env_752)
    val half_8: real64 = #6 (env_752)
    val x_2296:
      (real64, word32, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple =
      (half_8,
       zero_23,
       one_16,
       setRoundingMode_8,
       x_2294,
       maxWord_22,
       zero_22,
       class_9)
    val x_2295: lambdas_39 = con xEnv_59 (x_2296)
    return (x_2295)
fun x_2297 (env_753:
              (real64,
               word32,
               real64,
               lambdas_29,
               t_8,
               real64,
               real64,
               lambdas_28) tuple,
            x_2298: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_1896 ()
  block L_1896 ()
    val half_9: real64 = #0 (env_753)
    val zero_25: word32 = #1 (env_753)
    val one_17: real64 = #2 (env_753)
    val setRoundingMode_9: lambdas_29 = #3 (env_753)
    val x_2299: t_8 = #4 (env_753)
    val maxWord_23: real64 = #5 (env_753)
    val zero_24: real64 = #6 (env_753)
    val class_10: lambdas_28 = #7 (env_753)
    case class_10 of
      classEnv_0 => L_1897
  block L_1897 (env_754: (word64, word64, word64) tuple)
    call L_1898 (class_4 (env_754, x_2298)) handle _ => raise
  block L_1898 (x_2300: float_class_0)
    case x_2300 of
      INF_0 => L_1900 | NAN_1 => L_1899 | _ => L_1901
  block L_1901 ()
    val x_2301: (real64, real64) tuple = (zero_24, x_2298)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1902
  block L_1902 (env_755: unit)
    call L_1903 (<=_5 (env_755, x_2301)) handle _ => raise
  block L_1903 (x_2302: bool)
    case x_2302 of
      true => L_1905 | false => L_1904
  block L_1904 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1906
  block L_1906 (env_756: unit)
    call L_1907 (~_2 (env_756, one_17)) handle _ => raise
  block L_1907 (x_2303: real64)
    val x_2304: (real64, real64) tuple = (x_2298, x_2303)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_1908
  block L_1908 (env_757: unit)
    call L_1909 (>_7 (env_757, x_2304)) handle _ => raise
  block L_1909 (x_2305: bool)
    case x_2305 of
      true => L_1911 | false => L_1910
  block L_1910 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1911 ()
    case x_2299 of
      TO_NEGINF_0 => L_1915
    | TO_ZERO_0 => L_1914
    | TO_NEAREST_0 => L_1913
    | TO_POSINF_0 => L_1912
  block L_1912 ()
    return (zero_25)
  block L_1913 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1916
  block L_1916 (env_758: unit)
    call L_1917 (~_2 (env_758, half_9)) handle _ => raise
  block L_1917 (x_2306: real64)
    val x_2307: (real64, real64) tuple = (x_2298, x_2306)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1918
  block L_1918 (env_759: unit)
    call L_1919 (<_8 (env_759, x_2307)) handle _ => raise
  block L_1919 (x_2308: bool)
    case x_2308 of
      true => L_1921 | false => L_1920
  block L_1920 ()
    return (zero_25)
  block L_1921 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1914 ()
    return (zero_25)
  block L_1915 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1905 ()
    val x_2309: (real64, real64) tuple = (x_2298, maxWord_23)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1922
  block L_1922 (env_760: unit)
    call L_1923 (<=_5 (env_760, x_2309)) handle _ => raise
  block L_1923 (x_2310: bool)
    case x_2310 of
      true => L_1925 | false => L_1924
  block L_1924 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1925 ()
    case x_2299 of
      TO_POSINF_0 => L_1929
    | TO_NEAREST_0 => L_1928
    | TO_ZERO_0 => L_1927
    | TO_NEGINF_0 => L_1926
  block L_1926 ()
    val x_2311: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2298)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1930
  block L_1930 (env_761: unit)
    call tail toWord32Unsafe_2 (env_761, x_2311)
  block L_1927 ()
    val x_2312: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2298)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1931
  block L_1931 (env_762: unit)
    call tail toWord32Unsafe_2 (env_762, x_2312)
  block L_1928 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_1932
  block L_1932 (env_763: unit)
    call L_1933 (x_2228 (env_763, x_959 (*()*))) handle _ => raise
  block L_1933 (m'_3: t_8)
    case setRoundingMode_9 of
      setRoundingModeEnv_0 => L_1934
  block L_1934 (env_764: (word32, cpointer, lambdas_155) tuple)
    call L_1935 (setRoundingMode_3 (env_764, x_958 (*con TO_NEAREST_0*))) handle _ => raise
  block L_1935 (x_2313: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_1936
  block L_1936 (env_765: unit)
    call L_1937 (round_2 (env_765, x_2298)) handle _ => raise
  block L_1937 (x_2314: real64)
    case setRoundingMode_9 of
      setRoundingModeEnv_0 => L_1938
  block L_1938 (env_766: (word32, cpointer, lambdas_155) tuple)
    call L_1939 (setRoundingMode_3 (env_766, m'_3)) handle _ => raise
  block L_1939 (x_2315: unit)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1940
  block L_1940 (env_767: unit)
    call tail toWord32Unsafe_2 (env_767, x_2314)
  block L_1929 ()
    val x_2316: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2298)
    case toWord32Unsafe_1 (*con toWord ... _222)*) of
      toWord32UnsafeEnv_1 => L_1941
  block L_1941 (env_768: unit)
    call tail toWord32Unsafe_2 (env_768, x_2316)
  block L_1899 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_1900 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1929 (env_769: (lambdas_44, lambdas_43, word32) tuple, x_2317: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_1942 ()
  block L_1942 ()
    val <<_11: lambdas_44 = #0 (env_769)
    val >>_10: lambdas_43 = #1 (env_769)
    val maxWord'_25: word32 = #2 (env_769)
    val x_2318: (word32, word32) tuple = (maxWord'_25, x_2317)
    case >>_10 of
      >>Env_1 => L_1943
  block L_1943 (env_770: (word32, word32) tuple)
    call L_1944 (>>_11 (env_770, x_2318)) handle _ => raise
  block L_1944 (x_2319: word32)
    val x_2320: (word32, word32) tuple = (x_2319, x_2317)
    case <<_11 of
      <<Env_1 => L_1945
  block L_1945 (env_771: (word32, word32) tuple)
    call tail <<_8 (env_771, x_2320)
fun x_2321 (env_772:
              (lambdas_28, real64, real64, lambdas_29, real64, word16, real64) tuple,
            x_2322: t_8):
  {returns = Some (lambdas_45), raises = Some (exn)} =
L_1946 ()
  block L_1946 ()
    val class_11: lambdas_28 = #0 (env_772)
    val zero_26: real64 = #1 (env_772)
    val maxWord_24: real64 = #2 (env_772)
    val setRoundingMode_10: lambdas_29 = #3 (env_772)
    val one_18: real64 = #4 (env_772)
    val maxWord'_26: word16 = #5 (env_772)
    val half_10: real64 = #6 (env_772)
    val x_2324:
      (real64, word16, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple =
      (half_10,
       maxWord'_26,
       one_18,
       setRoundingMode_10,
       x_2322,
       maxWord_24,
       zero_26,
       class_11)
    val x_2323: lambdas_45 = con xEnv_64 (x_2324)
    return (x_2323)
fun x_2325 (env_773:
              (real64,
               word16,
               real64,
               lambdas_29,
               t_8,
               real64,
               real64,
               lambdas_28) tuple,
            x_2326: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_1947 ()
  block L_1947 ()
    val half_11: real64 = #0 (env_773)
    val maxWord'_27: word16 = #1 (env_773)
    val one_19: real64 = #2 (env_773)
    val setRoundingMode_11: lambdas_29 = #3 (env_773)
    val x_2327: t_8 = #4 (env_773)
    val maxWord_25: real64 = #5 (env_773)
    val zero_27: real64 = #6 (env_773)
    val class_12: lambdas_28 = #7 (env_773)
    case class_12 of
      classEnv_0 => L_1948
  block L_1948 (env_774: (word64, word64, word64) tuple)
    call L_1949 (class_4 (env_774, x_2326)) handle _ => raise
  block L_1949 (x_2328: float_class_0)
    case x_2328 of
      INF_0 => L_1951 | NAN_1 => L_1950 | _ => L_1952
  block L_1952 ()
    val x_2329: (real64, real64) tuple = (zero_27, x_2326)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1953
  block L_1953 (env_775: unit)
    call L_1954 (<=_5 (env_775, x_2329)) handle _ => raise
  block L_1954 (x_2330: bool)
    case x_2330 of
      true => L_1956 | false => L_1955
  block L_1955 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1957
  block L_1957 (env_776: unit)
    call L_1958 (~_2 (env_776, one_19)) handle _ => raise
  block L_1958 (x_2331: real64)
    val x_2332: (real64, real64) tuple = (x_2326, x_2331)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_1959
  block L_1959 (env_777: unit)
    call L_1960 (>_7 (env_777, x_2332)) handle _ => raise
  block L_1960 (x_2333: bool)
    case x_2333 of
      true => L_1962 | false => L_1961
  block L_1961 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1962 ()
    case x_2327 of
      TO_NEGINF_0 => L_1966
    | TO_ZERO_0 => L_1965
    | TO_NEAREST_0 => L_1964
    | TO_POSINF_0 => L_1963
  block L_1963 ()
    return (x_256 (*0x0:w16*))
  block L_1964 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_1967
  block L_1967 (env_778: unit)
    call L_1968 (~_2 (env_778, half_11)) handle _ => raise
  block L_1968 (x_2334: real64)
    val x_2335: (real64, real64) tuple = (x_2326, x_2334)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1969
  block L_1969 (env_779: unit)
    call L_1970 (<_8 (env_779, x_2335)) handle _ => raise
  block L_1970 (x_2336: bool)
    case x_2336 of
      true => L_1972 | false => L_1971
  block L_1971 ()
    return (x_256 (*0x0:w16*))
  block L_1972 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1965 ()
    return (x_256 (*0x0:w16*))
  block L_1966 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1956 ()
    val x_2337: (real64, real64) tuple = (x_2326, maxWord_25)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_1973
  block L_1973 (env_780: unit)
    call L_1974 (<=_5 (env_780, x_2337)) handle _ => raise
  block L_1974 (x_2338: bool)
    case x_2338 of
      true => L_1976 | false => L_1975
  block L_1975 ()
    val x_2339: (real64, real64) tuple = (maxWord_25, one_19)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_1977
  block L_1977 (env_781: unit)
    call L_1978 (+_3 (env_781, x_2339)) handle _ => raise
  block L_1978 (x_2340: real64)
    val x_2341: (real64, real64) tuple = (x_2326, x_2340)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_1979
  block L_1979 (env_782: unit)
    call L_1980 (<_8 (env_782, x_2341)) handle _ => raise
  block L_1980 (x_2342: bool)
    case x_2342 of
      true => L_1982 | false => L_1981
  block L_1981 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1982 ()
    case x_2327 of
      TO_NEGINF_0 => L_1986
    | TO_ZERO_0 => L_1985
    | TO_NEAREST_0 => L_1984
    | TO_POSINF_0 => L_1983
  block L_1983 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1984 ()
    val x_2343: (real64, real64) tuple = (x_2326, maxWord_25)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_1987
  block L_1987 (env_783: unit)
    call L_1988 (-_4 (env_783, x_2343)) handle _ => raise
  block L_1988 (x_2344: real64)
    val x_2345: (real64, real64) tuple = (x_2344, half_11)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_1989
  block L_1989 (env_784: unit)
    call L_1990 (>=_7 (env_784, x_2345)) handle _ => raise
  block L_1990 (x_2346: bool)
    case x_2346 of
      true => L_1992 | false => L_1991
  block L_1991 ()
    return (maxWord'_27)
  block L_1992 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_1985 ()
    return (maxWord'_27)
  block L_1986 ()
    return (maxWord'_27)
  block L_1976 ()
    case x_2327 of
      TO_POSINF_0 => L_1996
    | TO_NEAREST_0 => L_1995
    | TO_ZERO_0 => L_1994
    | TO_NEGINF_0 => L_1993
  block L_1993 ()
    val x_2347: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2326)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_1997
  block L_1997 (env_785: unit)
    call tail toWord16Unsafe_2 (env_785, x_2347)
  block L_1994 ()
    val x_2348: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2326)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_1998
  block L_1998 (env_786: unit)
    call tail toWord16Unsafe_2 (env_786, x_2348)
  block L_1995 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_1999
  block L_1999 (env_787: unit)
    call L_2000 (x_2228 (env_787, x_957 (*()*))) handle _ => raise
  block L_2000 (m'_4: t_8)
    case setRoundingMode_11 of
      setRoundingModeEnv_0 => L_2001
  block L_2001 (env_788: (word32, cpointer, lambdas_155) tuple)
    call L_2002 (setRoundingMode_3 (env_788, x_956 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2002 (x_2349: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2003
  block L_2003 (env_789: unit)
    call L_2004 (round_2 (env_789, x_2326)) handle _ => raise
  block L_2004 (x_2350: real64)
    case setRoundingMode_11 of
      setRoundingModeEnv_0 => L_2005
  block L_2005 (env_790: (word32, cpointer, lambdas_155) tuple)
    call L_2006 (setRoundingMode_3 (env_790, m'_4)) handle _ => raise
  block L_2006 (x_2351: unit)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_2007
  block L_2007 (env_791: unit)
    call tail toWord16Unsafe_2 (env_791, x_2350)
  block L_1996 ()
    val x_2352: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2326)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_2008
  block L_2008 (env_792: unit)
    call tail toWord16Unsafe_2 (env_792, x_2352)
  block L_1950 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_1951 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2353 (env_793:
              (lambdas_28, real64, real64, lambdas_29, real64, real64) tuple,
            x_2354: t_8):
  {returns = Some (lambdas_47), raises = Some (exn)} =
L_2009 ()
  block L_2009 ()
    val class_13: lambdas_28 = #0 (env_793)
    val zero_28: real64 = #1 (env_793)
    val maxWord_26: real64 = #2 (env_793)
    val setRoundingMode_12: lambdas_29 = #3 (env_793)
    val one_20: real64 = #4 (env_793)
    val half_12: real64 = #5 (env_793)
    val x_2356:
      (real64, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple =
      (half_12,
       one_20,
       setRoundingMode_12,
       x_2354,
       maxWord_26,
       zero_28,
       class_13)
    val x_2355: lambdas_47 = con xEnv_66 (x_2356)
    return (x_2355)
fun x_2357 (env_794:
              (real64, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple,
            x_2358: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_2010 ()
  block L_2010 ()
    val half_13: real64 = #0 (env_794)
    val one_21: real64 = #1 (env_794)
    val setRoundingMode_13: lambdas_29 = #2 (env_794)
    val x_2359: t_8 = #3 (env_794)
    val maxWord_27: real64 = #4 (env_794)
    val zero_29: real64 = #5 (env_794)
    val class_14: lambdas_28 = #6 (env_794)
    case class_14 of
      classEnv_0 => L_2011
  block L_2011 (env_795: (word64, word64, word64) tuple)
    call L_2012 (class_4 (env_795, x_2358)) handle _ => raise
  block L_2012 (x_2360: float_class_0)
    case x_2360 of
      INF_0 => L_2014 | NAN_1 => L_2013 | _ => L_2015
  block L_2015 ()
    val x_2361: (real64, real64) tuple = (zero_29, x_2358)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2016
  block L_2016 (env_796: unit)
    call L_2017 (<=_5 (env_796, x_2361)) handle _ => raise
  block L_2017 (x_2362: bool)
    case x_2362 of
      true => L_2019 | false => L_2018
  block L_2018 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2020
  block L_2020 (env_797: unit)
    call L_2021 (~_2 (env_797, one_21)) handle _ => raise
  block L_2021 (x_2363: real64)
    val x_2364: (real64, real64) tuple = (x_2358, x_2363)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2022
  block L_2022 (env_798: unit)
    call L_2023 (>_7 (env_798, x_2364)) handle _ => raise
  block L_2023 (x_2365: bool)
    case x_2365 of
      true => L_2025 | false => L_2024
  block L_2024 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2025 ()
    case x_2359 of
      TO_NEGINF_0 => L_2029
    | TO_ZERO_0 => L_2028
    | TO_NEAREST_0 => L_2027
    | TO_POSINF_0 => L_2026
  block L_2026 ()
    return (x_256 (*0x0:w16*))
  block L_2027 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2030
  block L_2030 (env_799: unit)
    call L_2031 (~_2 (env_799, half_13)) handle _ => raise
  block L_2031 (x_2366: real64)
    val x_2367: (real64, real64) tuple = (x_2358, x_2366)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2032
  block L_2032 (env_800: unit)
    call L_2033 (<_8 (env_800, x_2367)) handle _ => raise
  block L_2033 (x_2368: bool)
    case x_2368 of
      true => L_2035 | false => L_2034
  block L_2034 ()
    return (x_256 (*0x0:w16*))
  block L_2035 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2028 ()
    return (x_256 (*0x0:w16*))
  block L_2029 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2019 ()
    val x_2369: (real64, real64) tuple = (x_2358, maxWord_27)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2036
  block L_2036 (env_801: unit)
    call L_2037 (<=_5 (env_801, x_2369)) handle _ => raise
  block L_2037 (x_2370: bool)
    case x_2370 of
      true => L_2039 | false => L_2038
  block L_2038 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2039 ()
    case x_2359 of
      TO_POSINF_0 => L_2043
    | TO_NEAREST_0 => L_2042
    | TO_ZERO_0 => L_2041
    | TO_NEGINF_0 => L_2040
  block L_2040 ()
    val x_2371: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2358)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_2044
  block L_2044 (env_802: unit)
    call tail toWord16Unsafe_2 (env_802, x_2371)
  block L_2041 ()
    val x_2372: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2358)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_2045
  block L_2045 (env_803: unit)
    call tail toWord16Unsafe_2 (env_803, x_2372)
  block L_2042 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2046
  block L_2046 (env_804: unit)
    call L_2047 (x_2228 (env_804, x_954 (*()*))) handle _ => raise
  block L_2047 (m'_5: t_8)
    case setRoundingMode_13 of
      setRoundingModeEnv_0 => L_2048
  block L_2048 (env_805: (word32, cpointer, lambdas_155) tuple)
    call L_2049 (setRoundingMode_3 (env_805, x_953 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2049 (x_2373: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2050
  block L_2050 (env_806: unit)
    call L_2051 (round_2 (env_806, x_2358)) handle _ => raise
  block L_2051 (x_2374: real64)
    case setRoundingMode_13 of
      setRoundingModeEnv_0 => L_2052
  block L_2052 (env_807: (word32, cpointer, lambdas_155) tuple)
    call L_2053 (setRoundingMode_3 (env_807, m'_5)) handle _ => raise
  block L_2053 (x_2375: unit)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_2054
  block L_2054 (env_808: unit)
    call tail toWord16Unsafe_2 (env_808, x_2374)
  block L_2043 ()
    val x_2376: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2358)
    case toWord16Unsafe_1 (*con toWord ... _221)*) of
      toWord16UnsafeEnv_1 => L_2055
  block L_2055 (env_809: unit)
    call tail toWord16Unsafe_2 (env_809, x_2376)
  block L_2013 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2014 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1918 (env_810: (lambdas_52, lambdas_51, word16) tuple, x_2377: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_2056 ()
  block L_2056 ()
    val <<_12: lambdas_52 = #0 (env_810)
    val >>_12: lambdas_51 = #1 (env_810)
    val maxWord'_28: word16 = #2 (env_810)
    val x_2378: (word16, word32) tuple = (maxWord'_28, x_2377)
    case >>_12 of
      >>Env_2 => L_2057
  block L_2057 (env_811: word32)
    call L_2058 (>>_13 (env_811, x_2378)) handle _ => raise
  block L_2058 (x_2379: word16)
    val x_2380: (word16, word32) tuple = (x_2379, x_2377)
    case <<_12 of
      <<Env_2 => L_2059
  block L_2059 (env_812: word32)
    call tail <<_13 (env_812, x_2380)
fun x_2381 (env_813:
              (lambdas_28, real64, real64, lambdas_29, real64, word8, real64) tuple,
            x_2382: t_8):
  {returns = Some (lambdas_53), raises = Some (exn)} =
L_2060 ()
  block L_2060 ()
    val class_15: lambdas_28 = #0 (env_813)
    val zero_30: real64 = #1 (env_813)
    val maxWord_28: real64 = #2 (env_813)
    val setRoundingMode_14: lambdas_29 = #3 (env_813)
    val one_22: real64 = #4 (env_813)
    val maxWord'_29: word8 = #5 (env_813)
    val half_14: real64 = #6 (env_813)
    val x_2384:
      (real64, word8, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple =
      (half_14,
       maxWord'_29,
       one_22,
       setRoundingMode_14,
       x_2382,
       maxWord_28,
       zero_30,
       class_15)
    val x_2383: lambdas_53 = con xEnv_71 (x_2384)
    return (x_2383)
fun x_2385 (env_814:
              (real64,
               word8,
               real64,
               lambdas_29,
               t_8,
               real64,
               real64,
               lambdas_28) tuple,
            x_2386: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_2061 ()
  block L_2061 ()
    val half_15: real64 = #0 (env_814)
    val maxWord'_30: word8 = #1 (env_814)
    val one_23: real64 = #2 (env_814)
    val setRoundingMode_15: lambdas_29 = #3 (env_814)
    val x_2387: t_8 = #4 (env_814)
    val maxWord_29: real64 = #5 (env_814)
    val zero_31: real64 = #6 (env_814)
    val class_16: lambdas_28 = #7 (env_814)
    case class_16 of
      classEnv_0 => L_2062
  block L_2062 (env_815: (word64, word64, word64) tuple)
    call L_2063 (class_4 (env_815, x_2386)) handle _ => raise
  block L_2063 (x_2388: float_class_0)
    case x_2388 of
      INF_0 => L_2065 | NAN_1 => L_2064 | _ => L_2066
  block L_2066 ()
    val x_2389: (real64, real64) tuple = (zero_31, x_2386)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2067
  block L_2067 (env_816: unit)
    call L_2068 (<=_5 (env_816, x_2389)) handle _ => raise
  block L_2068 (x_2390: bool)
    case x_2390 of
      true => L_2070 | false => L_2069
  block L_2069 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2071
  block L_2071 (env_817: unit)
    call L_2072 (~_2 (env_817, one_23)) handle _ => raise
  block L_2072 (x_2391: real64)
    val x_2392: (real64, real64) tuple = (x_2386, x_2391)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2073
  block L_2073 (env_818: unit)
    call L_2074 (>_7 (env_818, x_2392)) handle _ => raise
  block L_2074 (x_2393: bool)
    case x_2393 of
      true => L_2076 | false => L_2075
  block L_2075 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2076 ()
    case x_2387 of
      TO_NEGINF_0 => L_2080
    | TO_ZERO_0 => L_2079
    | TO_NEAREST_0 => L_2078
    | TO_POSINF_0 => L_2077
  block L_2077 ()
    return (x_242 (*0x0:w8*))
  block L_2078 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2081
  block L_2081 (env_819: unit)
    call L_2082 (~_2 (env_819, half_15)) handle _ => raise
  block L_2082 (x_2394: real64)
    val x_2395: (real64, real64) tuple = (x_2386, x_2394)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2083
  block L_2083 (env_820: unit)
    call L_2084 (<_8 (env_820, x_2395)) handle _ => raise
  block L_2084 (x_2396: bool)
    case x_2396 of
      true => L_2086 | false => L_2085
  block L_2085 ()
    return (x_242 (*0x0:w8*))
  block L_2086 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2079 ()
    return (x_242 (*0x0:w8*))
  block L_2080 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2070 ()
    val x_2397: (real64, real64) tuple = (x_2386, maxWord_29)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2087
  block L_2087 (env_821: unit)
    call L_2088 (<=_5 (env_821, x_2397)) handle _ => raise
  block L_2088 (x_2398: bool)
    case x_2398 of
      true => L_2090 | false => L_2089
  block L_2089 ()
    val x_2399: (real64, real64) tuple = (maxWord_29, one_23)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_2091
  block L_2091 (env_822: unit)
    call L_2092 (+_3 (env_822, x_2399)) handle _ => raise
  block L_2092 (x_2400: real64)
    val x_2401: (real64, real64) tuple = (x_2386, x_2400)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2093
  block L_2093 (env_823: unit)
    call L_2094 (<_8 (env_823, x_2401)) handle _ => raise
  block L_2094 (x_2402: bool)
    case x_2402 of
      true => L_2096 | false => L_2095
  block L_2095 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2096 ()
    case x_2387 of
      TO_NEGINF_0 => L_2100
    | TO_ZERO_0 => L_2099
    | TO_NEAREST_0 => L_2098
    | TO_POSINF_0 => L_2097
  block L_2097 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2098 ()
    val x_2403: (real64, real64) tuple = (x_2386, maxWord_29)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2101
  block L_2101 (env_824: unit)
    call L_2102 (-_4 (env_824, x_2403)) handle _ => raise
  block L_2102 (x_2404: real64)
    val x_2405: (real64, real64) tuple = (x_2404, half_15)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_2103
  block L_2103 (env_825: unit)
    call L_2104 (>=_7 (env_825, x_2405)) handle _ => raise
  block L_2104 (x_2406: bool)
    case x_2406 of
      true => L_2106 | false => L_2105
  block L_2105 ()
    return (maxWord'_30)
  block L_2106 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2099 ()
    return (maxWord'_30)
  block L_2100 ()
    return (maxWord'_30)
  block L_2090 ()
    case x_2387 of
      TO_POSINF_0 => L_2110
    | TO_NEAREST_0 => L_2109
    | TO_ZERO_0 => L_2108
    | TO_NEGINF_0 => L_2107
  block L_2107 ()
    val x_2407: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2386)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2111
  block L_2111 (env_826: unit)
    call tail toWord8Unsafe_2 (env_826, x_2407)
  block L_2108 ()
    val x_2408: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2386)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2112
  block L_2112 (env_827: unit)
    call tail toWord8Unsafe_2 (env_827, x_2408)
  block L_2109 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2113
  block L_2113 (env_828: unit)
    call L_2114 (x_2228 (env_828, x_952 (*()*))) handle _ => raise
  block L_2114 (m'_6: t_8)
    case setRoundingMode_15 of
      setRoundingModeEnv_0 => L_2115
  block L_2115 (env_829: (word32, cpointer, lambdas_155) tuple)
    call L_2116 (setRoundingMode_3 (env_829, x_951 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2116 (x_2409: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2117
  block L_2117 (env_830: unit)
    call L_2118 (round_2 (env_830, x_2386)) handle _ => raise
  block L_2118 (x_2410: real64)
    case setRoundingMode_15 of
      setRoundingModeEnv_0 => L_2119
  block L_2119 (env_831: (word32, cpointer, lambdas_155) tuple)
    call L_2120 (setRoundingMode_3 (env_831, m'_6)) handle _ => raise
  block L_2120 (x_2411: unit)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2121
  block L_2121 (env_832: unit)
    call tail toWord8Unsafe_2 (env_832, x_2410)
  block L_2110 ()
    val x_2412: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2386)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2122
  block L_2122 (env_833: unit)
    call tail toWord8Unsafe_2 (env_833, x_2412)
  block L_2064 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2065 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2413 (env_834:
              (lambdas_28, real64, real64, lambdas_29, real64, real64) tuple,
            x_2414: t_8):
  {returns = Some (lambdas_55), raises = Some (exn)} =
L_2123 ()
  block L_2123 ()
    val class_17: lambdas_28 = #0 (env_834)
    val zero_32: real64 = #1 (env_834)
    val maxWord_30: real64 = #2 (env_834)
    val setRoundingMode_16: lambdas_29 = #3 (env_834)
    val one_24: real64 = #4 (env_834)
    val half_16: real64 = #5 (env_834)
    val x_2416:
      (real64, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple =
      (half_16,
       one_24,
       setRoundingMode_16,
       x_2414,
       maxWord_30,
       zero_32,
       class_17)
    val x_2415: lambdas_55 = con xEnv_73 (x_2416)
    return (x_2415)
fun x_2417 (env_835:
              (real64, real64, lambdas_29, t_8, real64, real64, lambdas_28) tuple,
            x_2418: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_2124 ()
  block L_2124 ()
    val half_17: real64 = #0 (env_835)
    val one_25: real64 = #1 (env_835)
    val setRoundingMode_17: lambdas_29 = #2 (env_835)
    val x_2419: t_8 = #3 (env_835)
    val maxWord_31: real64 = #4 (env_835)
    val zero_33: real64 = #5 (env_835)
    val class_18: lambdas_28 = #6 (env_835)
    case class_18 of
      classEnv_0 => L_2125
  block L_2125 (env_836: (word64, word64, word64) tuple)
    call L_2126 (class_4 (env_836, x_2418)) handle _ => raise
  block L_2126 (x_2420: float_class_0)
    case x_2420 of
      INF_0 => L_2128 | NAN_1 => L_2127 | _ => L_2129
  block L_2129 ()
    val x_2421: (real64, real64) tuple = (zero_33, x_2418)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2130
  block L_2130 (env_837: unit)
    call L_2131 (<=_5 (env_837, x_2421)) handle _ => raise
  block L_2131 (x_2422: bool)
    case x_2422 of
      true => L_2133 | false => L_2132
  block L_2132 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2134
  block L_2134 (env_838: unit)
    call L_2135 (~_2 (env_838, one_25)) handle _ => raise
  block L_2135 (x_2423: real64)
    val x_2424: (real64, real64) tuple = (x_2418, x_2423)
    case >_3 (*con >Env_3 ... e_11)*) of
      >Env_3 => L_2136
  block L_2136 (env_839: unit)
    call L_2137 (>_7 (env_839, x_2424)) handle _ => raise
  block L_2137 (x_2425: bool)
    case x_2425 of
      true => L_2139 | false => L_2138
  block L_2138 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2139 ()
    case x_2419 of
      TO_NEGINF_0 => L_2143
    | TO_ZERO_0 => L_2142
    | TO_NEAREST_0 => L_2141
    | TO_POSINF_0 => L_2140
  block L_2140 ()
    return (x_242 (*0x0:w8*))
  block L_2141 ()
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2144
  block L_2144 (env_840: unit)
    call L_2145 (~_2 (env_840, half_17)) handle _ => raise
  block L_2145 (x_2426: real64)
    val x_2427: (real64, real64) tuple = (x_2418, x_2426)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2146
  block L_2146 (env_841: unit)
    call L_2147 (<_8 (env_841, x_2427)) handle _ => raise
  block L_2147 (x_2428: bool)
    case x_2428 of
      true => L_2149 | false => L_2148
  block L_2148 ()
    return (x_242 (*0x0:w8*))
  block L_2149 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2142 ()
    return (x_242 (*0x0:w8*))
  block L_2143 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2133 ()
    val x_2429: (real64, real64) tuple = (x_2418, maxWord_31)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2150
  block L_2150 (env_842: unit)
    call L_2151 (<=_5 (env_842, x_2429)) handle _ => raise
  block L_2151 (x_2430: bool)
    case x_2430 of
      true => L_2153 | false => L_2152
  block L_2152 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2153 ()
    case x_2419 of
      TO_POSINF_0 => L_2157
    | TO_NEAREST_0 => L_2156
    | TO_ZERO_0 => L_2155
    | TO_NEGINF_0 => L_2154
  block L_2154 ()
    val x_2431: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2418)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2158
  block L_2158 (env_843: unit)
    call tail toWord8Unsafe_2 (env_843, x_2431)
  block L_2155 ()
    val x_2432: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2418)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2159
  block L_2159 (env_844: unit)
    call tail toWord8Unsafe_2 (env_844, x_2432)
  block L_2156 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2160
  block L_2160 (env_845: unit)
    call L_2161 (x_2228 (env_845, x_949 (*()*))) handle _ => raise
  block L_2161 (m'_7: t_8)
    case setRoundingMode_17 of
      setRoundingModeEnv_0 => L_2162
  block L_2162 (env_846: (word32, cpointer, lambdas_155) tuple)
    call L_2163 (setRoundingMode_3 (env_846, x_948 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2163 (x_2433: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2164
  block L_2164 (env_847: unit)
    call L_2165 (round_2 (env_847, x_2418)) handle _ => raise
  block L_2165 (x_2434: real64)
    case setRoundingMode_17 of
      setRoundingModeEnv_0 => L_2166
  block L_2166 (env_848: (word32, cpointer, lambdas_155) tuple)
    call L_2167 (setRoundingMode_3 (env_848, m'_7)) handle _ => raise
  block L_2167 (x_2435: unit)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2168
  block L_2168 (env_849: unit)
    call tail toWord8Unsafe_2 (env_849, x_2434)
  block L_2157 ()
    val x_2436: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2418)
    case toWord8Unsafe_1 (*con toWord ... _220)*) of
      toWord8UnsafeEnv_1 => L_2169
  block L_2169 (env_850: unit)
    call tail toWord8Unsafe_2 (env_850, x_2436)
  block L_2127 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2128 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1907 (env_851: (lambdas_60, lambdas_59, word8) tuple, x_2437: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_2170 ()
  block L_2170 ()
    val <<_14: lambdas_60 = #0 (env_851)
    val >>_14: lambdas_59 = #1 (env_851)
    val maxWord'_31: word8 = #2 (env_851)
    val x_2438: (word8, word32) tuple = (maxWord'_31, x_2437)
    case >>_14 of
      >>Env_3 => L_2171
  block L_2171 (env_852: word32)
    call L_2172 (>>_15 (env_852, x_2438)) handle _ => raise
  block L_2172 (x_2439: word8)
    val x_2440: (word8, word32) tuple = (x_2439, x_2437)
    case <<_14 of
      <<Env_3 => L_2173
  block L_2173 (env_853: word32)
    call tail <<_15 (env_853, x_2440)
fun x_2441 (env_854:
              (real64, real64, lambdas_29, real64, word64, real64, word64) tuple,
            x_2442: t_8):
  {returns = Some (lambdas_61), raises = Some (exn)} =
L_2174 ()
  block L_2174 ()
    val minInt_16: real64 = #0 (env_854)
    val maxInt_16: real64 = #1 (env_854)
    val setRoundingMode_18: lambdas_29 = #2 (env_854)
    val one_26: real64 = #3 (env_854)
    val maxInt'_20: word64 = #4 (env_854)
    val half_18: real64 = #5 (env_854)
    val minInt'_6: word64 = #6 (env_854)
    val x_2444:
      (word64, real64, word64, real64, lambdas_29, t_8, real64, real64) tuple =
      (minInt'_6,
       half_18,
       maxInt'_20,
       one_26,
       setRoundingMode_18,
       x_2442,
       maxInt_16,
       minInt_16)
    val x_2443: lambdas_61 = con xEnv_78 (x_2444)
    return (x_2443)
fun x_2445 (env_855:
              (word64, real64, word64, real64, lambdas_29, t_8, real64, real64) tuple,
            x_2446: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_2175 ()
  block L_2175 ()
    val minInt'_7: word64 = #0 (env_855)
    val half_19: real64 = #1 (env_855)
    val maxInt'_21: word64 = #2 (env_855)
    val one_27: real64 = #3 (env_855)
    val setRoundingMode_19: lambdas_29 = #4 (env_855)
    val x_2448: t_8 = #5 (env_855)
    val maxInt_17: real64 = #6 (env_855)
    val minInt_17: real64 = #7 (env_855)
    val x_2447: (real64, real64) tuple = (minInt_17, x_2446)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2176
  block L_2176 (env_856: unit)
    call L_2177 (<=_5 (env_856, x_2447)) handle _ => raise
  block L_2177 (x_2449: bool)
    case x_2449 of
      true => L_2179 | false => L_2178
  block L_2178 ()
    val x_2450: (real64, real64) tuple = (x_2446, minInt_17)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2180
  block L_2180 (env_857: unit)
    call L_2181 (<_8 (env_857, x_2450)) handle _ => raise
  block L_2181 (x_2451: bool)
    case x_2451 of
      true => L_2183 | false => L_2182
  block L_2182 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2183 ()
    val x_2452: (real64, real64) tuple = (minInt_17, one_27)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2184
  block L_2184 (env_858: unit)
    call L_2185 (-_4 (env_858, x_2452)) handle _ => raise
  block L_2185 (x_2453: real64)
    val x_2454: (real64, real64) tuple = (x_2453, x_2446)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2186
  block L_2186 (env_859: unit)
    call L_2187 (<_8 (env_859, x_2454)) handle _ => raise
  block L_2187 (x_2455: bool)
    case x_2455 of
      true => L_2189 | false => L_2188
  block L_2188 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2189 ()
    case x_2448 of
      TO_NEGINF_0 => L_2193
    | TO_ZERO_0 => L_2192
    | TO_NEAREST_0 => L_2191
    | TO_POSINF_0 => L_2190
  block L_2190 ()
    return (minInt'_7)
  block L_2191 ()
    val x_2456: (real64, real64) tuple = (x_2446, minInt_17)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2194
  block L_2194 (env_860: unit)
    call L_2195 (-_4 (env_860, x_2456)) handle _ => raise
  block L_2195 (x_2457: real64)
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2196
  block L_2196 (env_861: unit)
    call L_2197 (~_2 (env_861, half_19)) handle _ => raise
  block L_2197 (x_2458: real64)
    val x_2459: (real64, real64) tuple = (x_2457, x_2458)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2198
  block L_2198 (env_862: unit)
    call L_2199 (<_8 (env_862, x_2459)) handle _ => raise
  block L_2199 (x_2460: bool)
    case x_2460 of
      true => L_2201 | false => L_2200
  block L_2200 ()
    return (minInt'_7)
  block L_2201 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2192 ()
    return (minInt'_7)
  block L_2193 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2179 ()
    val x_2461: (real64, real64) tuple = (x_2446, maxInt_17)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2202
  block L_2202 (env_863: unit)
    call L_2203 (<=_5 (env_863, x_2461)) handle _ => raise
  block L_2203 (x_2462: bool)
    case x_2462 of
      true => L_2205 | false => L_2204
  block L_2204 ()
    val x_2463: (real64, real64) tuple = (maxInt_17, one_27)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_2206
  block L_2206 (env_864: unit)
    call L_2207 (+_3 (env_864, x_2463)) handle _ => raise
  block L_2207 (x_2464: real64)
    val x_2465: (real64, real64) tuple = (x_2446, x_2464)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2208
  block L_2208 (env_865: unit)
    call L_2209 (<_8 (env_865, x_2465)) handle _ => raise
  block L_2209 (x_2466: bool)
    case x_2466 of
      true => L_2211 | false => L_2210
  block L_2210 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2211 ()
    case x_2448 of
      TO_NEGINF_0 => L_2215
    | TO_ZERO_0 => L_2214
    | TO_NEAREST_0 => L_2213
    | TO_POSINF_0 => L_2212
  block L_2212 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2213 ()
    val x_2467: (real64, real64) tuple = (x_2446, maxInt_17)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2216
  block L_2216 (env_866: unit)
    call L_2217 (-_4 (env_866, x_2467)) handle _ => raise
  block L_2217 (x_2468: real64)
    val x_2469: (real64, real64) tuple = (x_2468, half_19)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_2218
  block L_2218 (env_867: unit)
    call L_2219 (>=_7 (env_867, x_2469)) handle _ => raise
  block L_2219 (x_2470: bool)
    case x_2470 of
      true => L_2221 | false => L_2220
  block L_2220 ()
    return (maxInt'_21)
  block L_2221 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2214 ()
    return (maxInt'_21)
  block L_2215 ()
    return (maxInt'_21)
  block L_2205 ()
    case x_2448 of
      TO_POSINF_0 => L_2225
    | TO_NEAREST_0 => L_2224
    | TO_ZERO_0 => L_2223
    | TO_NEGINF_0 => L_2222
  block L_2222 ()
    val x_2471: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2446)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2226
  block L_2226 (env_868: unit)
    call tail toInt64Unsafe_2 (env_868, x_2471)
  block L_2223 ()
    val x_2472: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2446)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2227
  block L_2227 (env_869: unit)
    call tail toInt64Unsafe_2 (env_869, x_2472)
  block L_2224 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2228
  block L_2228 (env_870: unit)
    call L_2229 (x_2228 (env_870, x_947 (*()*))) handle _ => raise
  block L_2229 (m'_8: t_8)
    case setRoundingMode_19 of
      setRoundingModeEnv_0 => L_2230
  block L_2230 (env_871: (word32, cpointer, lambdas_155) tuple)
    call L_2231 (setRoundingMode_3 (env_871, x_946 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2231 (x_2473: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2232
  block L_2232 (env_872: unit)
    call L_2233 (round_2 (env_872, x_2446)) handle _ => raise
  block L_2233 (x_2474: real64)
    case setRoundingMode_19 of
      setRoundingModeEnv_0 => L_2234
  block L_2234 (env_873: (word32, cpointer, lambdas_155) tuple)
    call L_2235 (setRoundingMode_3 (env_873, m'_8)) handle _ => raise
  block L_2235 (x_2475: unit)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2236
  block L_2236 (env_874: unit)
    call tail toInt64Unsafe_2 (env_874, x_2474)
  block L_2225 ()
    val x_2476: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2446)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2237
  block L_2237 (env_875: unit)
    call tail toInt64Unsafe_2 (env_875, x_2476)
fun x_2477 (env_876: (real64, real64, lambdas_29) tuple, x_2478: t_8):
  {returns = Some (lambdas_63), raises = Some (exn)} =
L_2238 ()
  block L_2238 ()
    val minInt_18: real64 = #0 (env_876)
    val maxInt_18: real64 = #1 (env_876)
    val setRoundingMode_20: lambdas_29 = #2 (env_876)
    val x_2480: (lambdas_29, t_8, real64, real64) tuple =
      (setRoundingMode_20, x_2478, maxInt_18, minInt_18)
    val x_2479: lambdas_63 = con xEnv_80 (x_2480)
    return (x_2479)
fun x_2481 (env_877: (lambdas_29, t_8, real64, real64) tuple, x_2482: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_2239 ()
  block L_2239 ()
    val setRoundingMode_21: lambdas_29 = #0 (env_877)
    val x_2484: t_8 = #1 (env_877)
    val maxInt_19: real64 = #2 (env_877)
    val minInt_19: real64 = #3 (env_877)
    val x_2483: (real64, real64) tuple = (minInt_19, x_2482)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2240
  block L_2240 (env_878: unit)
    call L_2241 (<=_5 (env_878, x_2483)) handle _ => raise
  block L_2241 (x_2485: bool)
    case x_2485 of
      true => L_2243 | false => L_2242
  block L_2242 ()
    val x_2486: (real64, real64) tuple = (x_2482, minInt_19)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2244
  block L_2244 (env_879: unit)
    call L_2245 (<_8 (env_879, x_2486)) handle _ => raise
  block L_2245 (x_2487: bool)
    case x_2487 of
      true => L_2247 | false => L_2246
  block L_2246 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2247 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2243 ()
    val x_2488: (real64, real64) tuple = (x_2482, maxInt_19)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2248
  block L_2248 (env_880: unit)
    call L_2249 (<=_5 (env_880, x_2488)) handle _ => raise
  block L_2249 (x_2489: bool)
    case x_2489 of
      true => L_2251 | false => L_2250
  block L_2250 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2251 ()
    case x_2484 of
      TO_POSINF_0 => L_2255
    | TO_NEAREST_0 => L_2254
    | TO_ZERO_0 => L_2253
    | TO_NEGINF_0 => L_2252
  block L_2252 ()
    val x_2490: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2482)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2256
  block L_2256 (env_881: unit)
    call tail toInt64Unsafe_2 (env_881, x_2490)
  block L_2253 ()
    val x_2491: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2482)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2257
  block L_2257 (env_882: unit)
    call tail toInt64Unsafe_2 (env_882, x_2491)
  block L_2254 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2258
  block L_2258 (env_883: unit)
    call L_2259 (x_2228 (env_883, x_944 (*()*))) handle _ => raise
  block L_2259 (m'_9: t_8)
    case setRoundingMode_21 of
      setRoundingModeEnv_0 => L_2260
  block L_2260 (env_884: (word32, cpointer, lambdas_155) tuple)
    call L_2261 (setRoundingMode_3 (env_884, x_943 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2261 (x_2492: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2262
  block L_2262 (env_885: unit)
    call L_2263 (round_2 (env_885, x_2482)) handle _ => raise
  block L_2263 (x_2493: real64)
    case setRoundingMode_21 of
      setRoundingModeEnv_0 => L_2264
  block L_2264 (env_886: (word32, cpointer, lambdas_155) tuple)
    call L_2265 (setRoundingMode_3 (env_886, m'_9)) handle _ => raise
  block L_2265 (x_2494: unit)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2266
  block L_2266 (env_887: unit)
    call tail toInt64Unsafe_2 (env_887, x_2493)
  block L_2255 ()
    val x_2495: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2482)
    case toInt64Unsafe_1 (*con toInt6 ... _218)*) of
      toInt64UnsafeEnv_1 => L_2267
  block L_2267 (env_888: unit)
    call tail toInt64Unsafe_2 (env_888, x_2495)
fun x_1894 (env_889: (lambdas_68, lambdas_67, word64) tuple, x_2496: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_2268 ()
  block L_2268 ()
    val <<_16: lambdas_68 = #0 (env_889)
    val >>_16: lambdas_67 = #1 (env_889)
    val maxInt'_22: word64 = #2 (env_889)
    val x_2497: (word64, word32) tuple = (maxInt'_22, x_2496)
    case >>_16 of
      >>Env_4 => L_2269
  block L_2269 (env_890: (word32, word64) tuple)
    call L_2270 (>>_17 (env_890, x_2497)) handle _ => raise
  block L_2270 (x_2498: word64)
    val x_2499: (word64, word32) tuple = (x_2498, x_2496)
    case <<_16 of
      <<Env_4 => L_2271
  block L_2271 (env_891: (word32, word64) tuple)
    call tail <<_17 (env_891, x_2499)
fun x_2500 (env_892:
              (real64, real64, lambdas_29, real64, word32, real64, word32) tuple,
            x_2501: t_8):
  {returns = Some (lambdas_69), raises = Some (exn)} =
L_2272 ()
  block L_2272 ()
    val minInt_20: real64 = #0 (env_892)
    val maxInt_20: real64 = #1 (env_892)
    val setRoundingMode_22: lambdas_29 = #2 (env_892)
    val one_28: real64 = #3 (env_892)
    val maxInt'_23: word32 = #4 (env_892)
    val half_20: real64 = #5 (env_892)
    val minInt'_8: word32 = #6 (env_892)
    val x_2503:
      (word32, real64, word32, real64, lambdas_29, t_8, real64, real64) tuple =
      (minInt'_8,
       half_20,
       maxInt'_23,
       one_28,
       setRoundingMode_22,
       x_2501,
       maxInt_20,
       minInt_20)
    val x_2502: lambdas_69 = con xEnv_85 (x_2503)
    return (x_2502)
fun x_2504 (env_893:
              (word32, real64, word32, real64, lambdas_29, t_8, real64, real64) tuple,
            x_2505: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_2273 ()
  block L_2273 ()
    val minInt'_9: word32 = #0 (env_893)
    val half_21: real64 = #1 (env_893)
    val maxInt'_24: word32 = #2 (env_893)
    val one_29: real64 = #3 (env_893)
    val setRoundingMode_23: lambdas_29 = #4 (env_893)
    val x_2507: t_8 = #5 (env_893)
    val maxInt_21: real64 = #6 (env_893)
    val minInt_21: real64 = #7 (env_893)
    val x_2506: (real64, real64) tuple = (minInt_21, x_2505)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2274
  block L_2274 (env_894: unit)
    call L_2275 (<=_5 (env_894, x_2506)) handle _ => raise
  block L_2275 (x_2508: bool)
    case x_2508 of
      true => L_2277 | false => L_2276
  block L_2276 ()
    val x_2509: (real64, real64) tuple = (x_2505, minInt_21)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2278
  block L_2278 (env_895: unit)
    call L_2279 (<_8 (env_895, x_2509)) handle _ => raise
  block L_2279 (x_2510: bool)
    case x_2510 of
      true => L_2281 | false => L_2280
  block L_2280 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2281 ()
    val x_2511: (real64, real64) tuple = (minInt_21, one_29)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2282
  block L_2282 (env_896: unit)
    call L_2283 (-_4 (env_896, x_2511)) handle _ => raise
  block L_2283 (x_2512: real64)
    val x_2513: (real64, real64) tuple = (x_2512, x_2505)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2284
  block L_2284 (env_897: unit)
    call L_2285 (<_8 (env_897, x_2513)) handle _ => raise
  block L_2285 (x_2514: bool)
    case x_2514 of
      true => L_2287 | false => L_2286
  block L_2286 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2287 ()
    case x_2507 of
      TO_NEGINF_0 => L_2291
    | TO_ZERO_0 => L_2290
    | TO_NEAREST_0 => L_2289
    | TO_POSINF_0 => L_2288
  block L_2288 ()
    return (minInt'_9)
  block L_2289 ()
    val x_2515: (real64, real64) tuple = (x_2505, minInt_21)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2292
  block L_2292 (env_898: unit)
    call L_2293 (-_4 (env_898, x_2515)) handle _ => raise
  block L_2293 (x_2516: real64)
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2294
  block L_2294 (env_899: unit)
    call L_2295 (~_2 (env_899, half_21)) handle _ => raise
  block L_2295 (x_2517: real64)
    val x_2518: (real64, real64) tuple = (x_2516, x_2517)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2296
  block L_2296 (env_900: unit)
    call L_2297 (<_8 (env_900, x_2518)) handle _ => raise
  block L_2297 (x_2519: bool)
    case x_2519 of
      true => L_2299 | false => L_2298
  block L_2298 ()
    return (minInt'_9)
  block L_2299 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2290 ()
    return (minInt'_9)
  block L_2291 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2277 ()
    val x_2520: (real64, real64) tuple = (x_2505, maxInt_21)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2300
  block L_2300 (env_901: unit)
    call L_2301 (<=_5 (env_901, x_2520)) handle _ => raise
  block L_2301 (x_2521: bool)
    case x_2521 of
      true => L_2303 | false => L_2302
  block L_2302 ()
    val x_2522: (real64, real64) tuple = (maxInt_21, one_29)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_2304
  block L_2304 (env_902: unit)
    call L_2305 (+_3 (env_902, x_2522)) handle _ => raise
  block L_2305 (x_2523: real64)
    val x_2524: (real64, real64) tuple = (x_2505, x_2523)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2306
  block L_2306 (env_903: unit)
    call L_2307 (<_8 (env_903, x_2524)) handle _ => raise
  block L_2307 (x_2525: bool)
    case x_2525 of
      true => L_2309 | false => L_2308
  block L_2308 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2309 ()
    case x_2507 of
      TO_NEGINF_0 => L_2313
    | TO_ZERO_0 => L_2312
    | TO_NEAREST_0 => L_2311
    | TO_POSINF_0 => L_2310
  block L_2310 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2311 ()
    val x_2526: (real64, real64) tuple = (x_2505, maxInt_21)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2314
  block L_2314 (env_904: unit)
    call L_2315 (-_4 (env_904, x_2526)) handle _ => raise
  block L_2315 (x_2527: real64)
    val x_2528: (real64, real64) tuple = (x_2527, half_21)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_2316
  block L_2316 (env_905: unit)
    call L_2317 (>=_7 (env_905, x_2528)) handle _ => raise
  block L_2317 (x_2529: bool)
    case x_2529 of
      true => L_2319 | false => L_2318
  block L_2318 ()
    return (maxInt'_24)
  block L_2319 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2312 ()
    return (maxInt'_24)
  block L_2313 ()
    return (maxInt'_24)
  block L_2303 ()
    case x_2507 of
      TO_POSINF_0 => L_2323
    | TO_NEAREST_0 => L_2322
    | TO_ZERO_0 => L_2321
    | TO_NEGINF_0 => L_2320
  block L_2320 ()
    val x_2530: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2505)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2324
  block L_2324 (env_906: unit)
    call tail toInt32Unsafe_2 (env_906, x_2530)
  block L_2321 ()
    val x_2531: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2505)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2325
  block L_2325 (env_907: unit)
    call tail toInt32Unsafe_2 (env_907, x_2531)
  block L_2322 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2326
  block L_2326 (env_908: unit)
    call L_2327 (x_2228 (env_908, x_941 (*()*))) handle _ => raise
  block L_2327 (m'_10: t_8)
    case setRoundingMode_23 of
      setRoundingModeEnv_0 => L_2328
  block L_2328 (env_909: (word32, cpointer, lambdas_155) tuple)
    call L_2329 (setRoundingMode_3 (env_909, x_940 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2329 (x_2532: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2330
  block L_2330 (env_910: unit)
    call L_2331 (round_2 (env_910, x_2505)) handle _ => raise
  block L_2331 (x_2533: real64)
    case setRoundingMode_23 of
      setRoundingModeEnv_0 => L_2332
  block L_2332 (env_911: (word32, cpointer, lambdas_155) tuple)
    call L_2333 (setRoundingMode_3 (env_911, m'_10)) handle _ => raise
  block L_2333 (x_2534: unit)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2334
  block L_2334 (env_912: unit)
    call tail toInt32Unsafe_2 (env_912, x_2533)
  block L_2323 ()
    val x_2535: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2505)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2335
  block L_2335 (env_913: unit)
    call tail toInt32Unsafe_2 (env_913, x_2535)
fun x_2536 (env_914: (real64, real64, lambdas_29) tuple, x_2537: t_8):
  {returns = Some (lambdas_71), raises = Some (exn)} =
L_2336 ()
  block L_2336 ()
    val minInt_22: real64 = #0 (env_914)
    val maxInt_22: real64 = #1 (env_914)
    val setRoundingMode_24: lambdas_29 = #2 (env_914)
    val x_2539: (lambdas_29, t_8, real64, real64) tuple =
      (setRoundingMode_24, x_2537, maxInt_22, minInt_22)
    val x_2538: lambdas_71 = con xEnv_87 (x_2539)
    return (x_2538)
fun x_2540 (env_915: (lambdas_29, t_8, real64, real64) tuple, x_2541: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_2337 ()
  block L_2337 ()
    val setRoundingMode_25: lambdas_29 = #0 (env_915)
    val x_2543: t_8 = #1 (env_915)
    val maxInt_23: real64 = #2 (env_915)
    val minInt_23: real64 = #3 (env_915)
    val x_2542: (real64, real64) tuple = (minInt_23, x_2541)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2338
  block L_2338 (env_916: unit)
    call L_2339 (<=_5 (env_916, x_2542)) handle _ => raise
  block L_2339 (x_2544: bool)
    case x_2544 of
      true => L_2341 | false => L_2340
  block L_2340 ()
    val x_2545: (real64, real64) tuple = (x_2541, minInt_23)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2342
  block L_2342 (env_917: unit)
    call L_2343 (<_8 (env_917, x_2545)) handle _ => raise
  block L_2343 (x_2546: bool)
    case x_2546 of
      true => L_2345 | false => L_2344
  block L_2344 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2345 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2341 ()
    val x_2547: (real64, real64) tuple = (x_2541, maxInt_23)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2346
  block L_2346 (env_918: unit)
    call L_2347 (<=_5 (env_918, x_2547)) handle _ => raise
  block L_2347 (x_2548: bool)
    case x_2548 of
      true => L_2349 | false => L_2348
  block L_2348 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2349 ()
    case x_2543 of
      TO_POSINF_0 => L_2353
    | TO_NEAREST_0 => L_2352
    | TO_ZERO_0 => L_2351
    | TO_NEGINF_0 => L_2350
  block L_2350 ()
    val x_2549: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2541)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2354
  block L_2354 (env_919: unit)
    call tail toInt32Unsafe_2 (env_919, x_2549)
  block L_2351 ()
    val x_2550: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2541)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2355
  block L_2355 (env_920: unit)
    call tail toInt32Unsafe_2 (env_920, x_2550)
  block L_2352 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2356
  block L_2356 (env_921: unit)
    call L_2357 (x_2228 (env_921, x_938 (*()*))) handle _ => raise
  block L_2357 (m'_11: t_8)
    case setRoundingMode_25 of
      setRoundingModeEnv_0 => L_2358
  block L_2358 (env_922: (word32, cpointer, lambdas_155) tuple)
    call L_2359 (setRoundingMode_3 (env_922, x_937 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2359 (x_2551: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2360
  block L_2360 (env_923: unit)
    call L_2361 (round_2 (env_923, x_2541)) handle _ => raise
  block L_2361 (x_2552: real64)
    case setRoundingMode_25 of
      setRoundingModeEnv_0 => L_2362
  block L_2362 (env_924: (word32, cpointer, lambdas_155) tuple)
    call L_2363 (setRoundingMode_3 (env_924, m'_11)) handle _ => raise
  block L_2363 (x_2553: unit)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2364
  block L_2364 (env_925: unit)
    call tail toInt32Unsafe_2 (env_925, x_2552)
  block L_2353 ()
    val x_2554: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2541)
    case toInt32Unsafe_1 (*con toInt3 ... _217)*) of
      toInt32UnsafeEnv_1 => L_2365
  block L_2365 (env_926: unit)
    call tail toInt32Unsafe_2 (env_926, x_2554)
fun x_1881 (env_927: (lambdas_76, lambdas_75, word32) tuple, x_2555: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2366 ()
  block L_2366 ()
    val <<_18: lambdas_76 = #0 (env_927)
    val >>_18: lambdas_75 = #1 (env_927)
    val maxInt'_25: word32 = #2 (env_927)
    val x_2556: (word32, word32) tuple = (maxInt'_25, x_2555)
    case >>_18 of
      >>Env_5 => L_2367
  block L_2367 (env_928: (word32, word32) tuple)
    call L_2368 (>>_19 (env_928, x_2556)) handle _ => raise
  block L_2368 (x_2557: word32)
    val x_2558: (word32, word32) tuple = (x_2557, x_2555)
    case <<_18 of
      <<Env_5 => L_2369
  block L_2369 (env_929: (word32, word32) tuple)
    call tail <<_19 (env_929, x_2558)
fun x_2559 (env_930:
              (real64, real64, lambdas_29, real64, word16, real64, word16) tuple,
            x_2560: t_8):
  {returns = Some (lambdas_77), raises = Some (exn)} =
L_2370 ()
  block L_2370 ()
    val minInt_24: real64 = #0 (env_930)
    val maxInt_24: real64 = #1 (env_930)
    val setRoundingMode_26: lambdas_29 = #2 (env_930)
    val one_30: real64 = #3 (env_930)
    val maxInt'_26: word16 = #4 (env_930)
    val half_22: real64 = #5 (env_930)
    val minInt'_10: word16 = #6 (env_930)
    val x_2562:
      (word16, real64, word16, real64, lambdas_29, t_8, real64, real64) tuple =
      (minInt'_10,
       half_22,
       maxInt'_26,
       one_30,
       setRoundingMode_26,
       x_2560,
       maxInt_24,
       minInt_24)
    val x_2561: lambdas_77 = con xEnv_92 (x_2562)
    return (x_2561)
fun x_2563 (env_931:
              (word16, real64, word16, real64, lambdas_29, t_8, real64, real64) tuple,
            x_2564: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_2371 ()
  block L_2371 ()
    val minInt'_11: word16 = #0 (env_931)
    val half_23: real64 = #1 (env_931)
    val maxInt'_27: word16 = #2 (env_931)
    val one_31: real64 = #3 (env_931)
    val setRoundingMode_27: lambdas_29 = #4 (env_931)
    val x_2566: t_8 = #5 (env_931)
    val maxInt_25: real64 = #6 (env_931)
    val minInt_25: real64 = #7 (env_931)
    val x_2565: (real64, real64) tuple = (minInt_25, x_2564)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2372
  block L_2372 (env_932: unit)
    call L_2373 (<=_5 (env_932, x_2565)) handle _ => raise
  block L_2373 (x_2567: bool)
    case x_2567 of
      true => L_2375 | false => L_2374
  block L_2374 ()
    val x_2568: (real64, real64) tuple = (x_2564, minInt_25)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2376
  block L_2376 (env_933: unit)
    call L_2377 (<_8 (env_933, x_2568)) handle _ => raise
  block L_2377 (x_2569: bool)
    case x_2569 of
      true => L_2379 | false => L_2378
  block L_2378 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2379 ()
    val x_2570: (real64, real64) tuple = (minInt_25, one_31)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2380
  block L_2380 (env_934: unit)
    call L_2381 (-_4 (env_934, x_2570)) handle _ => raise
  block L_2381 (x_2571: real64)
    val x_2572: (real64, real64) tuple = (x_2571, x_2564)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2382
  block L_2382 (env_935: unit)
    call L_2383 (<_8 (env_935, x_2572)) handle _ => raise
  block L_2383 (x_2573: bool)
    case x_2573 of
      true => L_2385 | false => L_2384
  block L_2384 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2385 ()
    case x_2566 of
      TO_NEGINF_0 => L_2389
    | TO_ZERO_0 => L_2388
    | TO_NEAREST_0 => L_2387
    | TO_POSINF_0 => L_2386
  block L_2386 ()
    return (minInt'_11)
  block L_2387 ()
    val x_2574: (real64, real64) tuple = (x_2564, minInt_25)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2390
  block L_2390 (env_936: unit)
    call L_2391 (-_4 (env_936, x_2574)) handle _ => raise
  block L_2391 (x_2575: real64)
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2392
  block L_2392 (env_937: unit)
    call L_2393 (~_2 (env_937, half_23)) handle _ => raise
  block L_2393 (x_2576: real64)
    val x_2577: (real64, real64) tuple = (x_2575, x_2576)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2394
  block L_2394 (env_938: unit)
    call L_2395 (<_8 (env_938, x_2577)) handle _ => raise
  block L_2395 (x_2578: bool)
    case x_2578 of
      true => L_2397 | false => L_2396
  block L_2396 ()
    return (minInt'_11)
  block L_2397 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2388 ()
    return (minInt'_11)
  block L_2389 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2375 ()
    val x_2579: (real64, real64) tuple = (x_2564, maxInt_25)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2398
  block L_2398 (env_939: unit)
    call L_2399 (<=_5 (env_939, x_2579)) handle _ => raise
  block L_2399 (x_2580: bool)
    case x_2580 of
      true => L_2401 | false => L_2400
  block L_2400 ()
    val x_2581: (real64, real64) tuple = (maxInt_25, one_31)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_2402
  block L_2402 (env_940: unit)
    call L_2403 (+_3 (env_940, x_2581)) handle _ => raise
  block L_2403 (x_2582: real64)
    val x_2583: (real64, real64) tuple = (x_2564, x_2582)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2404
  block L_2404 (env_941: unit)
    call L_2405 (<_8 (env_941, x_2583)) handle _ => raise
  block L_2405 (x_2584: bool)
    case x_2584 of
      true => L_2407 | false => L_2406
  block L_2406 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2407 ()
    case x_2566 of
      TO_NEGINF_0 => L_2411
    | TO_ZERO_0 => L_2410
    | TO_NEAREST_0 => L_2409
    | TO_POSINF_0 => L_2408
  block L_2408 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2409 ()
    val x_2585: (real64, real64) tuple = (x_2564, maxInt_25)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2412
  block L_2412 (env_942: unit)
    call L_2413 (-_4 (env_942, x_2585)) handle _ => raise
  block L_2413 (x_2586: real64)
    val x_2587: (real64, real64) tuple = (x_2586, half_23)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_2414
  block L_2414 (env_943: unit)
    call L_2415 (>=_7 (env_943, x_2587)) handle _ => raise
  block L_2415 (x_2588: bool)
    case x_2588 of
      true => L_2417 | false => L_2416
  block L_2416 ()
    return (maxInt'_27)
  block L_2417 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2410 ()
    return (maxInt'_27)
  block L_2411 ()
    return (maxInt'_27)
  block L_2401 ()
    case x_2566 of
      TO_POSINF_0 => L_2421
    | TO_NEAREST_0 => L_2420
    | TO_ZERO_0 => L_2419
    | TO_NEGINF_0 => L_2418
  block L_2418 ()
    val x_2589: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2564)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2422
  block L_2422 (env_944: unit)
    call tail toInt16Unsafe_2 (env_944, x_2589)
  block L_2419 ()
    val x_2590: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2564)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2423
  block L_2423 (env_945: unit)
    call tail toInt16Unsafe_2 (env_945, x_2590)
  block L_2420 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2424
  block L_2424 (env_946: unit)
    call L_2425 (x_2228 (env_946, x_935 (*()*))) handle _ => raise
  block L_2425 (m'_12: t_8)
    case setRoundingMode_27 of
      setRoundingModeEnv_0 => L_2426
  block L_2426 (env_947: (word32, cpointer, lambdas_155) tuple)
    call L_2427 (setRoundingMode_3 (env_947, x_934 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2427 (x_2591: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2428
  block L_2428 (env_948: unit)
    call L_2429 (round_2 (env_948, x_2564)) handle _ => raise
  block L_2429 (x_2592: real64)
    case setRoundingMode_27 of
      setRoundingModeEnv_0 => L_2430
  block L_2430 (env_949: (word32, cpointer, lambdas_155) tuple)
    call L_2431 (setRoundingMode_3 (env_949, m'_12)) handle _ => raise
  block L_2431 (x_2593: unit)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2432
  block L_2432 (env_950: unit)
    call tail toInt16Unsafe_2 (env_950, x_2592)
  block L_2421 ()
    val x_2594: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2564)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2433
  block L_2433 (env_951: unit)
    call tail toInt16Unsafe_2 (env_951, x_2594)
fun x_2595 (env_952: (real64, real64, lambdas_29) tuple, x_2596: t_8):
  {returns = Some (lambdas_79), raises = Some (exn)} =
L_2434 ()
  block L_2434 ()
    val minInt_26: real64 = #0 (env_952)
    val maxInt_26: real64 = #1 (env_952)
    val setRoundingMode_28: lambdas_29 = #2 (env_952)
    val x_2598: (lambdas_29, t_8, real64, real64) tuple =
      (setRoundingMode_28, x_2596, maxInt_26, minInt_26)
    val x_2597: lambdas_79 = con xEnv_94 (x_2598)
    return (x_2597)
fun x_2599 (env_953: (lambdas_29, t_8, real64, real64) tuple, x_2600: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_2435 ()
  block L_2435 ()
    val setRoundingMode_29: lambdas_29 = #0 (env_953)
    val x_2602: t_8 = #1 (env_953)
    val maxInt_27: real64 = #2 (env_953)
    val minInt_27: real64 = #3 (env_953)
    val x_2601: (real64, real64) tuple = (minInt_27, x_2600)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2436
  block L_2436 (env_954: unit)
    call L_2437 (<=_5 (env_954, x_2601)) handle _ => raise
  block L_2437 (x_2603: bool)
    case x_2603 of
      true => L_2439 | false => L_2438
  block L_2438 ()
    val x_2604: (real64, real64) tuple = (x_2600, minInt_27)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2440
  block L_2440 (env_955: unit)
    call L_2441 (<_8 (env_955, x_2604)) handle _ => raise
  block L_2441 (x_2605: bool)
    case x_2605 of
      true => L_2443 | false => L_2442
  block L_2442 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2443 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2439 ()
    val x_2606: (real64, real64) tuple = (x_2600, maxInt_27)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2444
  block L_2444 (env_956: unit)
    call L_2445 (<=_5 (env_956, x_2606)) handle _ => raise
  block L_2445 (x_2607: bool)
    case x_2607 of
      true => L_2447 | false => L_2446
  block L_2446 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2447 ()
    case x_2602 of
      TO_POSINF_0 => L_2451
    | TO_NEAREST_0 => L_2450
    | TO_ZERO_0 => L_2449
    | TO_NEGINF_0 => L_2448
  block L_2448 ()
    val x_2608: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2600)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2452
  block L_2452 (env_957: unit)
    call tail toInt16Unsafe_2 (env_957, x_2608)
  block L_2449 ()
    val x_2609: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2600)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2453
  block L_2453 (env_958: unit)
    call tail toInt16Unsafe_2 (env_958, x_2609)
  block L_2450 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2454
  block L_2454 (env_959: unit)
    call L_2455 (x_2228 (env_959, x_932 (*()*))) handle _ => raise
  block L_2455 (m'_13: t_8)
    case setRoundingMode_29 of
      setRoundingModeEnv_0 => L_2456
  block L_2456 (env_960: (word32, cpointer, lambdas_155) tuple)
    call L_2457 (setRoundingMode_3 (env_960, x_931 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2457 (x_2610: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2458
  block L_2458 (env_961: unit)
    call L_2459 (round_2 (env_961, x_2600)) handle _ => raise
  block L_2459 (x_2611: real64)
    case setRoundingMode_29 of
      setRoundingModeEnv_0 => L_2460
  block L_2460 (env_962: (word32, cpointer, lambdas_155) tuple)
    call L_2461 (setRoundingMode_3 (env_962, m'_13)) handle _ => raise
  block L_2461 (x_2612: unit)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2462
  block L_2462 (env_963: unit)
    call tail toInt16Unsafe_2 (env_963, x_2611)
  block L_2451 ()
    val x_2613: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2600)
    case toInt16Unsafe_1 (*con toInt1 ... _216)*) of
      toInt16UnsafeEnv_1 => L_2463
  block L_2463 (env_964: unit)
    call tail toInt16Unsafe_2 (env_964, x_2613)
fun x_1868 (env_965: (lambdas_84, lambdas_83, word16) tuple, x_2614: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_2464 ()
  block L_2464 ()
    val <<_20: lambdas_84 = #0 (env_965)
    val >>_20: lambdas_83 = #1 (env_965)
    val maxInt'_28: word16 = #2 (env_965)
    val x_2615: (word16, word32) tuple = (maxInt'_28, x_2614)
    case >>_20 of
      >>Env_6 => L_2465
  block L_2465 (env_966: (word32, word16) tuple)
    call L_2466 (>>_21 (env_966, x_2615)) handle _ => raise
  block L_2466 (x_2616: word16)
    val x_2617: (word16, word32) tuple = (x_2616, x_2614)
    case <<_20 of
      <<Env_6 => L_2467
  block L_2467 (env_967: (word32, word16) tuple)
    call tail <<_21 (env_967, x_2617)
fun x_2618 (env_968:
              (real64, real64, lambdas_29, real64, word8, real64, word8) tuple,
            x_2619: t_8):
  {returns = Some (lambdas_85), raises = Some (exn)} =
L_2468 ()
  block L_2468 ()
    val minInt_28: real64 = #0 (env_968)
    val maxInt_28: real64 = #1 (env_968)
    val setRoundingMode_30: lambdas_29 = #2 (env_968)
    val one_32: real64 = #3 (env_968)
    val maxInt'_29: word8 = #4 (env_968)
    val half_24: real64 = #5 (env_968)
    val minInt'_12: word8 = #6 (env_968)
    val x_2621:
      (word8, real64, word8, real64, lambdas_29, t_8, real64, real64) tuple =
      (minInt'_12,
       half_24,
       maxInt'_29,
       one_32,
       setRoundingMode_30,
       x_2619,
       maxInt_28,
       minInt_28)
    val x_2620: lambdas_85 = con xEnv_99 (x_2621)
    return (x_2620)
fun x_2622 (env_969:
              (word8, real64, word8, real64, lambdas_29, t_8, real64, real64) tuple,
            x_2623: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_2469 ()
  block L_2469 ()
    val minInt'_13: word8 = #0 (env_969)
    val half_25: real64 = #1 (env_969)
    val maxInt'_30: word8 = #2 (env_969)
    val one_33: real64 = #3 (env_969)
    val setRoundingMode_31: lambdas_29 = #4 (env_969)
    val x_2625: t_8 = #5 (env_969)
    val maxInt_29: real64 = #6 (env_969)
    val minInt_29: real64 = #7 (env_969)
    val x_2624: (real64, real64) tuple = (minInt_29, x_2623)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2470
  block L_2470 (env_970: unit)
    call L_2471 (<=_5 (env_970, x_2624)) handle _ => raise
  block L_2471 (x_2626: bool)
    case x_2626 of
      true => L_2473 | false => L_2472
  block L_2472 ()
    val x_2627: (real64, real64) tuple = (x_2623, minInt_29)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2474
  block L_2474 (env_971: unit)
    call L_2475 (<_8 (env_971, x_2627)) handle _ => raise
  block L_2475 (x_2628: bool)
    case x_2628 of
      true => L_2477 | false => L_2476
  block L_2476 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2477 ()
    val x_2629: (real64, real64) tuple = (minInt_29, one_33)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2478
  block L_2478 (env_972: unit)
    call L_2479 (-_4 (env_972, x_2629)) handle _ => raise
  block L_2479 (x_2630: real64)
    val x_2631: (real64, real64) tuple = (x_2630, x_2623)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2480
  block L_2480 (env_973: unit)
    call L_2481 (<_8 (env_973, x_2631)) handle _ => raise
  block L_2481 (x_2632: bool)
    case x_2632 of
      true => L_2483 | false => L_2482
  block L_2482 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2483 ()
    case x_2625 of
      TO_NEGINF_0 => L_2487
    | TO_ZERO_0 => L_2486
    | TO_NEAREST_0 => L_2485
    | TO_POSINF_0 => L_2484
  block L_2484 ()
    return (minInt'_13)
  block L_2485 ()
    val x_2633: (real64, real64) tuple = (x_2623, minInt_29)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2488
  block L_2488 (env_974: unit)
    call L_2489 (-_4 (env_974, x_2633)) handle _ => raise
  block L_2489 (x_2634: real64)
    case ~_1 (*con ~Env_1 (x_202)*) of
      ~Env_1 => L_2490
  block L_2490 (env_975: unit)
    call L_2491 (~_2 (env_975, half_25)) handle _ => raise
  block L_2491 (x_2635: real64)
    val x_2636: (real64, real64) tuple = (x_2634, x_2635)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2492
  block L_2492 (env_976: unit)
    call L_2493 (<_8 (env_976, x_2636)) handle _ => raise
  block L_2493 (x_2637: bool)
    case x_2637 of
      true => L_2495 | false => L_2494
  block L_2494 ()
    return (minInt'_13)
  block L_2495 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2486 ()
    return (minInt'_13)
  block L_2487 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2473 ()
    val x_2638: (real64, real64) tuple = (x_2623, maxInt_29)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2496
  block L_2496 (env_977: unit)
    call L_2497 (<=_5 (env_977, x_2638)) handle _ => raise
  block L_2497 (x_2639: bool)
    case x_2639 of
      true => L_2499 | false => L_2498
  block L_2498 ()
    val x_2640: (real64, real64) tuple = (maxInt_29, one_33)
    case +_2 (*con +Env_2 (x_200)*) of
      +Env_2 => L_2500
  block L_2500 (env_978: unit)
    call L_2501 (+_3 (env_978, x_2640)) handle _ => raise
  block L_2501 (x_2641: real64)
    val x_2642: (real64, real64) tuple = (x_2623, x_2641)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2502
  block L_2502 (env_979: unit)
    call L_2503 (<_8 (env_979, x_2642)) handle _ => raise
  block L_2503 (x_2643: bool)
    case x_2643 of
      true => L_2505 | false => L_2504
  block L_2504 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2505 ()
    case x_2625 of
      TO_NEGINF_0 => L_2509
    | TO_ZERO_0 => L_2508
    | TO_NEAREST_0 => L_2507
    | TO_POSINF_0 => L_2506
  block L_2506 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2507 ()
    val x_2644: (real64, real64) tuple = (x_2623, maxInt_29)
    case -_2 (*con -Env_2 (x_201)*) of
      -Env_2 => L_2510
  block L_2510 (env_980: unit)
    call L_2511 (-_4 (env_980, x_2644)) handle _ => raise
  block L_2511 (x_2645: real64)
    val x_2646: (real64, real64) tuple = (x_2645, half_25)
    case >=_4 (*con >=Env_ ... e_12)*) of
      >=Env_4 => L_2512
  block L_2512 (env_981: unit)
    call L_2513 (>=_7 (env_981, x_2646)) handle _ => raise
  block L_2513 (x_2647: bool)
    case x_2647 of
      true => L_2515 | false => L_2514
  block L_2514 ()
    return (maxInt'_30)
  block L_2515 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2508 ()
    return (maxInt'_30)
  block L_2509 ()
    return (maxInt'_30)
  block L_2499 ()
    case x_2625 of
      TO_POSINF_0 => L_2519
    | TO_NEAREST_0 => L_2518
    | TO_ZERO_0 => L_2517
    | TO_NEGINF_0 => L_2516
  block L_2516 ()
    val x_2648: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2623)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2520
  block L_2520 (env_982: unit)
    call tail toInt8Unsafe_2 (env_982, x_2648)
  block L_2517 ()
    val x_2649: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2623)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2521
  block L_2521 (env_983: unit)
    call tail toInt8Unsafe_2 (env_983, x_2649)
  block L_2518 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2522
  block L_2522 (env_984: unit)
    call L_2523 (x_2228 (env_984, x_929 (*()*))) handle _ => raise
  block L_2523 (m'_14: t_8)
    case setRoundingMode_31 of
      setRoundingModeEnv_0 => L_2524
  block L_2524 (env_985: (word32, cpointer, lambdas_155) tuple)
    call L_2525 (setRoundingMode_3 (env_985, x_928 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2525 (x_2650: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2526
  block L_2526 (env_986: unit)
    call L_2527 (round_2 (env_986, x_2623)) handle _ => raise
  block L_2527 (x_2651: real64)
    case setRoundingMode_31 of
      setRoundingModeEnv_0 => L_2528
  block L_2528 (env_987: (word32, cpointer, lambdas_155) tuple)
    call L_2529 (setRoundingMode_3 (env_987, m'_14)) handle _ => raise
  block L_2529 (x_2652: unit)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2530
  block L_2530 (env_988: unit)
    call tail toInt8Unsafe_2 (env_988, x_2651)
  block L_2519 ()
    val x_2653: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2623)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2531
  block L_2531 (env_989: unit)
    call tail toInt8Unsafe_2 (env_989, x_2653)
fun x_2654 (env_990: (real64, real64, lambdas_29) tuple, x_2655: t_8):
  {returns = Some (lambdas_87), raises = Some (exn)} =
L_2532 ()
  block L_2532 ()
    val minInt_30: real64 = #0 (env_990)
    val maxInt_30: real64 = #1 (env_990)
    val setRoundingMode_32: lambdas_29 = #2 (env_990)
    val x_2657: (lambdas_29, t_8, real64, real64) tuple =
      (setRoundingMode_32, x_2655, maxInt_30, minInt_30)
    val x_2656: lambdas_87 = con xEnv_101 (x_2657)
    return (x_2656)
fun x_2658 (env_991: (lambdas_29, t_8, real64, real64) tuple, x_2659: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_2533 ()
  block L_2533 ()
    val setRoundingMode_33: lambdas_29 = #0 (env_991)
    val x_2661: t_8 = #1 (env_991)
    val maxInt_31: real64 = #2 (env_991)
    val minInt_31: real64 = #3 (env_991)
    val x_2660: (real64, real64) tuple = (minInt_31, x_2659)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2534
  block L_2534 (env_992: unit)
    call L_2535 (<=_5 (env_992, x_2660)) handle _ => raise
  block L_2535 (x_2662: bool)
    case x_2662 of
      true => L_2537 | false => L_2536
  block L_2536 ()
    val x_2663: (real64, real64) tuple = (x_2659, minInt_31)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_2538
  block L_2538 (env_993: unit)
    call L_2539 (<_8 (env_993, x_2663)) handle _ => raise
  block L_2539 (x_2664: bool)
    case x_2664 of
      true => L_2541 | false => L_2540
  block L_2540 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2541 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2537 ()
    val x_2665: (real64, real64) tuple = (x_2659, maxInt_31)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_2542
  block L_2542 (env_994: unit)
    call L_2543 (<=_5 (env_994, x_2665)) handle _ => raise
  block L_2543 (x_2666: bool)
    case x_2666 of
      true => L_2545 | false => L_2544
  block L_2544 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2545 ()
    case x_2661 of
      TO_POSINF_0 => L_2549
    | TO_NEAREST_0 => L_2548
    | TO_ZERO_0 => L_2547
    | TO_NEGINF_0 => L_2546
  block L_2546 ()
    val x_2667: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realFloor} (x_2659)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2550
  block L_2550 (env_995: unit)
    call tail toInt8Unsafe_2 (env_995, x_2667)
  block L_2547 ()
    val x_2668: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realTrunc} (x_2659)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2551
  block L_2551 (env_996: unit)
    call tail toInt8Unsafe_2 (env_996, x_2668)
  block L_2548 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2552
  block L_2552 (env_997: unit)
    call L_2553 (x_2228 (env_997, x_926 (*()*))) handle _ => raise
  block L_2553 (m'_15: t_8)
    case setRoundingMode_33 of
      setRoundingModeEnv_0 => L_2554
  block L_2554 (env_998: (word32, cpointer, lambdas_155) tuple)
    call L_2555 (setRoundingMode_3 (env_998, x_925 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2555 (x_2669: unit)
    case round_1 (*con roundE ... _205)*) of
      roundEnv_1 => L_2556
  block L_2556 (env_999: unit)
    call L_2557 (round_2 (env_999, x_2659)) handle _ => raise
  block L_2557 (x_2670: real64)
    case setRoundingMode_33 of
      setRoundingModeEnv_0 => L_2558
  block L_2558 (env_1000: (word32, cpointer, lambdas_155) tuple)
    call L_2559 (setRoundingMode_3 (env_1000, m'_15)) handle _ => raise
  block L_2559 (x_2671: unit)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2560
  block L_2560 (env_1001: unit)
    call tail toInt8Unsafe_2 (env_1001, x_2670)
  block L_2549 ()
    val x_2672: real64 =
      prim CFunction {args = (real64),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real64), res = Some Real64},
                      return = real64,
                      symbolScope = private,
                      target = Real64_realCeil} (x_2659)
    case toInt8Unsafe_1 (*con toInt8 ... _215)*) of
      toInt8UnsafeEnv_1 => L_2561
  block L_2561 (env_1002: unit)
    call tail toInt8Unsafe_2 (env_1002, x_2672)
fun x_1855 (env_1003: (lambdas_92, lambdas_91, word8) tuple, x_2673: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_2562 ()
  block L_2562 ()
    val <<_22: lambdas_92 = #0 (env_1003)
    val >>_22: lambdas_91 = #1 (env_1003)
    val maxInt'_31: word8 = #2 (env_1003)
    val x_2674: (word8, word32) tuple = (maxInt'_31, x_2673)
    case >>_22 of
      >>Env_7 => L_2563
  block L_2563 (env_1004: (word32, word8) tuple)
    call L_2564 (>>_23 (env_1004, x_2674)) handle _ => raise
  block L_2564 (x_2675: word8)
    val x_2676: (word8, word32) tuple = (x_2675, x_2673)
    case <<_22 of
      <<Env_7 => L_2565
  block L_2565 (env_1005: (word32, word8) tuple)
    call tail <<_23 (env_1005, x_2676)
fun x_2677 (env_1006: lambdas_29, x_2678: t_8):
  {returns = Some (lambdas_93), raises = Some (exn)} =
L_2566 ()
  block L_2566 ()
    val x_2680: (t_8, lambdas_29) tuple = (x_2678, env_1006)
    val x_2679: lambdas_93 = con xEnv_106 (x_2680)
    return (x_2679)
fun x_2681 (env_1007: (t_8, lambdas_29) tuple, x_2682: real32):
  {returns = Some (real64), raises = Some (exn)} =
L_2567 ()
  block L_2567 ()
    val x_2683: t_8 = #0 (env_1007)
    val setRoundingMode_34: lambdas_29 = #1 (env_1007)
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2568
  block L_2568 (env_1008: unit)
    call L_2569 (x_2228 (env_1008, x_923 (*()*))) handle _ => raise
  block L_2569 (m'_16: t_8)
    case setRoundingMode_34 of
      setRoundingModeEnv_0 => L_2570
  block L_2570 (env_1009: (word32, cpointer, lambdas_155) tuple)
    call L_2571 (setRoundingMode_3 (env_1009, x_2683)) handle _ => raise
  block L_2571 (x_2684: unit)
    case fromReal32Unsafe_1 (*con fromRe ... _210)*) of
      fromReal32UnsafeEnv_1 => L_2572
  block L_2572 (env_1010: unit)
    call L_2573 (fromReal32Unsafe_2 (env_1010, x_2682)) handle _ => raise
  block L_2573 (x_2685: real64)
    case setRoundingMode_34 of
      setRoundingModeEnv_0 => L_2574
  block L_2574 (env_1011: (word32, cpointer, lambdas_155) tuple)
    call L_2575 (setRoundingMode_3 (env_1011, m'_16)) handle _ => raise
  block L_2575 (x_2686: unit)
    return (x_2685)
fun x_2687 (env_1012: unit, x_2688: t_8):
  {returns = Some (lambdas_251), raises = Some (exn)} =
L_2576 ()
  block L_2576 ()
    return (fromReal32Unsafe_1 (*con fromRe ... _210)*))
fun class_4 (env_1013: (word64, word64, word64) tuple, x_2689: real64):
  {returns = Some (float_class_0), raises = Some (exn)} =
L_2577 ()
  block L_2577 ()
    val zero_34: word64 = #0 (env_1013)
    val significandMask_2: word64 = #1 (env_1013)
    val exponentMask_2: word64 = #2 (env_1013)
    val x_2691: word64 = prim Real64_castToWord64 (x_2689)
    val x_2690: (word64, word64) tuple = (x_2691, exponentMask_2)
    case andb_1 (*con andbEn ... _127)*) of
      andbEnv_1 => L_2578
  block L_2578 (env_1014: unit)
    call L_2579 (andb_2 (env_1014, x_2690)) handle _ => raise
  block L_2579 (x_2692: word64)
    val x_2693: (word64, word64) tuple = (x_2692, exponentMask_2)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2580
  block L_2580 (env_1015: unit)
    call L_2581 (x_1234 (env_1015, x_2693)) handle _ => raise
  block L_2581 (x_2694: bool)
    case x_2694 of
      true => L_2583 | false => L_2582
  block L_2582 ()
    val x_2695: (word64, word64) tuple = (x_2691, exponentMask_2)
    case andb_1 (*con andbEn ... _127)*) of
      andbEnv_1 => L_2584
  block L_2584 (env_1016: unit)
    call L_2585 (andb_2 (env_1016, x_2695)) handle _ => raise
  block L_2585 (x_2696: word64)
    val x_2697: (word64, word64) tuple = (x_2696, zero_34)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2586
  block L_2586 (env_1017: unit)
    call L_2587 (x_1234 (env_1017, x_2697)) handle _ => raise
  block L_2587 (x_2698: bool)
    case x_2698 of
      true => L_2589 | false => L_2588
  block L_2588 ()
    return (x_920 (*con NORMAL_1*))
  block L_2589 ()
    val x_2699: (word64, word64) tuple = (x_2691, significandMask_2)
    case andb_1 (*con andbEn ... _127)*) of
      andbEnv_1 => L_2590
  block L_2590 (env_1018: unit)
    call L_2591 (andb_2 (env_1018, x_2699)) handle _ => raise
  block L_2591 (x_2700: word64)
    val x_2701: (word64, word64) tuple = (x_2700, zero_34)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2592
  block L_2592 (env_1019: unit)
    call L_2593 (x_1234 (env_1019, x_2701)) handle _ => raise
  block L_2593 (x_2702: bool)
    case x_2702 of
      true => L_2595 | false => L_2594
  block L_2594 ()
    return (x_919 (*con SUBNORMAL_1*))
  block L_2595 ()
    return (x_918 (*con ZERO_1*))
  block L_2583 ()
    val x_2703: (word64, word64) tuple = (x_2691, significandMask_2)
    case andb_1 (*con andbEn ... _127)*) of
      andbEnv_1 => L_2596
  block L_2596 (env_1020: unit)
    call L_2597 (andb_2 (env_1020, x_2703)) handle _ => raise
  block L_2597 (x_2704: word64)
    val x_2705: (word64, word64) tuple = (x_2704, zero_34)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_2598
  block L_2598 (env_1021: unit)
    call L_2599 (x_1234 (env_1021, x_2705)) handle _ => raise
  block L_2599 (x_2706: bool)
    case x_2706 of
      true => L_2601 | false => L_2600
  block L_2600 ()
    return (x_917 (*con NAN_1*))
  block L_2601 ()
    return (x_916 (*con INF_0*))
fun mkMask_1 (env_1022: (lambdas_36, word64) tuple, x_2707: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_2602 ()
  block L_2602 ()
    val <<_24: lambdas_36 = #0 (env_1022)
    val zero_35: word64 = #1 (env_1022)
    case notb_3 (*con notbEn ... _129)*) of
      notbEnv_3 => L_2603
  block L_2603 (env_1023: unit)
    call L_2604 (notb_7 (env_1023, zero_35)) handle _ => raise
  block L_2604 (x_2708: word64)
    val x_2709: (word64, word32) tuple = (x_2708, x_2707)
    case <<_24 of
      <<Env_0 => L_2605
  block L_2605 (env_1024: (word32, word64) tuple)
    call L_2606 (<<_9 (env_1024, x_2709)) handle _ => raise
  block L_2606 (x_2710: word64)
    case notb_3 (*con notbEn ... _129)*) of
      notbEnv_3 => L_2607
  block L_2607 (env_1025: unit)
    call tail notb_7 (env_1025, x_2710)
fun x_2711 (env_1026:
              (lambdas_99,
               real32,
               real32,
               lambdas_29,
               real32,
               word64,
               real32,
               word64) tuple,
            x_2712: t_8):
  {returns = Some (lambdas_98), raises = Some (exn)} =
L_2608 ()
  block L_2608 ()
    val class_19: lambdas_99 = #0 (env_1026)
    val zero_36: real32 = #1 (env_1026)
    val maxWord_32: real32 = #2 (env_1026)
    val setRoundingMode_35: lambdas_29 = #3 (env_1026)
    val one_34: real32 = #4 (env_1026)
    val maxWord'_32: word64 = #5 (env_1026)
    val half_26: real32 = #6 (env_1026)
    val zero_37: word64 = #7 (env_1026)
    val x_2714:
      (word64,
       real32,
       word64,
       real32,
       lambdas_29,
       t_8,
       real32,
       real32,
       lambdas_99) tuple =
      (zero_37,
       half_26,
       maxWord'_32,
       one_34,
       setRoundingMode_35,
       x_2712,
       maxWord_32,
       zero_36,
       class_19)
    val x_2713: lambdas_98 = con xEnv_110 (x_2714)
    return (x_2713)
fun x_2715 (env_1027:
              (word64,
               real32,
               word64,
               real32,
               lambdas_29,
               t_8,
               real32,
               real32,
               lambdas_99) tuple,
            x_2716: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_2609 ()
  block L_2609 ()
    val zero_39: word64 = #0 (env_1027)
    val half_27: real32 = #1 (env_1027)
    val maxWord'_33: word64 = #2 (env_1027)
    val one_35: real32 = #3 (env_1027)
    val setRoundingMode_36: lambdas_29 = #4 (env_1027)
    val x_2717: t_8 = #5 (env_1027)
    val maxWord_33: real32 = #6 (env_1027)
    val zero_38: real32 = #7 (env_1027)
    val class_20: lambdas_99 = #8 (env_1027)
    case class_20 of
      classEnv_1 => L_2610
  block L_2610 (env_1028: (word32, word32, word32) tuple)
    call L_2611 (class_21 (env_1028, x_2716)) handle _ => raise
  block L_2611 (x_2718: float_class_0)
    case x_2718 of
      INF_0 => L_2613 | NAN_1 => L_2612 | _ => L_2614
  block L_2614 ()
    val x_2719: (real32, real32) tuple = (zero_38, x_2716)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2615
  block L_2615 (env_1029: unit)
    call L_2616 (<=_6 (env_1029, x_2719)) handle _ => raise
  block L_2616 (x_2720: bool)
    case x_2720 of
      true => L_2618 | false => L_2617
  block L_2617 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2619
  block L_2619 (env_1030: unit)
    call L_2620 (~_3 (env_1030, one_35)) handle _ => raise
  block L_2620 (x_2721: real32)
    val x_2722: (real32, real32) tuple = (x_2716, x_2721)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2621
  block L_2621 (env_1031: unit)
    call L_2622 (>_8 (env_1031, x_2722)) handle _ => raise
  block L_2622 (x_2723: bool)
    case x_2723 of
      true => L_2624 | false => L_2623
  block L_2623 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2624 ()
    case x_2717 of
      TO_NEGINF_0 => L_2628
    | TO_ZERO_0 => L_2627
    | TO_NEAREST_0 => L_2626
    | TO_POSINF_0 => L_2625
  block L_2625 ()
    return (zero_39)
  block L_2626 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2629
  block L_2629 (env_1032: unit)
    call L_2630 (~_3 (env_1032, half_27)) handle _ => raise
  block L_2630 (x_2724: real32)
    val x_2725: (real32, real32) tuple = (x_2716, x_2724)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2631
  block L_2631 (env_1033: unit)
    call L_2632 (<_9 (env_1033, x_2725)) handle _ => raise
  block L_2632 (x_2726: bool)
    case x_2726 of
      true => L_2634 | false => L_2633
  block L_2633 ()
    return (zero_39)
  block L_2634 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2627 ()
    return (zero_39)
  block L_2628 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2618 ()
    val x_2727: (real32, real32) tuple = (x_2716, maxWord_33)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2635
  block L_2635 (env_1034: unit)
    call L_2636 (<=_6 (env_1034, x_2727)) handle _ => raise
  block L_2636 (x_2728: bool)
    case x_2728 of
      true => L_2638 | false => L_2637
  block L_2637 ()
    val x_2729: (real32, real32) tuple = (maxWord_33, one_35)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_2639
  block L_2639 (env_1035: unit)
    call L_2640 (+_4 (env_1035, x_2729)) handle _ => raise
  block L_2640 (x_2730: real32)
    val x_2731: (real32, real32) tuple = (x_2716, x_2730)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2641
  block L_2641 (env_1036: unit)
    call L_2642 (<_9 (env_1036, x_2731)) handle _ => raise
  block L_2642 (x_2732: bool)
    case x_2732 of
      true => L_2644 | false => L_2643
  block L_2643 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2644 ()
    case x_2717 of
      TO_NEGINF_0 => L_2648
    | TO_ZERO_0 => L_2647
    | TO_NEAREST_0 => L_2646
    | TO_POSINF_0 => L_2645
  block L_2645 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2646 ()
    val x_2733: (real32, real32) tuple = (x_2716, maxWord_33)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_2649
  block L_2649 (env_1037: unit)
    call L_2650 (-_5 (env_1037, x_2733)) handle _ => raise
  block L_2650 (x_2734: real32)
    val x_2735: (real32, real32) tuple = (x_2734, half_27)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_2651
  block L_2651 (env_1038: unit)
    call L_2652 (>=_8 (env_1038, x_2735)) handle _ => raise
  block L_2652 (x_2736: bool)
    case x_2736 of
      true => L_2654 | false => L_2653
  block L_2653 ()
    return (maxWord'_33)
  block L_2654 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2647 ()
    return (maxWord'_33)
  block L_2648 ()
    return (maxWord'_33)
  block L_2638 ()
    case x_2717 of
      TO_POSINF_0 => L_2658
    | TO_NEAREST_0 => L_2657
    | TO_ZERO_0 => L_2656
    | TO_NEGINF_0 => L_2655
  block L_2655 ()
    val x_2737: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2716)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2659
  block L_2659 (env_1039: unit)
    call tail toWord64Unsafe_3 (env_1039, x_2737)
  block L_2656 ()
    val x_2738: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2716)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2660
  block L_2660 (env_1040: unit)
    call tail toWord64Unsafe_3 (env_1040, x_2738)
  block L_2657 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2661
  block L_2661 (env_1041: unit)
    call L_2662 (x_2228 (env_1041, x_915 (*()*))) handle _ => raise
  block L_2662 (m'_17: t_8)
    case setRoundingMode_36 of
      setRoundingModeEnv_0 => L_2663
  block L_2663 (env_1042: (word32, cpointer, lambdas_155) tuple)
    call L_2664 (setRoundingMode_3 (env_1042, x_914 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2664 (x_2739: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_2665
  block L_2665 (env_1043: unit)
    call L_2666 (round_3 (env_1043, x_2716)) handle _ => raise
  block L_2666 (x_2740: real32)
    case setRoundingMode_36 of
      setRoundingModeEnv_0 => L_2667
  block L_2667 (env_1044: (word32, cpointer, lambdas_155) tuple)
    call L_2668 (setRoundingMode_3 (env_1044, m'_17)) handle _ => raise
  block L_2668 (x_2741: unit)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2669
  block L_2669 (env_1045: unit)
    call tail toWord64Unsafe_3 (env_1045, x_2740)
  block L_2658 ()
    val x_2742: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2716)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2670
  block L_2670 (env_1046: unit)
    call tail toWord64Unsafe_3 (env_1046, x_2742)
  block L_2612 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2613 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2743 (env_1047:
              (lambdas_99, real32, real32, lambdas_29, real32, word64, real32) tuple,
            x_2744: t_8):
  {returns = Some (lambdas_101), raises = Some (exn)} =
L_2671 ()
  block L_2671 ()
    val class_22: lambdas_99 = #0 (env_1047)
    val zero_40: real32 = #1 (env_1047)
    val maxWord_34: real32 = #2 (env_1047)
    val setRoundingMode_37: lambdas_29 = #3 (env_1047)
    val one_36: real32 = #4 (env_1047)
    val zero_41: word64 = #5 (env_1047)
    val half_28: real32 = #6 (env_1047)
    val x_2746:
      (real32, word64, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple =
      (half_28,
       zero_41,
       one_36,
       setRoundingMode_37,
       x_2744,
       maxWord_34,
       zero_40,
       class_22)
    val x_2745: lambdas_101 = con xEnv_112 (x_2746)
    return (x_2745)
fun x_2747 (env_1048:
              (real32,
               word64,
               real32,
               lambdas_29,
               t_8,
               real32,
               real32,
               lambdas_99) tuple,
            x_2748: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_2672 ()
  block L_2672 ()
    val half_29: real32 = #0 (env_1048)
    val zero_43: word64 = #1 (env_1048)
    val one_37: real32 = #2 (env_1048)
    val setRoundingMode_38: lambdas_29 = #3 (env_1048)
    val x_2749: t_8 = #4 (env_1048)
    val maxWord_35: real32 = #5 (env_1048)
    val zero_42: real32 = #6 (env_1048)
    val class_23: lambdas_99 = #7 (env_1048)
    case class_23 of
      classEnv_1 => L_2673
  block L_2673 (env_1049: (word32, word32, word32) tuple)
    call L_2674 (class_21 (env_1049, x_2748)) handle _ => raise
  block L_2674 (x_2750: float_class_0)
    case x_2750 of
      INF_0 => L_2676 | NAN_1 => L_2675 | _ => L_2677
  block L_2677 ()
    val x_2751: (real32, real32) tuple = (zero_42, x_2748)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2678
  block L_2678 (env_1050: unit)
    call L_2679 (<=_6 (env_1050, x_2751)) handle _ => raise
  block L_2679 (x_2752: bool)
    case x_2752 of
      true => L_2681 | false => L_2680
  block L_2680 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2682
  block L_2682 (env_1051: unit)
    call L_2683 (~_3 (env_1051, one_37)) handle _ => raise
  block L_2683 (x_2753: real32)
    val x_2754: (real32, real32) tuple = (x_2748, x_2753)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2684
  block L_2684 (env_1052: unit)
    call L_2685 (>_8 (env_1052, x_2754)) handle _ => raise
  block L_2685 (x_2755: bool)
    case x_2755 of
      true => L_2687 | false => L_2686
  block L_2686 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2687 ()
    case x_2749 of
      TO_NEGINF_0 => L_2691
    | TO_ZERO_0 => L_2690
    | TO_NEAREST_0 => L_2689
    | TO_POSINF_0 => L_2688
  block L_2688 ()
    return (zero_43)
  block L_2689 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2692
  block L_2692 (env_1053: unit)
    call L_2693 (~_3 (env_1053, half_29)) handle _ => raise
  block L_2693 (x_2756: real32)
    val x_2757: (real32, real32) tuple = (x_2748, x_2756)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2694
  block L_2694 (env_1054: unit)
    call L_2695 (<_9 (env_1054, x_2757)) handle _ => raise
  block L_2695 (x_2758: bool)
    case x_2758 of
      true => L_2697 | false => L_2696
  block L_2696 ()
    return (zero_43)
  block L_2697 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2690 ()
    return (zero_43)
  block L_2691 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2681 ()
    val x_2759: (real32, real32) tuple = (x_2748, maxWord_35)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2698
  block L_2698 (env_1055: unit)
    call L_2699 (<=_6 (env_1055, x_2759)) handle _ => raise
  block L_2699 (x_2760: bool)
    case x_2760 of
      true => L_2701 | false => L_2700
  block L_2700 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2701 ()
    case x_2749 of
      TO_POSINF_0 => L_2705
    | TO_NEAREST_0 => L_2704
    | TO_ZERO_0 => L_2703
    | TO_NEGINF_0 => L_2702
  block L_2702 ()
    val x_2761: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2748)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2706
  block L_2706 (env_1056: unit)
    call tail toWord64Unsafe_3 (env_1056, x_2761)
  block L_2703 ()
    val x_2762: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2748)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2707
  block L_2707 (env_1057: unit)
    call tail toWord64Unsafe_3 (env_1057, x_2762)
  block L_2704 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2708
  block L_2708 (env_1058: unit)
    call L_2709 (x_2228 (env_1058, x_912 (*()*))) handle _ => raise
  block L_2709 (m'_18: t_8)
    case setRoundingMode_38 of
      setRoundingModeEnv_0 => L_2710
  block L_2710 (env_1059: (word32, cpointer, lambdas_155) tuple)
    call L_2711 (setRoundingMode_3 (env_1059, x_911 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2711 (x_2763: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_2712
  block L_2712 (env_1060: unit)
    call L_2713 (round_3 (env_1060, x_2748)) handle _ => raise
  block L_2713 (x_2764: real32)
    case setRoundingMode_38 of
      setRoundingModeEnv_0 => L_2714
  block L_2714 (env_1061: (word32, cpointer, lambdas_155) tuple)
    call L_2715 (setRoundingMode_3 (env_1061, m'_18)) handle _ => raise
  block L_2715 (x_2765: unit)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2716
  block L_2716 (env_1062: unit)
    call tail toWord64Unsafe_3 (env_1062, x_2764)
  block L_2705 ()
    val x_2766: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2748)
    case toWord64Unsafe_0 (*con toWord ... _199)*) of
      toWord64UnsafeEnv_0 => L_2717
  block L_2717 (env_1063: unit)
    call tail toWord64Unsafe_3 (env_1063, x_2766)
  block L_2675 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2676 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1817 (env_1064: (lambdas_36, lambdas_35, word64) tuple, x_2767: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_2718 ()
  block L_2718 ()
    val <<_25: lambdas_36 = #0 (env_1064)
    val >>_24: lambdas_35 = #1 (env_1064)
    val maxWord'_34: word64 = #2 (env_1064)
    val x_2768: (word64, word32) tuple = (maxWord'_34, x_2767)
    case >>_24 of
      >>Env_0 => L_2719
  block L_2719 (env_1065: (word32, word64) tuple)
    call L_2720 (>>_9 (env_1065, x_2768)) handle _ => raise
  block L_2720 (x_2769: word64)
    val x_2770: (word64, word32) tuple = (x_2769, x_2767)
    case <<_25 of
      <<Env_0 => L_2721
  block L_2721 (env_1066: (word32, word64) tuple)
    call tail <<_9 (env_1066, x_2770)
fun x_2771 (env_1067:
              (lambdas_99,
               real32,
               real32,
               lambdas_29,
               real32,
               word32,
               real32,
               word32) tuple,
            x_2772: t_8):
  {returns = Some (lambdas_105), raises = Some (exn)} =
L_2722 ()
  block L_2722 ()
    val class_24: lambdas_99 = #0 (env_1067)
    val zero_44: real32 = #1 (env_1067)
    val maxWord_36: real32 = #2 (env_1067)
    val setRoundingMode_39: lambdas_29 = #3 (env_1067)
    val one_38: real32 = #4 (env_1067)
    val maxWord'_35: word32 = #5 (env_1067)
    val half_30: real32 = #6 (env_1067)
    val zero_45: word32 = #7 (env_1067)
    val x_2774:
      (word32,
       real32,
       word32,
       real32,
       lambdas_29,
       t_8,
       real32,
       real32,
       lambdas_99) tuple =
      (zero_45,
       half_30,
       maxWord'_35,
       one_38,
       setRoundingMode_39,
       x_2772,
       maxWord_36,
       zero_44,
       class_24)
    val x_2773: lambdas_105 = con xEnv_117 (x_2774)
    return (x_2773)
fun x_2775 (env_1068:
              (word32,
               real32,
               word32,
               real32,
               lambdas_29,
               t_8,
               real32,
               real32,
               lambdas_99) tuple,
            x_2776: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_2723 ()
  block L_2723 ()
    val zero_47: word32 = #0 (env_1068)
    val half_31: real32 = #1 (env_1068)
    val maxWord'_36: word32 = #2 (env_1068)
    val one_39: real32 = #3 (env_1068)
    val setRoundingMode_40: lambdas_29 = #4 (env_1068)
    val x_2777: t_8 = #5 (env_1068)
    val maxWord_37: real32 = #6 (env_1068)
    val zero_46: real32 = #7 (env_1068)
    val class_25: lambdas_99 = #8 (env_1068)
    case class_25 of
      classEnv_1 => L_2724
  block L_2724 (env_1069: (word32, word32, word32) tuple)
    call L_2725 (class_21 (env_1069, x_2776)) handle _ => raise
  block L_2725 (x_2778: float_class_0)
    case x_2778 of
      INF_0 => L_2727 | NAN_1 => L_2726 | _ => L_2728
  block L_2728 ()
    val x_2779: (real32, real32) tuple = (zero_46, x_2776)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2729
  block L_2729 (env_1070: unit)
    call L_2730 (<=_6 (env_1070, x_2779)) handle _ => raise
  block L_2730 (x_2780: bool)
    case x_2780 of
      true => L_2732 | false => L_2731
  block L_2731 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2733
  block L_2733 (env_1071: unit)
    call L_2734 (~_3 (env_1071, one_39)) handle _ => raise
  block L_2734 (x_2781: real32)
    val x_2782: (real32, real32) tuple = (x_2776, x_2781)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2735
  block L_2735 (env_1072: unit)
    call L_2736 (>_8 (env_1072, x_2782)) handle _ => raise
  block L_2736 (x_2783: bool)
    case x_2783 of
      true => L_2738 | false => L_2737
  block L_2737 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2738 ()
    case x_2777 of
      TO_NEGINF_0 => L_2742
    | TO_ZERO_0 => L_2741
    | TO_NEAREST_0 => L_2740
    | TO_POSINF_0 => L_2739
  block L_2739 ()
    return (zero_47)
  block L_2740 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2743
  block L_2743 (env_1073: unit)
    call L_2744 (~_3 (env_1073, half_31)) handle _ => raise
  block L_2744 (x_2784: real32)
    val x_2785: (real32, real32) tuple = (x_2776, x_2784)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2745
  block L_2745 (env_1074: unit)
    call L_2746 (<_9 (env_1074, x_2785)) handle _ => raise
  block L_2746 (x_2786: bool)
    case x_2786 of
      true => L_2748 | false => L_2747
  block L_2747 ()
    return (zero_47)
  block L_2748 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2741 ()
    return (zero_47)
  block L_2742 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2732 ()
    val x_2787: (real32, real32) tuple = (x_2776, maxWord_37)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2749
  block L_2749 (env_1075: unit)
    call L_2750 (<=_6 (env_1075, x_2787)) handle _ => raise
  block L_2750 (x_2788: bool)
    case x_2788 of
      true => L_2752 | false => L_2751
  block L_2751 ()
    val x_2789: (real32, real32) tuple = (maxWord_37, one_39)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_2753
  block L_2753 (env_1076: unit)
    call L_2754 (+_4 (env_1076, x_2789)) handle _ => raise
  block L_2754 (x_2790: real32)
    val x_2791: (real32, real32) tuple = (x_2776, x_2790)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2755
  block L_2755 (env_1077: unit)
    call L_2756 (<_9 (env_1077, x_2791)) handle _ => raise
  block L_2756 (x_2792: bool)
    case x_2792 of
      true => L_2758 | false => L_2757
  block L_2757 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2758 ()
    case x_2777 of
      TO_NEGINF_0 => L_2762
    | TO_ZERO_0 => L_2761
    | TO_NEAREST_0 => L_2760
    | TO_POSINF_0 => L_2759
  block L_2759 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2760 ()
    val x_2793: (real32, real32) tuple = (x_2776, maxWord_37)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_2763
  block L_2763 (env_1078: unit)
    call L_2764 (-_5 (env_1078, x_2793)) handle _ => raise
  block L_2764 (x_2794: real32)
    val x_2795: (real32, real32) tuple = (x_2794, half_31)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_2765
  block L_2765 (env_1079: unit)
    call L_2766 (>=_8 (env_1079, x_2795)) handle _ => raise
  block L_2766 (x_2796: bool)
    case x_2796 of
      true => L_2768 | false => L_2767
  block L_2767 ()
    return (maxWord'_36)
  block L_2768 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2761 ()
    return (maxWord'_36)
  block L_2762 ()
    return (maxWord'_36)
  block L_2752 ()
    case x_2777 of
      TO_POSINF_0 => L_2772
    | TO_NEAREST_0 => L_2771
    | TO_ZERO_0 => L_2770
    | TO_NEGINF_0 => L_2769
  block L_2769 ()
    val x_2797: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2776)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2773
  block L_2773 (env_1080: unit)
    call tail toWord32Unsafe_3 (env_1080, x_2797)
  block L_2770 ()
    val x_2798: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2776)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2774
  block L_2774 (env_1081: unit)
    call tail toWord32Unsafe_3 (env_1081, x_2798)
  block L_2771 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2775
  block L_2775 (env_1082: unit)
    call L_2776 (x_2228 (env_1082, x_910 (*()*))) handle _ => raise
  block L_2776 (m'_19: t_8)
    case setRoundingMode_40 of
      setRoundingModeEnv_0 => L_2777
  block L_2777 (env_1083: (word32, cpointer, lambdas_155) tuple)
    call L_2778 (setRoundingMode_3 (env_1083, x_909 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2778 (x_2799: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_2779
  block L_2779 (env_1084: unit)
    call L_2780 (round_3 (env_1084, x_2776)) handle _ => raise
  block L_2780 (x_2800: real32)
    case setRoundingMode_40 of
      setRoundingModeEnv_0 => L_2781
  block L_2781 (env_1085: (word32, cpointer, lambdas_155) tuple)
    call L_2782 (setRoundingMode_3 (env_1085, m'_19)) handle _ => raise
  block L_2782 (x_2801: unit)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2783
  block L_2783 (env_1086: unit)
    call tail toWord32Unsafe_3 (env_1086, x_2800)
  block L_2772 ()
    val x_2802: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2776)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2784
  block L_2784 (env_1087: unit)
    call tail toWord32Unsafe_3 (env_1087, x_2802)
  block L_2726 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2727 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2803 (env_1088:
              (lambdas_99, real32, real32, lambdas_29, real32, word32, real32) tuple,
            x_2804: t_8):
  {returns = Some (lambdas_107), raises = Some (exn)} =
L_2785 ()
  block L_2785 ()
    val class_26: lambdas_99 = #0 (env_1088)
    val zero_48: real32 = #1 (env_1088)
    val maxWord_38: real32 = #2 (env_1088)
    val setRoundingMode_41: lambdas_29 = #3 (env_1088)
    val one_40: real32 = #4 (env_1088)
    val zero_49: word32 = #5 (env_1088)
    val half_32: real32 = #6 (env_1088)
    val x_2806:
      (real32, word32, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple =
      (half_32,
       zero_49,
       one_40,
       setRoundingMode_41,
       x_2804,
       maxWord_38,
       zero_48,
       class_26)
    val x_2805: lambdas_107 = con xEnv_119 (x_2806)
    return (x_2805)
fun x_2807 (env_1089:
              (real32,
               word32,
               real32,
               lambdas_29,
               t_8,
               real32,
               real32,
               lambdas_99) tuple,
            x_2808: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_2786 ()
  block L_2786 ()
    val half_33: real32 = #0 (env_1089)
    val zero_51: word32 = #1 (env_1089)
    val one_41: real32 = #2 (env_1089)
    val setRoundingMode_42: lambdas_29 = #3 (env_1089)
    val x_2809: t_8 = #4 (env_1089)
    val maxWord_39: real32 = #5 (env_1089)
    val zero_50: real32 = #6 (env_1089)
    val class_27: lambdas_99 = #7 (env_1089)
    case class_27 of
      classEnv_1 => L_2787
  block L_2787 (env_1090: (word32, word32, word32) tuple)
    call L_2788 (class_21 (env_1090, x_2808)) handle _ => raise
  block L_2788 (x_2810: float_class_0)
    case x_2810 of
      INF_0 => L_2790 | NAN_1 => L_2789 | _ => L_2791
  block L_2791 ()
    val x_2811: (real32, real32) tuple = (zero_50, x_2808)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2792
  block L_2792 (env_1091: unit)
    call L_2793 (<=_6 (env_1091, x_2811)) handle _ => raise
  block L_2793 (x_2812: bool)
    case x_2812 of
      true => L_2795 | false => L_2794
  block L_2794 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2796
  block L_2796 (env_1092: unit)
    call L_2797 (~_3 (env_1092, one_41)) handle _ => raise
  block L_2797 (x_2813: real32)
    val x_2814: (real32, real32) tuple = (x_2808, x_2813)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2798
  block L_2798 (env_1093: unit)
    call L_2799 (>_8 (env_1093, x_2814)) handle _ => raise
  block L_2799 (x_2815: bool)
    case x_2815 of
      true => L_2801 | false => L_2800
  block L_2800 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2801 ()
    case x_2809 of
      TO_NEGINF_0 => L_2805
    | TO_ZERO_0 => L_2804
    | TO_NEAREST_0 => L_2803
    | TO_POSINF_0 => L_2802
  block L_2802 ()
    return (zero_51)
  block L_2803 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2806
  block L_2806 (env_1094: unit)
    call L_2807 (~_3 (env_1094, half_33)) handle _ => raise
  block L_2807 (x_2816: real32)
    val x_2817: (real32, real32) tuple = (x_2808, x_2816)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2808
  block L_2808 (env_1095: unit)
    call L_2809 (<_9 (env_1095, x_2817)) handle _ => raise
  block L_2809 (x_2818: bool)
    case x_2818 of
      true => L_2811 | false => L_2810
  block L_2810 ()
    return (zero_51)
  block L_2811 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2804 ()
    return (zero_51)
  block L_2805 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2795 ()
    val x_2819: (real32, real32) tuple = (x_2808, maxWord_39)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2812
  block L_2812 (env_1096: unit)
    call L_2813 (<=_6 (env_1096, x_2819)) handle _ => raise
  block L_2813 (x_2820: bool)
    case x_2820 of
      true => L_2815 | false => L_2814
  block L_2814 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2815 ()
    case x_2809 of
      TO_POSINF_0 => L_2819
    | TO_NEAREST_0 => L_2818
    | TO_ZERO_0 => L_2817
    | TO_NEGINF_0 => L_2816
  block L_2816 ()
    val x_2821: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2808)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2820
  block L_2820 (env_1097: unit)
    call tail toWord32Unsafe_3 (env_1097, x_2821)
  block L_2817 ()
    val x_2822: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2808)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2821
  block L_2821 (env_1098: unit)
    call tail toWord32Unsafe_3 (env_1098, x_2822)
  block L_2818 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2822
  block L_2822 (env_1099: unit)
    call L_2823 (x_2228 (env_1099, x_907 (*()*))) handle _ => raise
  block L_2823 (m'_20: t_8)
    case setRoundingMode_42 of
      setRoundingModeEnv_0 => L_2824
  block L_2824 (env_1100: (word32, cpointer, lambdas_155) tuple)
    call L_2825 (setRoundingMode_3 (env_1100, x_906 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2825 (x_2823: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_2826
  block L_2826 (env_1101: unit)
    call L_2827 (round_3 (env_1101, x_2808)) handle _ => raise
  block L_2827 (x_2824: real32)
    case setRoundingMode_42 of
      setRoundingModeEnv_0 => L_2828
  block L_2828 (env_1102: (word32, cpointer, lambdas_155) tuple)
    call L_2829 (setRoundingMode_3 (env_1102, m'_20)) handle _ => raise
  block L_2829 (x_2825: unit)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2830
  block L_2830 (env_1103: unit)
    call tail toWord32Unsafe_3 (env_1103, x_2824)
  block L_2819 ()
    val x_2826: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2808)
    case toWord32Unsafe_0 (*con toWord ... _198)*) of
      toWord32UnsafeEnv_0 => L_2831
  block L_2831 (env_1104: unit)
    call tail toWord32Unsafe_3 (env_1104, x_2826)
  block L_2789 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2790 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1806 (env_1105: (lambdas_44, lambdas_43, word32) tuple, x_2827: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_2832 ()
  block L_2832 ()
    val <<_26: lambdas_44 = #0 (env_1105)
    val >>_25: lambdas_43 = #1 (env_1105)
    val maxWord'_37: word32 = #2 (env_1105)
    val x_2828: (word32, word32) tuple = (maxWord'_37, x_2827)
    case >>_25 of
      >>Env_1 => L_2833
  block L_2833 (env_1106: (word32, word32) tuple)
    call L_2834 (>>_11 (env_1106, x_2828)) handle _ => raise
  block L_2834 (x_2829: word32)
    val x_2830: (word32, word32) tuple = (x_2829, x_2827)
    case <<_26 of
      <<Env_1 => L_2835
  block L_2835 (env_1107: (word32, word32) tuple)
    call tail <<_8 (env_1107, x_2830)
fun x_2831 (env_1108:
              (lambdas_99, real32, real32, lambdas_29, real32, word16, real32) tuple,
            x_2832: t_8):
  {returns = Some (lambdas_111), raises = Some (exn)} =
L_2836 ()
  block L_2836 ()
    val class_28: lambdas_99 = #0 (env_1108)
    val zero_52: real32 = #1 (env_1108)
    val maxWord_40: real32 = #2 (env_1108)
    val setRoundingMode_43: lambdas_29 = #3 (env_1108)
    val one_42: real32 = #4 (env_1108)
    val maxWord'_38: word16 = #5 (env_1108)
    val half_34: real32 = #6 (env_1108)
    val x_2834:
      (real32, word16, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple =
      (half_34,
       maxWord'_38,
       one_42,
       setRoundingMode_43,
       x_2832,
       maxWord_40,
       zero_52,
       class_28)
    val x_2833: lambdas_111 = con xEnv_124 (x_2834)
    return (x_2833)
fun x_2835 (env_1109:
              (real32,
               word16,
               real32,
               lambdas_29,
               t_8,
               real32,
               real32,
               lambdas_99) tuple,
            x_2836: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_2837 ()
  block L_2837 ()
    val half_35: real32 = #0 (env_1109)
    val maxWord'_39: word16 = #1 (env_1109)
    val one_43: real32 = #2 (env_1109)
    val setRoundingMode_44: lambdas_29 = #3 (env_1109)
    val x_2837: t_8 = #4 (env_1109)
    val maxWord_41: real32 = #5 (env_1109)
    val zero_53: real32 = #6 (env_1109)
    val class_29: lambdas_99 = #7 (env_1109)
    case class_29 of
      classEnv_1 => L_2838
  block L_2838 (env_1110: (word32, word32, word32) tuple)
    call L_2839 (class_21 (env_1110, x_2836)) handle _ => raise
  block L_2839 (x_2838: float_class_0)
    case x_2838 of
      INF_0 => L_2841 | NAN_1 => L_2840 | _ => L_2842
  block L_2842 ()
    val x_2839: (real32, real32) tuple = (zero_53, x_2836)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2843
  block L_2843 (env_1111: unit)
    call L_2844 (<=_6 (env_1111, x_2839)) handle _ => raise
  block L_2844 (x_2840: bool)
    case x_2840 of
      true => L_2846 | false => L_2845
  block L_2845 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2847
  block L_2847 (env_1112: unit)
    call L_2848 (~_3 (env_1112, one_43)) handle _ => raise
  block L_2848 (x_2841: real32)
    val x_2842: (real32, real32) tuple = (x_2836, x_2841)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2849
  block L_2849 (env_1113: unit)
    call L_2850 (>_8 (env_1113, x_2842)) handle _ => raise
  block L_2850 (x_2843: bool)
    case x_2843 of
      true => L_2852 | false => L_2851
  block L_2851 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2852 ()
    case x_2837 of
      TO_NEGINF_0 => L_2856
    | TO_ZERO_0 => L_2855
    | TO_NEAREST_0 => L_2854
    | TO_POSINF_0 => L_2853
  block L_2853 ()
    return (x_256 (*0x0:w16*))
  block L_2854 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2857
  block L_2857 (env_1114: unit)
    call L_2858 (~_3 (env_1114, half_35)) handle _ => raise
  block L_2858 (x_2844: real32)
    val x_2845: (real32, real32) tuple = (x_2836, x_2844)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2859
  block L_2859 (env_1115: unit)
    call L_2860 (<_9 (env_1115, x_2845)) handle _ => raise
  block L_2860 (x_2846: bool)
    case x_2846 of
      true => L_2862 | false => L_2861
  block L_2861 ()
    return (x_256 (*0x0:w16*))
  block L_2862 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2855 ()
    return (x_256 (*0x0:w16*))
  block L_2856 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2846 ()
    val x_2847: (real32, real32) tuple = (x_2836, maxWord_41)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2863
  block L_2863 (env_1116: unit)
    call L_2864 (<=_6 (env_1116, x_2847)) handle _ => raise
  block L_2864 (x_2848: bool)
    case x_2848 of
      true => L_2866 | false => L_2865
  block L_2865 ()
    val x_2849: (real32, real32) tuple = (maxWord_41, one_43)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_2867
  block L_2867 (env_1117: unit)
    call L_2868 (+_4 (env_1117, x_2849)) handle _ => raise
  block L_2868 (x_2850: real32)
    val x_2851: (real32, real32) tuple = (x_2836, x_2850)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2869
  block L_2869 (env_1118: unit)
    call L_2870 (<_9 (env_1118, x_2851)) handle _ => raise
  block L_2870 (x_2852: bool)
    case x_2852 of
      true => L_2872 | false => L_2871
  block L_2871 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2872 ()
    case x_2837 of
      TO_NEGINF_0 => L_2876
    | TO_ZERO_0 => L_2875
    | TO_NEAREST_0 => L_2874
    | TO_POSINF_0 => L_2873
  block L_2873 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2874 ()
    val x_2853: (real32, real32) tuple = (x_2836, maxWord_41)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_2877
  block L_2877 (env_1119: unit)
    call L_2878 (-_5 (env_1119, x_2853)) handle _ => raise
  block L_2878 (x_2854: real32)
    val x_2855: (real32, real32) tuple = (x_2854, half_35)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_2879
  block L_2879 (env_1120: unit)
    call L_2880 (>=_8 (env_1120, x_2855)) handle _ => raise
  block L_2880 (x_2856: bool)
    case x_2856 of
      true => L_2882 | false => L_2881
  block L_2881 ()
    return (maxWord'_39)
  block L_2882 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2875 ()
    return (maxWord'_39)
  block L_2876 ()
    return (maxWord'_39)
  block L_2866 ()
    case x_2837 of
      TO_POSINF_0 => L_2886
    | TO_NEAREST_0 => L_2885
    | TO_ZERO_0 => L_2884
    | TO_NEGINF_0 => L_2883
  block L_2883 ()
    val x_2857: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2836)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2887
  block L_2887 (env_1121: unit)
    call tail toWord16Unsafe_3 (env_1121, x_2857)
  block L_2884 ()
    val x_2858: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2836)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2888
  block L_2888 (env_1122: unit)
    call tail toWord16Unsafe_3 (env_1122, x_2858)
  block L_2885 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2889
  block L_2889 (env_1123: unit)
    call L_2890 (x_2228 (env_1123, x_905 (*()*))) handle _ => raise
  block L_2890 (m'_21: t_8)
    case setRoundingMode_44 of
      setRoundingModeEnv_0 => L_2891
  block L_2891 (env_1124: (word32, cpointer, lambdas_155) tuple)
    call L_2892 (setRoundingMode_3 (env_1124, x_904 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2892 (x_2859: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_2893
  block L_2893 (env_1125: unit)
    call L_2894 (round_3 (env_1125, x_2836)) handle _ => raise
  block L_2894 (x_2860: real32)
    case setRoundingMode_44 of
      setRoundingModeEnv_0 => L_2895
  block L_2895 (env_1126: (word32, cpointer, lambdas_155) tuple)
    call L_2896 (setRoundingMode_3 (env_1126, m'_21)) handle _ => raise
  block L_2896 (x_2861: unit)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2897
  block L_2897 (env_1127: unit)
    call tail toWord16Unsafe_3 (env_1127, x_2860)
  block L_2886 ()
    val x_2862: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2836)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2898
  block L_2898 (env_1128: unit)
    call tail toWord16Unsafe_3 (env_1128, x_2862)
  block L_2840 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2841 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2863 (env_1129:
              (lambdas_99, real32, real32, lambdas_29, real32, real32) tuple,
            x_2864: t_8):
  {returns = Some (lambdas_113), raises = Some (exn)} =
L_2899 ()
  block L_2899 ()
    val class_30: lambdas_99 = #0 (env_1129)
    val zero_54: real32 = #1 (env_1129)
    val maxWord_42: real32 = #2 (env_1129)
    val setRoundingMode_45: lambdas_29 = #3 (env_1129)
    val one_44: real32 = #4 (env_1129)
    val half_36: real32 = #5 (env_1129)
    val x_2866:
      (real32, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple =
      (half_36,
       one_44,
       setRoundingMode_45,
       x_2864,
       maxWord_42,
       zero_54,
       class_30)
    val x_2865: lambdas_113 = con xEnv_126 (x_2866)
    return (x_2865)
fun x_2867 (env_1130:
              (real32, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple,
            x_2868: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_2900 ()
  block L_2900 ()
    val half_37: real32 = #0 (env_1130)
    val one_45: real32 = #1 (env_1130)
    val setRoundingMode_46: lambdas_29 = #2 (env_1130)
    val x_2869: t_8 = #3 (env_1130)
    val maxWord_43: real32 = #4 (env_1130)
    val zero_55: real32 = #5 (env_1130)
    val class_31: lambdas_99 = #6 (env_1130)
    case class_31 of
      classEnv_1 => L_2901
  block L_2901 (env_1131: (word32, word32, word32) tuple)
    call L_2902 (class_21 (env_1131, x_2868)) handle _ => raise
  block L_2902 (x_2870: float_class_0)
    case x_2870 of
      INF_0 => L_2904 | NAN_1 => L_2903 | _ => L_2905
  block L_2905 ()
    val x_2871: (real32, real32) tuple = (zero_55, x_2868)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2906
  block L_2906 (env_1132: unit)
    call L_2907 (<=_6 (env_1132, x_2871)) handle _ => raise
  block L_2907 (x_2872: bool)
    case x_2872 of
      true => L_2909 | false => L_2908
  block L_2908 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2910
  block L_2910 (env_1133: unit)
    call L_2911 (~_3 (env_1133, one_45)) handle _ => raise
  block L_2911 (x_2873: real32)
    val x_2874: (real32, real32) tuple = (x_2868, x_2873)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2912
  block L_2912 (env_1134: unit)
    call L_2913 (>_8 (env_1134, x_2874)) handle _ => raise
  block L_2913 (x_2875: bool)
    case x_2875 of
      true => L_2915 | false => L_2914
  block L_2914 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2915 ()
    case x_2869 of
      TO_NEGINF_0 => L_2919
    | TO_ZERO_0 => L_2918
    | TO_NEAREST_0 => L_2917
    | TO_POSINF_0 => L_2916
  block L_2916 ()
    return (x_256 (*0x0:w16*))
  block L_2917 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2920
  block L_2920 (env_1135: unit)
    call L_2921 (~_3 (env_1135, half_37)) handle _ => raise
  block L_2921 (x_2876: real32)
    val x_2877: (real32, real32) tuple = (x_2868, x_2876)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2922
  block L_2922 (env_1136: unit)
    call L_2923 (<_9 (env_1136, x_2877)) handle _ => raise
  block L_2923 (x_2878: bool)
    case x_2878 of
      true => L_2925 | false => L_2924
  block L_2924 ()
    return (x_256 (*0x0:w16*))
  block L_2925 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2918 ()
    return (x_256 (*0x0:w16*))
  block L_2919 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2909 ()
    val x_2879: (real32, real32) tuple = (x_2868, maxWord_43)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2926
  block L_2926 (env_1137: unit)
    call L_2927 (<=_6 (env_1137, x_2879)) handle _ => raise
  block L_2927 (x_2880: bool)
    case x_2880 of
      true => L_2929 | false => L_2928
  block L_2928 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2929 ()
    case x_2869 of
      TO_POSINF_0 => L_2933
    | TO_NEAREST_0 => L_2932
    | TO_ZERO_0 => L_2931
    | TO_NEGINF_0 => L_2930
  block L_2930 ()
    val x_2881: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2868)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2934
  block L_2934 (env_1138: unit)
    call tail toWord16Unsafe_3 (env_1138, x_2881)
  block L_2931 ()
    val x_2882: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2868)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2935
  block L_2935 (env_1139: unit)
    call tail toWord16Unsafe_3 (env_1139, x_2882)
  block L_2932 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_2936
  block L_2936 (env_1140: unit)
    call L_2937 (x_2228 (env_1140, x_902 (*()*))) handle _ => raise
  block L_2937 (m'_22: t_8)
    case setRoundingMode_46 of
      setRoundingModeEnv_0 => L_2938
  block L_2938 (env_1141: (word32, cpointer, lambdas_155) tuple)
    call L_2939 (setRoundingMode_3 (env_1141, x_901 (*con TO_NEAREST_0*))) handle _ => raise
  block L_2939 (x_2883: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_2940
  block L_2940 (env_1142: unit)
    call L_2941 (round_3 (env_1142, x_2868)) handle _ => raise
  block L_2941 (x_2884: real32)
    case setRoundingMode_46 of
      setRoundingModeEnv_0 => L_2942
  block L_2942 (env_1143: (word32, cpointer, lambdas_155) tuple)
    call L_2943 (setRoundingMode_3 (env_1143, m'_22)) handle _ => raise
  block L_2943 (x_2885: unit)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2944
  block L_2944 (env_1144: unit)
    call tail toWord16Unsafe_3 (env_1144, x_2884)
  block L_2933 ()
    val x_2886: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2868)
    case toWord16Unsafe_0 (*con toWord ... _197)*) of
      toWord16UnsafeEnv_0 => L_2945
  block L_2945 (env_1145: unit)
    call tail toWord16Unsafe_3 (env_1145, x_2886)
  block L_2903 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2904 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1795 (env_1146: (lambdas_52, lambdas_51, word16) tuple, x_2887: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_2946 ()
  block L_2946 ()
    val <<_27: lambdas_52 = #0 (env_1146)
    val >>_26: lambdas_51 = #1 (env_1146)
    val maxWord'_40: word16 = #2 (env_1146)
    val x_2888: (word16, word32) tuple = (maxWord'_40, x_2887)
    case >>_26 of
      >>Env_2 => L_2947
  block L_2947 (env_1147: word32)
    call L_2948 (>>_13 (env_1147, x_2888)) handle _ => raise
  block L_2948 (x_2889: word16)
    val x_2890: (word16, word32) tuple = (x_2889, x_2887)
    case <<_27 of
      <<Env_2 => L_2949
  block L_2949 (env_1148: word32)
    call tail <<_13 (env_1148, x_2890)
fun x_2891 (env_1149:
              (lambdas_99, real32, real32, lambdas_29, real32, word8, real32) tuple,
            x_2892: t_8):
  {returns = Some (lambdas_117), raises = Some (exn)} =
L_2950 ()
  block L_2950 ()
    val class_32: lambdas_99 = #0 (env_1149)
    val zero_56: real32 = #1 (env_1149)
    val maxWord_44: real32 = #2 (env_1149)
    val setRoundingMode_47: lambdas_29 = #3 (env_1149)
    val one_46: real32 = #4 (env_1149)
    val maxWord'_41: word8 = #5 (env_1149)
    val half_38: real32 = #6 (env_1149)
    val x_2894:
      (real32, word8, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple =
      (half_38,
       maxWord'_41,
       one_46,
       setRoundingMode_47,
       x_2892,
       maxWord_44,
       zero_56,
       class_32)
    val x_2893: lambdas_117 = con xEnv_131 (x_2894)
    return (x_2893)
fun x_2895 (env_1150:
              (real32,
               word8,
               real32,
               lambdas_29,
               t_8,
               real32,
               real32,
               lambdas_99) tuple,
            x_2896: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_2951 ()
  block L_2951 ()
    val half_39: real32 = #0 (env_1150)
    val maxWord'_42: word8 = #1 (env_1150)
    val one_47: real32 = #2 (env_1150)
    val setRoundingMode_48: lambdas_29 = #3 (env_1150)
    val x_2897: t_8 = #4 (env_1150)
    val maxWord_45: real32 = #5 (env_1150)
    val zero_57: real32 = #6 (env_1150)
    val class_33: lambdas_99 = #7 (env_1150)
    case class_33 of
      classEnv_1 => L_2952
  block L_2952 (env_1151: (word32, word32, word32) tuple)
    call L_2953 (class_21 (env_1151, x_2896)) handle _ => raise
  block L_2953 (x_2898: float_class_0)
    case x_2898 of
      INF_0 => L_2955 | NAN_1 => L_2954 | _ => L_2956
  block L_2956 ()
    val x_2899: (real32, real32) tuple = (zero_57, x_2896)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2957
  block L_2957 (env_1152: unit)
    call L_2958 (<=_6 (env_1152, x_2899)) handle _ => raise
  block L_2958 (x_2900: bool)
    case x_2900 of
      true => L_2960 | false => L_2959
  block L_2959 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2961
  block L_2961 (env_1153: unit)
    call L_2962 (~_3 (env_1153, one_47)) handle _ => raise
  block L_2962 (x_2901: real32)
    val x_2902: (real32, real32) tuple = (x_2896, x_2901)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_2963
  block L_2963 (env_1154: unit)
    call L_2964 (>_8 (env_1154, x_2902)) handle _ => raise
  block L_2964 (x_2903: bool)
    case x_2903 of
      true => L_2966 | false => L_2965
  block L_2965 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2966 ()
    case x_2897 of
      TO_NEGINF_0 => L_2970
    | TO_ZERO_0 => L_2969
    | TO_NEAREST_0 => L_2968
    | TO_POSINF_0 => L_2967
  block L_2967 ()
    return (x_242 (*0x0:w8*))
  block L_2968 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_2971
  block L_2971 (env_1155: unit)
    call L_2972 (~_3 (env_1155, half_39)) handle _ => raise
  block L_2972 (x_2904: real32)
    val x_2905: (real32, real32) tuple = (x_2896, x_2904)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2973
  block L_2973 (env_1156: unit)
    call L_2974 (<_9 (env_1156, x_2905)) handle _ => raise
  block L_2974 (x_2906: bool)
    case x_2906 of
      true => L_2976 | false => L_2975
  block L_2975 ()
    return (x_242 (*0x0:w8*))
  block L_2976 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2969 ()
    return (x_242 (*0x0:w8*))
  block L_2970 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2960 ()
    val x_2907: (real32, real32) tuple = (x_2896, maxWord_45)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_2977
  block L_2977 (env_1157: unit)
    call L_2978 (<=_6 (env_1157, x_2907)) handle _ => raise
  block L_2978 (x_2908: bool)
    case x_2908 of
      true => L_2980 | false => L_2979
  block L_2979 ()
    val x_2909: (real32, real32) tuple = (maxWord_45, one_47)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_2981
  block L_2981 (env_1158: unit)
    call L_2982 (+_4 (env_1158, x_2909)) handle _ => raise
  block L_2982 (x_2910: real32)
    val x_2911: (real32, real32) tuple = (x_2896, x_2910)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_2983
  block L_2983 (env_1159: unit)
    call L_2984 (<_9 (env_1159, x_2911)) handle _ => raise
  block L_2984 (x_2912: bool)
    case x_2912 of
      true => L_2986 | false => L_2985
  block L_2985 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2986 ()
    case x_2897 of
      TO_NEGINF_0 => L_2990
    | TO_ZERO_0 => L_2989
    | TO_NEAREST_0 => L_2988
    | TO_POSINF_0 => L_2987
  block L_2987 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2988 ()
    val x_2913: (real32, real32) tuple = (x_2896, maxWord_45)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_2991
  block L_2991 (env_1160: unit)
    call L_2992 (-_5 (env_1160, x_2913)) handle _ => raise
  block L_2992 (x_2914: real32)
    val x_2915: (real32, real32) tuple = (x_2914, half_39)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_2993
  block L_2993 (env_1161: unit)
    call L_2994 (>=_8 (env_1161, x_2915)) handle _ => raise
  block L_2994 (x_2916: bool)
    case x_2916 of
      true => L_2996 | false => L_2995
  block L_2995 ()
    return (maxWord'_42)
  block L_2996 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_2989 ()
    return (maxWord'_42)
  block L_2990 ()
    return (maxWord'_42)
  block L_2980 ()
    case x_2897 of
      TO_POSINF_0 => L_3000
    | TO_NEAREST_0 => L_2999
    | TO_ZERO_0 => L_2998
    | TO_NEGINF_0 => L_2997
  block L_2997 ()
    val x_2917: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2896)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3001
  block L_3001 (env_1162: unit)
    call tail toWord8Unsafe_3 (env_1162, x_2917)
  block L_2998 ()
    val x_2918: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2896)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3002
  block L_3002 (env_1163: unit)
    call tail toWord8Unsafe_3 (env_1163, x_2918)
  block L_2999 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3003
  block L_3003 (env_1164: unit)
    call L_3004 (x_2228 (env_1164, x_900 (*()*))) handle _ => raise
  block L_3004 (m'_23: t_8)
    case setRoundingMode_48 of
      setRoundingModeEnv_0 => L_3005
  block L_3005 (env_1165: (word32, cpointer, lambdas_155) tuple)
    call L_3006 (setRoundingMode_3 (env_1165, x_899 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3006 (x_2919: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3007
  block L_3007 (env_1166: unit)
    call L_3008 (round_3 (env_1166, x_2896)) handle _ => raise
  block L_3008 (x_2920: real32)
    case setRoundingMode_48 of
      setRoundingModeEnv_0 => L_3009
  block L_3009 (env_1167: (word32, cpointer, lambdas_155) tuple)
    call L_3010 (setRoundingMode_3 (env_1167, m'_23)) handle _ => raise
  block L_3010 (x_2921: unit)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3011
  block L_3011 (env_1168: unit)
    call tail toWord8Unsafe_3 (env_1168, x_2920)
  block L_3000 ()
    val x_2922: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2896)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3012
  block L_3012 (env_1169: unit)
    call tail toWord8Unsafe_3 (env_1169, x_2922)
  block L_2954 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_2955 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_2923 (env_1170:
              (lambdas_99, real32, real32, lambdas_29, real32, real32) tuple,
            x_2924: t_8):
  {returns = Some (lambdas_119), raises = Some (exn)} =
L_3013 ()
  block L_3013 ()
    val class_34: lambdas_99 = #0 (env_1170)
    val zero_58: real32 = #1 (env_1170)
    val maxWord_46: real32 = #2 (env_1170)
    val setRoundingMode_49: lambdas_29 = #3 (env_1170)
    val one_48: real32 = #4 (env_1170)
    val half_40: real32 = #5 (env_1170)
    val x_2926:
      (real32, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple =
      (half_40,
       one_48,
       setRoundingMode_49,
       x_2924,
       maxWord_46,
       zero_58,
       class_34)
    val x_2925: lambdas_119 = con xEnv_133 (x_2926)
    return (x_2925)
fun x_2927 (env_1171:
              (real32, real32, lambdas_29, t_8, real32, real32, lambdas_99) tuple,
            x_2928: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_3014 ()
  block L_3014 ()
    val half_41: real32 = #0 (env_1171)
    val one_49: real32 = #1 (env_1171)
    val setRoundingMode_50: lambdas_29 = #2 (env_1171)
    val x_2929: t_8 = #3 (env_1171)
    val maxWord_47: real32 = #4 (env_1171)
    val zero_59: real32 = #5 (env_1171)
    val class_35: lambdas_99 = #6 (env_1171)
    case class_35 of
      classEnv_1 => L_3015
  block L_3015 (env_1172: (word32, word32, word32) tuple)
    call L_3016 (class_21 (env_1172, x_2928)) handle _ => raise
  block L_3016 (x_2930: float_class_0)
    case x_2930 of
      INF_0 => L_3018 | NAN_1 => L_3017 | _ => L_3019
  block L_3019 ()
    val x_2931: (real32, real32) tuple = (zero_59, x_2928)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3020
  block L_3020 (env_1173: unit)
    call L_3021 (<=_6 (env_1173, x_2931)) handle _ => raise
  block L_3021 (x_2932: bool)
    case x_2932 of
      true => L_3023 | false => L_3022
  block L_3022 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_3024
  block L_3024 (env_1174: unit)
    call L_3025 (~_3 (env_1174, one_49)) handle _ => raise
  block L_3025 (x_2933: real32)
    val x_2934: (real32, real32) tuple = (x_2928, x_2933)
    case >_2 (*con >Env_2 (tuple_9)*) of
      >Env_2 => L_3026
  block L_3026 (env_1175: unit)
    call L_3027 (>_8 (env_1175, x_2934)) handle _ => raise
  block L_3027 (x_2935: bool)
    case x_2935 of
      true => L_3029 | false => L_3028
  block L_3028 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3029 ()
    case x_2929 of
      TO_NEGINF_0 => L_3033
    | TO_ZERO_0 => L_3032
    | TO_NEAREST_0 => L_3031
    | TO_POSINF_0 => L_3030
  block L_3030 ()
    return (x_242 (*0x0:w8*))
  block L_3031 ()
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_3034
  block L_3034 (env_1176: unit)
    call L_3035 (~_3 (env_1176, half_41)) handle _ => raise
  block L_3035 (x_2936: real32)
    val x_2937: (real32, real32) tuple = (x_2928, x_2936)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3036
  block L_3036 (env_1177: unit)
    call L_3037 (<_9 (env_1177, x_2937)) handle _ => raise
  block L_3037 (x_2938: bool)
    case x_2938 of
      true => L_3039 | false => L_3038
  block L_3038 ()
    return (x_242 (*0x0:w8*))
  block L_3039 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3032 ()
    return (x_242 (*0x0:w8*))
  block L_3033 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3023 ()
    val x_2939: (real32, real32) tuple = (x_2928, maxWord_47)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3040
  block L_3040 (env_1178: unit)
    call L_3041 (<=_6 (env_1178, x_2939)) handle _ => raise
  block L_3041 (x_2940: bool)
    case x_2940 of
      true => L_3043 | false => L_3042
  block L_3042 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3043 ()
    case x_2929 of
      TO_POSINF_0 => L_3047
    | TO_NEAREST_0 => L_3046
    | TO_ZERO_0 => L_3045
    | TO_NEGINF_0 => L_3044
  block L_3044 ()
    val x_2941: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2928)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3048
  block L_3048 (env_1179: unit)
    call tail toWord8Unsafe_3 (env_1179, x_2941)
  block L_3045 ()
    val x_2942: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2928)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3049
  block L_3049 (env_1180: unit)
    call tail toWord8Unsafe_3 (env_1180, x_2942)
  block L_3046 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3050
  block L_3050 (env_1181: unit)
    call L_3051 (x_2228 (env_1181, x_897 (*()*))) handle _ => raise
  block L_3051 (m'_24: t_8)
    case setRoundingMode_50 of
      setRoundingModeEnv_0 => L_3052
  block L_3052 (env_1182: (word32, cpointer, lambdas_155) tuple)
    call L_3053 (setRoundingMode_3 (env_1182, x_896 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3053 (x_2943: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3054
  block L_3054 (env_1183: unit)
    call L_3055 (round_3 (env_1183, x_2928)) handle _ => raise
  block L_3055 (x_2944: real32)
    case setRoundingMode_50 of
      setRoundingModeEnv_0 => L_3056
  block L_3056 (env_1184: (word32, cpointer, lambdas_155) tuple)
    call L_3057 (setRoundingMode_3 (env_1184, m'_24)) handle _ => raise
  block L_3057 (x_2945: unit)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3058
  block L_3058 (env_1185: unit)
    call tail toWord8Unsafe_3 (env_1185, x_2944)
  block L_3047 ()
    val x_2946: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2928)
    case toWord8Unsafe_0 (*con toWord ... _196)*) of
      toWord8UnsafeEnv_0 => L_3059
  block L_3059 (env_1186: unit)
    call tail toWord8Unsafe_3 (env_1186, x_2946)
  block L_3017 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3018 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun x_1784 (env_1187: (lambdas_60, lambdas_59, word8) tuple, x_2947: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3060 ()
  block L_3060 ()
    val <<_28: lambdas_60 = #0 (env_1187)
    val >>_27: lambdas_59 = #1 (env_1187)
    val maxWord'_43: word8 = #2 (env_1187)
    val x_2948: (word8, word32) tuple = (maxWord'_43, x_2947)
    case >>_27 of
      >>Env_3 => L_3061
  block L_3061 (env_1188: word32)
    call L_3062 (>>_15 (env_1188, x_2948)) handle _ => raise
  block L_3062 (x_2949: word8)
    val x_2950: (word8, word32) tuple = (x_2949, x_2947)
    case <<_28 of
      <<Env_3 => L_3063
  block L_3063 (env_1189: word32)
    call tail <<_15 (env_1189, x_2950)
fun x_2951 (env_1190:
              (real32, real32, lambdas_29, real32, word64, real32, word64) tuple,
            x_2952: t_8):
  {returns = Some (lambdas_123), raises = Some (exn)} =
L_3064 ()
  block L_3064 ()
    val minInt_32: real32 = #0 (env_1190)
    val maxInt_32: real32 = #1 (env_1190)
    val setRoundingMode_51: lambdas_29 = #2 (env_1190)
    val one_50: real32 = #3 (env_1190)
    val maxInt'_32: word64 = #4 (env_1190)
    val half_42: real32 = #5 (env_1190)
    val minInt'_14: word64 = #6 (env_1190)
    val x_2954:
      (word64, real32, word64, real32, lambdas_29, t_8, real32, real32) tuple =
      (minInt'_14,
       half_42,
       maxInt'_32,
       one_50,
       setRoundingMode_51,
       x_2952,
       maxInt_32,
       minInt_32)
    val x_2953: lambdas_123 = con xEnv_138 (x_2954)
    return (x_2953)
fun x_2955 (env_1191:
              (word64, real32, word64, real32, lambdas_29, t_8, real32, real32) tuple,
            x_2956: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_3065 ()
  block L_3065 ()
    val minInt'_15: word64 = #0 (env_1191)
    val half_43: real32 = #1 (env_1191)
    val maxInt'_33: word64 = #2 (env_1191)
    val one_51: real32 = #3 (env_1191)
    val setRoundingMode_52: lambdas_29 = #4 (env_1191)
    val x_2958: t_8 = #5 (env_1191)
    val maxInt_33: real32 = #6 (env_1191)
    val minInt_33: real32 = #7 (env_1191)
    val x_2957: (real32, real32) tuple = (minInt_33, x_2956)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3066
  block L_3066 (env_1192: unit)
    call L_3067 (<=_6 (env_1192, x_2957)) handle _ => raise
  block L_3067 (x_2959: bool)
    case x_2959 of
      true => L_3069 | false => L_3068
  block L_3068 ()
    val x_2960: (real32, real32) tuple = (x_2956, minInt_33)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3070
  block L_3070 (env_1193: unit)
    call L_3071 (<_9 (env_1193, x_2960)) handle _ => raise
  block L_3071 (x_2961: bool)
    case x_2961 of
      true => L_3073 | false => L_3072
  block L_3072 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3073 ()
    val x_2962: (real32, real32) tuple = (minInt_33, one_51)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3074
  block L_3074 (env_1194: unit)
    call L_3075 (-_5 (env_1194, x_2962)) handle _ => raise
  block L_3075 (x_2963: real32)
    val x_2964: (real32, real32) tuple = (x_2963, x_2956)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3076
  block L_3076 (env_1195: unit)
    call L_3077 (<_9 (env_1195, x_2964)) handle _ => raise
  block L_3077 (x_2965: bool)
    case x_2965 of
      true => L_3079 | false => L_3078
  block L_3078 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3079 ()
    case x_2958 of
      TO_NEGINF_0 => L_3083
    | TO_ZERO_0 => L_3082
    | TO_NEAREST_0 => L_3081
    | TO_POSINF_0 => L_3080
  block L_3080 ()
    return (minInt'_15)
  block L_3081 ()
    val x_2966: (real32, real32) tuple = (x_2956, minInt_33)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3084
  block L_3084 (env_1196: unit)
    call L_3085 (-_5 (env_1196, x_2966)) handle _ => raise
  block L_3085 (x_2967: real32)
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_3086
  block L_3086 (env_1197: unit)
    call L_3087 (~_3 (env_1197, half_43)) handle _ => raise
  block L_3087 (x_2968: real32)
    val x_2969: (real32, real32) tuple = (x_2967, x_2968)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3088
  block L_3088 (env_1198: unit)
    call L_3089 (<_9 (env_1198, x_2969)) handle _ => raise
  block L_3089 (x_2970: bool)
    case x_2970 of
      true => L_3091 | false => L_3090
  block L_3090 ()
    return (minInt'_15)
  block L_3091 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3082 ()
    return (minInt'_15)
  block L_3083 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3069 ()
    val x_2971: (real32, real32) tuple = (x_2956, maxInt_33)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3092
  block L_3092 (env_1199: unit)
    call L_3093 (<=_6 (env_1199, x_2971)) handle _ => raise
  block L_3093 (x_2972: bool)
    case x_2972 of
      true => L_3095 | false => L_3094
  block L_3094 ()
    val x_2973: (real32, real32) tuple = (maxInt_33, one_51)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_3096
  block L_3096 (env_1200: unit)
    call L_3097 (+_4 (env_1200, x_2973)) handle _ => raise
  block L_3097 (x_2974: real32)
    val x_2975: (real32, real32) tuple = (x_2956, x_2974)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3098
  block L_3098 (env_1201: unit)
    call L_3099 (<_9 (env_1201, x_2975)) handle _ => raise
  block L_3099 (x_2976: bool)
    case x_2976 of
      true => L_3101 | false => L_3100
  block L_3100 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3101 ()
    case x_2958 of
      TO_NEGINF_0 => L_3105
    | TO_ZERO_0 => L_3104
    | TO_NEAREST_0 => L_3103
    | TO_POSINF_0 => L_3102
  block L_3102 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3103 ()
    val x_2977: (real32, real32) tuple = (x_2956, maxInt_33)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3106
  block L_3106 (env_1202: unit)
    call L_3107 (-_5 (env_1202, x_2977)) handle _ => raise
  block L_3107 (x_2978: real32)
    val x_2979: (real32, real32) tuple = (x_2978, half_43)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3108
  block L_3108 (env_1203: unit)
    call L_3109 (>=_8 (env_1203, x_2979)) handle _ => raise
  block L_3109 (x_2980: bool)
    case x_2980 of
      true => L_3111 | false => L_3110
  block L_3110 ()
    return (maxInt'_33)
  block L_3111 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3104 ()
    return (maxInt'_33)
  block L_3105 ()
    return (maxInt'_33)
  block L_3095 ()
    case x_2958 of
      TO_POSINF_0 => L_3115
    | TO_NEAREST_0 => L_3114
    | TO_ZERO_0 => L_3113
    | TO_NEGINF_0 => L_3112
  block L_3112 ()
    val x_2981: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2956)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3116
  block L_3116 (env_1204: unit)
    call tail toInt64Unsafe_3 (env_1204, x_2981)
  block L_3113 ()
    val x_2982: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2956)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3117
  block L_3117 (env_1205: unit)
    call tail toInt64Unsafe_3 (env_1205, x_2982)
  block L_3114 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3118
  block L_3118 (env_1206: unit)
    call L_3119 (x_2228 (env_1206, x_895 (*()*))) handle _ => raise
  block L_3119 (m'_25: t_8)
    case setRoundingMode_52 of
      setRoundingModeEnv_0 => L_3120
  block L_3120 (env_1207: (word32, cpointer, lambdas_155) tuple)
    call L_3121 (setRoundingMode_3 (env_1207, x_894 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3121 (x_2983: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3122
  block L_3122 (env_1208: unit)
    call L_3123 (round_3 (env_1208, x_2956)) handle _ => raise
  block L_3123 (x_2984: real32)
    case setRoundingMode_52 of
      setRoundingModeEnv_0 => L_3124
  block L_3124 (env_1209: (word32, cpointer, lambdas_155) tuple)
    call L_3125 (setRoundingMode_3 (env_1209, m'_25)) handle _ => raise
  block L_3125 (x_2985: unit)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3126
  block L_3126 (env_1210: unit)
    call tail toInt64Unsafe_3 (env_1210, x_2984)
  block L_3115 ()
    val x_2986: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2956)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3127
  block L_3127 (env_1211: unit)
    call tail toInt64Unsafe_3 (env_1211, x_2986)
fun x_2987 (env_1212: (real32, real32, lambdas_29) tuple, x_2988: t_8):
  {returns = Some (lambdas_125), raises = Some (exn)} =
L_3128 ()
  block L_3128 ()
    val minInt_34: real32 = #0 (env_1212)
    val maxInt_34: real32 = #1 (env_1212)
    val setRoundingMode_53: lambdas_29 = #2 (env_1212)
    val x_2990: (lambdas_29, t_8, real32, real32) tuple =
      (setRoundingMode_53, x_2988, maxInt_34, minInt_34)
    val x_2989: lambdas_125 = con xEnv_140 (x_2990)
    return (x_2989)
fun x_2991 (env_1213: (lambdas_29, t_8, real32, real32) tuple, x_2992: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_3129 ()
  block L_3129 ()
    val setRoundingMode_54: lambdas_29 = #0 (env_1213)
    val x_2994: t_8 = #1 (env_1213)
    val maxInt_35: real32 = #2 (env_1213)
    val minInt_35: real32 = #3 (env_1213)
    val x_2993: (real32, real32) tuple = (minInt_35, x_2992)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3130
  block L_3130 (env_1214: unit)
    call L_3131 (<=_6 (env_1214, x_2993)) handle _ => raise
  block L_3131 (x_2995: bool)
    case x_2995 of
      true => L_3133 | false => L_3132
  block L_3132 ()
    val x_2996: (real32, real32) tuple = (x_2992, minInt_35)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3134
  block L_3134 (env_1215: unit)
    call L_3135 (<_9 (env_1215, x_2996)) handle _ => raise
  block L_3135 (x_2997: bool)
    case x_2997 of
      true => L_3137 | false => L_3136
  block L_3136 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3137 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3133 ()
    val x_2998: (real32, real32) tuple = (x_2992, maxInt_35)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3138
  block L_3138 (env_1216: unit)
    call L_3139 (<=_6 (env_1216, x_2998)) handle _ => raise
  block L_3139 (x_2999: bool)
    case x_2999 of
      true => L_3141 | false => L_3140
  block L_3140 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3141 ()
    case x_2994 of
      TO_POSINF_0 => L_3145
    | TO_NEAREST_0 => L_3144
    | TO_ZERO_0 => L_3143
    | TO_NEGINF_0 => L_3142
  block L_3142 ()
    val x_3000: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_2992)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3146
  block L_3146 (env_1217: unit)
    call tail toInt64Unsafe_3 (env_1217, x_3000)
  block L_3143 ()
    val x_3001: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_2992)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3147
  block L_3147 (env_1218: unit)
    call tail toInt64Unsafe_3 (env_1218, x_3001)
  block L_3144 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3148
  block L_3148 (env_1219: unit)
    call L_3149 (x_2228 (env_1219, x_892 (*()*))) handle _ => raise
  block L_3149 (m'_26: t_8)
    case setRoundingMode_54 of
      setRoundingModeEnv_0 => L_3150
  block L_3150 (env_1220: (word32, cpointer, lambdas_155) tuple)
    call L_3151 (setRoundingMode_3 (env_1220, x_891 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3151 (x_3002: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3152
  block L_3152 (env_1221: unit)
    call L_3153 (round_3 (env_1221, x_2992)) handle _ => raise
  block L_3153 (x_3003: real32)
    case setRoundingMode_54 of
      setRoundingModeEnv_0 => L_3154
  block L_3154 (env_1222: (word32, cpointer, lambdas_155) tuple)
    call L_3155 (setRoundingMode_3 (env_1222, m'_26)) handle _ => raise
  block L_3155 (x_3004: unit)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3156
  block L_3156 (env_1223: unit)
    call tail toInt64Unsafe_3 (env_1223, x_3003)
  block L_3145 ()
    val x_3005: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_2992)
    case toInt64Unsafe_0 (*con toInt6 ... _194)*) of
      toInt64UnsafeEnv_0 => L_3157
  block L_3157 (env_1224: unit)
    call tail toInt64Unsafe_3 (env_1224, x_3005)
fun x_1771 (env_1225: (lambdas_68, lambdas_67, word64) tuple, x_3006: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_3158 ()
  block L_3158 ()
    val <<_29: lambdas_68 = #0 (env_1225)
    val >>_28: lambdas_67 = #1 (env_1225)
    val maxInt'_34: word64 = #2 (env_1225)
    val x_3007: (word64, word32) tuple = (maxInt'_34, x_3006)
    case >>_28 of
      >>Env_4 => L_3159
  block L_3159 (env_1226: (word32, word64) tuple)
    call L_3160 (>>_17 (env_1226, x_3007)) handle _ => raise
  block L_3160 (x_3008: word64)
    val x_3009: (word64, word32) tuple = (x_3008, x_3006)
    case <<_29 of
      <<Env_4 => L_3161
  block L_3161 (env_1227: (word32, word64) tuple)
    call tail <<_17 (env_1227, x_3009)
fun x_3010 (env_1228:
              (real32, real32, lambdas_29, real32, word32, real32, word32) tuple,
            x_3011: t_8):
  {returns = Some (lambdas_129), raises = Some (exn)} =
L_3162 ()
  block L_3162 ()
    val minInt_36: real32 = #0 (env_1228)
    val maxInt_36: real32 = #1 (env_1228)
    val setRoundingMode_55: lambdas_29 = #2 (env_1228)
    val one_52: real32 = #3 (env_1228)
    val maxInt'_35: word32 = #4 (env_1228)
    val half_44: real32 = #5 (env_1228)
    val minInt'_16: word32 = #6 (env_1228)
    val x_3013:
      (word32, real32, word32, real32, lambdas_29, t_8, real32, real32) tuple =
      (minInt'_16,
       half_44,
       maxInt'_35,
       one_52,
       setRoundingMode_55,
       x_3011,
       maxInt_36,
       minInt_36)
    val x_3012: lambdas_129 = con xEnv_145 (x_3013)
    return (x_3012)
fun x_3014 (env_1229:
              (word32, real32, word32, real32, lambdas_29, t_8, real32, real32) tuple,
            x_3015: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_3163 ()
  block L_3163 ()
    val minInt'_17: word32 = #0 (env_1229)
    val half_45: real32 = #1 (env_1229)
    val maxInt'_36: word32 = #2 (env_1229)
    val one_53: real32 = #3 (env_1229)
    val setRoundingMode_56: lambdas_29 = #4 (env_1229)
    val x_3017: t_8 = #5 (env_1229)
    val maxInt_37: real32 = #6 (env_1229)
    val minInt_37: real32 = #7 (env_1229)
    val x_3016: (real32, real32) tuple = (minInt_37, x_3015)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3164
  block L_3164 (env_1230: unit)
    call L_3165 (<=_6 (env_1230, x_3016)) handle _ => raise
  block L_3165 (x_3018: bool)
    case x_3018 of
      true => L_3167 | false => L_3166
  block L_3166 ()
    val x_3019: (real32, real32) tuple = (x_3015, minInt_37)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3168
  block L_3168 (env_1231: unit)
    call L_3169 (<_9 (env_1231, x_3019)) handle _ => raise
  block L_3169 (x_3020: bool)
    case x_3020 of
      true => L_3171 | false => L_3170
  block L_3170 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3171 ()
    val x_3021: (real32, real32) tuple = (minInt_37, one_53)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3172
  block L_3172 (env_1232: unit)
    call L_3173 (-_5 (env_1232, x_3021)) handle _ => raise
  block L_3173 (x_3022: real32)
    val x_3023: (real32, real32) tuple = (x_3022, x_3015)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3174
  block L_3174 (env_1233: unit)
    call L_3175 (<_9 (env_1233, x_3023)) handle _ => raise
  block L_3175 (x_3024: bool)
    case x_3024 of
      true => L_3177 | false => L_3176
  block L_3176 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3177 ()
    case x_3017 of
      TO_NEGINF_0 => L_3181
    | TO_ZERO_0 => L_3180
    | TO_NEAREST_0 => L_3179
    | TO_POSINF_0 => L_3178
  block L_3178 ()
    return (minInt'_17)
  block L_3179 ()
    val x_3025: (real32, real32) tuple = (x_3015, minInt_37)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3182
  block L_3182 (env_1234: unit)
    call L_3183 (-_5 (env_1234, x_3025)) handle _ => raise
  block L_3183 (x_3026: real32)
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_3184
  block L_3184 (env_1235: unit)
    call L_3185 (~_3 (env_1235, half_45)) handle _ => raise
  block L_3185 (x_3027: real32)
    val x_3028: (real32, real32) tuple = (x_3026, x_3027)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3186
  block L_3186 (env_1236: unit)
    call L_3187 (<_9 (env_1236, x_3028)) handle _ => raise
  block L_3187 (x_3029: bool)
    case x_3029 of
      true => L_3189 | false => L_3188
  block L_3188 ()
    return (minInt'_17)
  block L_3189 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3180 ()
    return (minInt'_17)
  block L_3181 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3167 ()
    val x_3030: (real32, real32) tuple = (x_3015, maxInt_37)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3190
  block L_3190 (env_1237: unit)
    call L_3191 (<=_6 (env_1237, x_3030)) handle _ => raise
  block L_3191 (x_3031: bool)
    case x_3031 of
      true => L_3193 | false => L_3192
  block L_3192 ()
    val x_3032: (real32, real32) tuple = (maxInt_37, one_53)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_3194
  block L_3194 (env_1238: unit)
    call L_3195 (+_4 (env_1238, x_3032)) handle _ => raise
  block L_3195 (x_3033: real32)
    val x_3034: (real32, real32) tuple = (x_3015, x_3033)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3196
  block L_3196 (env_1239: unit)
    call L_3197 (<_9 (env_1239, x_3034)) handle _ => raise
  block L_3197 (x_3035: bool)
    case x_3035 of
      true => L_3199 | false => L_3198
  block L_3198 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3199 ()
    case x_3017 of
      TO_NEGINF_0 => L_3203
    | TO_ZERO_0 => L_3202
    | TO_NEAREST_0 => L_3201
    | TO_POSINF_0 => L_3200
  block L_3200 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3201 ()
    val x_3036: (real32, real32) tuple = (x_3015, maxInt_37)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3204
  block L_3204 (env_1240: unit)
    call L_3205 (-_5 (env_1240, x_3036)) handle _ => raise
  block L_3205 (x_3037: real32)
    val x_3038: (real32, real32) tuple = (x_3037, half_45)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3206
  block L_3206 (env_1241: unit)
    call L_3207 (>=_8 (env_1241, x_3038)) handle _ => raise
  block L_3207 (x_3039: bool)
    case x_3039 of
      true => L_3209 | false => L_3208
  block L_3208 ()
    return (maxInt'_36)
  block L_3209 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3202 ()
    return (maxInt'_36)
  block L_3203 ()
    return (maxInt'_36)
  block L_3193 ()
    case x_3017 of
      TO_POSINF_0 => L_3213
    | TO_NEAREST_0 => L_3212
    | TO_ZERO_0 => L_3211
    | TO_NEGINF_0 => L_3210
  block L_3210 ()
    val x_3040: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3015)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3214
  block L_3214 (env_1242: unit)
    call tail toInt32Unsafe_3 (env_1242, x_3040)
  block L_3211 ()
    val x_3041: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3015)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3215
  block L_3215 (env_1243: unit)
    call tail toInt32Unsafe_3 (env_1243, x_3041)
  block L_3212 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3216
  block L_3216 (env_1244: unit)
    call L_3217 (x_2228 (env_1244, x_889 (*()*))) handle _ => raise
  block L_3217 (m'_27: t_8)
    case setRoundingMode_56 of
      setRoundingModeEnv_0 => L_3218
  block L_3218 (env_1245: (word32, cpointer, lambdas_155) tuple)
    call L_3219 (setRoundingMode_3 (env_1245, x_888 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3219 (x_3042: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3220
  block L_3220 (env_1246: unit)
    call L_3221 (round_3 (env_1246, x_3015)) handle _ => raise
  block L_3221 (x_3043: real32)
    case setRoundingMode_56 of
      setRoundingModeEnv_0 => L_3222
  block L_3222 (env_1247: (word32, cpointer, lambdas_155) tuple)
    call L_3223 (setRoundingMode_3 (env_1247, m'_27)) handle _ => raise
  block L_3223 (x_3044: unit)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3224
  block L_3224 (env_1248: unit)
    call tail toInt32Unsafe_3 (env_1248, x_3043)
  block L_3213 ()
    val x_3045: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3015)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3225
  block L_3225 (env_1249: unit)
    call tail toInt32Unsafe_3 (env_1249, x_3045)
fun x_3046 (env_1250: (real32, real32, lambdas_29) tuple, x_3047: t_8):
  {returns = Some (lambdas_131), raises = Some (exn)} =
L_3226 ()
  block L_3226 ()
    val minInt_38: real32 = #0 (env_1250)
    val maxInt_38: real32 = #1 (env_1250)
    val setRoundingMode_57: lambdas_29 = #2 (env_1250)
    val x_3049: (lambdas_29, t_8, real32, real32) tuple =
      (setRoundingMode_57, x_3047, maxInt_38, minInt_38)
    val x_3048: lambdas_131 = con xEnv_147 (x_3049)
    return (x_3048)
fun x_3050 (env_1251: (lambdas_29, t_8, real32, real32) tuple, x_3051: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_3227 ()
  block L_3227 ()
    val setRoundingMode_58: lambdas_29 = #0 (env_1251)
    val x_3053: t_8 = #1 (env_1251)
    val maxInt_39: real32 = #2 (env_1251)
    val minInt_39: real32 = #3 (env_1251)
    val x_3052: (real32, real32) tuple = (minInt_39, x_3051)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3228
  block L_3228 (env_1252: unit)
    call L_3229 (<=_6 (env_1252, x_3052)) handle _ => raise
  block L_3229 (x_3054: bool)
    case x_3054 of
      true => L_3231 | false => L_3230
  block L_3230 ()
    val x_3055: (real32, real32) tuple = (x_3051, minInt_39)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3232
  block L_3232 (env_1253: unit)
    call L_3233 (<_9 (env_1253, x_3055)) handle _ => raise
  block L_3233 (x_3056: bool)
    case x_3056 of
      true => L_3235 | false => L_3234
  block L_3234 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3235 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3231 ()
    val x_3057: (real32, real32) tuple = (x_3051, maxInt_39)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3236
  block L_3236 (env_1254: unit)
    call L_3237 (<=_6 (env_1254, x_3057)) handle _ => raise
  block L_3237 (x_3058: bool)
    case x_3058 of
      true => L_3239 | false => L_3238
  block L_3238 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3239 ()
    case x_3053 of
      TO_POSINF_0 => L_3243
    | TO_NEAREST_0 => L_3242
    | TO_ZERO_0 => L_3241
    | TO_NEGINF_0 => L_3240
  block L_3240 ()
    val x_3059: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3051)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3244
  block L_3244 (env_1255: unit)
    call tail toInt32Unsafe_3 (env_1255, x_3059)
  block L_3241 ()
    val x_3060: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3051)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3245
  block L_3245 (env_1256: unit)
    call tail toInt32Unsafe_3 (env_1256, x_3060)
  block L_3242 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3246
  block L_3246 (env_1257: unit)
    call L_3247 (x_2228 (env_1257, x_886 (*()*))) handle _ => raise
  block L_3247 (m'_28: t_8)
    case setRoundingMode_58 of
      setRoundingModeEnv_0 => L_3248
  block L_3248 (env_1258: (word32, cpointer, lambdas_155) tuple)
    call L_3249 (setRoundingMode_3 (env_1258, x_885 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3249 (x_3061: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3250
  block L_3250 (env_1259: unit)
    call L_3251 (round_3 (env_1259, x_3051)) handle _ => raise
  block L_3251 (x_3062: real32)
    case setRoundingMode_58 of
      setRoundingModeEnv_0 => L_3252
  block L_3252 (env_1260: (word32, cpointer, lambdas_155) tuple)
    call L_3253 (setRoundingMode_3 (env_1260, m'_28)) handle _ => raise
  block L_3253 (x_3063: unit)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3254
  block L_3254 (env_1261: unit)
    call tail toInt32Unsafe_3 (env_1261, x_3062)
  block L_3243 ()
    val x_3064: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3051)
    case toInt32Unsafe_0 (*con toInt3 ... _193)*) of
      toInt32UnsafeEnv_0 => L_3255
  block L_3255 (env_1262: unit)
    call tail toInt32Unsafe_3 (env_1262, x_3064)
fun x_1758 (env_1263: (lambdas_76, lambdas_75, word32) tuple, x_3065: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3256 ()
  block L_3256 ()
    val <<_30: lambdas_76 = #0 (env_1263)
    val >>_29: lambdas_75 = #1 (env_1263)
    val maxInt'_37: word32 = #2 (env_1263)
    val x_3066: (word32, word32) tuple = (maxInt'_37, x_3065)
    case >>_29 of
      >>Env_5 => L_3257
  block L_3257 (env_1264: (word32, word32) tuple)
    call L_3258 (>>_19 (env_1264, x_3066)) handle _ => raise
  block L_3258 (x_3067: word32)
    val x_3068: (word32, word32) tuple = (x_3067, x_3065)
    case <<_30 of
      <<Env_5 => L_3259
  block L_3259 (env_1265: (word32, word32) tuple)
    call tail <<_19 (env_1265, x_3068)
fun x_3069 (env_1266:
              (real32, real32, lambdas_29, real32, word16, real32, word16) tuple,
            x_3070: t_8):
  {returns = Some (lambdas_135), raises = Some (exn)} =
L_3260 ()
  block L_3260 ()
    val minInt_40: real32 = #0 (env_1266)
    val maxInt_40: real32 = #1 (env_1266)
    val setRoundingMode_59: lambdas_29 = #2 (env_1266)
    val one_54: real32 = #3 (env_1266)
    val maxInt'_38: word16 = #4 (env_1266)
    val half_46: real32 = #5 (env_1266)
    val minInt'_18: word16 = #6 (env_1266)
    val x_3072:
      (word16, real32, word16, real32, lambdas_29, t_8, real32, real32) tuple =
      (minInt'_18,
       half_46,
       maxInt'_38,
       one_54,
       setRoundingMode_59,
       x_3070,
       maxInt_40,
       minInt_40)
    val x_3071: lambdas_135 = con xEnv_152 (x_3072)
    return (x_3071)
fun x_3073 (env_1267:
              (word16, real32, word16, real32, lambdas_29, t_8, real32, real32) tuple,
            x_3074: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_3261 ()
  block L_3261 ()
    val minInt'_19: word16 = #0 (env_1267)
    val half_47: real32 = #1 (env_1267)
    val maxInt'_39: word16 = #2 (env_1267)
    val one_55: real32 = #3 (env_1267)
    val setRoundingMode_60: lambdas_29 = #4 (env_1267)
    val x_3076: t_8 = #5 (env_1267)
    val maxInt_41: real32 = #6 (env_1267)
    val minInt_41: real32 = #7 (env_1267)
    val x_3075: (real32, real32) tuple = (minInt_41, x_3074)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3262
  block L_3262 (env_1268: unit)
    call L_3263 (<=_6 (env_1268, x_3075)) handle _ => raise
  block L_3263 (x_3077: bool)
    case x_3077 of
      true => L_3265 | false => L_3264
  block L_3264 ()
    val x_3078: (real32, real32) tuple = (x_3074, minInt_41)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3266
  block L_3266 (env_1269: unit)
    call L_3267 (<_9 (env_1269, x_3078)) handle _ => raise
  block L_3267 (x_3079: bool)
    case x_3079 of
      true => L_3269 | false => L_3268
  block L_3268 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3269 ()
    val x_3080: (real32, real32) tuple = (minInt_41, one_55)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3270
  block L_3270 (env_1270: unit)
    call L_3271 (-_5 (env_1270, x_3080)) handle _ => raise
  block L_3271 (x_3081: real32)
    val x_3082: (real32, real32) tuple = (x_3081, x_3074)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3272
  block L_3272 (env_1271: unit)
    call L_3273 (<_9 (env_1271, x_3082)) handle _ => raise
  block L_3273 (x_3083: bool)
    case x_3083 of
      true => L_3275 | false => L_3274
  block L_3274 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3275 ()
    case x_3076 of
      TO_NEGINF_0 => L_3279
    | TO_ZERO_0 => L_3278
    | TO_NEAREST_0 => L_3277
    | TO_POSINF_0 => L_3276
  block L_3276 ()
    return (minInt'_19)
  block L_3277 ()
    val x_3084: (real32, real32) tuple = (x_3074, minInt_41)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3280
  block L_3280 (env_1272: unit)
    call L_3281 (-_5 (env_1272, x_3084)) handle _ => raise
  block L_3281 (x_3085: real32)
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_3282
  block L_3282 (env_1273: unit)
    call L_3283 (~_3 (env_1273, half_47)) handle _ => raise
  block L_3283 (x_3086: real32)
    val x_3087: (real32, real32) tuple = (x_3085, x_3086)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3284
  block L_3284 (env_1274: unit)
    call L_3285 (<_9 (env_1274, x_3087)) handle _ => raise
  block L_3285 (x_3088: bool)
    case x_3088 of
      true => L_3287 | false => L_3286
  block L_3286 ()
    return (minInt'_19)
  block L_3287 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3278 ()
    return (minInt'_19)
  block L_3279 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3265 ()
    val x_3089: (real32, real32) tuple = (x_3074, maxInt_41)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3288
  block L_3288 (env_1275: unit)
    call L_3289 (<=_6 (env_1275, x_3089)) handle _ => raise
  block L_3289 (x_3090: bool)
    case x_3090 of
      true => L_3291 | false => L_3290
  block L_3290 ()
    val x_3091: (real32, real32) tuple = (maxInt_41, one_55)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_3292
  block L_3292 (env_1276: unit)
    call L_3293 (+_4 (env_1276, x_3091)) handle _ => raise
  block L_3293 (x_3092: real32)
    val x_3093: (real32, real32) tuple = (x_3074, x_3092)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3294
  block L_3294 (env_1277: unit)
    call L_3295 (<_9 (env_1277, x_3093)) handle _ => raise
  block L_3295 (x_3094: bool)
    case x_3094 of
      true => L_3297 | false => L_3296
  block L_3296 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3297 ()
    case x_3076 of
      TO_NEGINF_0 => L_3301
    | TO_ZERO_0 => L_3300
    | TO_NEAREST_0 => L_3299
    | TO_POSINF_0 => L_3298
  block L_3298 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3299 ()
    val x_3095: (real32, real32) tuple = (x_3074, maxInt_41)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3302
  block L_3302 (env_1278: unit)
    call L_3303 (-_5 (env_1278, x_3095)) handle _ => raise
  block L_3303 (x_3096: real32)
    val x_3097: (real32, real32) tuple = (x_3096, half_47)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3304
  block L_3304 (env_1279: unit)
    call L_3305 (>=_8 (env_1279, x_3097)) handle _ => raise
  block L_3305 (x_3098: bool)
    case x_3098 of
      true => L_3307 | false => L_3306
  block L_3306 ()
    return (maxInt'_39)
  block L_3307 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3300 ()
    return (maxInt'_39)
  block L_3301 ()
    return (maxInt'_39)
  block L_3291 ()
    case x_3076 of
      TO_POSINF_0 => L_3311
    | TO_NEAREST_0 => L_3310
    | TO_ZERO_0 => L_3309
    | TO_NEGINF_0 => L_3308
  block L_3308 ()
    val x_3099: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3074)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3312
  block L_3312 (env_1280: unit)
    call tail toInt16Unsafe_3 (env_1280, x_3099)
  block L_3309 ()
    val x_3100: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3074)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3313
  block L_3313 (env_1281: unit)
    call tail toInt16Unsafe_3 (env_1281, x_3100)
  block L_3310 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3314
  block L_3314 (env_1282: unit)
    call L_3315 (x_2228 (env_1282, x_883 (*()*))) handle _ => raise
  block L_3315 (m'_29: t_8)
    case setRoundingMode_60 of
      setRoundingModeEnv_0 => L_3316
  block L_3316 (env_1283: (word32, cpointer, lambdas_155) tuple)
    call L_3317 (setRoundingMode_3 (env_1283, x_882 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3317 (x_3101: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3318
  block L_3318 (env_1284: unit)
    call L_3319 (round_3 (env_1284, x_3074)) handle _ => raise
  block L_3319 (x_3102: real32)
    case setRoundingMode_60 of
      setRoundingModeEnv_0 => L_3320
  block L_3320 (env_1285: (word32, cpointer, lambdas_155) tuple)
    call L_3321 (setRoundingMode_3 (env_1285, m'_29)) handle _ => raise
  block L_3321 (x_3103: unit)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3322
  block L_3322 (env_1286: unit)
    call tail toInt16Unsafe_3 (env_1286, x_3102)
  block L_3311 ()
    val x_3104: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3074)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3323
  block L_3323 (env_1287: unit)
    call tail toInt16Unsafe_3 (env_1287, x_3104)
fun x_3105 (env_1288: (real32, real32, lambdas_29) tuple, x_3106: t_8):
  {returns = Some (lambdas_137), raises = Some (exn)} =
L_3324 ()
  block L_3324 ()
    val minInt_42: real32 = #0 (env_1288)
    val maxInt_42: real32 = #1 (env_1288)
    val setRoundingMode_61: lambdas_29 = #2 (env_1288)
    val x_3108: (lambdas_29, t_8, real32, real32) tuple =
      (setRoundingMode_61, x_3106, maxInt_42, minInt_42)
    val x_3107: lambdas_137 = con xEnv_154 (x_3108)
    return (x_3107)
fun x_3109 (env_1289: (lambdas_29, t_8, real32, real32) tuple, x_3110: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_3325 ()
  block L_3325 ()
    val setRoundingMode_62: lambdas_29 = #0 (env_1289)
    val x_3112: t_8 = #1 (env_1289)
    val maxInt_43: real32 = #2 (env_1289)
    val minInt_43: real32 = #3 (env_1289)
    val x_3111: (real32, real32) tuple = (minInt_43, x_3110)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3326
  block L_3326 (env_1290: unit)
    call L_3327 (<=_6 (env_1290, x_3111)) handle _ => raise
  block L_3327 (x_3113: bool)
    case x_3113 of
      true => L_3329 | false => L_3328
  block L_3328 ()
    val x_3114: (real32, real32) tuple = (x_3110, minInt_43)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3330
  block L_3330 (env_1291: unit)
    call L_3331 (<_9 (env_1291, x_3114)) handle _ => raise
  block L_3331 (x_3115: bool)
    case x_3115 of
      true => L_3333 | false => L_3332
  block L_3332 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3333 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3329 ()
    val x_3116: (real32, real32) tuple = (x_3110, maxInt_43)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3334
  block L_3334 (env_1292: unit)
    call L_3335 (<=_6 (env_1292, x_3116)) handle _ => raise
  block L_3335 (x_3117: bool)
    case x_3117 of
      true => L_3337 | false => L_3336
  block L_3336 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3337 ()
    case x_3112 of
      TO_POSINF_0 => L_3341
    | TO_NEAREST_0 => L_3340
    | TO_ZERO_0 => L_3339
    | TO_NEGINF_0 => L_3338
  block L_3338 ()
    val x_3118: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3110)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3342
  block L_3342 (env_1293: unit)
    call tail toInt16Unsafe_3 (env_1293, x_3118)
  block L_3339 ()
    val x_3119: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3110)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3343
  block L_3343 (env_1294: unit)
    call tail toInt16Unsafe_3 (env_1294, x_3119)
  block L_3340 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3344
  block L_3344 (env_1295: unit)
    call L_3345 (x_2228 (env_1295, x_880 (*()*))) handle _ => raise
  block L_3345 (m'_30: t_8)
    case setRoundingMode_62 of
      setRoundingModeEnv_0 => L_3346
  block L_3346 (env_1296: (word32, cpointer, lambdas_155) tuple)
    call L_3347 (setRoundingMode_3 (env_1296, x_879 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3347 (x_3120: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3348
  block L_3348 (env_1297: unit)
    call L_3349 (round_3 (env_1297, x_3110)) handle _ => raise
  block L_3349 (x_3121: real32)
    case setRoundingMode_62 of
      setRoundingModeEnv_0 => L_3350
  block L_3350 (env_1298: (word32, cpointer, lambdas_155) tuple)
    call L_3351 (setRoundingMode_3 (env_1298, m'_30)) handle _ => raise
  block L_3351 (x_3122: unit)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3352
  block L_3352 (env_1299: unit)
    call tail toInt16Unsafe_3 (env_1299, x_3121)
  block L_3341 ()
    val x_3123: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3110)
    case toInt16Unsafe_0 (*con toInt1 ... _192)*) of
      toInt16UnsafeEnv_0 => L_3353
  block L_3353 (env_1300: unit)
    call tail toInt16Unsafe_3 (env_1300, x_3123)
fun x_1745 (env_1301: (lambdas_84, lambdas_83, word16) tuple, x_3124: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_3354 ()
  block L_3354 ()
    val <<_31: lambdas_84 = #0 (env_1301)
    val >>_30: lambdas_83 = #1 (env_1301)
    val maxInt'_40: word16 = #2 (env_1301)
    val x_3125: (word16, word32) tuple = (maxInt'_40, x_3124)
    case >>_30 of
      >>Env_6 => L_3355
  block L_3355 (env_1302: (word32, word16) tuple)
    call L_3356 (>>_21 (env_1302, x_3125)) handle _ => raise
  block L_3356 (x_3126: word16)
    val x_3127: (word16, word32) tuple = (x_3126, x_3124)
    case <<_31 of
      <<Env_6 => L_3357
  block L_3357 (env_1303: (word32, word16) tuple)
    call tail <<_21 (env_1303, x_3127)
fun x_3128 (env_1304:
              (real32, real32, lambdas_29, real32, word8, real32, word8) tuple,
            x_3129: t_8):
  {returns = Some (lambdas_141), raises = Some (exn)} =
L_3358 ()
  block L_3358 ()
    val minInt_44: real32 = #0 (env_1304)
    val maxInt_44: real32 = #1 (env_1304)
    val setRoundingMode_63: lambdas_29 = #2 (env_1304)
    val one_56: real32 = #3 (env_1304)
    val maxInt'_41: word8 = #4 (env_1304)
    val half_48: real32 = #5 (env_1304)
    val minInt'_20: word8 = #6 (env_1304)
    val x_3131:
      (word8, real32, word8, real32, lambdas_29, t_8, real32, real32) tuple =
      (minInt'_20,
       half_48,
       maxInt'_41,
       one_56,
       setRoundingMode_63,
       x_3129,
       maxInt_44,
       minInt_44)
    val x_3130: lambdas_141 = con xEnv_159 (x_3131)
    return (x_3130)
fun x_3132 (env_1305:
              (word8, real32, word8, real32, lambdas_29, t_8, real32, real32) tuple,
            x_3133: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_3359 ()
  block L_3359 ()
    val minInt'_21: word8 = #0 (env_1305)
    val half_49: real32 = #1 (env_1305)
    val maxInt'_42: word8 = #2 (env_1305)
    val one_57: real32 = #3 (env_1305)
    val setRoundingMode_64: lambdas_29 = #4 (env_1305)
    val x_3135: t_8 = #5 (env_1305)
    val maxInt_45: real32 = #6 (env_1305)
    val minInt_45: real32 = #7 (env_1305)
    val x_3134: (real32, real32) tuple = (minInt_45, x_3133)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3360
  block L_3360 (env_1306: unit)
    call L_3361 (<=_6 (env_1306, x_3134)) handle _ => raise
  block L_3361 (x_3136: bool)
    case x_3136 of
      true => L_3363 | false => L_3362
  block L_3362 ()
    val x_3137: (real32, real32) tuple = (x_3133, minInt_45)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3364
  block L_3364 (env_1307: unit)
    call L_3365 (<_9 (env_1307, x_3137)) handle _ => raise
  block L_3365 (x_3138: bool)
    case x_3138 of
      true => L_3367 | false => L_3366
  block L_3366 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3367 ()
    val x_3139: (real32, real32) tuple = (minInt_45, one_57)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3368
  block L_3368 (env_1308: unit)
    call L_3369 (-_5 (env_1308, x_3139)) handle _ => raise
  block L_3369 (x_3140: real32)
    val x_3141: (real32, real32) tuple = (x_3140, x_3133)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3370
  block L_3370 (env_1309: unit)
    call L_3371 (<_9 (env_1309, x_3141)) handle _ => raise
  block L_3371 (x_3142: bool)
    case x_3142 of
      true => L_3373 | false => L_3372
  block L_3372 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3373 ()
    case x_3135 of
      TO_NEGINF_0 => L_3377
    | TO_ZERO_0 => L_3376
    | TO_NEAREST_0 => L_3375
    | TO_POSINF_0 => L_3374
  block L_3374 ()
    return (minInt'_21)
  block L_3375 ()
    val x_3143: (real32, real32) tuple = (x_3133, minInt_45)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3378
  block L_3378 (env_1310: unit)
    call L_3379 (-_5 (env_1310, x_3143)) handle _ => raise
  block L_3379 (x_3144: real32)
    case ~_0 (*con ~Env_0 (x_178)*) of
      ~Env_0 => L_3380
  block L_3380 (env_1311: unit)
    call L_3381 (~_3 (env_1311, half_49)) handle _ => raise
  block L_3381 (x_3145: real32)
    val x_3146: (real32, real32) tuple = (x_3144, x_3145)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3382
  block L_3382 (env_1312: unit)
    call L_3383 (<_9 (env_1312, x_3146)) handle _ => raise
  block L_3383 (x_3147: bool)
    case x_3147 of
      true => L_3385 | false => L_3384
  block L_3384 ()
    return (minInt'_21)
  block L_3385 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3376 ()
    return (minInt'_21)
  block L_3377 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3363 ()
    val x_3148: (real32, real32) tuple = (x_3133, maxInt_45)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3386
  block L_3386 (env_1313: unit)
    call L_3387 (<=_6 (env_1313, x_3148)) handle _ => raise
  block L_3387 (x_3149: bool)
    case x_3149 of
      true => L_3389 | false => L_3388
  block L_3388 ()
    val x_3150: (real32, real32) tuple = (maxInt_45, one_57)
    case +_1 (*con +Env_1 (x_176)*) of
      +Env_1 => L_3390
  block L_3390 (env_1314: unit)
    call L_3391 (+_4 (env_1314, x_3150)) handle _ => raise
  block L_3391 (x_3151: real32)
    val x_3152: (real32, real32) tuple = (x_3133, x_3151)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3392
  block L_3392 (env_1315: unit)
    call L_3393 (<_9 (env_1315, x_3152)) handle _ => raise
  block L_3393 (x_3153: bool)
    case x_3153 of
      true => L_3395 | false => L_3394
  block L_3394 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3395 ()
    case x_3135 of
      TO_NEGINF_0 => L_3399
    | TO_ZERO_0 => L_3398
    | TO_NEAREST_0 => L_3397
    | TO_POSINF_0 => L_3396
  block L_3396 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3397 ()
    val x_3154: (real32, real32) tuple = (x_3133, maxInt_45)
    case -_1 (*con -Env_1 (x_177)*) of
      -Env_1 => L_3400
  block L_3400 (env_1316: unit)
    call L_3401 (-_5 (env_1316, x_3154)) handle _ => raise
  block L_3401 (x_3155: real32)
    val x_3156: (real32, real32) tuple = (x_3155, half_49)
    case >=_3 (*con >=Env_ ... e_10)*) of
      >=Env_3 => L_3402
  block L_3402 (env_1317: unit)
    call L_3403 (>=_8 (env_1317, x_3156)) handle _ => raise
  block L_3403 (x_3157: bool)
    case x_3157 of
      true => L_3405 | false => L_3404
  block L_3404 ()
    return (maxInt'_42)
  block L_3405 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3398 ()
    return (maxInt'_42)
  block L_3399 ()
    return (maxInt'_42)
  block L_3389 ()
    case x_3135 of
      TO_POSINF_0 => L_3409
    | TO_NEAREST_0 => L_3408
    | TO_ZERO_0 => L_3407
    | TO_NEGINF_0 => L_3406
  block L_3406 ()
    val x_3158: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3133)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3410
  block L_3410 (env_1318: unit)
    call tail toInt8Unsafe_3 (env_1318, x_3158)
  block L_3407 ()
    val x_3159: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3133)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3411
  block L_3411 (env_1319: unit)
    call tail toInt8Unsafe_3 (env_1319, x_3159)
  block L_3408 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3412
  block L_3412 (env_1320: unit)
    call L_3413 (x_2228 (env_1320, x_877 (*()*))) handle _ => raise
  block L_3413 (m'_31: t_8)
    case setRoundingMode_64 of
      setRoundingModeEnv_0 => L_3414
  block L_3414 (env_1321: (word32, cpointer, lambdas_155) tuple)
    call L_3415 (setRoundingMode_3 (env_1321, x_876 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3415 (x_3160: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3416
  block L_3416 (env_1322: unit)
    call L_3417 (round_3 (env_1322, x_3133)) handle _ => raise
  block L_3417 (x_3161: real32)
    case setRoundingMode_64 of
      setRoundingModeEnv_0 => L_3418
  block L_3418 (env_1323: (word32, cpointer, lambdas_155) tuple)
    call L_3419 (setRoundingMode_3 (env_1323, m'_31)) handle _ => raise
  block L_3419 (x_3162: unit)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3420
  block L_3420 (env_1324: unit)
    call tail toInt8Unsafe_3 (env_1324, x_3161)
  block L_3409 ()
    val x_3163: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3133)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3421
  block L_3421 (env_1325: unit)
    call tail toInt8Unsafe_3 (env_1325, x_3163)
fun x_3164 (env_1326: (real32, real32, lambdas_29) tuple, x_3165: t_8):
  {returns = Some (lambdas_143), raises = Some (exn)} =
L_3422 ()
  block L_3422 ()
    val minInt_46: real32 = #0 (env_1326)
    val maxInt_46: real32 = #1 (env_1326)
    val setRoundingMode_65: lambdas_29 = #2 (env_1326)
    val x_3167: (lambdas_29, t_8, real32, real32) tuple =
      (setRoundingMode_65, x_3165, maxInt_46, minInt_46)
    val x_3166: lambdas_143 = con xEnv_161 (x_3167)
    return (x_3166)
fun x_3168 (env_1327: (lambdas_29, t_8, real32, real32) tuple, x_3169: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_3423 ()
  block L_3423 ()
    val setRoundingMode_66: lambdas_29 = #0 (env_1327)
    val x_3171: t_8 = #1 (env_1327)
    val maxInt_47: real32 = #2 (env_1327)
    val minInt_47: real32 = #3 (env_1327)
    val x_3170: (real32, real32) tuple = (minInt_47, x_3169)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3424
  block L_3424 (env_1328: unit)
    call L_3425 (<=_6 (env_1328, x_3170)) handle _ => raise
  block L_3425 (x_3172: bool)
    case x_3172 of
      true => L_3427 | false => L_3426
  block L_3426 ()
    val x_3173: (real32, real32) tuple = (x_3169, minInt_47)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_3428
  block L_3428 (env_1329: unit)
    call L_3429 (<_9 (env_1329, x_3173)) handle _ => raise
  block L_3429 (x_3174: bool)
    case x_3174 of
      true => L_3431 | false => L_3430
  block L_3430 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_3431 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3427 ()
    val x_3175: (real32, real32) tuple = (x_3169, maxInt_47)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_3432
  block L_3432 (env_1330: unit)
    call L_3433 (<=_6 (env_1330, x_3175)) handle _ => raise
  block L_3433 (x_3176: bool)
    case x_3176 of
      true => L_3435 | false => L_3434
  block L_3434 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3435 ()
    case x_3171 of
      TO_POSINF_0 => L_3439
    | TO_NEAREST_0 => L_3438
    | TO_ZERO_0 => L_3437
    | TO_NEGINF_0 => L_3436
  block L_3436 ()
    val x_3177: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realFloor} (x_3169)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3440
  block L_3440 (env_1331: unit)
    call tail toInt8Unsafe_3 (env_1331, x_3177)
  block L_3437 ()
    val x_3178: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realTrunc} (x_3169)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3441
  block L_3441 (env_1332: unit)
    call tail toInt8Unsafe_3 (env_1332, x_3178)
  block L_3438 ()
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3442
  block L_3442 (env_1333: unit)
    call L_3443 (x_2228 (env_1333, x_874 (*()*))) handle _ => raise
  block L_3443 (m'_32: t_8)
    case setRoundingMode_66 of
      setRoundingModeEnv_0 => L_3444
  block L_3444 (env_1334: (word32, cpointer, lambdas_155) tuple)
    call L_3445 (setRoundingMode_3 (env_1334, x_873 (*con TO_NEAREST_0*))) handle _ => raise
  block L_3445 (x_3179: unit)
    case round_0 (*con roundE ... _181)*) of
      roundEnv_0 => L_3446
  block L_3446 (env_1335: unit)
    call L_3447 (round_3 (env_1335, x_3169)) handle _ => raise
  block L_3447 (x_3180: real32)
    case setRoundingMode_66 of
      setRoundingModeEnv_0 => L_3448
  block L_3448 (env_1336: (word32, cpointer, lambdas_155) tuple)
    call L_3449 (setRoundingMode_3 (env_1336, m'_32)) handle _ => raise
  block L_3449 (x_3181: unit)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3450
  block L_3450 (env_1337: unit)
    call tail toInt8Unsafe_3 (env_1337, x_3180)
  block L_3439 ()
    val x_3182: real32 =
      prim CFunction {args = (real32),
                      convention = cdecl,
                      inline = true,
                      kind = Impure,
                      prototype = {args = (Real32), res = Some Real32},
                      return = real32,
                      symbolScope = private,
                      target = Real32_realCeil} (x_3169)
    case toInt8Unsafe_0 (*con toInt8 ... _191)*) of
      toInt8UnsafeEnv_0 => L_3451
  block L_3451 (env_1338: unit)
    call tail toInt8Unsafe_3 (env_1338, x_3182)
fun x_1732 (env_1339: (lambdas_92, lambdas_91, word8) tuple, x_3183: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3452 ()
  block L_3452 ()
    val <<_32: lambdas_92 = #0 (env_1339)
    val >>_31: lambdas_91 = #1 (env_1339)
    val maxInt'_43: word8 = #2 (env_1339)
    val x_3184: (word8, word32) tuple = (maxInt'_43, x_3183)
    case >>_31 of
      >>Env_7 => L_3453
  block L_3453 (env_1340: (word32, word8) tuple)
    call L_3454 (>>_23 (env_1340, x_3184)) handle _ => raise
  block L_3454 (x_3185: word8)
    val x_3186: (word8, word32) tuple = (x_3185, x_3183)
    case <<_32 of
      <<Env_7 => L_3455
  block L_3455 (env_1341: (word32, word8) tuple)
    call tail <<_23 (env_1341, x_3186)
fun x_3187 (env_1342: lambdas_29, x_3188: t_8):
  {returns = Some (lambdas_147), raises = Some (exn)} =
L_3456 ()
  block L_3456 ()
    val x_3190: (t_8, lambdas_29) tuple = (x_3188, env_1342)
    val x_3189: lambdas_147 = con xEnv_166 (x_3190)
    return (x_3189)
fun x_3191 (env_1343: (t_8, lambdas_29) tuple, x_3192: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_3457 ()
  block L_3457 ()
    val x_3193: t_8 = #0 (env_1343)
    val setRoundingMode_67: lambdas_29 = #1 (env_1343)
    case x_863 (*con xEnv_41 (x_862)*) of
      xEnv_41 => L_3458
  block L_3458 (env_1344: unit)
    call L_3459 (x_2228 (env_1344, x_871 (*()*))) handle _ => raise
  block L_3459 (m'_33: t_8)
    case setRoundingMode_67 of
      setRoundingModeEnv_0 => L_3460
  block L_3460 (env_1345: (word32, cpointer, lambdas_155) tuple)
    call L_3461 (setRoundingMode_3 (env_1345, x_3193)) handle _ => raise
  block L_3461 (x_3194: unit)
    case fromReal32Unsafe_0 (*con fromRe ... _186)*) of
      fromReal32UnsafeEnv_0 => L_3462
  block L_3462 (env_1346: unit)
    call L_3463 (fromReal32Unsafe_3 (env_1346, x_3192)) handle _ => raise
  block L_3463 (x_3195: real32)
    case setRoundingMode_67 of
      setRoundingModeEnv_0 => L_3464
  block L_3464 (env_1347: (word32, cpointer, lambdas_155) tuple)
    call L_3465 (setRoundingMode_3 (env_1347, m'_33)) handle _ => raise
  block L_3465 (x_3196: unit)
    return (x_3195)
fun x_3197 (env_1348: unit, x_3198: t_8):
  {returns = Some (lambdas_277), raises = Some (exn)} =
L_3466 ()
  block L_3466 ()
    return (fromReal32Unsafe_0 (*con fromRe ... _186)*))
fun class_21 (env_1349: (word32, word32, word32) tuple, x_3199: real32):
  {returns = Some (float_class_0), raises = Some (exn)} =
L_3467 ()
  block L_3467 ()
    val zero_60: word32 = #0 (env_1349)
    val significandMask_3: word32 = #1 (env_1349)
    val exponentMask_3: word32 = #2 (env_1349)
    val x_3201: word32 = prim Real32_castToWord32 (x_3199)
    val x_3200: (word32, word32) tuple = (x_3201, exponentMask_3)
    case andb_0 (*con andbEn ... _119)*) of
      andbEnv_0 => L_3468
  block L_3468 (env_1350: unit)
    call L_3469 (andb_3 (env_1350, x_3200)) handle _ => raise
  block L_3469 (x_3202: word32)
    val x_3203: (word32, word32) tuple = (x_3202, exponentMask_3)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3470
  block L_3470 (env_1351: unit)
    call L_3471 (x_1711 (env_1351, x_3203)) handle _ => raise
  block L_3471 (x_3204: bool)
    case x_3204 of
      true => L_3473 | false => L_3472
  block L_3472 ()
    val x_3205: (word32, word32) tuple = (x_3201, exponentMask_3)
    case andb_0 (*con andbEn ... _119)*) of
      andbEnv_0 => L_3474
  block L_3474 (env_1352: unit)
    call L_3475 (andb_3 (env_1352, x_3205)) handle _ => raise
  block L_3475 (x_3206: word32)
    val x_3207: (word32, word32) tuple = (x_3206, zero_60)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3476
  block L_3476 (env_1353: unit)
    call L_3477 (x_1711 (env_1353, x_3207)) handle _ => raise
  block L_3477 (x_3208: bool)
    case x_3208 of
      true => L_3479 | false => L_3478
  block L_3478 ()
    return (x_868 (*con NORMAL_1*))
  block L_3479 ()
    val x_3209: (word32, word32) tuple = (x_3201, significandMask_3)
    case andb_0 (*con andbEn ... _119)*) of
      andbEnv_0 => L_3480
  block L_3480 (env_1354: unit)
    call L_3481 (andb_3 (env_1354, x_3209)) handle _ => raise
  block L_3481 (x_3210: word32)
    val x_3211: (word32, word32) tuple = (x_3210, zero_60)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3482
  block L_3482 (env_1355: unit)
    call L_3483 (x_1711 (env_1355, x_3211)) handle _ => raise
  block L_3483 (x_3212: bool)
    case x_3212 of
      true => L_3485 | false => L_3484
  block L_3484 ()
    return (x_867 (*con SUBNORMAL_1*))
  block L_3485 ()
    return (x_866 (*con ZERO_1*))
  block L_3473 ()
    val x_3213: (word32, word32) tuple = (x_3201, significandMask_3)
    case andb_0 (*con andbEn ... _119)*) of
      andbEnv_0 => L_3486
  block L_3486 (env_1356: unit)
    call L_3487 (andb_3 (env_1356, x_3213)) handle _ => raise
  block L_3487 (x_3214: word32)
    val x_3215: (word32, word32) tuple = (x_3214, zero_60)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3488
  block L_3488 (env_1357: unit)
    call L_3489 (x_1711 (env_1357, x_3215)) handle _ => raise
  block L_3489 (x_3216: bool)
    case x_3216 of
      true => L_3491 | false => L_3490
  block L_3490 ()
    return (x_865 (*con NAN_1*))
  block L_3491 ()
    return (x_864 (*con INF_0*))
fun mkMask_0 (env_1358: (lambdas_44, word32) tuple, x_3217: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3492 ()
  block L_3492 ()
    val <<_33: lambdas_44 = #0 (env_1358)
    val zero_61: word32 = #1 (env_1358)
    case notb_2 (*con notbEn ... _121)*) of
      notbEnv_2 => L_3493
  block L_3493 (env_1359: unit)
    call L_3494 (notb_6 (env_1359, zero_61)) handle _ => raise
  block L_3494 (x_3218: word32)
    val x_3219: (word32, word32) tuple = (x_3218, x_3217)
    case <<_33 of
      <<Env_1 => L_3495
  block L_3495 (env_1360: (word32, word32) tuple)
    call L_3496 (<<_8 (env_1360, x_3219)) handle _ => raise
  block L_3496 (x_3220: word32)
    case notb_2 (*con notbEn ... _121)*) of
      notbEnv_2 => L_3497
  block L_3497 (env_1361: unit)
    call tail notb_6 (env_1361, x_3220)
fun x_2228 (env_1362: unit, x_3221: unit):
  {returns = Some (t_8), raises = Some (exn)} =
L_3498 ()
  block L_3498 ()
    val x_3223: word32 =
      prim CFunction {args = (),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = IEEEReal_getRoundingMode} ()
    val x_3222: (word32, word32) tuple = (x_3223, FE_TONEAREST_0 (*0x0:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3499
  block L_3499 (env_1363: unit)
    call L_3500 (x_1711 (env_1363, x_3222)) handle _ => raise
  block L_3500 (x_3224: bool)
    case x_3224 of
      true => L_3502 | false => L_3501
  block L_3501 ()
    val x_3225: (word32, word32) tuple = (x_3223, FE_DOWNWARD_0 (*0x400:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3503
  block L_3503 (env_1364: unit)
    call L_3504 (x_1711 (env_1364, x_3225)) handle _ => raise
  block L_3504 (x_3226: bool)
    case x_3226 of
      true => L_3506 | false => L_3505
  block L_3505 ()
    val x_3227: (word32, word32) tuple = (x_3223, FE_UPWARD_0 (*0x800:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3507
  block L_3507 (env_1365: unit)
    call L_3508 (x_1711 (env_1365, x_3227)) handle _ => raise
  block L_3508 (x_3228: bool)
    case x_3228 of
      true => L_3510 | false => L_3509
  block L_3509 ()
    val x_3229: (word32, word32) tuple = (x_3223, FE_TOWARDZERO_0 (*0xC00:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3511
  block L_3511 (env_1366: unit)
    call L_3512 (x_1711 (env_1366, x_3229)) handle _ => raise
  block L_3512 (x_3230: bool)
    case x_3230 of
      true => L_3514 | false => L_3513
  block L_3513 ()
    raise (x_861 (*con Fail_0 (x_860)*))
  block L_3514 ()
    return (x_858 (*con TO_ZERO_0*))
  block L_3510 ()
    return (x_857 (*con TO_POSINF_0*))
  block L_3506 ()
    return (x_856 (*con TO_NEGINF_0*))
  block L_3502 ()
    return (x_855 (*con TO_NEAREST_0*))
fun setRoundingMode_3 (env_1367: (word32, cpointer, lambdas_155) tuple,
                       x_3231: t_8):
  {returns = Some (unit), raises = Some (exn)} =
L_3515 ()
  block L_3515 ()
    val inval_1: word32 = #0 (env_1367)
    val null_1: cpointer = #1 (env_1367)
    val arrayAlloc_4: lambdas_155 = #2 (env_1367)
    case x_3231 of
      TO_NEAREST_0 => L_3519
    | TO_POSINF_0 => L_3518
    | TO_ZERO_0 => L_3517
    | TO_NEGINF_0 => L_3516
  block L_3516 ()
    goto L_3520 (FE_DOWNWARD_0 (*0x400:w32*))
  block L_3517 ()
    goto L_3520 (FE_TOWARDZERO_0 (*0xC00:w32*))
  block L_3518 ()
    goto L_3520 (FE_UPWARD_0 (*0x800:w32*))
  block L_3519 ()
    goto L_3520 (FE_TONEAREST_0 (*0x0:w32*))
  block L_3520 (x_3232: word32)
    val x_3233: (word32, word32) tuple =
      (x_3232, FE_NOSUPPORT_0 (*0xFFFFFFFF:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3521
  block L_3521 (env_1368: unit)
    call L_3522 (x_1711 (env_1368, x_3233)) handle _ => raise
  block L_3522 (x_3234: bool)
    case x_3234 of
      true => L_3524 | false => L_3523
  block L_3523 ()
    val x_3236: word32 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Int32},
                      return = word32,
                      symbolScope = private,
                      target = IEEEReal_setRoundingMode} (x_3232)
    val x_3235: (word32, word32) tuple = (x_3236, x_844 (*0x0:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3525
  block L_3525 (env_1369: unit)
    call L_3526 (x_1711 (env_1369, x_3235)) handle _ => raise
  block L_3526 (x_3237: bool)
    case x_3237 of
      true => L_3528 | false => L_3527
  block L_3527 ()
    val x_3238: word64 =
      prim CFunction {args = (word32),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Int32), res = Some Word64},
                      return = word64,
                      symbolScope = private,
                      target = Posix_Error_strError} (inval_1)
    case fromWord_0 (*con fromWo ... _167)*) of
      fromWordEnv_0 => L_3529
  block L_3529 (env_1370: unit)
    call L_3530 (fromWord_1 (env_1370, x_3238)) handle _ => raise
  block L_3530 (x_3239: cpointer)
    val x_3240: bool = prim MLton_equal[cpointer] (x_3239, null_1)
    case x_3240 of
      true => L_3532 | false => L_3531
  block L_3531 ()
    call L_3533 (loop_15 (x_3238, x_850 (*0x0:w32*))) handle _ => raise
  block L_3533 (x_3241: word32)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_3534
  block L_3534 (env_1371: unit)
    call L_3535 (fromIntForLength_1 (env_1371, x_3241)) handle _ => raise
  block L_3535 (x_3242: word64)
    case arrayAlloc_4 of
      arrayAllocEnv_0 => L_3536
  block L_3536 (env_1372: word64)
    call L_3537 (arrayAlloc_5 (env_1372, x_3242)) handle _ => raise
  block L_3537 (a_2: (word8) array)
    val tuple_70: (word64, word64, (word8) array) tuple = (x_3242, x_3238, a_2)
    call L_3538 (loop_16 (tuple_70, x_1117)) handle _ => raise
  block L_3538 (b_10: unit)
    case x_297 (*con xEnv_33 (x_296)*) of
      xEnv_33 => L_3539
  block L_3539 (env_1373: unit)
    call L_3540 (x_3243 (env_1373, a_2)) handle _ => raise
  block L_3540 (x_3244: (word8) array)
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_3541
  block L_3541 (env_1374: unit)
    call L_3542 (x_1452 (env_1374, x_3244)) handle _ => raise
  block L_3532 ()
    goto L_3542 (x_846 (*"Unknown error"*))
  block L_3542 (x_3245: (word8) vector)
    val x_3249: t_0 = con SOME_0 (inval_1)
    val x_3248: ((word8) vector, t_0) tuple = (x_3245, x_3249)
    val x_3247: ((unit) ref, ((word8) vector, t_0) tuple) tuple =
      (x_1116, x_3248)
    val x_3246: exn = con SysErr_0 (x_3247)
    raise (x_3246)
  block L_3528 ()
    return (x_845 (*()*))
  block L_3524 ()
    raise (x_843 (*con Fail_0 (x_842)*))
fun loop_16 (env_1375: (word64, word64, (word8) array) tuple,
             x_3250: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3543 ()
  block L_3543 ()
    val x_3252: word64 = #0 (env_1375)
    val x_3253: word64 = #1 (env_1375)
    val a_3: (word8) array = #2 (env_1375)
    val b_11: unit = #1 (x_3250)
    val i_2: word64 = #0 (x_3250)
    val x_3251: (word64, word64) tuple = (i_2, x_3252)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3544
  block L_3544 (env_1376: unit)
    call L_3545 (>=_9 (env_1376, x_3251)) handle _ => raise
  block L_3545 (x_3254: bool)
    case x_3254 of
      true => L_3547 | false => L_3546
  block L_3546 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3548
  block L_3548 (env_1377: unit)
    call L_3549 (sextdFromInt64ToInt32_1 (env_1377, i_2)) handle _ => raise
  block L_3549 (x_3255: word32)
    val x_3256: (word64, word32) tuple = (x_3253, x_3255)
    case sub_0 (*con subEnv ... e_33)*) of
      subEnv_0 => L_3550
  block L_3550 (env_1378: unit)
    call L_3551 (sub_1 (env_1378, x_3256)) handle _ => raise
  block L_3551 (x_3257: word8)
    val x_3258: ((word8) array, word64, word8) tuple = (a_3, i_2, x_3257)
    case x_158 (*con xEnv_19 (x_157)*) of
      xEnv_19 => L_3552
  block L_3552 (env_1379: unit)
    call L_3553 (x_3259 (env_1379, x_3258)) handle _ => raise
  block L_3553 (x_3260: unit)
    val x_3261: (word64, word64) tuple = (i_2, x_853 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3554
  block L_3554 (env_1380: unit)
    call L_3555 (+!_2 (env_1380, x_3261)) handle _ => raise
  block L_3555 (x_3262: word64)
    val x_3263: (word64, unit) tuple = (x_3262, x_852 (*()*))
    call tail loop_16 (env_1375, x_3263)
  block L_3547 ()
    return (b_11)
fun loop_15 (env_1381: word64, x_3264: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3556 ()
  block L_3556 ()
    val x_3265: (word64, word32) tuple = (env_1381, x_3264)
    case sub_0 (*con subEnv ... e_33)*) of
      subEnv_0 => L_3557
  block L_3557 (env_1382: unit)
    call L_3558 (sub_1 (env_1382, x_3265)) handle _ => raise
  block L_3558 (x_3266: word8)
    case8 x_3266 of
      0x0:w8 => L_3559 | _ => L_3560
  block L_3560 ()
    goto L_3561 (x_847 (*con false*))
  block L_3559 ()
    goto L_3561 (x_848 (*con true*))
  block L_3561 (x_3267: bool)
    case x_3267 of
      true => L_3563 | false => L_3562
  block L_3562 ()
    val x_3268: (word32, word32) tuple = (x_3264, x_849 (*0x1:w32*))
    case +!_0 (*con +!Env_0 (x_132)*) of
      +!Env_0 => L_3564
  block L_3564 (env_1383: unit)
    call L_3565 (+!_3 (env_1383, x_3268)) handle _ => raise
  block L_3565 (x_3269: word32)
    call tail loop_15 (env_1381, x_3269)
  block L_3563 ()
    return (x_3264)
fun x_3270 (env_1384: (lambdas_16, list_3) tuple, x_3271: exn):
  {returns = Some (t_1), raises = Some (exn)} =
L_3566 ()
  block L_3566 ()
    val concat_5: lambdas_16 = #0 (env_1384)
    val errorNames_1: list_3 = #1 (env_1384)
    case x_3271 of
      SysErr_0 => L_3567 | _ => L_3568
  block L_3568 ()
    case x_828 (*con xEnv_40 (x_827)*) of
      xEnv_40 => L_3569
  block L_3569 (env_1385: unit)
    call tail x_3272 (env_1385, x_829 (*()*))
  block L_3567 (x_3273: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    val x_3276: ((word8) vector, t_0) tuple = #1 (x_3273)
    val x_3275: (unit) ref = #0 (x_3273)
    val x_3274: bool = prim MLton_equal[(unit) ref] (x_3275, x_1116)
    case x_3274 of
      true => L_3571 | false => L_3570
  block L_3570 ()
    case x_828 (*con xEnv_40 (x_827)*) of
      xEnv_40 => L_3572
  block L_3572 (env_1386: unit)
    call tail x_3272 (env_1386, x_840 (*()*))
  block L_3571 ()
    val x_3278: t_0 = #1 (x_3276)
    val x_3277: (word8) vector = #0 (x_3276)
    case x_3278 of
      NONE_1 => L_3574 | SOME_0 => L_3573
  block L_3573 (x_3279: word32)
    call L_3575 (loop_17 (x_3279, errorNames_1)) handle _ => raise
  block L_3575 (x_3280: t_11)
    case x_3280 of
      NONE_4 => L_3577 | SOME_7 => L_3576
  block L_3576 (x_3281: (word32, (word8) vector) tuple)
    val x_3282: (word8) vector = #1 (x_3281)
    goto L_3578 (x_3282)
  block L_3577 ()
    goto L_3578 (x_837 (*"<UNKNOWN>"*))
  block L_3578 (x_3283: (word8) vector)
    val x_3287: ((word8) vector, list_6) tuple =
      (x_3283, x_835 (*con ::_1 (x_834)*))
    val x_3286: list_6 = con ::_1 (x_3287)
    val x_3285: ((word8) vector, list_6) tuple = (x_838 (*" ["*), x_3286)
    val x_3284: list_6 = con ::_1 (x_3285)
    case concat_5 of
      concatEnv_0 => L_3579
  block L_3579 (env_1387: (lambdas_12, lambdas_155, lambdas_11) tuple)
    call L_3580 (concat_2 (env_1387, x_3284)) handle _ => raise
  block L_3574 ()
    goto L_3580 (x_831 (*""*))
  block L_3580 (x_3288: (word8) vector)
    val x_3294: ((word8) vector, list_6) tuple = (x_3288, x_830 (*con nil_3*))
    val x_3293: list_6 = con ::_1 (x_3294)
    val x_3292: ((word8) vector, list_6) tuple = (x_3277, x_3293)
    val x_3291: list_6 = con ::_1 (x_3292)
    val x_3290: ((word8) vector, list_6) tuple = (x_839 (*"SysErr: "*), x_3291)
    val x_3289: list_6 = con ::_1 (x_3290)
    case concat_5 of
      concatEnv_0 => L_3581
  block L_3581 (env_1388: (lambdas_12, lambdas_155, lambdas_11) tuple)
    call L_3582 (concat_2 (env_1388, x_3289)) handle _ => raise
  block L_3582 (x_3295: (word8) vector)
    val x_3296: t_1 = con SOME_1 (x_3295)
    return (x_3296)
fun loop_17 (env_1389: word32, x_3297: list_3):
  {returns = Some (t_11), raises = Some (exn)} =
L_3583 ()
  block L_3583 ()
    case x_3297 of
      nil_5 => L_3585 | ::_6 => L_3584
  block L_3584 (x_3298: ((word32, (word8) vector) tuple, list_3) tuple)
    val x_3301: list_3 = #1 (x_3298)
    val x_3300: (word32, (word8) vector) tuple = #0 (x_3298)
    val m_0: word32 = #0 (x_3300)
    val x_3299: (word32, word32) tuple = (env_1389, m_0)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3586
  block L_3586 (env_1390: unit)
    call L_3587 (x_1711 (env_1390, x_3299)) handle _ => raise
  block L_3587 (x_3302: bool)
    case x_3302 of
      true => L_3589 | false => L_3588
  block L_3588 ()
    call tail loop_17 (env_1389, x_3301)
  block L_3589 ()
    val x_3303: t_11 = con SOME_7 (x_3300)
    return (x_3303)
  block L_3585 ()
    return (x_836 (*con NONE_4*))
fun x_3272 (env_1391: unit, unit_1: unit):
  {returns = Some (t_1), raises = Some (exn)} =
L_3590 ()
  block L_3590 ()
    return (x_826 (*con NONE_3*))
fun ::?_1 (env_1392: unit,
           x_3304: ((word32, (word8) vector) tuple, list_3) tuple):
  {returns = Some (list_3), raises = Some (exn)} =
L_3591 ()
  block L_3591 ()
    val x_3307: list_3 = #1 (x_3304)
    val x_3306: (word32, (word8) vector) tuple = #0 (x_3304)
    val x_3305: word32 = #0 (x_3306)
    case fromRep_0 (*con fromRe ... _743)*) of
      fromRepEnv_0 => L_3592
  block L_3592 (env_1393: unit)
    call L_3593 (fromRep_1 (env_1393, x_744 (*0xFFFFFFFF:w32*))) handle _ => raise
  block L_3593 (x_3308: word32)
    val x_3309: (word32, word32) tuple = (x_3305, x_3308)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_3594
  block L_3594 (env_1394: unit)
    call L_3595 (x_1711 (env_1394, x_3309)) handle _ => raise
  block L_3595 (x_3310: bool)
    case x_3310 of
      true => L_3597 | false => L_3596
  block L_3596 ()
    val x_3311: list_3 = con ::_6 (x_3304)
    return (x_3311)
  block L_3597 ()
    return (x_3307)
fun fromRep_1 (env_1395: unit, x_3312: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3598 ()
  block L_3598 ()
    return (x_3312)
fun toRep_1 (env_1396: unit, x_3313: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_3599 ()
  block L_3599 ()
    return (x_3313)
fun new_2 (env_1397: unit, x_3314: unit):
  {returns = Some ((list_2) ref), raises = Some (exn)} =
L_3600 ()
  block L_3600 ()
    val x_3315: (list_2) ref = prim Ref_ref[list_2] (x_739 (*con nil_4*))
    return (x_3315)
fun sub_1 (env_1398: unit, x_3316: (word64, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_3601 ()
  block L_3601 ()
    val i_3: word32 = #1 (x_3316)
    val cs_0: word64 = #0 (x_3316)
    case fromWord_0 (*con fromWo ... _167)*) of
      fromWordEnv_0 => L_3602
  block L_3602 (env_1399: unit)
    call L_3603 (fromWord_1 (env_1399, cs_0)) handle _ => raise
  block L_3603 (x_3317: cpointer)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_3604
  block L_3604 (env_1400: unit)
    call L_3605 (sextdFromInt32ToInt64_1 (env_1400, i_3)) handle _ => raise
  block L_3605 (x_3318: word64)
    val x_3319: word8 = prim CPointer_getWord8 (x_3317, x_3318)
    case idFromWord8_0 (*con idFrom ... _175)*) of
      idFromWord8Env_0 => L_3606
  block L_3606 (env_1401: unit)
    call tail idFromWord8_1 (env_1401, x_3319)
fun x_3320 (env_1402: lambdas_16, x_3321: exn):
  {returns = Some (t_1), raises = Some (exn)} =
L_3607 ()
  block L_3607 ()
    case x_3321 of
      Fail_0 => L_3608 | _ => L_3609
  block L_3609 ()
    case x_734 (*con xEnv_39 (x_733)*) of
      xEnv_39 => L_3610
  block L_3610 (env_1403: unit)
    call tail x_3322 (env_1403, x_735 (*()*))
  block L_3608 (x_3323: ((unit) ref, (word8) vector) tuple)
    val x_3326: (word8) vector = #1 (x_3323)
    val x_3325: (unit) ref = #0 (x_3323)
    val x_3324: bool = prim MLton_equal[(unit) ref] (x_3325, x_1096)
    case x_3324 of
      true => L_3612 | false => L_3611
  block L_3611 ()
    case x_734 (*con xEnv_39 (x_733)*) of
      xEnv_39 => L_3613
  block L_3613 (env_1404: unit)
    call tail x_3322 (env_1404, x_738 (*()*))
  block L_3612 ()
    val x_3330: ((word8) vector, list_6) tuple = (x_3326, x_736 (*con nil_3*))
    val x_3329: list_6 = con ::_1 (x_3330)
    val x_3328: ((word8) vector, list_6) tuple = (x_737 (*"Fail: "*), x_3329)
    val x_3327: list_6 = con ::_1 (x_3328)
    case env_1402 of
      concatEnv_0 => L_3614
  block L_3614 (env_1405: (lambdas_12, lambdas_155, lambdas_11) tuple)
    call L_3615 (concat_2 (env_1405, x_3327)) handle _ => raise
  block L_3615 (x_3331: (word8) vector)
    val x_3332: t_1 = con SOME_1 (x_3331)
    return (x_3332)
fun x_3322 (env_1406: unit, unit_2: unit):
  {returns = Some (t_1), raises = Some (exn)} =
L_3616 ()
  block L_3616 ()
    return (x_732 (*con NONE_3*))
fun loop_10 (env_1407: (word64, (word8) array, word8) tuple,
             x_3333: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3617 ()
  block L_3617 ()
    val x_3335: word64 = #0 (env_1407)
    val a_4: (word8) array = #1 (env_1407)
    val x_3336: word8 = #2 (env_1407)
    val b_12: unit = #1 (x_3333)
    val i_4: word64 = #0 (x_3333)
    val x_3334: (word64, word64) tuple = (i_4, x_3335)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3618
  block L_3618 (env_1408: unit)
    call L_3619 (>=_9 (env_1408, x_3334)) handle _ => raise
  block L_3619 (x_3337: bool)
    case x_3337 of
      true => L_3621 | false => L_3620
  block L_3620 ()
    val x_3338: ((word8) array, word64, word8) tuple = (a_4, i_4, x_3336)
    case x_158 (*con xEnv_19 (x_157)*) of
      xEnv_19 => L_3622
  block L_3622 (env_1409: unit)
    call L_3623 (x_3259 (env_1409, x_3338)) handle _ => raise
  block L_3623 (x_3339: unit)
    val x_3340: (word64, word64) tuple = (i_4, x_730 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3624
  block L_3624 (env_1410: unit)
    call L_3625 (+!_2 (env_1410, x_3340)) handle _ => raise
  block L_3625 (x_3341: word64)
    val x_3342: (word64, unit) tuple = (x_3341, x_729 (*()*))
    call tail loop_10 (env_1407, x_3342)
  block L_3621 ()
    return (b_12)
fun >>_9 (env_1411: (word32, word64) tuple, x_3343: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_3626 ()
  block L_3626 ()
    val sizeInBitsWord_16: word32 = #0 (env_1411)
    val zero_62: word64 = #1 (env_1411)
    val n_2: word32 = #1 (x_3343)
    val i_5: word64 = #0 (x_3343)
    val x_3344: (word32, word32) tuple = (n_2, sizeInBitsWord_16)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3627
  block L_3627 (env_1412: unit)
    call L_3628 (>=_10 (env_1412, x_3344)) handle _ => raise
  block L_3628 (x_3345: bool)
    case x_3345 of
      true => L_3630 | false => L_3629
  block L_3629 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3631
  block L_3631 (env_1413: unit)
    call L_3632 (zextdFromWord32ToWord32_1 (env_1413, n_2)) handle _ => raise
  block L_3632 (x_3346: word32)
    val x_3347: (word64, word32) tuple = (i_5, x_3346)
    case >>?_3 (*con >>?Env_3 (x_131)*) of
      >>?Env_3 => L_3633
  block L_3633 (env_1414: unit)
    call tail >>?_4 (env_1414, x_3347)
  block L_3630 ()
    return (zero_62)
fun <<_9 (env_1415: (word32, word64) tuple, x_3348: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_3634 ()
  block L_3634 ()
    val sizeInBitsWord_17: word32 = #0 (env_1415)
    val zero_63: word64 = #1 (env_1415)
    val n_3: word32 = #1 (x_3348)
    val i_6: word64 = #0 (x_3348)
    val x_3349: (word32, word32) tuple = (n_3, sizeInBitsWord_17)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3635
  block L_3635 (env_1416: unit)
    call L_3636 (>=_10 (env_1416, x_3349)) handle _ => raise
  block L_3636 (x_3350: bool)
    case x_3350 of
      true => L_3638 | false => L_3637
  block L_3637 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3639
  block L_3639 (env_1417: unit)
    call L_3640 (zextdFromWord32ToWord32_1 (env_1417, n_3)) handle _ => raise
  block L_3640 (x_3351: word32)
    val x_3352: (word64, word32) tuple = (i_6, x_3351)
    case <<?_3 (*con <<?Env_3 (x_128)*) of
      <<?Env_3 => L_3641
  block L_3641 (env_1418: unit)
    call tail <<?_4 (env_1418, x_3352)
  block L_3638 ()
    return (zero_63)
fun x_3353 (env_1419: unit, x_3354: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_3642 ()
  block L_3642 ()
    case st_0 (*con stEnv_ ... e_32)*) of
      stEnv_0 => L_3643
  block L_3643 (env_1420: unit)
    call L_3644 (st_1 (env_1420, x_3354)) handle _ => raise
  block L_3644 (x_3355: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_32)*) of
      stEnv_0 => L_3645
  block L_3645 (env_1421: unit)
    call L_3646 (st_1 (env_1421, x_3355)) handle _ => raise
  block L_3646 (x_3356: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_32)*) of
      stEnv_0 => L_3647
  block L_3647 (env_1422: unit)
    call tail st_1 (env_1422, x_3356)
fun x_3357 (env_1423: unit, x_3358: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_3648 ()
  block L_3648 ()
    case st_0 (*con stEnv_ ... e_32)*) of
      stEnv_0 => L_3649
  block L_3649 (env_1424: unit)
    call L_3650 (st_1 (env_1424, x_3358)) handle _ => raise
  block L_3650 (x_3359: (word32, word32, word32) tuple)
    case st_0 (*con stEnv_ ... e_32)*) of
      stEnv_0 => L_3651
  block L_3651 (env_1425: unit)
    call tail st_1 (env_1425, x_3359)
fun x_3360 (env_1426: unit, x_3361: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_3652 ()
  block L_3652 ()
    return (x_3361)
fun st_1 (env_1427: unit, x_3362: (word32, word32, word32) tuple):
  {returns = Some ((word32, word32, word32) tuple), raises = Some (exn)} =
L_3653 ()
  block L_3653 ()
    val sft_0: word32 = #2 (x_3362)
    val msk_0: word32 = #1 (x_3362)
    val w_0: word32 = #0 (x_3362)
    val x_3363: (word32, word32) tuple = (w_0, msk_0)
    case andb_0 (*con andbEn ... _119)*) of
      andbEnv_0 => L_3654
  block L_3654 (env_1428: unit)
    call L_3655 (andb_3 (env_1428, x_3363)) handle _ => raise
  block L_3655 (odd_2: word32)
    val x_3364: (word32, word32) tuple = (w_0, odd_2)
    case xorb_0 (*con xorbEn ... _124)*) of
      xorbEnv_0 => L_3656
  block L_3656 (env_1429: unit)
    call L_3657 (xorb_1 (env_1429, x_3364)) handle _ => raise
  block L_3657 (evn_0: word32)
    val x_3365: (word32, word32) tuple = (odd_2, sft_0)
    case <<?_2 (*con <<?Env_2 (x_120)*) of
      <<?Env_2 => L_3658
  block L_3658 (env_1430: unit)
    call L_3659 (<<?_5 (env_1430, x_3365)) handle _ => raise
  block L_3659 (x_3366: word32)
    val x_3367: (word32, word32) tuple = (evn_0, sft_0)
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_3660
  block L_3660 (env_1431: unit)
    call L_3661 (>>?_5 (env_1431, x_3367)) handle _ => raise
  block L_3661 (x_3368: word32)
    val x_3369: (word32, word32) tuple = (x_3366, x_3368)
    case xorb_0 (*con xorbEn ... _124)*) of
      xorbEnv_0 => L_3662
  block L_3662 (env_1432: unit)
    call L_3663 (xorb_1 (env_1432, x_3369)) handle _ => raise
  block L_3663 (x_3370: word32)
    val x_3371: (word32, word32) tuple = (sft_0, x_469 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_3664
  block L_3664 (env_1433: unit)
    call L_3665 (>>?_5 (env_1433, x_3371)) handle _ => raise
  block L_3665 (x_3372: word32)
    val x_3373: (word32, word32) tuple = (msk_0, x_3372)
    case <<?_2 (*con <<?Env_2 (x_120)*) of
      <<?Env_2 => L_3666
  block L_3666 (env_1434: unit)
    call L_3667 (<<?_5 (env_1434, x_3373)) handle _ => raise
  block L_3667 (x_3374: word32)
    val x_3375: (word32, word32) tuple = (msk_0, x_3374)
    case xorb_0 (*con xorbEn ... _124)*) of
      xorbEnv_0 => L_3668
  block L_3668 (env_1435: unit)
    call L_3669 (xorb_1 (env_1435, x_3375)) handle _ => raise
  block L_3669 (x_3376: word32)
    val x_3377: (word32, word32) tuple = (sft_0, x_470 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_3670
  block L_3670 (env_1436: unit)
    call L_3671 (>>?_5 (env_1436, x_3377)) handle _ => raise
  block L_3671 (x_3378: word32)
    val x_3379: (word32, word32, word32) tuple = (x_3370, x_3376, x_3378)
    return (x_3379)
fun >>_11 (env_1437: (word32, word32) tuple, x_3380: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_3672 ()
  block L_3672 ()
    val sizeInBitsWord_18: word32 = #0 (env_1437)
    val zero_64: word32 = #1 (env_1437)
    val n_4: word32 = #1 (x_3380)
    val i_7: word32 = #0 (x_3380)
    val x_3381: (word32, word32) tuple = (n_4, sizeInBitsWord_18)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3673
  block L_3673 (env_1438: unit)
    call L_3674 (>=_10 (env_1438, x_3381)) handle _ => raise
  block L_3674 (x_3382: bool)
    case x_3382 of
      true => L_3676 | false => L_3675
  block L_3675 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3677
  block L_3677 (env_1439: unit)
    call L_3678 (zextdFromWord32ToWord32_1 (env_1439, n_4)) handle _ => raise
  block L_3678 (x_3383: word32)
    val x_3384: (word32, word32) tuple = (i_7, x_3383)
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_3679
  block L_3679 (env_1440: unit)
    call tail >>?_5 (env_1440, x_3384)
  block L_3676 ()
    return (zero_64)
fun <<_8 (env_1441: (word32, word32) tuple, x_3385: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_3680 ()
  block L_3680 ()
    val sizeInBitsWord_19: word32 = #0 (env_1441)
    val zero_65: word32 = #1 (env_1441)
    val n_5: word32 = #1 (x_3385)
    val i_8: word32 = #0 (x_3385)
    val x_3386: (word32, word32) tuple = (n_5, sizeInBitsWord_19)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3681
  block L_3681 (env_1442: unit)
    call L_3682 (>=_10 (env_1442, x_3386)) handle _ => raise
  block L_3682 (x_3387: bool)
    case x_3387 of
      true => L_3684 | false => L_3683
  block L_3683 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3685
  block L_3685 (env_1443: unit)
    call L_3686 (zextdFromWord32ToWord32_1 (env_1443, n_5)) handle _ => raise
  block L_3686 (x_3388: word32)
    val x_3389: (word32, word32) tuple = (i_8, x_3388)
    case <<?_2 (*con <<?Env_2 (x_120)*) of
      <<?Env_2 => L_3687
  block L_3687 (env_1444: unit)
    call tail <<?_5 (env_1444, x_3389)
  block L_3684 ()
    return (zero_65)
fun >>_13 (env_1445: word32, x_3390: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_3688 ()
  block L_3688 ()
    val n_6: word32 = #1 (x_3390)
    val i_9: word16 = #0 (x_3390)
    val x_3391: (word32, word32) tuple = (n_6, env_1445)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3689
  block L_3689 (env_1446: unit)
    call L_3690 (>=_10 (env_1446, x_3391)) handle _ => raise
  block L_3690 (x_3392: bool)
    case x_3392 of
      true => L_3692 | false => L_3691
  block L_3691 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3693
  block L_3693 (env_1447: unit)
    call L_3694 (zextdFromWord32ToWord32_1 (env_1447, n_6)) handle _ => raise
  block L_3694 (x_3393: word32)
    val x_3394: (word16, word32) tuple = (i_9, x_3393)
    case >>?_1 (*con >>?Env_1 (x_118)*) of
      >>?Env_1 => L_3695
  block L_3695 (env_1448: unit)
    call tail >>?_6 (env_1448, x_3394)
  block L_3692 ()
    return (x_256 (*0x0:w16*))
fun <<_13 (env_1449: word32, x_3395: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_3696 ()
  block L_3696 ()
    val n_7: word32 = #1 (x_3395)
    val i_10: word16 = #0 (x_3395)
    val x_3396: (word32, word32) tuple = (n_7, env_1449)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3697
  block L_3697 (env_1450: unit)
    call L_3698 (>=_10 (env_1450, x_3396)) handle _ => raise
  block L_3698 (x_3397: bool)
    case x_3397 of
      true => L_3700 | false => L_3699
  block L_3699 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3701
  block L_3701 (env_1451: unit)
    call L_3702 (zextdFromWord32ToWord32_1 (env_1451, n_7)) handle _ => raise
  block L_3702 (x_3398: word32)
    val x_3399: (word16, word32) tuple = (i_10, x_3398)
    case <<?_1 (*con <<?Env_1 (x_116)*) of
      <<?Env_1 => L_3703
  block L_3703 (env_1452: unit)
    call tail <<?_6 (env_1452, x_3399)
  block L_3700 ()
    return (x_256 (*0x0:w16*))
fun >>_15 (env_1453: word32, x_3400: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_3704 ()
  block L_3704 ()
    val n_8: word32 = #1 (x_3400)
    val i_11: word8 = #0 (x_3400)
    val x_3401: (word32, word32) tuple = (n_8, env_1453)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3705
  block L_3705 (env_1454: unit)
    call L_3706 (>=_10 (env_1454, x_3401)) handle _ => raise
  block L_3706 (x_3402: bool)
    case x_3402 of
      true => L_3708 | false => L_3707
  block L_3707 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3709
  block L_3709 (env_1455: unit)
    call L_3710 (zextdFromWord32ToWord32_1 (env_1455, n_8)) handle _ => raise
  block L_3710 (x_3403: word32)
    val x_3404: (word8, word32) tuple = (i_11, x_3403)
    case >>?_0 (*con >>?Env_0 (x_115)*) of
      >>?Env_0 => L_3711
  block L_3711 (env_1456: unit)
    call tail >>?_7 (env_1456, x_3404)
  block L_3708 ()
    return (x_242 (*0x0:w8*))
fun <<_15 (env_1457: word32, x_3405: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_3712 ()
  block L_3712 ()
    val n_9: word32 = #1 (x_3405)
    val i_12: word8 = #0 (x_3405)
    val x_3406: (word32, word32) tuple = (n_9, env_1457)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3713
  block L_3713 (env_1458: unit)
    call L_3714 (>=_10 (env_1458, x_3406)) handle _ => raise
  block L_3714 (x_3407: bool)
    case x_3407 of
      true => L_3716 | false => L_3715
  block L_3715 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3717
  block L_3717 (env_1459: unit)
    call L_3718 (zextdFromWord32ToWord32_1 (env_1459, n_9)) handle _ => raise
  block L_3718 (x_3408: word32)
    val x_3409: (word8, word32) tuple = (i_12, x_3408)
    case <<?_0 (*con <<?Env_0 (x_113)*) of
      <<?Env_0 => L_3719
  block L_3719 (env_1460: unit)
    call tail <<?_7 (env_1460, x_3409)
  block L_3716 ()
    return (x_242 (*0x0:w8*))
fun fmt_0 (env_1461:
             (word32,
              word64,
              word64,
              word64,
              (word8) array,
              lambdas_175,
              (bool) ref) tuple,
           x_3410: radix_0):
  {returns = Some (lambdas_203), raises = Some (exn)} =
L_3720 ()
  block L_3720 ()
    val maxNumDigits_3: word32 = #0 (env_1461)
    val one_58: word64 = #1 (env_1461)
    val minInt'_22: word64 = #2 (env_1461)
    val zero_66: word64 = #3 (env_1461)
    val x_3415: (word8) array = #4 (env_1461)
    val x_3414: lambdas_175 = #5 (env_1461)
    val x_3413: (bool) ref = #6 (env_1461)
    val x_3412:
      (word32,
       word64,
       word64,
       word64,
       radix_0,
       (word8) array,
       lambdas_175,
       (bool) ref) tuple =
      (maxNumDigits_3,
       one_58,
       minInt'_22,
       zero_66,
       x_3410,
       x_3415,
       x_3414,
       x_3413)
    val x_3411: lambdas_203 = con xEnv_182 (x_3412)
    return (x_3411)
fun x_3416 (env_1462:
              (word32,
               word64,
               word64,
               word64,
               radix_0,
               (word8) array,
               lambdas_175,
               (bool) ref) tuple,
            x_3417: word64):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_3721 ()
  block L_3721 ()
    val maxNumDigits_4: word32 = #0 (env_1462)
    val one_59: word64 = #1 (env_1462)
    val minInt'_23: word64 = #2 (env_1462)
    val zero_67: word64 = #3 (env_1462)
    val x_3421: radix_0 = #4 (env_1462)
    val x_3420: (word8) array = #5 (env_1462)
    val x_3419: lambdas_175 = #6 (env_1462)
    val x_3418: (bool) ref = #7 (env_1462)
    val _: unit = prim Thread_atomicBegin ()
    case x_71 (*con xEnv_2 (x_70)*) of
      xEnv_2 => L_3722
  block L_3722 (env_1463: unit)
    call L_3723 (x_1997 (env_1463, x_3418)) handle _ => raise
  block L_3723 (b_13: bool)
    case b_13 of
      true => L_3725 | false => L_3724
  block L_3724 ()
    val x_3422: ((bool) ref, bool) tuple = (x_3418, x_456 (*con true*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_3726
  block L_3726 (env_1464: unit)
    call L_3727 (x_2054 (env_1464, x_3422)) handle _ => raise
  block L_3727 (x_3423: unit)
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_3728
  block L_3728 (env_1465: unit)
    call L_3729 (atomicEnd_1 (env_1465, x_457 (*()*))) handle _ => raise
  block L_3729 (x_3424: unit)
    goto L_3730 (x_3420)
  block L_3725 ()
    case atomicEnd_0 (*con atomic ... le_7)*) of
      atomicEndEnv_0 => L_3731
  block L_3731 (env_1466: unit)
    call L_3732 (atomicEnd_1 (env_1466, x_454 (*()*))) handle _ => raise
  block L_3732 (x_3425: unit)
    case x_3419 of
      xEnv_183 => L_3733
  block L_3733 (env_1467: (lambdas_204, word32) tuple)
    call L_3730 (x_1294 (env_1467, x_455 (*()*))) handle _ => raise
  block L_3730 (x_3426: (word8) array)
    val x_3427: ((bool) ref, bool) tuple = (x_3418, b_13)
    case radixToInt_0 (*con radixT ... _388)*) of
      radixToIntEnv_0 => L_3734
  block L_3734 (env_1468: unit)
    call L_3735 (radixToInt_1 (env_1468, x_3421)) handle _ => L_3736
  block L_3735 (x_3428: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_3737
  block L_3737 (env_1469: unit)
    call L_3738 (sextdFromInt32ToInt64_1 (env_1469, x_3428)) handle _ => L_3736
  block L_3738 (radix_3: word64)
    val tuple_71:
      (word64, word64, word64, word64, (word8) array, word64) tuple =
      (radix_3, zero_67, minInt'_23, one_59, x_3426, x_3417)
    val x_3429: (word64, word64) tuple = (x_3417, zero_67)
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_3739
  block L_3739 (env_1470: unit)
    call L_3740 (<_5 (env_1470, x_3429)) handle _ => L_3736
  block L_3740 (x_3430: bool)
    case x_3430 of
      true => L_3742 | false => L_3741
  block L_3741 ()
    case ~!_1 (*con ~!Env_1 (x_146)*) of
      ~!Env_1 => L_3743
  block L_3743 (env_1471: unit)
    call L_3744 (~!_3 (env_1471, x_3417)) handle _ => L_3736
  block L_3742 ()
    goto L_3744 (x_3417)
  block L_3744 (x_3431: word64)
    val x_3432: (word32, word32) tuple = (maxNumDigits_4, x_466 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_3745
  block L_3745 (env_1472: unit)
    call L_3746 (x_1442 (env_1472, x_3432)) handle _ => L_3736
  block L_3746 (x_3433: word32)
    val x_3434: (word64, word32) tuple = (x_3431, x_3433)
    call L_3747 (loop_18 (tuple_71, x_3434)) handle _ => L_3736
  block L_3736 (x_3435: exn)
    call L_3748 (x_3436 (x_3427, x_468 (*()*))) handle _ => raise
  block L_3748 (x_3437: unit)
    raise (x_3435)
  block L_3747 (x_3438: (word8) vector)
    goto L_3749 (x_3438)
  block L_3749 (x_3439: (word8) vector)
    call L_3750 (x_3436 (x_3427, x_467 (*()*))) handle _ => raise
  block L_3750 (x_3440: unit)
    return (x_3439)
fun loop_18 (env_1473:
               (word64, word64, word64, word64, (word8) array, word64) tuple,
             x_3441: (word64, word32) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_3751 ()
  block L_3751 ()
    val radix_4: word64 = #0 (env_1473)
    val zero_68: word64 = #1 (env_1473)
    val minInt'_24: word64 = #2 (env_1473)
    val one_60: word64 = #3 (env_1473)
    val x_3444: (word8) array = #4 (env_1473)
    val x_3443: word64 = #5 (env_1473)
    val i_13: word32 = #1 (x_3441)
    val q_2: word64 = #0 (x_3441)
    val x_3442: (word64, word64) tuple = (radix_4, zero_68)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3752
  block L_3752 (env_1474: unit)
    call L_3753 (x_1234 (env_1474, x_3442)) handle _ => raise
  block L_3753 (x_3445: bool)
    case x_3445 of
      true => L_3755 | false => L_3754
  block L_3754 ()
    val x_3446: (word64, word64) tuple = (q_2, minInt'_24)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3756
  block L_3756 (env_1475: unit)
    call L_3757 (x_1234 (env_1475, x_3446)) handle _ => raise
  block L_3757 (x_3447: bool)
    case x_3447 of
      true => L_3759 | false => L_3758
  block L_3758 ()
    goto L_3760 (x_460 (*con false*))
  block L_3759 ()
    case x_148 (*con xEnv_15 (x_147)*) of
      xEnv_15 => L_3761
  block L_3761 (env_1476: unit)
    call L_3762 (x_1227 (env_1476, one_60)) handle _ => raise
  block L_3762 (x_3448: word64)
    val x_3449: (word64, word64) tuple = (radix_4, x_3448)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3763
  block L_3763 (env_1477: unit)
    call L_3760 (x_1234 (env_1477, x_3449)) handle _ => raise
  block L_3760 (x_3450: bool)
    case x_3450 of
      true => L_3765 | false => L_3764
  block L_3764 ()
    val x_3451: word64 = prim WordS64_rem (q_2, radix_4)
    goto L_3766 (x_3451)
  block L_3765 ()
    goto L_3766 (zero_68)
  block L_3766 (x_3452: word64)
    case ~!_1 (*con ~!Env_1 (x_146)*) of
      ~!Env_1 => L_3767
  block L_3767 (env_1478: unit)
    call L_3768 (~!_3 (env_1478, x_3452)) handle _ => raise
  block L_3768 (x_3453: word64)
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3769
  block L_3769 (env_1479: unit)
    call L_3770 (sextdFromInt64ToInt32_1 (env_1479, x_3453)) handle _ => raise
  block L_3770 (res_0: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_3771
  block L_3771 (env_1480: unit)
    call L_3772 (sextdFromInt32ToInt64_1 (env_1480, res_0)) handle _ => raise
  block L_3772 (x_3454: word64)
    val x_3455: (word64, word64) tuple = (x_3453, x_3454)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3773
  block L_3773 (env_1481: unit)
    call L_3774 (x_1234 (env_1481, x_3455)) handle _ => raise
  block L_3774 (x_3456: bool)
    case x_3456 of
      true => L_3776 | false => L_3775
  block L_3775 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3776 ()
    case digitToChar_0 (*con digitT ... e_31)*) of
      digitToCharEnv_0 => L_3777
  block L_3777 (env_1482: unit)
    call L_3778 (digitToChar_1 (env_1482, res_0)) handle _ => raise
  block L_3778 (x_3457: word8)
    val x_3458: ((word8) array, word32, word8) tuple = (x_3444, i_13, x_3457)
    case update_0 (*con update ... e_29)*) of
      updateEnv_0 => L_3779
  block L_3779 (env_1483: unit)
    call L_3780 (update_1 (env_1483, x_3458)) handle _ => raise
  block L_3780 (x_3459: unit)
    val x_3460: (word64, word64) tuple = (radix_4, zero_68)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3781
  block L_3781 (env_1484: unit)
    call L_3782 (x_1234 (env_1484, x_3460)) handle _ => raise
  block L_3782 (x_3461: bool)
    case x_3461 of
      true => L_3784 | false => L_3783
  block L_3783 ()
    val x_3462: (word64, word64) tuple = (q_2, minInt'_24)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3785
  block L_3785 (env_1485: unit)
    call L_3786 (x_1234 (env_1485, x_3462)) handle _ => raise
  block L_3786 (x_3463: bool)
    case x_3463 of
      true => L_3788 | false => L_3787
  block L_3787 ()
    goto L_3789 (x_461 (*con false*))
  block L_3788 ()
    case x_148 (*con xEnv_15 (x_147)*) of
      xEnv_15 => L_3790
  block L_3790 (env_1486: unit)
    call L_3791 (x_1227 (env_1486, one_60)) handle _ => raise
  block L_3791 (x_3464: word64)
    val x_3465: (word64, word64) tuple = (radix_4, x_3464)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3792
  block L_3792 (env_1487: unit)
    call L_3789 (x_1234 (env_1487, x_3465)) handle _ => raise
  block L_3789 (x_3466: bool)
    case x_3466 of
      true => L_3794 | false => L_3793
  block L_3793 ()
    val x_3468: word64 = prim WordS64_quot (q_2, radix_4)
    val x_3467: (word64, word64) tuple = (x_3468, zero_68)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_3795
  block L_3795 (env_1488: unit)
    call L_3796 (x_1234 (env_1488, x_3467)) handle _ => raise
  block L_3796 (x_3469: bool)
    case x_3469 of
      true => L_3798 | false => L_3797
  block L_3797 ()
    val x_3470: (word32, word32) tuple = (i_13, x_465 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_3799
  block L_3799 (env_1489: unit)
    call L_3800 (x_1442 (env_1489, x_3470)) handle _ => raise
  block L_3800 (x_3471: word32)
    val x_3472: (word64, word32) tuple = (x_3468, x_3471)
    call tail loop_18 (env_1473, x_3472)
  block L_3798 ()
    val x_3473: (word64, word64) tuple = (x_3443, zero_68)
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_3801
  block L_3801 (env_1490: unit)
    call L_3802 (<_5 (env_1490, x_3473)) handle _ => raise
  block L_3802 (x_3474: bool)
    case x_3474 of
      true => L_3804 | false => L_3803
  block L_3803 ()
    goto L_3805 (i_13)
  block L_3804 ()
    val x_3475: (word32, word32) tuple = (i_13, x_462 (*0x1:w32*))
    case x_140 (*con xEnv_13 (x_139)*) of
      xEnv_13 => L_3806
  block L_3806 (env_1491: unit)
    call L_3807 (x_1442 (env_1491, x_3475)) handle _ => raise
  block L_3807 (i_14: word32)
    val x_3476: ((word8) array, word32, word8) tuple =
      (x_3444, i_14, x_463 (*0x7E:w8*))
    case update_0 (*con update ... e_29)*) of
      updateEnv_0 => L_3808
  block L_3808 (env_1492: unit)
    call L_3809 (update_1 (env_1492, x_3476)) handle _ => raise
  block L_3809 (x_3477: unit)
    goto L_3805 (i_14)
  block L_3805 (x_3478: word32)
    val x_3479: ((word8) array, word32, t_0) tuple =
      (x_3444, x_3478, x_464 (*con NONE_1*))
    case slice_0 (*con sliceE ... e_28)*) of
      sliceEnv_0 => L_3810
  block L_3810 (env_1493: unit)
    call L_3811 (slice_1 (env_1493, x_3479)) handle _ => raise
  block L_3811 (x_3480: t_10)
    case vector_0 (*con vector ... e_19)*) of
      vectorEnv_0 => L_3812
  block L_3812 (env_1494: unit)
    call tail vector_1 (env_1494, x_3480)
  block L_3794 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_3784 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_3755 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_3436 (env_1495: ((bool) ref, bool) tuple, x_3481: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_3813 ()
  block L_3813 ()
    val x_3482: (bool) ref = #0 (env_1495)
    val b_14: bool = #1 (env_1495)
    case b_14 of
      true => L_3815 | false => L_3814
  block L_3814 ()
    val x_3483: ((bool) ref, bool) tuple = (x_3482, x_459 (*con false*))
    case x_77 (*con xEnv_5 (x_76)*) of
      xEnv_5 => L_3816
  block L_3816 (env_1496: unit)
    call tail x_2054 (env_1496, x_3483)
  block L_3815 ()
    return (x_458 (*()*))
fun x_1294 (env_1497: (lambdas_204, word32) tuple, x_3484: unit):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_3817 ()
  block L_3817 ()
    val new_3: lambdas_204 = #0 (env_1497)
    val maxNumDigits_5: word32 = #1 (env_1497)
    val x_3485: (word32, word8) tuple = (maxNumDigits_5, x_451 (*0x0:w8*))
    case new_3 of
      newEnv_1 => L_3818
  block L_3818 (env_1498: lambdas_155)
    call tail new_4 (env_1498, x_3485)
fun >>_17 (env_1499: (word32, word64) tuple, x_3486: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_3819 ()
  block L_3819 ()
    val sizeInBitsWord_20: word32 = #0 (env_1499)
    val zero_69: word64 = #1 (env_1499)
    val n_10: word32 = #1 (x_3486)
    val i_15: word64 = #0 (x_3486)
    val x_3487: (word32, word32) tuple = (n_10, sizeInBitsWord_20)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3820
  block L_3820 (env_1500: unit)
    call L_3821 (>=_10 (env_1500, x_3487)) handle _ => raise
  block L_3821 (x_3488: bool)
    case x_3488 of
      true => L_3823 | false => L_3822
  block L_3822 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3824
  block L_3824 (env_1501: unit)
    call L_3825 (zextdFromWord32ToWord32_1 (env_1501, n_10)) handle _ => raise
  block L_3825 (x_3489: word32)
    val x_3490: (word64, word32) tuple = (i_15, x_3489)
    case x_293 (*con xEnv_32 (x_292)*) of
      xEnv_32 => L_3826
  block L_3826 (env_1502: unit)
    call tail x_1181 (env_1502, x_3490)
  block L_3823 ()
    return (zero_69)
fun <<_17 (env_1503: (word32, word64) tuple, x_3491: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_3827 ()
  block L_3827 ()
    val sizeInBitsWord_21: word32 = #0 (env_1503)
    val zero_70: word64 = #1 (env_1503)
    val n_11: word32 = #1 (x_3491)
    val i_16: word64 = #0 (x_3491)
    val x_3492: (word32, word32) tuple = (n_11, sizeInBitsWord_21)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3828
  block L_3828 (env_1504: unit)
    call L_3829 (>=_10 (env_1504, x_3492)) handle _ => raise
  block L_3829 (x_3493: bool)
    case x_3493 of
      true => L_3831 | false => L_3830
  block L_3830 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3832
  block L_3832 (env_1505: unit)
    call L_3833 (zextdFromWord32ToWord32_1 (env_1505, n_11)) handle _ => raise
  block L_3833 (x_3494: word32)
    val x_3495: (word64, word32) tuple = (i_16, x_3494)
    case x_291 (*con xEnv_31 (x_290)*) of
      xEnv_31 => L_3834
  block L_3834 (env_1506: unit)
    call tail x_1176 (env_1506, x_3495)
  block L_3831 ()
    return (zero_70)
fun x_1288 (env_1507: (lambdas_204, word32) tuple, x_3496: unit):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_3835 ()
  block L_3835 ()
    val new_5: lambdas_204 = #0 (env_1507)
    val maxNumDigits_6: word32 = #1 (env_1507)
    val x_3497: (word32, word8) tuple = (maxNumDigits_6, x_446 (*0x0:w8*))
    case new_5 of
      newEnv_1 => L_3836
  block L_3836 (env_1508: lambdas_155)
    call tail new_4 (env_1508, x_3497)
fun >>_19 (env_1509: (word32, word32) tuple, x_3498: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_3837 ()
  block L_3837 ()
    val sizeInBitsWord_22: word32 = #0 (env_1509)
    val zero_71: word32 = #1 (env_1509)
    val n_12: word32 = #1 (x_3498)
    val i_17: word32 = #0 (x_3498)
    val x_3499: (word32, word32) tuple = (n_12, sizeInBitsWord_22)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3838
  block L_3838 (env_1510: unit)
    call L_3839 (>=_10 (env_1510, x_3499)) handle _ => raise
  block L_3839 (x_3500: bool)
    case x_3500 of
      true => L_3841 | false => L_3840
  block L_3840 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3842
  block L_3842 (env_1511: unit)
    call L_3843 (zextdFromWord32ToWord32_1 (env_1511, n_12)) handle _ => raise
  block L_3843 (x_3501: word32)
    val x_3502: (word32, word32) tuple = (i_17, x_3501)
    case x_277 (*con xEnv_30 (x_276)*) of
      xEnv_30 => L_3844
  block L_3844 (env_1512: unit)
    call tail x_1169 (env_1512, x_3502)
  block L_3841 ()
    return (zero_71)
fun <<_19 (env_1513: (word32, word32) tuple, x_3503: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_3845 ()
  block L_3845 ()
    val sizeInBitsWord_23: word32 = #0 (env_1513)
    val zero_72: word32 = #1 (env_1513)
    val n_13: word32 = #1 (x_3503)
    val i_18: word32 = #0 (x_3503)
    val x_3504: (word32, word32) tuple = (n_13, sizeInBitsWord_23)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3846
  block L_3846 (env_1514: unit)
    call L_3847 (>=_10 (env_1514, x_3504)) handle _ => raise
  block L_3847 (x_3505: bool)
    case x_3505 of
      true => L_3849 | false => L_3848
  block L_3848 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3850
  block L_3850 (env_1515: unit)
    call L_3851 (zextdFromWord32ToWord32_1 (env_1515, n_13)) handle _ => raise
  block L_3851 (x_3506: word32)
    val x_3507: (word32, word32) tuple = (i_18, x_3506)
    case x_275 (*con xEnv_29 (x_274)*) of
      xEnv_29 => L_3852
  block L_3852 (env_1516: unit)
    call tail x_1164 (env_1516, x_3507)
  block L_3849 ()
    return (zero_72)
fun >>_21 (env_1517: (word32, word16) tuple, x_3508: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_3853 ()
  block L_3853 ()
    val sizeInBitsWord_24: word32 = #0 (env_1517)
    val zero_73: word16 = #1 (env_1517)
    val n_14: word32 = #1 (x_3508)
    val i_19: word16 = #0 (x_3508)
    val x_3509: (word32, word32) tuple = (n_14, sizeInBitsWord_24)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3854
  block L_3854 (env_1518: unit)
    call L_3855 (>=_10 (env_1518, x_3509)) handle _ => raise
  block L_3855 (x_3510: bool)
    case x_3510 of
      true => L_3857 | false => L_3856
  block L_3856 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3858
  block L_3858 (env_1519: unit)
    call L_3859 (zextdFromWord32ToWord32_1 (env_1519, n_14)) handle _ => raise
  block L_3859 (x_3511: word32)
    val x_3512: (word16, word32) tuple = (i_19, x_3511)
    case x_262 (*con xEnv_28 (x_261)*) of
      xEnv_28 => L_3860
  block L_3860 (env_1520: unit)
    call tail x_1157 (env_1520, x_3512)
  block L_3857 ()
    return (zero_73)
fun <<_21 (env_1521: (word32, word16) tuple, x_3513: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_3861 ()
  block L_3861 ()
    val sizeInBitsWord_25: word32 = #0 (env_1521)
    val zero_74: word16 = #1 (env_1521)
    val n_15: word32 = #1 (x_3513)
    val i_20: word16 = #0 (x_3513)
    val x_3514: (word32, word32) tuple = (n_15, sizeInBitsWord_25)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3862
  block L_3862 (env_1522: unit)
    call L_3863 (>=_10 (env_1522, x_3514)) handle _ => raise
  block L_3863 (x_3515: bool)
    case x_3515 of
      true => L_3865 | false => L_3864
  block L_3864 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3866
  block L_3866 (env_1523: unit)
    call L_3867 (zextdFromWord32ToWord32_1 (env_1523, n_15)) handle _ => raise
  block L_3867 (x_3516: word32)
    val x_3517: (word16, word32) tuple = (i_20, x_3516)
    case x_260 (*con xEnv_27 (x_259)*) of
      xEnv_27 => L_3868
  block L_3868 (env_1524: unit)
    call tail x_1152 (env_1524, x_3517)
  block L_3865 ()
    return (zero_74)
fun >>_23 (env_1525: (word32, word8) tuple, x_3518: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_3869 ()
  block L_3869 ()
    val sizeInBitsWord_26: word32 = #0 (env_1525)
    val zero_75: word8 = #1 (env_1525)
    val n_16: word32 = #1 (x_3518)
    val i_21: word8 = #0 (x_3518)
    val x_3519: (word32, word32) tuple = (n_16, sizeInBitsWord_26)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3870
  block L_3870 (env_1526: unit)
    call L_3871 (>=_10 (env_1526, x_3519)) handle _ => raise
  block L_3871 (x_3520: bool)
    case x_3520 of
      true => L_3873 | false => L_3872
  block L_3872 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3874
  block L_3874 (env_1527: unit)
    call L_3875 (zextdFromWord32ToWord32_1 (env_1527, n_16)) handle _ => raise
  block L_3875 (x_3521: word32)
    val x_3522: (word8, word32) tuple = (i_21, x_3521)
    case x_248 (*con xEnv_26 (x_247)*) of
      xEnv_26 => L_3876
  block L_3876 (env_1528: unit)
    call tail x_1145 (env_1528, x_3522)
  block L_3873 ()
    return (zero_75)
fun <<_23 (env_1529: (word32, word8) tuple, x_3523: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_3877 ()
  block L_3877 ()
    val sizeInBitsWord_27: word32 = #0 (env_1529)
    val zero_76: word8 = #1 (env_1529)
    val n_17: word32 = #1 (x_3523)
    val i_22: word8 = #0 (x_3523)
    val x_3524: (word32, word32) tuple = (n_17, sizeInBitsWord_27)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_3878
  block L_3878 (env_1530: unit)
    call L_3879 (>=_10 (env_1530, x_3524)) handle _ => raise
  block L_3879 (x_3525: bool)
    case x_3525 of
      true => L_3881 | false => L_3880
  block L_3880 ()
    case zextdFromWord32ToWord32_0 (*con zextdF ... _103)*) of
      zextdFromWord32ToWord32Env_0 => L_3882
  block L_3882 (env_1531: unit)
    call L_3883 (zextdFromWord32ToWord32_1 (env_1531, n_17)) handle _ => raise
  block L_3883 (x_3526: word32)
    val x_3527: (word8, word32) tuple = (i_22, x_3526)
    case x_246 (*con xEnv_25 (x_245)*) of
      xEnv_25 => L_3884
  block L_3884 (env_1532: unit)
    call tail x_1140 (env_1532, x_3527)
  block L_3881 ()
    return (zero_76)
fun digitToChar_1 (env_1533: unit, x_3528: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_3885 ()
  block L_3885 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_3886
  block L_3886 (env_1534: unit)
    call L_3887 (full_2 (env_1534, x_442 (*"0123456789ABCDEF"*))) handle _ => raise
  block L_3887 (x_3529: t_17)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_3888
  block L_3888 (env_1535: unit)
    call L_3889 (sextdFromInt32ToInt64_1 (env_1535, x_3528)) handle _ => L_3890
  block L_3890 (x_3530: exn)
    case x_3530 of
      Overflow_0 => L_3891 | _ => L_3892
  block L_3892 ()
    call L_3889 (x_3531 (x_3530, x_443 (*()*))) handle _ => raise
  block L_3891 (x_3532: (unit) ref)
    val x_3533: bool = prim MLton_equal[(unit) ref] (x_3532, x_62)
    case x_3533 of
      true => L_3894 | false => L_3893
  block L_3893 ()
    call L_3889 (x_3531 (x_3530, x_444 (*()*))) handle _ => raise
  block L_3894 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_3889 (i_23: word64)
    case x_3529 of
      T_5 => L_3895
  block L_3895 (x_3534: (word64, (word8) vector, word64) tuple)
    val x_3536: word64 = #0 (x_3534)
    val x_3535: (word64, word64) tuple = (i_23, x_3536)
    case >=_5 (*con >=Env_ ... e_15)*) of
      >=Env_5 => L_3896
  block L_3896 (env_1536: unit)
    call L_3897 (>=_11 (env_1536, x_3535)) handle _ => raise
  block L_3897 (x_3537: bool)
    case x_3537 of
      true => L_3899 | false => L_3898
  block L_3898 ()
    case x_3529 of
      T_5 => L_3900
  block L_3900 (x_3538: (word64, (word8) vector, word64) tuple)
    val x_3540: word64 = #2 (x_3538)
    val x_3541: (word8) vector = #1 (x_3538)
    val x_3539: (word64, word64) tuple = (x_3540, i_23)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3901
  block L_3901 (env_1537: unit)
    call L_3902 (+!_2 (env_1537, x_3539)) handle _ => raise
  block L_3902 (x_3542: word64)
    val x_3543: ((word8) vector, word64) tuple = (x_3541, x_3542)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_3903
  block L_3903 (env_1538: unit)
    call tail x_2023 (env_1538, x_3543)
  block L_3899 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_3531 (env_1539: exn, unit_3: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_3904 ()
  block L_3904 ()
    raise (env_1539)
fun loop_9 (env_1540: (word64, (bool) array) tuple, x_3544: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3905 ()
  block L_3905 ()
    val x_3546: word64 = #0 (env_1540)
    val x_3547: (bool) array = #1 (env_1540)
    val b_15: unit = #1 (x_3544)
    val i_24: word64 = #0 (x_3544)
    val x_3545: (word64, word64) tuple = (i_24, x_3546)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3906
  block L_3906 (env_1541: unit)
    call L_3907 (>=_9 (env_1541, x_3545)) handle _ => raise
  block L_3907 (x_3548: bool)
    case x_3548 of
      true => L_3909 | false => L_3908
  block L_3908 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3910
  block L_3910 (env_1542: unit)
    call L_3911 (sextdFromInt64ToInt32_1 (env_1542, i_24)) handle _ => raise
  block L_3911 (x_3549: word32)
    case x_380 (*con xEnv_34 (x_379)*) of
      xEnv_34 => L_3912
  block L_3912 (env_1543: unit)
    call L_3913 (x_1447 (env_1543, x_3549)) handle _ => raise
  block L_3913 (x_3550: word8)
    val x_3551: (word8, word8) tuple = (x_3550, x_428 (*0x20:w8*))
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_3914
  block L_3914 (env_1544: unit)
    call L_3915 (x_2026 (env_1544, x_3551)) handle _ => raise
  block L_3915 (x_3552: bool)
    case x_3552 of
      true => L_3917 | false => L_3916
  block L_3916 ()
    val x_3553: (word8, word8) tuple = (x_3550, x_430 (*0x9:w8*))
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_3918
  block L_3918 (env_1545: unit)
    call L_3919 (x_2026 (env_1545, x_3553)) handle _ => raise
  block L_3917 ()
    goto L_3919 (x_429 (*con true*))
  block L_3919 (x_3554: bool)
    case x_3554 of
      true => L_3921 | false => L_3920
  block L_3920 ()
    val x_3555: (word8, word8) tuple = (x_3550, x_432 (*0xD:w8*))
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_3922
  block L_3922 (env_1546: unit)
    call L_3923 (x_2026 (env_1546, x_3555)) handle _ => raise
  block L_3921 ()
    goto L_3923 (x_431 (*con true*))
  block L_3923 (x_3556: bool)
    case x_3556 of
      true => L_3925 | false => L_3924
  block L_3924 ()
    val x_3557: (word8, word8) tuple = (x_3550, x_434 (*0xA:w8*))
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_3926
  block L_3926 (env_1547: unit)
    call L_3927 (x_2026 (env_1547, x_3557)) handle _ => raise
  block L_3925 ()
    goto L_3927 (x_433 (*con true*))
  block L_3927 (x_3558: bool)
    case x_3558 of
      true => L_3929 | false => L_3928
  block L_3928 ()
    val x_3559: (word8, word8) tuple = (x_3550, x_436 (*0xB:w8*))
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_3930
  block L_3930 (env_1548: unit)
    call L_3931 (x_2026 (env_1548, x_3559)) handle _ => raise
  block L_3929 ()
    goto L_3931 (x_435 (*con true*))
  block L_3931 (x_3560: bool)
    case x_3560 of
      true => L_3933 | false => L_3932
  block L_3932 ()
    val x_3561: (word8, word8) tuple = (x_3550, x_438 (*0xC:w8*))
    case x_83 (*con xEnv_8 (x_82)*) of
      xEnv_8 => L_3934
  block L_3934 (env_1549: unit)
    call L_3935 (x_2026 (env_1549, x_3561)) handle _ => raise
  block L_3933 ()
    goto L_3935 (x_437 (*con true*))
  block L_3935 (x_3562: bool)
    val _: unit = prim Array_update[bool] (x_3547, i_24, x_3562)
    val x_3563: (word64, word64) tuple = (i_24, x_440 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3936
  block L_3936 (env_1550: unit)
    call L_3937 (+!_2 (env_1550, x_3563)) handle _ => raise
  block L_3937 (x_3564: word64)
    val x_3565: (word64, unit) tuple = (x_3564, x_439 (*()*))
    call tail loop_9 (env_1540, x_3565)
  block L_3909 ()
    return (b_15)
fun loop_8 (env_1551: (word64, list_1, (t_0) array) tuple,
            x_3566: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3938 ()
  block L_3938 ()
    val x_3568: word64 = #0 (env_1551)
    val x_3570: list_1 = #1 (env_1551)
    val x_3569: (t_0) array = #2 (env_1551)
    val b_16: unit = #1 (x_3566)
    val i_25: word64 = #0 (x_3566)
    val x_3567: (word64, word64) tuple = (i_25, x_3568)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3939
  block L_3939 (env_1552: unit)
    call L_3940 (>=_9 (env_1552, x_3567)) handle _ => raise
  block L_3940 (x_3571: bool)
    case x_3571 of
      true => L_3942 | false => L_3941
  block L_3941 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3943
  block L_3943 (env_1553: unit)
    call L_3944 (sextdFromInt64ToInt32_1 (env_1553, i_25)) handle _ => raise
  block L_3944 (x_3572: word32)
    case x_380 (*con xEnv_34 (x_379)*) of
      xEnv_34 => L_3945
  block L_3945 (env_1554: unit)
    call L_3946 (x_1447 (env_1554, x_3572)) handle _ => raise
  block L_3946 (x_3573: word8)
    call L_3947 (loop_19 (x_3573, x_3570)) handle _ => raise
  block L_3947 (x_3574: t_0)
    val _: unit = prim Array_update[t_0] (x_3569, i_25, x_3574)
    val x_3575: (word64, word64) tuple = (i_25, x_425 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3948
  block L_3948 (env_1555: unit)
    call L_3949 (+!_2 (env_1555, x_3575)) handle _ => raise
  block L_3949 (x_3576: word64)
    val x_3577: (word64, unit) tuple = (x_3576, x_424 (*()*))
    call tail loop_8 (env_1551, x_3577)
  block L_3942 ()
    return (b_16)
fun loop_19 (env_1556: word8, x_3578: list_1):
  {returns = Some (t_0), raises = Some (exn)} =
L_3950 ()
  block L_3950 ()
    case x_3578 of
      nil_2 => L_3952 | ::_4 => L_3951
  block L_3951 (x_3579: (lambdas_1, list_1) tuple)
    val x_3581: list_1 = #1 (x_3579)
    val x_3580: lambdas_1 = #0 (x_3579)
    case x_3580 of
      xEnv_192 => L_3953
  block L_3953 (env_1557: (word32, word32, word8, word8) tuple)
    call L_3954 (x_3582 (env_1557, env_1556)) handle _ => raise
  block L_3954 (x_3583: t_0)
    case x_3583 of
      NONE_1 => L_3955 | _ => L_3956
  block L_3956 ()
    return (x_3583)
  block L_3955 ()
    call tail loop_19 (env_1556, x_3581)
  block L_3952 ()
    return (x_423 (*con NONE_1*))
fun loop_7 (env_1558: (word64, lambdas_1, (t_0) array) tuple,
            x_3584: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3957 ()
  block L_3957 ()
    val x_3586: word64 = #0 (env_1558)
    val x_3588: lambdas_1 = #1 (env_1558)
    val x_3587: (t_0) array = #2 (env_1558)
    val b_17: unit = #1 (x_3584)
    val i_26: word64 = #0 (x_3584)
    val x_3585: (word64, word64) tuple = (i_26, x_3586)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3958
  block L_3958 (env_1559: unit)
    call L_3959 (>=_9 (env_1559, x_3585)) handle _ => raise
  block L_3959 (x_3589: bool)
    case x_3589 of
      true => L_3961 | false => L_3960
  block L_3960 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3962
  block L_3962 (env_1560: unit)
    call L_3963 (sextdFromInt64ToInt32_1 (env_1560, i_26)) handle _ => raise
  block L_3963 (x_3590: word32)
    case x_380 (*con xEnv_34 (x_379)*) of
      xEnv_34 => L_3964
  block L_3964 (env_1561: unit)
    call L_3965 (x_1447 (env_1561, x_3590)) handle _ => raise
  block L_3965 (x_3591: word8)
    case x_3588 of
      xEnv_192 => L_3966
  block L_3966 (env_1562: (word32, word32, word8, word8) tuple)
    call L_3967 (x_3582 (env_1562, x_3591)) handle _ => raise
  block L_3967 (x_3592: t_0)
    val _: unit = prim Array_update[t_0] (x_3587, i_26, x_3592)
    val x_3593: (word64, word64) tuple = (i_26, x_410 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3968
  block L_3968 (env_1563: unit)
    call L_3969 (+!_2 (env_1563, x_3593)) handle _ => raise
  block L_3969 (x_3594: word64)
    val x_3595: (word64, unit) tuple = (x_3594, x_409 (*()*))
    call tail loop_7 (env_1558, x_3595)
  block L_3961 ()
    return (b_17)
fun loop_6 (env_1564: (word64, lambdas_1, (t_0) array) tuple,
            x_3596: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3970 ()
  block L_3970 ()
    val x_3598: word64 = #0 (env_1564)
    val x_3600: lambdas_1 = #1 (env_1564)
    val x_3599: (t_0) array = #2 (env_1564)
    val b_18: unit = #1 (x_3596)
    val i_27: word64 = #0 (x_3596)
    val x_3597: (word64, word64) tuple = (i_27, x_3598)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3971
  block L_3971 (env_1565: unit)
    call L_3972 (>=_9 (env_1565, x_3597)) handle _ => raise
  block L_3972 (x_3601: bool)
    case x_3601 of
      true => L_3974 | false => L_3973
  block L_3973 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3975
  block L_3975 (env_1566: unit)
    call L_3976 (sextdFromInt64ToInt32_1 (env_1566, i_27)) handle _ => raise
  block L_3976 (x_3602: word32)
    case x_380 (*con xEnv_34 (x_379)*) of
      xEnv_34 => L_3977
  block L_3977 (env_1567: unit)
    call L_3978 (x_1447 (env_1567, x_3602)) handle _ => raise
  block L_3978 (x_3603: word8)
    case x_3600 of
      xEnv_192 => L_3979
  block L_3979 (env_1568: (word32, word32, word8, word8) tuple)
    call L_3980 (x_3582 (env_1568, x_3603)) handle _ => raise
  block L_3980 (x_3604: t_0)
    val _: unit = prim Array_update[t_0] (x_3599, i_27, x_3604)
    val x_3605: (word64, word64) tuple = (i_27, x_403 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3981
  block L_3981 (env_1569: unit)
    call L_3982 (+!_2 (env_1569, x_3605)) handle _ => raise
  block L_3982 (x_3606: word64)
    val x_3607: (word64, unit) tuple = (x_3606, x_402 (*()*))
    call tail loop_6 (env_1564, x_3607)
  block L_3974 ()
    return (b_18)
fun loop_5 (env_1570: (word64, lambdas_1, (t_0) array) tuple,
            x_3608: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_3983 ()
  block L_3983 ()
    val x_3610: word64 = #0 (env_1570)
    val x_3612: lambdas_1 = #1 (env_1570)
    val x_3611: (t_0) array = #2 (env_1570)
    val b_19: unit = #1 (x_3608)
    val i_28: word64 = #0 (x_3608)
    val x_3609: (word64, word64) tuple = (i_28, x_3610)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_3984
  block L_3984 (env_1571: unit)
    call L_3985 (>=_9 (env_1571, x_3609)) handle _ => raise
  block L_3985 (x_3613: bool)
    case x_3613 of
      true => L_3987 | false => L_3986
  block L_3986 ()
    case sextdFromInt64ToInt32_0 (*con sextdF ... _111)*) of
      sextdFromInt64ToInt32Env_0 => L_3988
  block L_3988 (env_1572: unit)
    call L_3989 (sextdFromInt64ToInt32_1 (env_1572, i_28)) handle _ => raise
  block L_3989 (x_3614: word32)
    case x_380 (*con xEnv_34 (x_379)*) of
      xEnv_34 => L_3990
  block L_3990 (env_1573: unit)
    call L_3991 (x_1447 (env_1573, x_3614)) handle _ => raise
  block L_3991 (x_3615: word8)
    case x_3612 of
      xEnv_192 => L_3992
  block L_3992 (env_1574: (word32, word32, word8, word8) tuple)
    call L_3993 (x_3582 (env_1574, x_3615)) handle _ => raise
  block L_3993 (x_3616: t_0)
    val _: unit = prim Array_update[t_0] (x_3611, i_28, x_3616)
    val x_3617: (word64, word64) tuple = (i_28, x_396 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_3994
  block L_3994 (env_1575: unit)
    call L_3995 (+!_2 (env_1575, x_3617)) handle _ => raise
  block L_3995 (x_3618: word64)
    val x_3619: (word64, unit) tuple = (x_3618, x_395 (*()*))
    call tail loop_5 (env_1570, x_3619)
  block L_3987 ()
    return (b_19)
fun range_1 (env_1576: unit, x_3620: (word32, word8, word8) tuple):
  {returns = Some (lambdas_1), raises = Some (exn)} =
L_3996 ()
  block L_3996 ()
    val cmax_0: word8 = #2 (x_3620)
    val cmin_0: word8 = #1 (x_3620)
    val add_0: word32 = #0 (x_3620)
    case x_382 (*con xEnv_35 (x_381)*) of
      xEnv_35 => L_3997
  block L_3997 (env_1577: unit)
    call L_3998 (x_3621 (env_1577, cmin_0)) handle _ => raise
  block L_3998 (min_0: word32)
    val x_3623: (word32, word32, word8, word8) tuple =
      (min_0, add_0, cmax_0, cmin_0)
    val x_3622: lambdas_1 = con xEnv_192 (x_3623)
    return (x_3622)
fun x_3582 (env_1578: (word32, word32, word8, word8) tuple, x_3624: word8):
  {returns = Some (t_0), raises = Some (exn)} =
L_3999 ()
  block L_3999 ()
    val min_1: word32 = #0 (env_1578)
    val add_1: word32 = #1 (env_1578)
    val cmax_1: word8 = #2 (env_1578)
    val cmin_1: word8 = #3 (env_1578)
    val x_3625: (word8, word8) tuple = (cmin_1, x_3624)
    case <=_1 (*con <=Env_ ... le_8)*) of
      <=Env_1 => L_4000
  block L_4000 (env_1579: unit)
    call L_4001 (<=_7 (env_1579, x_3625)) handle _ => raise
  block L_4001 (x_3626: bool)
    case x_3626 of
      true => L_4003 | false => L_4002
  block L_4002 ()
    goto L_4004 (x_389 (*con false*))
  block L_4003 ()
    val x_3627: (word8, word8) tuple = (x_3624, cmax_1)
    case <=_1 (*con <=Env_ ... le_8)*) of
      <=Env_1 => L_4005
  block L_4005 (env_1580: unit)
    call L_4004 (<=_7 (env_1580, x_3627)) handle _ => raise
  block L_4004 (x_3628: bool)
    case x_3628 of
      true => L_4007 | false => L_4006
  block L_4006 ()
    return (x_390 (*con NONE_1*))
  block L_4007 ()
    case x_382 (*con xEnv_35 (x_381)*) of
      xEnv_35 => L_4008
  block L_4008 (env_1581: unit)
    call L_4009 (x_3621 (env_1581, x_3624)) handle _ => raise
  block L_4009 (x_3629: word32)
    val x_3630: (word32, word32) tuple = (add_1, x_3629)
    case +!_0 (*con +!Env_0 (x_132)*) of
      +!Env_0 => L_4010
  block L_4010 (env_1582: unit)
    call L_4011 (+!_3 (env_1582, x_3630)) handle _ => raise
  block L_4011 (x_3631: word32)
    val x_3632: (word32, word32) tuple = (x_3631, min_1)
    case -!_0 (*con -!Env_0 (x_138)*) of
      -!Env_0 => L_4012
  block L_4012 (env_1583: unit)
    call L_4013 (-!_2 (env_1583, x_3632)) handle _ => raise
  block L_4013 (x_3633: word32)
    val x_3634: t_0 = con SOME_0 (x_3633)
    return (x_3634)
fun radixToInt_1 (env_1584: unit, x_3635: radix_0):
  {returns = Some (word32), raises = Some (exn)} =
L_4014 ()
  block L_4014 ()
    case x_3635 of
      BIN_1 => L_4018 | DEC_1 => L_4017 | HEX_0 => L_4016 | OCT_1 => L_4015
  block L_4015 ()
    return (x_387 (*0x8:w32*))
  block L_4016 ()
    return (x_386 (*0x10:w32*))
  block L_4017 ()
    return (x_385 (*0xA:w32*))
  block L_4018 ()
    return (x_384 (*0x2:w32*))
fun x_3621 (env_1585: unit, x_3636: word8):
  {returns = Some (word32), raises = Some (exn)} =
L_4019 ()
  block L_4019 ()
    val x_3637: word32 = prim WordU8_extdToWord32 (x_3636)
    return (x_3637)
fun x_1447 (env_1586: unit, x_3638: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_4020 ()
  block L_4020 ()
    val x_3639: word8 = prim WordS32_extdToWord8 (x_3638)
    case idFromWord8_0 (*con idFrom ... _175)*) of
      idFromWord8Env_0 => L_4021
  block L_4021 (env_1587: unit)
    call tail idFromWord8_1 (env_1587, x_3639)
fun update_1 (env_1588: unit, x_3640: ((word8) array, word32, word8) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4022 ()
  block L_4022 ()
    val x_3641: word8 = #2 (x_3640)
    val i_29: word32 = #1 (x_3640)
    val seq_0: (word8) array = #0 (x_3640)
    case full_0 (*con fullEn ... e_18)*) of
      fullEnv_0 => L_4023
  block L_4023 (env_1589: unit)
    call L_4024 (full_3 (env_1589, seq_0)) handle _ => raise
  block L_4024 (x_3642: t_10)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_4025
  block L_4025 (env_1590: unit)
    call L_4026 (sextdFromInt32ToInt64_1 (env_1590, i_29)) handle _ => L_4027
  block L_4027 (x_3643: exn)
    case x_3643 of
      Overflow_0 => L_4028 | _ => L_4029
  block L_4029 ()
    call L_4026 (x_3644 (x_3643, x_377 (*()*))) handle _ => raise
  block L_4028 (x_3645: (unit) ref)
    val x_3646: bool = prim MLton_equal[(unit) ref] (x_3645, x_62)
    case x_3646 of
      true => L_4031 | false => L_4030
  block L_4030 ()
    call L_4026 (x_3644 (x_3643, x_378 (*()*))) handle _ => raise
  block L_4031 ()
    raise (x_69 (*con Subscr ... x_68)*))
  block L_4026 (i_30: word64)
    case x_3642 of
      T_2 => L_4032
  block L_4032 (x_3647: (word64, (word8) array, word64) tuple)
    val x_3649: word64 = #0 (x_3647)
    val x_3648: (word64, word64) tuple = (i_30, x_3649)
    case >=_5 (*con >=Env_ ... e_15)*) of
      >=Env_5 => L_4033
  block L_4033 (env_1591: unit)
    call L_4034 (>=_11 (env_1591, x_3648)) handle _ => raise
  block L_4034 (x_3650: bool)
    case x_3650 of
      true => L_4036 | false => L_4035
  block L_4035 ()
    case x_3642 of
      T_2 => L_4037
  block L_4037 (x_3651: (word64, (word8) array, word64) tuple)
    val x_3653: word64 = #2 (x_3651)
    val x_3654: (word8) array = #1 (x_3651)
    val x_3652: (word64, word64) tuple = (x_3653, i_30)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4038
  block L_4038 (env_1592: unit)
    call L_4039 (+!_2 (env_1592, x_3652)) handle _ => raise
  block L_4039 (x_3655: word64)
    val x_3656: ((word8) array, word64, word8) tuple = (x_3654, x_3655, x_3641)
    case x_158 (*con xEnv_19 (x_157)*) of
      xEnv_19 => L_4040
  block L_4040 (env_1593: unit)
    call tail x_3259 (env_1593, x_3656)
  block L_4036 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_3644 (env_1594: exn, unit_4: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_4041 ()
  block L_4041 ()
    raise (env_1594)
fun slice_1 (env_1595: unit, x_3657: ((word8) array, word32, t_0) tuple):
  {returns = Some (t_10), raises = Some (exn)} =
L_4042 ()
  block L_4042 ()
    val len_0: t_0 = #2 (x_3657)
    val start_0: word32 = #1 (x_3657)
    val seq_1: (word8) array = #0 (x_3657)
    case full_0 (*con fullEn ... e_18)*) of
      fullEnv_0 => L_4043
  block L_4043 (env_1596: unit)
    call L_4044 (full_3 (env_1596, seq_1)) handle _ => raise
  block L_4044 (x_3658: t_10)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_4045
  block L_4045 (env_1597: unit)
    call L_4046 (sextdFromInt32ToInt64_1 (env_1597, start_0)) handle _ => L_4047
  block L_4046 (x_3659: word64)
    case len_0 of
      NONE_1 => L_4049 | SOME_0 => L_4048
  block L_4048 (x_3660: word32)
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_4050
  block L_4050 (env_1598: unit)
    call L_4051 (sextdFromInt32ToInt64_1 (env_1598, x_3660)) handle _ => L_4047
  block L_4051 (x_3661: word64)
    val x_3662: t_12 = con SOME_8 (x_3661)
    goto L_4052 (x_3662)
  block L_4049 ()
    goto L_4052 (x_373 (*con NONE_0*))
  block L_4052 (x_3663: t_12)
    case x_3658 of
      T_2 => L_4053
  block L_4053 (x_3664: (word64, (word8) array, word64) tuple)
    val x_3667: word64 = #2 (x_3664)
    val x_3666: (word8) array = #1 (x_3664)
    val x_3665: word64 = #0 (x_3664)
    case x_3663 of
      NONE_0 => L_4055 | SOME_8 => L_4054
  block L_4054 (x_3668: word64)
    val x_3669: (word64, word64) tuple = (x_3659, x_3665)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_4056
  block L_4056 (env_1599: unit)
    call L_4057 (>_6 (env_1599, x_3669)) handle _ => L_4047
  block L_4057 (x_3670: bool)
    case x_3670 of
      true => L_4059 | false => L_4058
  block L_4058 ()
    val x_3671: (word64, word64) tuple = (x_3665, x_3659)
    case -!_1 (*con -!Env_1 (x_149)*) of
      -!Env_1 => L_4060
  block L_4060 (env_1600: unit)
    call L_4061 (-!_3 (env_1600, x_3671)) handle _ => L_4047
  block L_4061 (x_3672: word64)
    val x_3673: (word64, word64) tuple = (x_3668, x_3672)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_4062
  block L_4062 (env_1601: unit)
    call L_4063 (>_6 (env_1601, x_3673)) handle _ => L_4047
  block L_4059 ()
    goto L_4063 (x_374 (*con true*))
  block L_4063 (x_3674: bool)
    case x_3674 of
      true => L_4065 | false => L_4064
  block L_4064 ()
    val x_3675: (word64, word64) tuple = (x_3667, x_3659)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4066
  block L_4066 (env_1602: unit)
    call L_4067 (+!_2 (env_1602, x_3675)) handle _ => L_4047
  block L_4067 (x_3676: word64)
    val x_3678: (word64, (word8) array, word64) tuple = (x_3668, x_3666, x_3676)
    val x_3677: t_10 = con T_2 (x_3678)
    return (x_3677)
  block L_4065 ()
    goto L_4047 (x_69 (*con Subscr ... x_68)*))
  block L_4055 ()
    val x_3679: (word64, word64) tuple = (x_3659, x_3665)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_4068
  block L_4068 (env_1603: unit)
    call L_4069 (>_6 (env_1603, x_3679)) handle _ => L_4047
  block L_4069 (x_3680: bool)
    case x_3680 of
      true => L_4071 | false => L_4070
  block L_4070 ()
    val x_3681: (word64, word64) tuple = (x_3667, x_3659)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4072
  block L_4072 (env_1604: unit)
    call L_4073 (+!_2 (env_1604, x_3681)) handle _ => L_4047
  block L_4073 (x_3682: word64)
    val x_3683: (word64, word64) tuple = (x_3665, x_3659)
    case -!_1 (*con -!Env_1 (x_149)*) of
      -!Env_1 => L_4074
  block L_4074 (env_1605: unit)
    call L_4075 (-!_3 (env_1605, x_3683)) handle _ => L_4047
  block L_4075 (x_3684: word64)
    val x_3686: (word64, (word8) array, word64) tuple = (x_3684, x_3666, x_3682)
    val x_3685: t_10 = con T_2 (x_3686)
    return (x_3685)
  block L_4071 ()
    goto L_4047 (x_69 (*con Subscr ... x_68)*))
  block L_4047 (x_3687: exn)
    case x_3687 of
      Overflow_0 => L_4076 | _ => L_4077
  block L_4077 ()
    call tail x_3688 (x_3687, x_375 (*()*))
  block L_4076 (x_3689: (unit) ref)
    val x_3690: bool = prim MLton_equal[(unit) ref] (x_3689, x_62)
    case x_3690 of
      true => L_4079 | false => L_4078
  block L_4078 ()
    call tail x_3688 (x_3687, x_376 (*()*))
  block L_4079 ()
    raise (x_69 (*con Subscr ... x_68)*))
fun x_3688 (env_1606: exn, unit_5: unit):
  {returns = Some (t_10), raises = Some (exn)} =
L_4080 ()
  block L_4080 ()
    raise (env_1606)
fun new_4 (env_1607: lambdas_155, x_3691: (word32, word8) tuple):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4081 ()
  block L_4081 ()
    val x_3692: word8 = #1 (x_3691)
    val n_18: word32 = #0 (x_3691)
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_4082
  block L_4082 (env_1608: unit)
    call L_4083 (fromIntForLength_1 (env_1608, n_18)) handle _ => raise
  block L_4083 (x_3693: word64)
    case env_1607 of
      arrayAllocEnv_0 => L_4084
  block L_4084 (env_1609: word64)
    call L_4085 (arrayAlloc_5 (env_1609, x_3693)) handle _ => raise
  block L_4085 (a_5: (word8) array)
    val tuple_72: (word64, (word8) array, word8) tuple = (x_3693, a_5, x_3692)
    call L_4086 (loop_20 (tuple_72, x_1098)) handle _ => raise
  block L_4086 (b_20: unit)
    case x_297 (*con xEnv_33 (x_296)*) of
      xEnv_33 => L_4087
  block L_4087 (env_1610: unit)
    call tail x_3243 (env_1610, a_5)
fun loop_20 (env_1611: (word64, (word8) array, word8) tuple,
             x_3694: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4088 ()
  block L_4088 ()
    val x_3696: word64 = #0 (env_1611)
    val a_6: (word8) array = #1 (env_1611)
    val x_3697: word8 = #2 (env_1611)
    val b_21: unit = #1 (x_3694)
    val i_31: word64 = #0 (x_3694)
    val x_3695: (word64, word64) tuple = (i_31, x_3696)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_4089
  block L_4089 (env_1612: unit)
    call L_4090 (>=_9 (env_1612, x_3695)) handle _ => raise
  block L_4090 (x_3698: bool)
    case x_3698 of
      true => L_4092 | false => L_4091
  block L_4091 ()
    val x_3699: ((word8) array, word64, word8) tuple = (a_6, i_31, x_3697)
    case x_158 (*con xEnv_19 (x_157)*) of
      xEnv_19 => L_4093
  block L_4093 (env_1613: unit)
    call L_4094 (x_3259 (env_1613, x_3699)) handle _ => raise
  block L_4094 (x_3700: unit)
    val x_3701: (word64, word64) tuple = (i_31, x_371 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4095
  block L_4095 (env_1614: unit)
    call L_4096 (+!_2 (env_1614, x_3701)) handle _ => raise
  block L_4096 (x_3702: word64)
    val x_3703: (word64, unit) tuple = (x_3702, x_370 (*()*))
    call tail loop_20 (env_1611, x_3703)
  block L_4092 ()
    return (b_21)
fun concat_2 (env_1615: (lambdas_12, lambdas_155, lambdas_11) tuple,
              x_3704: list_6):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4097 ()
  block L_4097 ()
    val arrayAlloc_7: lambdas_12 = #0 (env_1615)
    val arrayAlloc_6: lambdas_155 = #1 (env_1615)
    val sequence_3: lambdas_11 = #2 (env_1615)
    case x_3704 of
      nil_3 => L_4099 | ::_1 => L_4098
  block L_4098 (x_3705: ((word8) vector, list_6) tuple)
    val x_3707: list_6 = #1 (x_3705)
    val x_3706: (word8) vector = #0 (x_3705)
    case x_3707 of
      nil_3 => L_4100 | _ => L_4101
  block L_4101 ()
    val x_3708: (list_6, word64) tuple = (x_3704, x_361 (*0x0:w64*))
    case loop_0 (*con loopEn ... e_27)*) of
      loopEnv_0 => L_4102
  block L_4102 (env_1616: unit)
    call L_4103 (loop_21 (env_1616, x_3708)) handle _ => raise
  block L_4103 (x_3709: word64)
    case arrayAlloc_6 of
      arrayAllocEnv_0 => L_4104
  block L_4104 (env_1617: word64)
    call L_4105 (arrayAlloc_5 (env_1617, x_3709)) handle _ => raise
  block L_4105 (x_3710: (word8) array)
    case x_297 (*con xEnv_33 (x_296)*) of
      xEnv_33 => L_4106
  block L_4106 (env_1618: unit)
    call L_4107 (x_3243 (env_1618, x_3710)) handle _ => raise
  block L_4107 (x_3711: (word8) array)
    val x_3712: (word64, list_6) tuple = (x_368 (*0x0:w64*), x_3704)
    call tail loop_22 (x_3711, x_3712)
  block L_4100 ()
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_4108
  block L_4108 (env_1619: unit)
    call L_4109 (full_2 (env_1619, x_3706)) handle _ => raise
  block L_4109 (x_3713: t_17)
    case sequence_3 of
      sequenceEnv_0 => L_4110
  block L_4110 (env_1620: lambdas_12)
    call tail sequence_2 (env_1620, x_3713)
  block L_4099 ()
    case fromIntForLength_0 (*con fromIn ... e_26)*) of
      fromIntForLengthEnv_0 => L_4111
  block L_4111 (env_1621: unit)
    call L_4112 (fromIntForLength_1 (env_1621, x_354 (*0x0:w32*))) handle _ => raise
  block L_4112 (x_3714: word64)
    case arrayAlloc_7 of
      arrayAllocEnv_1 => L_4113
  block L_4113 (env_1622: word64)
    call L_4114 (arrayAlloc_2 (env_1622, x_3714)) handle _ => raise
  block L_4114 (a_7: (word8) array)
    val tuple_73: (word64, (word8) array) tuple = (x_3714, a_7)
    call L_4115 (loop_23 (tuple_73, x_1097)) handle _ => raise
  block L_4115 (b_22: unit)
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_4116
  block L_4116 (env_1623: unit)
    call tail x_1452 (env_1623, a_7)
fun loop_22 (env_1624: (word8) array, x_3715: (word64, list_6) tuple):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4117 ()
  block L_4117 ()
    val xs_0: list_6 = #1 (x_3715)
    val di_0: word64 = #0 (x_3715)
    case xs_0 of
      nil_3 => L_4119 | ::_1 => L_4118
  block L_4118 (x_3716: ((word8) vector, list_6) tuple)
    val x_3718: list_6 = #1 (x_3716)
    val x_3717: (word8) vector = #0 (x_3716)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_4120
  block L_4120 (env_1625: unit)
    call L_4121 (full_2 (env_1625, x_3717)) handle _ => raise
  block L_4121 (sl_0: t_17)
    case sl_0 of
      T_5 => L_4122
  block L_4122 (x_3719: (word64, (word8) vector, word64) tuple)
    val x_3723: word64 = #2 (x_3719)
    val x_3722: (word8) vector = #1 (x_3719)
    val x_3721: word64 = #0 (x_3719)
    val x_3720: (word64, word64) tuple = (x_3721, smallCopyLimit_1 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_4123
  block L_4123 (env_1626: unit)
    call L_4124 (<_5 (env_1626, x_3720)) handle _ => raise
  block L_4124 (x_3724: bool)
    case x_3724 of
      true => L_4126 | false => L_4125
  block L_4125 ()
    val x_3725: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (env_1624, di_0, x_3722, x_3723, x_3721)
    case x_156 (*con xEnv_18 (x_155)*) of
      xEnv_18 => L_4127
  block L_4127 (env_1627: unit)
    call L_4128 (x_2012 (env_1627, x_3725)) handle _ => raise
  block L_4126 ()
    val x_3726: (word64, word64) tuple = (x_3721, x_364 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_149)*) of
      -!Env_1 => L_4129
  block L_4129 (env_1628: unit)
    call L_4130 (-!_3 (env_1628, x_3726)) handle _ => raise
  block L_4130 (len_1: word64)
    val tuple_74:
      (word64, word64, word64, (word8) vector, (word8) array) tuple =
      (len_1, di_0, x_3723, x_3722, env_1624)
    call L_4128 (loop_24 (tuple_74, x_367 (*0x0:w64*))) handle _ => raise
  block L_4128 (x_3727: unit)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_4131
  block L_4131 (env_1629: unit)
    call L_4132 (length_1 (env_1629, sl_0)) handle _ => raise
  block L_4132 (x_3728: word64)
    val x_3729: (word64, word64) tuple = (di_0, x_3728)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4133
  block L_4133 (env_1630: unit)
    call L_4134 (+!_2 (env_1630, x_3729)) handle _ => raise
  block L_4134 (x_3730: word64)
    val x_3731: (word64, list_6) tuple = (x_3730, x_3718)
    call tail loop_22 (env_1624, x_3731)
  block L_4119 ()
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_4135
  block L_4135 (env_1631: unit)
    call tail x_1452 (env_1631, env_1624)
fun loop_24 (env_1632:
               (word64, word64, word64, (word8) vector, (word8) array) tuple,
             x_3732: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_4136 ()
  block L_4136 ()
    val len_2: word64 = #0 (env_1632)
    val di_1: word64 = #1 (env_1632)
    val x_3736: word64 = #2 (env_1632)
    val x_3735: (word8) vector = #3 (env_1632)
    val x_3734: (word8) array = #4 (env_1632)
    val x_3733: (word64, word64) tuple = (x_3732, len_2)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_4137
  block L_4137 (env_1633: unit)
    call L_4138 (>_9 (env_1633, x_3733)) handle _ => raise
  block L_4138 (x_3737: bool)
    case x_3737 of
      true => L_4140 | false => L_4139
  block L_4139 ()
    val x_3738: (word64, word64) tuple = (di_1, x_3732)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4141
  block L_4141 (env_1634: unit)
    call L_4142 (+!_2 (env_1634, x_3738)) handle _ => raise
  block L_4142 (x_3739: word64)
    val x_3740: (word64, word64) tuple = (x_3736, x_3732)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4143
  block L_4143 (env_1635: unit)
    call L_4144 (+!_2 (env_1635, x_3740)) handle _ => raise
  block L_4144 (x_3741: word64)
    val x_3742: ((word8) vector, word64) tuple = (x_3735, x_3741)
    case x_164 (*con xEnv_22 (x_163)*) of
      xEnv_22 => L_4145
  block L_4145 (env_1636: unit)
    call L_4146 (x_2023 (env_1636, x_3742)) handle _ => raise
  block L_4146 (x_3743: word8)
    val x_3744: ((word8) array, word64, word8) tuple = (x_3734, x_3739, x_3743)
    case x_158 (*con xEnv_19 (x_157)*) of
      xEnv_19 => L_4147
  block L_4147 (env_1637: unit)
    call L_4148 (x_3259 (env_1637, x_3744)) handle _ => raise
  block L_4148 (x_3745: unit)
    val x_3746: (word64, word64) tuple = (x_3732, x_366 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4149
  block L_4149 (env_1638: unit)
    call L_4150 (+!_2 (env_1638, x_3746)) handle _ => raise
  block L_4150 (x_3747: word64)
    call tail loop_24 (env_1632, x_3747)
  block L_4140 ()
    return (x_365 (*()*))
fun loop_21 (env_1639: unit, x_3748: (list_6, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4151 ()
  block L_4151 ()
    val b_23: word64 = #1 (x_3748)
    val l_2: list_6 = #0 (x_3748)
    case l_2 of
      nil_3 => L_4153 | ::_1 => L_4152
  block L_4152 (x_3749: ((word8) vector, list_6) tuple)
    val x_3751: list_6 = #1 (x_3749)
    val x_3750: (word8) vector = #0 (x_3749)
    case full_1 (*con fullEn ... e_22)*) of
      fullEnv_1 => L_4154
  block L_4154 (env_1640: unit)
    call L_4155 (full_2 (env_1640, x_3750)) handle _ => L_4156
  block L_4155 (x_3752: t_17)
    case length_0 (*con length ... e_21)*) of
      lengthEnv_0 => L_4157
  block L_4157 (env_1641: unit)
    call L_4158 (length_1 (env_1641, x_3752)) handle _ => L_4156
  block L_4158 (x_3753: word64)
    val x_3754: (word64, word64) tuple = (b_23, x_3753)
    case x_145 (*con xEnv_14 (x_144)*) of
      xEnv_14 => L_4159
  block L_4159 (env_1642: unit)
    call L_4160 (x_3755 (env_1642, x_3754)) handle _ => L_4156
  block L_4156 (x_3756: exn)
    case x_3756 of
      Overflow_0 => L_4161 | _ => L_4162
  block L_4162 ()
    call L_4160 (x_3757 (x_3756, x_362 (*()*))) handle _ => raise
  block L_4161 (x_3758: (unit) ref)
    val x_3759: bool = prim MLton_equal[(unit) ref] (x_3758, x_62)
    case x_3759 of
      true => L_4164 | false => L_4163
  block L_4163 ()
    call L_4160 (x_3757 (x_3756, x_363 (*()*))) handle _ => raise
  block L_4164 ()
    raise (x_66 (*con Size_0 (x_65)*))
  block L_4160 (x_3760: word64)
    val x_3761: (list_6, word64) tuple = (x_3751, x_3760)
    case loop_0 (*con loopEn ... e_27)*) of
      loopEnv_0 => L_4165
  block L_4165 (env_1643: unit)
    call tail loop_21 (env_1643, x_3761)
  block L_4153 ()
    return (b_23)
fun x_3757 (env_1644: exn, unit_6: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_4166 ()
  block L_4166 ()
    raise (env_1644)
fun loop_23 (env_1645: (word64, (word8) array) tuple,
             x_3762: (word64, unit) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4167 ()
  block L_4167 ()
    val x_3764: word64 = #0 (env_1645)
    val b_24: unit = #1 (x_3762)
    val i_32: word64 = #0 (x_3762)
    val x_3763: (word64, word64) tuple = (i_32, x_3764)
    case >=_2 (*con >=Env_ ... le_6)*) of
      >=Env_2 => L_4168
  block L_4168 (env_1646: unit)
    call L_4169 (>=_9 (env_1646, x_3763)) handle _ => raise
  block L_4169 (x_3765: bool)
    case x_3765 of
      true => L_4171 | false => L_4170
  block L_4170 ()
    raise (x_358 (*con Fail_0 (x_357)*))
  block L_4171 ()
    return (b_24)
fun fromIntForLength_1 (env_1647: unit, x_3766: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4172 ()
  block L_4172 ()
    case sextdFromInt32ToInt64_0 (*con sextdF ... _108)*) of
      sextdFromInt32ToInt64Env_0 => L_4173
  block L_4173 (env_1648: unit)
    call L_4174 (sextdFromInt32ToInt64_1 (env_1648, x_3766)) handle _ => L_4175
  block L_4175 (x_3767: exn)
    case x_3767 of
      Overflow_0 => L_4176 | _ => L_4177
  block L_4177 ()
    call tail x_3768 (x_3767, x_352 (*()*))
  block L_4176 (x_3769: (unit) ref)
    val x_3770: bool = prim MLton_equal[(unit) ref] (x_3769, x_62)
    case x_3770 of
      true => L_4179 | false => L_4178
  block L_4178 ()
    call tail x_3768 (x_3767, x_353 (*()*))
  block L_4179 ()
    raise (x_66 (*con Size_0 (x_65)*))
  block L_4174 (x_3771: word64)
    return (x_3771)
fun x_3768 (env_1649: exn, unit_7: unit):
  {returns = Some (word64), raises = Some (exn)} =
L_4180 ()
  block L_4180 ()
    raise (env_1649)
fun exnMessage_2 (env_1650: (list_0) ref, x_3772: exn):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4181 ()
  block L_4181 ()
    case x_73 (*con xEnv_3 (x_72)*) of
      xEnv_3 => L_4182
  block L_4182 (env_1651: unit)
    call L_4183 (x_1454 (env_1651, env_1650)) handle _ => raise
  block L_4183 (x_3773: list_0)
    call tail find_0 (x_3772, x_3773)
fun find_0 (env_1652: exn, x_3774: list_0):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4184 ()
  block L_4184 ()
    case x_3774 of
      nil_1 => L_4186 | ::_3 => L_4185
  block L_4185 (x_3775: (lambdas_0, list_0) tuple)
    val x_3777: list_0 = #1 (x_3775)
    val x_3776: lambdas_0 = #0 (x_3775)
    case x_3776 of
      xEnv_195 => L_4189 | xEnv_194 => L_4188 | xEnv_193 => L_4187
  block L_4187 (env_1653: (lambdas_16, lambdas_17) tuple)
    call L_4190 (x_2175 (env_1653, env_1652)) handle _ => raise
  block L_4188 (env_1654: lambdas_16)
    call L_4190 (x_3320 (env_1654, env_1652)) handle _ => raise
  block L_4189 (env_1655: (lambdas_16, list_3) tuple)
    call L_4190 (x_3270 (env_1655, env_1652)) handle _ => raise
  block L_4190 (x_3778: t_1)
    case x_3778 of
      NONE_3 => L_4192 | SOME_1 => L_4191
  block L_4191 (x_3779: (word8) vector)
    return (x_3779)
  block L_4192 ()
    call tail find_0 (env_1652, x_3777)
  block L_4186 ()
    case name_0 (*con nameEnv_0 (x_53)*) of
      nameEnv_0 => L_4193
  block L_4193 (env_1656: unit)
    call tail name_1 (env_1656, env_1652)
fun mkBigCvt_0 (env_1657:
                  (word64,
                   word32,
                   word32,
                   word32,
                   lambdas_20,
                   word32,
                   word32,
                   word32) tuple,
                x_3780: (word32, lambdas_203) tuple):
  {returns = Some (lambdas_202), raises = Some (exn)} =
L_4194 ()
  block L_4194 ()
    val bytesPerSequenceMetaData_1: word64 = #0 (env_1657)
    val minInt'_25: word32 = #1 (env_1657)
    val one_62: word32 = #2 (env_1657)
    val zero_78: word32 = #3 (env_1657)
    val quot_4: lambdas_20 = #4 (env_1657)
    val sizeInBitsWord_28: word32 = #5 (env_1657)
    val zero_77: word32 = #6 (env_1657)
    val one_61: word32 = #7 (env_1657)
    val x_3782:
      (word64,
       word32,
       word32,
       word32,
       lambdas_20,
       word32,
       word32,
       word32,
       (word32, lambdas_203) tuple) tuple =
      (bytesPerSequenceMetaData_1,
       minInt'_25,
       one_62,
       zero_78,
       quot_4,
       sizeInBitsWord_28,
       zero_77,
       one_61,
       x_3780)
    val x_3781: lambdas_202 = con xEnv_181 (x_3782)
    return (x_3781)
fun x_3783 (env_1658:
              (word64,
               word32,
               word32,
               word32,
               lambdas_20,
               word32,
               word32,
               word32,
               (word32, lambdas_203) tuple) tuple,
            x_3784: intInf):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4195 ()
  block L_4195 ()
    val bytesPerSequenceMetaData_2: word64 = #0 (env_1658)
    val minInt'_26: word32 = #1 (env_1658)
    val one_64: word32 = #2 (env_1658)
    val zero_80: word32 = #3 (env_1658)
    val quot_5: lambdas_20 = #4 (env_1658)
    val sizeInBitsWord_29: word32 = #5 (env_1658)
    val zero_79: word32 = #6 (env_1658)
    val one_63: word32 = #7 (env_1658)
    val x_3786: (word32, lambdas_203) tuple = #8 (env_1658)
    val x_3787: lambdas_203 = #1 (x_3786)
    val x_3785: word32 = #0 (x_3786)
    case isSmall_0 (*con isSmal ... e_24)*) of
      isSmallEnv_0 => L_4196
  block L_4196 (env_1659: unit)
    call L_4197 (isSmall_1 (env_1659, x_3784)) handle _ => raise
  block L_4197 (x_3788: bool)
    case x_3788 of
      true => L_4199 | false => L_4198
  block L_4198 ()
    case idFromInt32ToWord32_0 (*con idFrom ... x_90)*) of
      idFromInt32ToWord32Env_0 => L_4200
  block L_4200 (env_1660: unit)
    call L_4201 (idFromInt32ToWord32_1 (env_1660, x_3785)) handle _ => raise
  block L_4201 (x_3789: word32)
    val x_3790: (word32, word32) tuple = (x_3789, zero_79)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4202
  block L_4202 (env_1661: unit)
    call L_4203 (x_1711 (env_1661, x_3790)) handle _ => raise
  block L_4203 (x_3791: bool)
    case x_3791 of
      true => L_4205 | false => L_4204
  block L_4204 ()
    val x_3792: (word32, word32) tuple = (sizeInBitsWord_29, x_337 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_4206
  block L_4206 (env_1662: unit)
    call L_4207 (>>?_5 (env_1662, x_3792)) handle _ => raise
  block L_4207 (x_3793: word32)
    val x_3794: (word32, word32, word32) tuple =
      (x_3789, x_3793, x_338 (*0x0:w32*))
    call L_4208 (loop_25 (one_63, x_3794)) handle _ => raise
  block L_4208 (x_3795: word32)
    val x_3796: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_3795)
    case quot_5 of
      quotEnv_0 => L_4209
  block L_4209 (env_1663: (word32, word32, word32) tuple)
    call L_4210 (quot_1 (env_1663, x_3796)) handle _ => raise
  block L_4210 (x_3797: word32)
    val x_3798: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), zero_80)
    case >=_1 (*con >=Env_ ... le_4)*) of
      >=Env_1 => L_4211
  block L_4211 (env_1664: unit)
    call L_4212 (>=_6 (env_1664, x_3798)) handle _ => raise
  block L_4212 (x_3799: bool)
    case x_3799 of
      true => L_4214 | false => L_4213
  block L_4213 ()
    val x_3800: (word32, word32) tuple = (x_3795, zero_80)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_4215
  block L_4215 (env_1665: unit)
    call L_4216 (<_6 (env_1665, x_3800)) handle _ => raise
  block L_4216 (x_3801: bool)
    case x_3801 of
      true => L_4218 | false => L_4217
  block L_4217 ()
    val x_3802: (word32, word32) tuple = (x_3795, zero_80)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_4219
  block L_4219 (env_1666: unit)
    call L_4220 (>_5 (env_1666, x_3802)) handle _ => raise
  block L_4220 (x_3803: bool)
    case x_3803 of
      true => L_4222 | false => L_4221
  block L_4221 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_4222 ()
    val x_3804: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), one_64)
    case +!_0 (*con +!Env_0 (x_132)*) of
      +!Env_0 => L_4223
  block L_4223 (env_1667: unit)
    call L_4224 (+!_3 (env_1667, x_3804)) handle _ => raise
  block L_4224 (x_3805: word32)
    val x_3806: (word32, word32) tuple = (x_3805, x_3795)
    case remUnsafe_0 (*con remUns ... _141)*) of
      remUnsafeEnv_0 => L_4225
  block L_4225 (env_1668: unit)
    call L_4226 (remUnsafe_1 (env_1668, x_3806)) handle _ => raise
  block L_4226 (x_3807: word32)
    val x_3808: (word32, word32) tuple = (x_3795, one_64)
    case -!_0 (*con -!Env_0 (x_138)*) of
      -!Env_0 => L_4227
  block L_4227 (env_1669: unit)
    call L_4228 (-!_2 (env_1669, x_3808)) handle _ => raise
  block L_4228 (x_3809: word32)
    val x_3810: (word32, word32) tuple = (x_3807, x_3809)
    case +!_0 (*con +!Env_0 (x_132)*) of
      +!Env_0 => L_4229
  block L_4229 (env_1670: unit)
    call L_4230 (+!_3 (env_1670, x_3810)) handle _ => raise
  block L_4218 ()
    val x_3811: (word32, word32) tuple =
      (sizeInBits_32 (*0x40:w32*), minInt'_26)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4231
  block L_4231 (env_1671: unit)
    call L_4232 (x_1711 (env_1671, x_3811)) handle _ => raise
  block L_4232 (x_3812: bool)
    case x_3812 of
      true => L_4234 | false => L_4233
  block L_4233 ()
    goto L_4235 (x_339 (*con false*))
  block L_4234 ()
    case x_137 (*con xEnv_12 (x_136)*) of
      xEnv_12 => L_4236
  block L_4236 (env_1672: unit)
    call L_4237 (x_2137 (env_1672, one_64)) handle _ => raise
  block L_4237 (x_3813: word32)
    val x_3814: (word32, word32) tuple = (x_3795, x_3813)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4238
  block L_4238 (env_1673: unit)
    call L_4235 (x_1711 (env_1673, x_3814)) handle _ => raise
  block L_4235 (x_3815: bool)
    case x_3815 of
      true => L_4240 | false => L_4239
  block L_4239 ()
    val x_3816: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_3795)
    case remUnsafe_0 (*con remUns ... _141)*) of
      remUnsafeEnv_0 => L_4241
  block L_4241 (env_1674: unit)
    call L_4230 (remUnsafe_1 (env_1674, x_3816)) handle _ => raise
  block L_4240 ()
    goto L_4230 (zero_80)
  block L_4214 ()
    val x_3817: (word32, word32) tuple = (x_3795, zero_80)
    case >_0 (*con >Env_0 (tuple_3)*) of
      >Env_0 => L_4242
  block L_4242 (env_1675: unit)
    call L_4243 (>_5 (env_1675, x_3817)) handle _ => raise
  block L_4243 (x_3818: bool)
    case x_3818 of
      true => L_4245 | false => L_4244
  block L_4244 ()
    val x_3819: (word32, word32) tuple = (x_3795, zero_80)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_4246
  block L_4246 (env_1676: unit)
    call L_4247 (<_6 (env_1676, x_3819)) handle _ => raise
  block L_4247 (x_3820: bool)
    case x_3820 of
      true => L_4249 | false => L_4248
  block L_4248 ()
    raise (x_56 (*con Div_0 (x_55)*))
  block L_4249 ()
    val x_3821: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), zero_80)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4250
  block L_4250 (env_1677: unit)
    call L_4251 (x_1711 (env_1677, x_3821)) handle _ => raise
  block L_4251 (x_3822: bool)
    case x_3822 of
      true => L_4253 | false => L_4252
  block L_4252 ()
    val x_3823: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), one_64)
    case -!_0 (*con -!Env_0 (x_138)*) of
      -!Env_0 => L_4254
  block L_4254 (env_1678: unit)
    call L_4255 (-!_2 (env_1678, x_3823)) handle _ => raise
  block L_4255 (x_3824: word32)
    val x_3825: (word32, word32) tuple = (x_3824, x_3795)
    case remUnsafe_0 (*con remUns ... _141)*) of
      remUnsafeEnv_0 => L_4256
  block L_4256 (env_1679: unit)
    call L_4257 (remUnsafe_1 (env_1679, x_3825)) handle _ => raise
  block L_4257 (x_3826: word32)
    val x_3827: (word32, word32) tuple = (x_3795, one_64)
    case x_134 (*con xEnv_11 (x_133)*) of
      xEnv_11 => L_4258
  block L_4258 (env_1680: unit)
    call L_4259 (x_1285 (env_1680, x_3827)) handle _ => raise
  block L_4259 (x_3828: word32)
    val x_3829: (word32, word32) tuple = (x_3826, x_3828)
    case +!_0 (*con +!Env_0 (x_132)*) of
      +!Env_0 => L_4260
  block L_4260 (env_1681: unit)
    call L_4230 (+!_3 (env_1681, x_3829)) handle _ => raise
  block L_4253 ()
    goto L_4230 (zero_80)
  block L_4245 ()
    val x_3830: (word32, word32) tuple = (sizeInBits_32 (*0x40:w32*), x_3795)
    case remUnsafe_0 (*con remUns ... _141)*) of
      remUnsafeEnv_0 => L_4261
  block L_4261 (env_1682: unit)
    call L_4230 (remUnsafe_1 (env_1682, x_3830)) handle _ => raise
  block L_4230 (x_3831: word32)
    val x_3832: (word32, word32) tuple = (x_3831, x_340 (*0x0:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4262
  block L_4262 (env_1683: unit)
    call L_4263 (x_1711 (env_1683, x_3832)) handle _ => raise
  block L_4263 (x_3833: bool)
    case x_3833 of
      true => L_4265 | false => L_4264
  block L_4264 ()
    goto L_4266 (x_342 (*0x1:w32*))
  block L_4265 ()
    goto L_4266 (x_341 (*0x0:w32*))
  block L_4266 (x_3834: word32)
    val x_3835: (word32, word32) tuple = (x_3797, x_3834)
    case x_134 (*con xEnv_11 (x_133)*) of
      xEnv_11 => L_4267
  block L_4267 (env_1684: unit)
    call L_4268 (x_1285 (env_1684, x_3835)) handle _ => raise
  block L_4268 (dpl_0: word32)
    case +_0 (*con +Env_0 (x_126)*) of
      +Env_0 => L_4269
  block L_4269 (env_1685: unit)
    call L_4270 (+_5 (env_1685, x_1095)) handle _ => raise
  block L_4270 (x_3836: word64)
    val x_3837: (word64, word64) tuple = (bytesPerSequenceMetaData_2, x_3836)
    case +_0 (*con +Env_0 (x_126)*) of
      +Env_0 => L_4271
  block L_4271 (env_1686: unit)
    call L_4272 (+_5 (env_1686, x_3837)) handle _ => raise
  block L_4272 (x_3838: word64)
    case zextdFromInt32ToWord64_0 (*con zextdF ... _101)*) of
      zextdFromInt32ToWord64Env_0 => L_4273
  block L_4273 (env_1687: unit)
    call L_4274 (zextdFromInt32ToWord64_1 (env_1687, dpl_0)) handle _ => raise
  block L_4274 (x_3839: word64)
    case isSmall_0 (*con isSmal ... e_24)*) of
      isSmallEnv_0 => L_4275
  block L_4275 (env_1688: unit)
    call L_4276 (isSmall_1 (env_1688, x_3784)) handle _ => raise
  block L_4276 (x_3840: bool)
    case x_3840 of
      true => L_4278 | false => L_4277
  block L_4277 ()
    val x_3843: (word64) vector = prim IntInf_toVector (x_3784)
    val x_3842: word64 = prim Vector_length[word64] (x_3843)
    val x_3841: (word64, word64) tuple = (x_3842, x_346 (*0x1:w64*))
    case x_151 (*con xEnv_16 (x_150)*) of
      xEnv_16 => L_4279
  block L_4279 (env_1689: unit)
    call L_4280 (x_2020 (env_1689, x_3841)) handle _ => raise
  block L_4278 ()
    goto L_4280 (x_345 (*0x1:w64*))
  block L_4280 (x_3844: word64)
    case zextdFromInt64ToWord64_0 (*con zextdF ... _102)*) of
      zextdFromInt64ToWord64Env_0 => L_4281
  block L_4281 (env_1690: unit)
    call L_4282 (zextdFromInt64ToWord64_1 (env_1690, x_3844)) handle _ => raise
  block L_4282 (x_3845: word64)
    val x_3847: word64 = prim WordU64_mul (x_3839, x_3845)
    val x_3846: (word64, word64) tuple = (x_3838, x_3847)
    case +_0 (*con +Env_0 (x_126)*) of
      +Env_0 => L_4283
  block L_4283 (env_1691: unit)
    call L_4284 (+_5 (env_1691, x_3846)) handle _ => raise
  block L_4284 (bytes_1: word64)
    val x_3848: (word8) vector = prim IntInf_toString (x_3784, x_3785, bytes_1)
    return (x_3848)
  block L_4205 ()
    raise (x_59 (*con Domain_0 (x_58)*))
  block L_4199 ()
    case toWord_0 (*con toWord ... _174)*) of
      toWordEnv_0 => L_4285
  block L_4285 (env_1692: unit)
    call L_4286 (toWord_1 (env_1692, x_3784)) handle _ => raise
  block L_4286 (x_3849: word64)
    val x_3850: (word64, word32) tuple = (x_3849, x_335 (*0x1:w32*))
    case ~>>?_0 (*con ~>>?En ... _130)*) of
      ~>>?Env_0 => L_4287
  block L_4287 (env_1693: unit)
    call L_4288 (~>>?_1 (env_1693, x_3850)) handle _ => raise
  block L_4288 (x_3851: word64)
    case x_3787 of
      xEnv_182 => L_4289
  block L_4289 (env_1694:
                  (word32,
                   word64,
                   word64,
                   word64,
                   radix_0,
                   (word8) array,
                   lambdas_175,
                   (bool) ref) tuple)
    call tail x_3416 (env_1694, x_3851)
fun loop_25 (env_1695: word32, x_3852: (word32, word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4290 ()
  block L_4290 ()
    val acc_1: word32 = #2 (x_3852)
    val s_0: word32 = #1 (x_3852)
    val n_19: word32 = #0 (x_3852)
    val x_3853: (word32, word32) tuple = (n_19, env_1695)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4291
  block L_4291 (env_1696: unit)
    call L_4292 (x_1711 (env_1696, x_3853)) handle _ => raise
  block L_4292 (x_3854: bool)
    case x_3854 of
      true => L_4294 | false => L_4293
  block L_4293 ()
    val x_3855: (word32, word32) tuple = (env_1695, s_0)
    case <<?_2 (*con <<?Env_2 (x_120)*) of
      <<?Env_2 => L_4295
  block L_4295 (env_1697: unit)
    call L_4296 (<<?_5 (env_1697, x_3855)) handle _ => raise
  block L_4296 (x_3856: word32)
    val x_3857: (word32, word32) tuple = (n_19, x_3856)
    case >=_0 (*con >=Env_ ... le_1)*) of
      >=Env_0 => L_4297
  block L_4297 (env_1698: unit)
    call L_4298 (>=_10 (env_1698, x_3857)) handle _ => raise
  block L_4298 (x_3858: bool)
    case x_3858 of
      true => L_4300 | false => L_4299
  block L_4299 ()
    val x_3859: (word32, word32) tuple = (n_19, acc_1)
    goto L_4301 (x_3859)
  block L_4300 ()
    val x_3860: (word32, word32) tuple = (n_19, s_0)
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_4302
  block L_4302 (env_1699: unit)
    call L_4303 (>>?_5 (env_1699, x_3860)) handle _ => raise
  block L_4303 (x_3861: word32)
    val x_3863: word32 = prim Word32_add (acc_1, s_0)
    val x_3862: (word32, word32) tuple = (x_3861, x_3863)
    goto L_4301 (x_3862)
  block L_4301 (x_3864: (word32, word32) tuple)
    val acc_2: word32 = #1 (x_3864)
    val n_20: word32 = #0 (x_3864)
    val x_3865: (word32, word32) tuple = (s_0, x_336 (*0x1:w32*))
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_4304
  block L_4304 (env_1700: unit)
    call L_4305 (>>?_5 (env_1700, x_3865)) handle _ => raise
  block L_4305 (x_3866: word32)
    val x_3867: (word32, word32, word32) tuple = (n_20, x_3866, acc_2)
    call tail loop_25 (env_1695, x_3867)
  block L_4294 ()
    return (acc_1)
fun loop_4 (env_1701: (word64) array, x_3868: list_8):
  {returns = Some (unit), raises = Some (exn)} =
L_4306 ()
  block L_4306 ()
    case x_3868 of
      nil_0 => L_4308 | ::_0 => L_4307
  block L_4307 (x_3869: ((word64, word64) tuple, list_8) tuple)
    val x_3874: list_8 = #1 (x_3869)
    val x_3872: (word64, word64) tuple = #0 (x_3869)
    val x_3873: word64 = #1 (x_3872)
    val x_3871: word64 = #0 (x_3872)
    val x_3870: (word64, word64) tuple = (x_334 (*0x0:w64*), x_3871)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4309
  block L_4309 (env_1702: unit)
    call L_4310 (+!_2 (env_1702, x_3870)) handle _ => raise
  block L_4310 (x_3875: word64)
    val _: unit = prim Array_update[word64] (env_1701, x_3875, x_3873)
    call tail loop_4 (env_1701, x_3874)
  block L_4308 ()
    return (x_333 (*()*))
fun loop_3 (env_1703: (word64, word32) tuple,
            x_3876: (word64, word64, list_8) tuple):
  {returns = Some ((word64, list_8) tuple), raises = Some (exn)} =
L_4311 ()
  block L_4311 ()
    val zero_81: word64 = #0 (env_1703)
    val sizeInBitsWord_30: word32 = #1 (env_1703)
    val acc_3: list_8 = #2 (x_3876)
    val i_33: word64 = #1 (x_3876)
    val w_1: word64 = #0 (x_3876)
    val x_3877: (word64, word64) tuple = (w_1, zero_81)
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_4312
  block L_4312 (env_1704: unit)
    call L_4313 (x_1234 (env_1704, x_3877)) handle _ => raise
  block L_4313 (x_3878: bool)
    case x_3878 of
      true => L_4315 | false => L_4314
  block L_4314 ()
    val x_3879: (word64, word32) tuple = (w_1, sizeInBitsWord_30)
    case >>?_3 (*con >>?Env_3 (x_131)*) of
      >>?Env_3 => L_4316
  block L_4316 (env_1705: unit)
    call L_4317 (>>?_4 (env_1705, x_3879)) handle _ => raise
  block L_4317 (w_2: word64)
    val x_3880: (word64, word64) tuple = (i_33, x_319 (*0x1:w64*))
    case x_145 (*con xEnv_14 (x_144)*) of
      xEnv_14 => L_4318
  block L_4318 (env_1706: unit)
    call L_4319 (x_3755 (env_1706, x_3880)) handle _ => raise
  block L_4319 (x_3881: word64)
    val x_3885: (word64, word64) tuple = (i_33, w_1)
    val x_3884: ((word64, word64) tuple, list_8) tuple = (x_3885, acc_3)
    val x_3883: list_8 = con ::_0 (x_3884)
    val x_3882: (word64, word64, list_8) tuple = (w_2, x_3881, x_3883)
    call tail loop_3 (env_1703, x_3882)
  block L_4315 ()
    val x_3886: (word64, list_8) tuple = (i_33, acc_3)
    return (x_3886)
fun addTag_1 (env_1707: unit, x_3887: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4320 ()
  block L_4320 ()
    val x_3888: (word64, word32) tuple = (x_3887, x_312 (*0x1:w32*))
    case <<?_3 (*con <<?Env_3 (x_128)*) of
      <<?Env_3 => L_4321
  block L_4321 (env_1708: unit)
    call L_4322 (<<?_4 (env_1708, x_3888)) handle _ => raise
  block L_4322 (x_3889: word64)
    val x_3890: word64 = prim Word64_orb (x_3889, x_313 (*0x1:w64*))
    return (x_3890)
fun isSmall_1 (env_1709: unit, x_3891: intInf):
  {returns = Some (bool), raises = Some (exn)} =
L_4323 ()
  block L_4323 ()
    case toWord_0 (*con toWord ... _174)*) of
      toWordEnv_0 => L_4324
  block L_4324 (env_1710: unit)
    call L_4325 (toWord_1 (env_1710, x_3891)) handle _ => raise
  block L_4325 (x_3892: word64)
    val x_3893: (word64, word64) tuple = (x_3892, x_311 (*0x1:w64*))
    case andb_1 (*con andbEn ... _127)*) of
      andbEnv_1 => L_4326
  block L_4326 (env_1711: unit)
    call L_4327 (andb_2 (env_1711, x_3893)) handle _ => raise
  block L_4327 (x_3894: word64)
    val x_3895: (word64, word64) tuple = (x_310 (*0x0:w64*), x_3894)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_4328
  block L_4328 (env_1712: unit)
    call tail x_3896 (env_1712, x_3895)
fun sequence_2 (env_1713: lambdas_12, x_3897: t_17):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4329 ()
  block L_4329 ()
    case x_3897 of
      T_5 => L_4330
  block L_4330 (x_3898: (word64, (word8) vector, word64) tuple)
    val x_3900: word64 = #2 (x_3898)
    val x_3902: (word8) vector = #1 (x_3898)
    val x_3901: word64 = #0 (x_3898)
    val x_3899: (word64, word64) tuple = (x_3900, x_307 (*0x0:w64*))
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_4331
  block L_4331 (env_1714: unit)
    call L_4332 (x_3896 (env_1714, x_3899)) handle _ => raise
  block L_4332 (x_3903: bool)
    case x_3903 of
      true => L_4334 | false => L_4333
  block L_4333 ()
    case x_162 (*con xEnv_21 (x_161)*) of
      xEnv_21 => L_4335
  block L_4335 (env_1715: unit)
    call L_4336 (x_2017 (env_1715, x_3902)) handle _ => raise
  block L_4336 (x_3904: word64)
    val x_3905: (word64, word64) tuple = (x_3901, x_3904)
    case x_87 (*con xEnv_10 (x_86)*) of
      xEnv_10 => L_4337
  block L_4337 (env_1716: unit)
    call L_4338 (x_3896 (env_1716, x_3905)) handle _ => raise
  block L_4334 ()
    goto L_4338 (x_308 (*con true*))
  block L_4338 (x_3906: bool)
    case x_3906 of
      true => L_4340 | false => L_4339
  block L_4339 ()
    return (x_3902)
  block L_4340 ()
    case env_1713 of
      arrayAllocEnv_1 => L_4341
  block L_4341 (env_1717: word64)
    call L_4342 (arrayAlloc_2 (env_1717, x_3901)) handle _ => raise
  block L_4342 (a_8: (word8) array)
    val x_3907: ((word8) array, word64, (word8) vector, word64, word64) tuple =
      (a_8, x_309 (*0x0:w64*), x_3902, x_3900, x_3901)
    case x_156 (*con xEnv_18 (x_155)*) of
      xEnv_18 => L_4343
  block L_4343 (env_1718: unit)
    call L_4344 (x_2012 (env_1718, x_3907)) handle _ => raise
  block L_4344 (x_3908: unit)
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_4345
  block L_4345 (env_1719: unit)
    call tail x_1452 (env_1719, a_8)
fun base_1 (env_1720: unit, x_3909: t_17):
  {returns = Some (((word8) vector, word64, word64) tuple), raises = Some (exn)} =
L_4346 ()
  block L_4346 ()
    case x_3909 of
      T_5 => L_4347
  block L_4347 (x_3910: (word64, (word8) vector, word64) tuple)
    val x_3913: word64 = #2 (x_3910)
    val x_3914: (word8) vector = #1 (x_3910)
    val x_3912: word64 = #0 (x_3910)
    val x_3911: ((word8) vector, word64, word64) tuple =
      (x_3914, x_3913, x_3912)
    return (x_3911)
fun full_2 (env_1721: unit, x_3915: (word8) vector):
  {returns = Some (t_17), raises = Some (exn)} =
L_4348 ()
  block L_4348 ()
    case x_162 (*con xEnv_21 (x_161)*) of
      xEnv_21 => L_4349
  block L_4349 (env_1722: unit)
    call L_4350 (x_2017 (env_1722, x_3915)) handle _ => raise
  block L_4350 (x_3916: word64)
    val x_3918: (word64, (word8) vector, word64) tuple =
      (x_3916, x_3915, x_306 (*0x0:w64*))
    val x_3917: t_17 = con T_5 (x_3918)
    return (x_3917)
fun length_1 (env_1723: unit, x_3919: t_17):
  {returns = Some (word64), raises = Some (exn)} =
L_4351 ()
  block L_4351 ()
    case x_3919 of
      T_5 => L_4352
  block L_4352 (x_3920: (word64, (word8) vector, word64) tuple)
    val x_3921: word64 = #0 (x_3920)
    return (x_3921)
fun arrayAlloc_2 (env_1724: word64, x_3922: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4353 ()
  block L_4353 ()
    val x_3923: (word64, word64) tuple = (x_3922, env_1724)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_4354
  block L_4354 (env_1725: unit)
    call L_4355 (>_6 (env_1725, x_3923)) handle _ => raise
  block L_4355 (x_3924: bool)
    case x_3924 of
      true => L_4357 | false => L_4356
  block L_4356 ()
    case x_154 (*con xEnv_17 (x_153)*) of
      xEnv_17 => L_4358
  block L_4358 (env_1726: unit)
    call tail x_3925 (env_1726, x_3922)
  block L_4357 ()
    raise (x_66 (*con Size_0 (x_65)*))
fun valOf_3 (env_1727: unit, x_3926: t_0):
  {returns = Some (word32), raises = Some (exn)} =
L_4359 ()
  block L_4359 ()
    case x_3926 of
      SOME_0 => L_4361 | NONE_1 => L_4360
  block L_4360 ()
    return (x_305 (*0x0:w32*))
  block L_4361 (x_3927: word32)
    return (x_3927)
fun vector_1 (env_1728: unit, x_3928: t_10):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4362 ()
  block L_4362 ()
    case x_3928 of
      T_2 => L_4363
  block L_4363 (x_3929: (word64, (word8) array, word64) tuple)
    val x_3930: word64 = #0 (x_3929)
    case unsafeArrayAlloc_0 (*con unsafe ... e_17)*) of
      unsafeArrayAllocEnv_0 => L_4364
  block L_4364 (env_1729: unit)
    call L_4365 (unsafeArrayAlloc_1 (env_1729, x_3930)) handle _ => raise
  block L_4365 (x_3931: (word8) array)
    case x_297 (*con xEnv_33 (x_296)*) of
      xEnv_33 => L_4366
  block L_4366 (env_1730: unit)
    call L_4367 (x_3243 (env_1730, x_3931)) handle _ => raise
  block L_4367 (x_3932: (word8) array)
    case x_3928 of
      T_2 => L_4368
  block L_4368 (x_3933: (word64, (word8) array, word64) tuple)
    val x_3937: word64 = #2 (x_3933)
    val x_3936: (word8) array = #1 (x_3933)
    val x_3935: word64 = #0 (x_3933)
    val x_3934: (word64, word64) tuple = (x_3935, smallCopyLimit_0 (*0x5:w64*))
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_4369
  block L_4369 (env_1731: unit)
    call L_4370 (<_5 (env_1731, x_3934)) handle _ => raise
  block L_4370 (x_3938: bool)
    case x_3938 of
      true => L_4372 | false => L_4371
  block L_4371 ()
    val x_3939: unit =
      prim Array_copyArray[word8] (x_3932,
                                   x_300 (*0x0:w64*),
                                   x_3936,
                                   x_3937,
                                   x_3935)
    goto L_4373 (x_3939)
  block L_4372 ()
    val x_3940: (word64, word64) tuple = (x_3935, x_301 (*0x1:w64*))
    case -!_1 (*con -!Env_1 (x_149)*) of
      -!Env_1 => L_4374
  block L_4374 (env_1732: unit)
    call L_4375 (-!_3 (env_1732, x_3940)) handle _ => raise
  block L_4375 (len_3: word64)
    val tuple_75: (word64, word64, (word8) array, (word8) array) tuple =
      (len_3, x_3937, x_3936, x_3932)
    call L_4373 (loop_26 (tuple_75, x_304 (*0x0:w64*))) handle _ => raise
  block L_4373 (x_3941: unit)
    case x_160 (*con xEnv_20 (x_159)*) of
      xEnv_20 => L_4376
  block L_4376 (env_1733: unit)
    call tail x_1452 (env_1733, x_3932)
fun loop_26 (env_1734: (word64, word64, (word8) array, (word8) array) tuple,
             x_3942: word64):
  {returns = Some (unit), raises = Some (exn)} =
L_4377 ()
  block L_4377 ()
    val len_4: word64 = #0 (env_1734)
    val x_3946: word64 = #1 (env_1734)
    val x_3945: (word8) array = #2 (env_1734)
    val x_3944: (word8) array = #3 (env_1734)
    val x_3943: (word64, word64) tuple = (x_3942, len_4)
    case >_1 (*con >Env_1 (tuple_5)*) of
      >Env_1 => L_4378
  block L_4378 (env_1735: unit)
    call L_4379 (>_9 (env_1735, x_3943)) handle _ => raise
  block L_4379 (x_3947: bool)
    case x_3947 of
      true => L_4381 | false => L_4380
  block L_4380 ()
    val x_3948: (word64, word64) tuple = (x_300 (*0x0:w64*), x_3942)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4382
  block L_4382 (env_1736: unit)
    call L_4383 (+!_2 (env_1736, x_3948)) handle _ => raise
  block L_4383 (x_3949: word64)
    val x_3950: (word64, word64) tuple = (x_3946, x_3942)
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4384
  block L_4384 (env_1737: unit)
    call L_4385 (+!_2 (env_1737, x_3950)) handle _ => raise
  block L_4385 (x_3951: word64)
    val x_3953: word8 = prim Array_sub[word8] (x_3945, x_3951)
    val x_3952: ((word8) array, word64, word8) tuple = (x_3944, x_3949, x_3953)
    case x_158 (*con xEnv_19 (x_157)*) of
      xEnv_19 => L_4386
  block L_4386 (env_1738: unit)
    call L_4387 (x_3259 (env_1738, x_3952)) handle _ => raise
  block L_4387 (x_3954: unit)
    val x_3955: (word64, word64) tuple = (x_3942, x_303 (*0x1:w64*))
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4388
  block L_4388 (env_1739: unit)
    call L_4389 (+!_2 (env_1739, x_3955)) handle _ => raise
  block L_4389 (x_3956: word64)
    call tail loop_26 (env_1734, x_3956)
  block L_4381 ()
    return (x_302 (*()*))
fun full_3 (env_1740: unit, x_3957: (word8) array):
  {returns = Some (t_10), raises = Some (exn)} =
L_4390 ()
  block L_4390 ()
    val x_3960: word64 = prim Array_length[word8] (x_3957)
    val x_3959: (word64, (word8) array, word64) tuple =
      (x_3960, x_3957, x_299 (*0x0:w64*))
    val x_3958: t_10 = con T_2 (x_3959)
    return (x_3958)
fun arrayAlloc_5 (env_1741: word64, x_3961: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4391 ()
  block L_4391 ()
    val x_3962: (word64, word64) tuple = (x_3961, env_1741)
    case >_4 (*con >Env_4 ... e_14)*) of
      >Env_4 => L_4392
  block L_4392 (env_1742: unit)
    call L_4393 (>_6 (env_1742, x_3962)) handle _ => raise
  block L_4393 (x_3963: bool)
    case x_3963 of
      true => L_4395 | false => L_4394
  block L_4394 ()
    case unsafeArrayAlloc_0 (*con unsafe ... e_17)*) of
      unsafeArrayAllocEnv_0 => L_4396
  block L_4396 (env_1743: unit)
    call tail unsafeArrayAlloc_1 (env_1743, x_3961)
  block L_4395 ()
    raise (x_66 (*con Size_0 (x_65)*))
fun unsafeArrayAlloc_1 (env_1744: unit, x_3964: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4397 ()
  block L_4397 ()
    case x_154 (*con xEnv_17 (x_153)*) of
      xEnv_17 => L_4398
  block L_4398 (env_1745: unit)
    call tail x_3925 (env_1745, x_3964)
fun valOf_2 (env_1746: unit, x_3965: t_0):
  {returns = Some (word32), raises = Some (exn)} =
L_4399 ()
  block L_4399 ()
    case x_3965 of
      SOME_0 => L_4401 | NONE_1 => L_4400
  block L_4400 ()
    return (x_298 (*0x0:w32*))
  block L_4401 (x_3966: word32)
    return (x_3966)
fun x_3243 (env_1747: unit, x_3967: (word8) array):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4402 ()
  block L_4402 ()
    return (x_3967)
fun >=_11 (env_1748: unit, x_3968: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4403 ()
  block L_4403 ()
    case ltu_0 (*con ltuEnv ... e_13)*) of
      ltuEnv_0 => L_4404
  block L_4404 (env_1749: unit)
    call L_4405 (ltu_1 (env_1749, x_3968)) handle _ => raise
  block L_4405 (x_3969: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4406
  block L_4406 (env_1750: unit)
    call tail not_1 (env_1750, x_3969)
fun >_6 (env_1751: unit, x_3970: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4407 ()
  block L_4407 ()
    val b_25: word64 = #1 (x_3970)
    val a_9: word64 = #0 (x_3970)
    val x_3971: (word64, word64) tuple = (b_25, a_9)
    case ltu_0 (*con ltuEnv ... e_13)*) of
      ltuEnv_0 => L_4408
  block L_4408 (env_1752: unit)
    call tail ltu_1 (env_1752, x_3971)
fun ltu_1 (env_1753: unit, x_3972: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4409 ()
  block L_4409 ()
    val i'_0: word64 = #1 (x_3972)
    val i_34: word64 = #0 (x_3972)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_4410
  block L_4410 (env_1754: unit)
    call L_4411 (idFromInt64ToWord64_1 (env_1754, i_34)) handle _ => raise
  block L_4411 (x_3973: word64)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_4412
  block L_4412 (env_1755: unit)
    call L_4413 (idFromInt64ToWord64_1 (env_1755, i'_0)) handle _ => raise
  block L_4413 (x_3974: word64)
    val x_3975: bool = prim WordU64_lt (x_3973, x_3974)
    return (x_3975)
fun x_1181 (env_1756: unit, x_3976: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4414 ()
  block L_4414 ()
    val w_3: word32 = #1 (x_3976)
    val x_3977: word64 = #0 (x_3976)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_4415
  block L_4415 (env_1757: unit)
    call L_4416 (idFromInt64ToWord64_1 (env_1757, x_3977)) handle _ => raise
  block L_4416 (x_3978: word64)
    val x_3979: (word64, word32) tuple = (x_3978, w_3)
    case >>?_3 (*con >>?Env_3 (x_131)*) of
      >>?Env_3 => L_4417
  block L_4417 (env_1758: unit)
    call L_4418 (>>?_4 (env_1758, x_3979)) handle _ => raise
  block L_4418 (x_3980: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... x_95)*) of
      idFromWord64ToInt64Env_0 => L_4419
  block L_4419 (env_1759: unit)
    call tail idFromWord64ToInt64_1 (env_1759, x_3980)
fun x_1176 (env_1760: unit, x_3981: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4420 ()
  block L_4420 ()
    val w_4: word32 = #1 (x_3981)
    val x_3982: word64 = #0 (x_3981)
    case idFromInt64ToWord64_0 (*con idFrom ... x_91)*) of
      idFromInt64ToWord64Env_0 => L_4421
  block L_4421 (env_1761: unit)
    call L_4422 (idFromInt64ToWord64_1 (env_1761, x_3982)) handle _ => raise
  block L_4422 (x_3983: word64)
    val x_3984: (word64, word32) tuple = (x_3983, w_4)
    case <<?_3 (*con <<?Env_3 (x_128)*) of
      <<?Env_3 => L_4423
  block L_4423 (env_1762: unit)
    call L_4424 (<<?_4 (env_1762, x_3984)) handle _ => raise
  block L_4424 (x_3985: word64)
    case idFromWord64ToInt64_0 (*con idFrom ... x_95)*) of
      idFromWord64ToInt64Env_0 => L_4425
  block L_4425 (env_1763: unit)
    call tail idFromWord64ToInt64_1 (env_1763, x_3985)
fun quot_1 (env_1764: (word32, word32, word32) tuple,
            x_3986: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4426 ()
  block L_4426 ()
    val zero_82: word32 = #0 (env_1764)
    val minInt'_27: word32 = #1 (env_1764)
    val one_65: word32 = #2 (env_1764)
    val y_0: word32 = #1 (x_3986)
    val x_3988: word32 = #0 (x_3986)
    val x_3987: (word32, word32) tuple = (y_0, zero_82)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4427
  block L_4427 (env_1765: unit)
    call L_4428 (x_1711 (env_1765, x_3987)) handle _ => raise
  block L_4428 (x_3989: bool)
    case x_3989 of
      true => L_4430 | false => L_4429
  block L_4429 ()
    val x_3990: (word32, word32) tuple = (x_3988, minInt'_27)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4431
  block L_4431 (env_1766: unit)
    call L_4432 (x_1711 (env_1766, x_3990)) handle _ => raise
  block L_4432 (x_3991: bool)
    case x_3991 of
      true => L_4434 | false => L_4433
  block L_4433 ()
    goto L_4435 (x_280 (*con false*))
  block L_4434 ()
    case x_137 (*con xEnv_12 (x_136)*) of
      xEnv_12 => L_4436
  block L_4436 (env_1767: unit)
    call L_4437 (x_2137 (env_1767, one_65)) handle _ => raise
  block L_4437 (x_3992: word32)
    val x_3993: (word32, word32) tuple = (y_0, x_3992)
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4438
  block L_4438 (env_1768: unit)
    call L_4435 (x_1711 (env_1768, x_3993)) handle _ => raise
  block L_4435 (x_3994: bool)
    case x_3994 of
      true => L_4440 | false => L_4439
  block L_4439 ()
    val x_3995: word32 = prim WordS32_quot (x_3988, y_0)
    return (x_3995)
  block L_4440 ()
    raise (x_63 (*con Overfl ... x_62)*))
  block L_4430 ()
    raise (x_56 (*con Div_0 (x_55)*))
fun x_1169 (env_1769: unit, x_3996: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4441 ()
  block L_4441 ()
    val w_5: word32 = #1 (x_3996)
    val x_3997: word32 = #0 (x_3996)
    case idFromInt32ToWord32_0 (*con idFrom ... x_90)*) of
      idFromInt32ToWord32Env_0 => L_4442
  block L_4442 (env_1770: unit)
    call L_4443 (idFromInt32ToWord32_1 (env_1770, x_3997)) handle _ => raise
  block L_4443 (x_3998: word32)
    val x_3999: (word32, word32) tuple = (x_3998, w_5)
    case >>?_2 (*con >>?Env_2 (x_122)*) of
      >>?Env_2 => L_4444
  block L_4444 (env_1771: unit)
    call L_4445 (>>?_5 (env_1771, x_3999)) handle _ => raise
  block L_4445 (x_4000: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... x_94)*) of
      idFromWord32ToInt32Env_0 => L_4446
  block L_4446 (env_1772: unit)
    call tail idFromWord32ToInt32_1 (env_1772, x_4000)
fun x_1164 (env_1773: unit, x_4001: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4447 ()
  block L_4447 ()
    val w_6: word32 = #1 (x_4001)
    val x_4002: word32 = #0 (x_4001)
    case idFromInt32ToWord32_0 (*con idFrom ... x_90)*) of
      idFromInt32ToWord32Env_0 => L_4448
  block L_4448 (env_1774: unit)
    call L_4449 (idFromInt32ToWord32_1 (env_1774, x_4002)) handle _ => raise
  block L_4449 (x_4003: word32)
    val x_4004: (word32, word32) tuple = (x_4003, w_6)
    case <<?_2 (*con <<?Env_2 (x_120)*) of
      <<?Env_2 => L_4450
  block L_4450 (env_1775: unit)
    call L_4451 (<<?_5 (env_1775, x_4004)) handle _ => raise
  block L_4451 (x_4005: word32)
    case idFromWord32ToInt32_0 (*con idFrom ... x_94)*) of
      idFromWord32ToInt32Env_0 => L_4452
  block L_4452 (env_1776: unit)
    call tail idFromWord32ToInt32_1 (env_1776, x_4005)
fun x_1157 (env_1777: unit, x_4006: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4453 ()
  block L_4453 ()
    val w_7: word32 = #1 (x_4006)
    val x_4007: word16 = #0 (x_4006)
    case idFromInt16ToWord16_0 (*con idFrom ... x_89)*) of
      idFromInt16ToWord16Env_0 => L_4454
  block L_4454 (env_1778: unit)
    call L_4455 (idFromInt16ToWord16_1 (env_1778, x_4007)) handle _ => raise
  block L_4455 (x_4008: word16)
    val x_4009: (word16, word32) tuple = (x_4008, w_7)
    case >>?_1 (*con >>?Env_1 (x_118)*) of
      >>?Env_1 => L_4456
  block L_4456 (env_1779: unit)
    call L_4457 (>>?_6 (env_1779, x_4009)) handle _ => raise
  block L_4457 (x_4010: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... x_93)*) of
      idFromWord16ToInt16Env_0 => L_4458
  block L_4458 (env_1780: unit)
    call tail idFromWord16ToInt16_1 (env_1780, x_4010)
fun x_1152 (env_1781: unit, x_4011: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4459 ()
  block L_4459 ()
    val w_8: word32 = #1 (x_4011)
    val x_4012: word16 = #0 (x_4011)
    case idFromInt16ToWord16_0 (*con idFrom ... x_89)*) of
      idFromInt16ToWord16Env_0 => L_4460
  block L_4460 (env_1782: unit)
    call L_4461 (idFromInt16ToWord16_1 (env_1782, x_4012)) handle _ => raise
  block L_4461 (x_4013: word16)
    val x_4014: (word16, word32) tuple = (x_4013, w_8)
    case <<?_1 (*con <<?Env_1 (x_116)*) of
      <<?Env_1 => L_4462
  block L_4462 (env_1783: unit)
    call L_4463 (<<?_6 (env_1783, x_4014)) handle _ => raise
  block L_4463 (x_4015: word16)
    case idFromWord16ToInt16_0 (*con idFrom ... x_93)*) of
      idFromWord16ToInt16Env_0 => L_4464
  block L_4464 (env_1784: unit)
    call tail idFromWord16ToInt16_1 (env_1784, x_4015)
fun x_1145 (env_1785: unit, x_4016: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4465 ()
  block L_4465 ()
    val w_9: word32 = #1 (x_4016)
    val x_4017: word8 = #0 (x_4016)
    case idFromInt8ToWord8_0 (*con idFrom ... x_88)*) of
      idFromInt8ToWord8Env_0 => L_4466
  block L_4466 (env_1786: unit)
    call L_4467 (idFromInt8ToWord8_1 (env_1786, x_4017)) handle _ => raise
  block L_4467 (x_4018: word8)
    val x_4019: (word8, word32) tuple = (x_4018, w_9)
    case >>?_0 (*con >>?Env_0 (x_115)*) of
      >>?Env_0 => L_4468
  block L_4468 (env_1787: unit)
    call L_4469 (>>?_7 (env_1787, x_4019)) handle _ => raise
  block L_4469 (x_4020: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... x_92)*) of
      idFromWord8ToInt8Env_0 => L_4470
  block L_4470 (env_1788: unit)
    call tail idFromWord8ToInt8_1 (env_1788, x_4020)
fun x_1140 (env_1789: unit, x_4021: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4471 ()
  block L_4471 ()
    val w_10: word32 = #1 (x_4021)
    val x_4022: word8 = #0 (x_4021)
    case idFromInt8ToWord8_0 (*con idFrom ... x_88)*) of
      idFromInt8ToWord8Env_0 => L_4472
  block L_4472 (env_1790: unit)
    call L_4473 (idFromInt8ToWord8_1 (env_1790, x_4022)) handle _ => raise
  block L_4473 (x_4023: word8)
    val x_4024: (word8, word32) tuple = (x_4023, w_10)
    case <<?_0 (*con <<?Env_0 (x_113)*) of
      <<?Env_0 => L_4474
  block L_4474 (env_1791: unit)
    call L_4475 (<<?_7 (env_1791, x_4024)) handle _ => raise
  block L_4475 (x_4025: word8)
    case idFromWord8ToInt8_0 (*con idFrom ... x_92)*) of
      idFromWord8ToInt8Env_0 => L_4476
  block L_4476 (env_1792: unit)
    call tail idFromWord8ToInt8_1 (env_1792, x_4025)
fun x_1973 (env_1793: unit, x_4026: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4477 ()
  block L_4477 ()
    case bug_0 (*con bugEnv_0 (x_166)*) of
      bugEnv_0 => L_4478
  block L_4478 (env_1794: unit)
    call tail bug_1 (env_1794, x_234 (*"missing s ... rary"*))
fun x_1977 (env_1795: unit, x_4027: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_4479 ()
  block L_4479 ()
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_4480
  block L_4480 (env_1796: unit)
    call L_4481 (print_1 (env_1796, x_226 (*"unhandled ... on: "*))) handle _ => raise
  block L_4481 (x_4028: unit)
    case x_4027 of
      Fail8_0 => L_4482 | _ => L_4483
  block L_4483 ()
    call L_4484 (x_4029 (x_4027, x_227 (*()*))) handle _ => raise
  block L_4482 (x_4030: ((unit) ref, (word8) vector) tuple)
    val x_4033: (word8) vector = #1 (x_4030)
    val x_4032: (unit) ref = #0 (x_4030)
    val x_4031: bool = prim MLton_equal[(unit) ref] (x_4032, x_1086)
    case x_4031 of
      true => L_4486 | false => L_4485
  block L_4485 ()
    call L_4484 (x_4029 (x_4027, x_229 (*()*))) handle _ => raise
  block L_4486 ()
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_4487
  block L_4487 (env_1797: unit)
    call L_4488 (print_1 (env_1797, x_228 (*"Fail "*))) handle _ => raise
  block L_4488 (x_4034: unit)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_4489
  block L_4489 (env_1798: unit)
    call L_4484 (print_1 (env_1798, x_4033)) handle _ => raise
  block L_4484 (x_4035: unit)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_4490
  block L_4490 (env_1799: unit)
    call L_4491 (print_1 (env_1799, x_230 (*"\n"*))) handle _ => raise
  block L_4491 (x_4036: unit)
    case bug_0 (*con bugEnv_0 (x_166)*) of
      bugEnv_0 => L_4492
  block L_4492 (env_1800: unit)
    call tail bug_1 (env_1800, x_231 (*"unhandled ... rary"*))
fun x_4029 (env_1801: exn, unit_8: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4493 ()
  block L_4493 ()
    case name_0 (*con nameEnv_0 (x_53)*) of
      nameEnv_0 => L_4494
  block L_4494 (env_1802: unit)
    call L_4495 (name_1 (env_1802, env_1801)) handle _ => raise
  block L_4495 (x_4037: (word8) vector)
    case print_0 (*con printE ... _173)*) of
      printEnv_0 => L_4496
  block L_4496 (env_1803: unit)
    call tail print_1 (env_1803, x_4037)
fun castFromWord_3 (env_1804: unit, x_4038: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_4497 ()
  block L_4497 ()
    val x_4039: real64 = prim Word64_castToReal64 (x_4038)
    return (x_4039)
fun castFromWord_2 (env_1805: unit, x_4040: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_4498 ()
  block L_4498 ()
    val x_4041: real32 = prim Word32_castToReal32 (x_4040)
    return (x_4041)
fun >=_7 (env_1806: unit, x_4042: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4499 ()
  block L_4499 ()
    val b_26: real64 = #1 (x_4042)
    val a_10: real64 = #0 (x_4042)
    val x_4043: (real64, real64) tuple = (b_26, a_10)
    case <=_3 (*con <=Env_3 (x_204)*) of
      <=Env_3 => L_4500
  block L_4500 (env_1807: unit)
    call tail <=_5 (env_1807, x_4043)
fun >_7 (env_1808: unit, x_4044: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4501 ()
  block L_4501 ()
    val b_27: real64 = #1 (x_4044)
    val a_11: real64 = #0 (x_4044)
    val x_4045: (real64, real64) tuple = (b_27, a_11)
    case <_4 (*con <Env_4 (x_203)*) of
      <Env_4 => L_4502
  block L_4502 (env_1809: unit)
    call tail <_8 (env_1809, x_4045)
fun toWord64Unsafe_2 (env_1810: unit, x_4046: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_4503 ()
  block L_4503 ()
    val x_4047: word64 = prim Real64_rndToWordU64 (x_4046)
    return (x_4047)
fun toWord32Unsafe_2 (env_1811: unit, x_4048: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_4504 ()
  block L_4504 ()
    val x_4049: word32 = prim Real64_rndToWordU32 (x_4048)
    return (x_4049)
fun toWord16Unsafe_2 (env_1812: unit, x_4050: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_4505 ()
  block L_4505 ()
    val x_4051: word16 = prim Real64_rndToWordU16 (x_4050)
    return (x_4051)
fun toWord8Unsafe_2 (env_1813: unit, x_4052: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_4506 ()
  block L_4506 ()
    val x_4053: word8 = prim Real64_rndToWordU8 (x_4052)
    return (x_4053)
fun toReal32Unsafe_2 (env_1814: unit, x_4054: real64):
  {returns = Some (real32), raises = Some (exn)} =
L_4507 ()
  block L_4507 ()
    val x_4055: real32 = prim Real64_rndToReal32 (x_4054)
    return (x_4055)
fun toInt64Unsafe_2 (env_1815: unit, x_4056: real64):
  {returns = Some (word64), raises = Some (exn)} =
L_4508 ()
  block L_4508 ()
    val x_4057: word64 = prim Real64_rndToWordS64 (x_4056)
    return (x_4057)
fun toInt32Unsafe_2 (env_1816: unit, x_4058: real64):
  {returns = Some (word32), raises = Some (exn)} =
L_4509 ()
  block L_4509 ()
    val x_4059: word32 = prim Real64_rndToWordS32 (x_4058)
    return (x_4059)
fun toInt16Unsafe_2 (env_1817: unit, x_4060: real64):
  {returns = Some (word16), raises = Some (exn)} =
L_4510 ()
  block L_4510 ()
    val x_4061: word16 = prim Real64_rndToWordS16 (x_4060)
    return (x_4061)
fun toInt8Unsafe_2 (env_1818: unit, x_4062: real64):
  {returns = Some (word8), raises = Some (exn)} =
L_4511 ()
  block L_4511 ()
    val x_4063: word8 = prim Real64_rndToWordS8 (x_4062)
    return (x_4063)
fun fromWord64Unsafe_3 (env_1819: unit, x_4064: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_4512 ()
  block L_4512 ()
    val x_4065: real64 = prim WordU64_rndToReal64 (x_4064)
    return (x_4065)
fun fromWord32Unsafe_3 (env_1820: unit, x_4066: word32):
  {returns = Some (real64), raises = Some (exn)} =
L_4513 ()
  block L_4513 ()
    val x_4067: real64 = prim WordU32_rndToReal64 (x_4066)
    return (x_4067)
fun fromWord16Unsafe_3 (env_1821: unit, x_4068: word16):
  {returns = Some (real64), raises = Some (exn)} =
L_4514 ()
  block L_4514 ()
    val x_4069: real64 = prim WordU16_rndToReal64 (x_4068)
    return (x_4069)
fun fromWord8Unsafe_3 (env_1822: unit, x_4070: word8):
  {returns = Some (real64), raises = Some (exn)} =
L_4515 ()
  block L_4515 ()
    val x_4071: real64 = prim WordU8_rndToReal64 (x_4070)
    return (x_4071)
fun fromReal32Unsafe_2 (env_1823: unit, x_4072: real32):
  {returns = Some (real64), raises = Some (exn)} =
L_4516 ()
  block L_4516 ()
    val x_4073: real64 = prim Real32_rndToReal64 (x_4072)
    return (x_4073)
fun fromInt64Unsafe_3 (env_1824: unit, x_4074: word64):
  {returns = Some (real64), raises = Some (exn)} =
L_4517 ()
  block L_4517 ()
    val x_4075: real64 = prim WordS64_rndToReal64 (x_4074)
    return (x_4075)
fun fromInt32Unsafe_3 (env_1825: unit, x_4076: word32):
  {returns = Some (real64), raises = Some (exn)} =
L_4518 ()
  block L_4518 ()
    val x_4077: real64 = prim WordS32_rndToReal64 (x_4076)
    return (x_4077)
fun fromInt16Unsafe_3 (env_1826: unit, x_4078: word16):
  {returns = Some (real64), raises = Some (exn)} =
L_4519 ()
  block L_4519 ()
    val x_4079: real64 = prim WordS16_rndToReal64 (x_4078)
    return (x_4079)
fun fromInt8Unsafe_3 (env_1827: unit, x_4080: word8):
  {returns = Some (real64), raises = Some (exn)} =
L_4520 ()
  block L_4520 ()
    val x_4081: real64 = prim WordS8_rndToReal64 (x_4080)
    return (x_4081)
fun round_2 (env_1828: unit, x_4082: real64):
  {returns = Some (real64), raises = Some (exn)} =
L_4521 ()
  block L_4521 ()
    val x_4083: real64 = prim Real64_round (x_4082)
    return (x_4083)
fun <=_5 (env_1829: unit, x_4084: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4522 ()
  block L_4522 ()
    val x_4086: real64 = #1 (x_4084)
    val x_4087: real64 = #0 (x_4084)
    val x_4085: bool = prim Real64_le (x_4087, x_4086)
    return (x_4085)
fun <_8 (env_1830: unit, x_4088: (real64, real64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4523 ()
  block L_4523 ()
    val x_4090: real64 = #1 (x_4088)
    val x_4091: real64 = #0 (x_4088)
    val x_4089: bool = prim Real64_lt (x_4091, x_4090)
    return (x_4089)
fun ~_2 (env_1831: unit, x_4092: real64):
  {returns = Some (real64), raises = Some (exn)} =
L_4524 ()
  block L_4524 ()
    val x_4093: real64 = prim Real64_neg (x_4092)
    return (x_4093)
fun -_4 (env_1832: unit, x_4094: (real64, real64) tuple):
  {returns = Some (real64), raises = Some (exn)} =
L_4525 ()
  block L_4525 ()
    val x_4096: real64 = #1 (x_4094)
    val x_4097: real64 = #0 (x_4094)
    val x_4095: real64 = prim Real64_sub (x_4097, x_4096)
    return (x_4095)
fun +_3 (env_1833: unit, x_4098: (real64, real64) tuple):
  {returns = Some (real64), raises = Some (exn)} =
L_4526 ()
  block L_4526 ()
    val x_4100: real64 = #1 (x_4098)
    val x_4101: real64 = #0 (x_4098)
    val x_4099: real64 = prim Real64_add (x_4101, x_4100)
    return (x_4099)
fun >=_8 (env_1834: unit, x_4102: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4527 ()
  block L_4527 ()
    val b_28: real32 = #1 (x_4102)
    val a_12: real32 = #0 (x_4102)
    val x_4103: (real32, real32) tuple = (b_28, a_12)
    case <=_2 (*con <=Env_2 (x_180)*) of
      <=Env_2 => L_4528
  block L_4528 (env_1835: unit)
    call tail <=_6 (env_1835, x_4103)
fun >_8 (env_1836: unit, x_4104: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4529 ()
  block L_4529 ()
    val b_29: real32 = #1 (x_4104)
    val a_13: real32 = #0 (x_4104)
    val x_4105: (real32, real32) tuple = (b_29, a_13)
    case <_3 (*con <Env_3 (x_179)*) of
      <Env_3 => L_4530
  block L_4530 (env_1837: unit)
    call tail <_9 (env_1837, x_4105)
fun toWord64Unsafe_3 (env_1838: unit, x_4106: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_4531 ()
  block L_4531 ()
    val x_4107: word64 = prim Real32_rndToWordU64 (x_4106)
    return (x_4107)
fun toWord32Unsafe_3 (env_1839: unit, x_4108: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4532 ()
  block L_4532 ()
    val x_4109: word32 = prim Real32_rndToWordU32 (x_4108)
    return (x_4109)
fun toWord16Unsafe_3 (env_1840: unit, x_4110: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4533 ()
  block L_4533 ()
    val x_4111: word16 = prim Real32_rndToWordU16 (x_4110)
    return (x_4111)
fun toWord8Unsafe_3 (env_1841: unit, x_4112: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4534 ()
  block L_4534 ()
    val x_4113: word8 = prim Real32_rndToWordU8 (x_4112)
    return (x_4113)
fun toReal32Unsafe_3 (env_1842: unit, x_4114: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_4535 ()
  block L_4535 ()
    return (x_4114)
fun toInt64Unsafe_3 (env_1843: unit, x_4115: real32):
  {returns = Some (word64), raises = Some (exn)} =
L_4536 ()
  block L_4536 ()
    val x_4116: word64 = prim Real32_rndToWordS64 (x_4115)
    return (x_4116)
fun toInt32Unsafe_3 (env_1844: unit, x_4117: real32):
  {returns = Some (word32), raises = Some (exn)} =
L_4537 ()
  block L_4537 ()
    val x_4118: word32 = prim Real32_rndToWordS32 (x_4117)
    return (x_4118)
fun toInt16Unsafe_3 (env_1845: unit, x_4119: real32):
  {returns = Some (word16), raises = Some (exn)} =
L_4538 ()
  block L_4538 ()
    val x_4120: word16 = prim Real32_rndToWordS16 (x_4119)
    return (x_4120)
fun toInt8Unsafe_3 (env_1846: unit, x_4121: real32):
  {returns = Some (word8), raises = Some (exn)} =
L_4539 ()
  block L_4539 ()
    val x_4122: word8 = prim Real32_rndToWordS8 (x_4121)
    return (x_4122)
fun fromWord64Unsafe_2 (env_1847: unit, x_4123: word64):
  {returns = Some (real32), raises = Some (exn)} =
L_4540 ()
  block L_4540 ()
    val x_4124: real32 = prim WordU64_rndToReal32 (x_4123)
    return (x_4124)
fun fromWord32Unsafe_2 (env_1848: unit, x_4125: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_4541 ()
  block L_4541 ()
    val x_4126: real32 = prim WordU32_rndToReal32 (x_4125)
    return (x_4126)
fun fromWord16Unsafe_2 (env_1849: unit, x_4127: word16):
  {returns = Some (real32), raises = Some (exn)} =
L_4542 ()
  block L_4542 ()
    val x_4128: real32 = prim WordU16_rndToReal32 (x_4127)
    return (x_4128)
fun fromWord8Unsafe_2 (env_1850: unit, x_4129: word8):
  {returns = Some (real32), raises = Some (exn)} =
L_4543 ()
  block L_4543 ()
    val x_4130: real32 = prim WordU8_rndToReal32 (x_4129)
    return (x_4130)
fun fromReal32Unsafe_3 (env_1851: unit, x_4131: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_4544 ()
  block L_4544 ()
    return (x_4131)
fun fromInt64Unsafe_2 (env_1852: unit, x_4132: word64):
  {returns = Some (real32), raises = Some (exn)} =
L_4545 ()
  block L_4545 ()
    val x_4133: real32 = prim WordS64_rndToReal32 (x_4132)
    return (x_4133)
fun fromInt32Unsafe_2 (env_1853: unit, x_4134: word32):
  {returns = Some (real32), raises = Some (exn)} =
L_4546 ()
  block L_4546 ()
    val x_4135: real32 = prim WordS32_rndToReal32 (x_4134)
    return (x_4135)
fun fromInt16Unsafe_2 (env_1854: unit, x_4136: word16):
  {returns = Some (real32), raises = Some (exn)} =
L_4547 ()
  block L_4547 ()
    val x_4137: real32 = prim WordS16_rndToReal32 (x_4136)
    return (x_4137)
fun fromInt8Unsafe_2 (env_1855: unit, x_4138: word8):
  {returns = Some (real32), raises = Some (exn)} =
L_4548 ()
  block L_4548 ()
    val x_4139: real32 = prim WordS8_rndToReal32 (x_4138)
    return (x_4139)
fun round_3 (env_1856: unit, x_4140: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_4549 ()
  block L_4549 ()
    val x_4141: real32 = prim Real32_round (x_4140)
    return (x_4141)
fun <=_6 (env_1857: unit, x_4142: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4550 ()
  block L_4550 ()
    val x_4144: real32 = #1 (x_4142)
    val x_4145: real32 = #0 (x_4142)
    val x_4143: bool = prim Real32_le (x_4145, x_4144)
    return (x_4143)
fun <_9 (env_1858: unit, x_4146: (real32, real32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4551 ()
  block L_4551 ()
    val x_4148: real32 = #1 (x_4146)
    val x_4149: real32 = #0 (x_4146)
    val x_4147: bool = prim Real32_lt (x_4149, x_4148)
    return (x_4147)
fun ~_3 (env_1859: unit, x_4150: real32):
  {returns = Some (real32), raises = Some (exn)} =
L_4552 ()
  block L_4552 ()
    val x_4151: real32 = prim Real32_neg (x_4150)
    return (x_4151)
fun -_5 (env_1860: unit, x_4152: (real32, real32) tuple):
  {returns = Some (real32), raises = Some (exn)} =
L_4553 ()
  block L_4553 ()
    val x_4154: real32 = #1 (x_4152)
    val x_4155: real32 = #0 (x_4152)
    val x_4153: real32 = prim Real32_sub (x_4155, x_4154)
    return (x_4153)
fun +_4 (env_1861: unit, x_4156: (real32, real32) tuple):
  {returns = Some (real32), raises = Some (exn)} =
L_4554 ()
  block L_4554 ()
    val x_4158: real32 = #1 (x_4156)
    val x_4159: real32 = #0 (x_4156)
    val x_4157: real32 = prim Real32_add (x_4159, x_4158)
    return (x_4157)
fun <=_7 (env_1862: unit, x_4160: (word8, word8) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4555 ()
  block L_4555 ()
    val b_30: word8 = #1 (x_4160)
    val a_14: word8 = #0 (x_4160)
    val x_4161: bool = prim WordU8_lt (b_30, a_14)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4556
  block L_4556 (env_1863: unit)
    call tail not_1 (env_1863, x_4161)
fun idFromWord8_1 (env_1864: unit, x_4162: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_4557 ()
  block L_4557 ()
    return (x_4162)
fun toWord_1 (env_1865: unit, x_4163: intInf):
  {returns = Some (word64), raises = Some (exn)} =
L_4558 ()
  block L_4558 ()
    val x_4164: word64 = prim IntInf_toWord (x_4163)
    return (x_4164)
fun print_1 (env_1866: unit, x_4165: (word8) vector):
  {returns = Some (unit), raises = Some (exn)} =
L_4559 ()
  block L_4559 ()
    val x_4166: unit =
      prim CFunction {args = ((word8) vector),
                      convention = cdecl,
                      inline = false,
                      kind = Impure,
                      prototype = {args = (Objptr), res = None},
                      return = unit,
                      symbolScope = private,
                      target = Stdio_print} (x_4165)
    return (x_4166)
fun atomicEnd_1 (env_1867: unit, x_4167: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4560 ()
  block L_4560 ()
    val x_4169: word32 = prim Thread_atomicState ()
    val x_4168: (word32, word32) tuple = (x_4169, x_169 (*0x0:w32*))
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4561
  block L_4561 (env_1868: unit)
    call L_4562 (x_1711 (env_1868, x_4168)) handle _ => raise
  block L_4562 (x_4170: bool)
    case x_4170 of
      true => L_4564 | false => L_4563
  block L_4563 ()
    val x_4171: unit = prim Thread_atomicEnd ()
    return (x_4171)
  block L_4564 ()
    raise (x_172 (*con Fail8_0 (x_171)*))
fun fromWord_1 (env_1869: unit, x_4172: word64):
  {returns = Some (cpointer), raises = Some (exn)} =
L_4565 ()
  block L_4565 ()
    val x_4173: cpointer = prim CPointer_fromWord (x_4172)
    return (x_4173)
fun bug_1 (env_1870: unit, x_4174: (word8) vector):
  {returns = Some (unit), raises = Some (exn)} =
L_4566 ()
  block L_4566 ()
    val _: unit = prim MLton_bug (x_4174)
    bug
fun gcState_1 (env_1871: unit, x_4175: unit):
  {returns = Some (cpointer), raises = Some (exn)} =
L_4567 ()
  block L_4567 ()
    val x_4176: cpointer = prim GC_state ()
    return (x_4176)
fun x_2023 (env_1872: unit, x_4177: ((word8) vector, word64) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4568 ()
  block L_4568 ()
    val x_4179: word64 = #1 (x_4177)
    val x_4180: (word8) vector = #0 (x_4177)
    val x_4178: word8 = prim Vector_sub[word8] (x_4180, x_4179)
    return (x_4178)
fun x_2017 (env_1873: unit, x_4181: (word8) vector):
  {returns = Some (word64), raises = Some (exn)} =
L_4569 ()
  block L_4569 ()
    val x_4182: word64 = prim Vector_length[word8] (x_4181)
    return (x_4182)
fun x_1452 (env_1874: unit, x_4183: (word8) array):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4570 ()
  block L_4570 ()
    val x_4184: (word8) vector = prim Array_toVector[word8] (x_4183)
    return (x_4184)
fun x_3259 (env_1875: unit, x_4185: ((word8) array, word64, word8) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4571 ()
  block L_4571 ()
    val x_4187: word8 = #2 (x_4185)
    val x_4188: word64 = #1 (x_4185)
    val x_4189: (word8) array = #0 (x_4185)
    val x_4186: unit = prim Array_update[word8] (x_4189, x_4188, x_4187)
    return (x_4186)
fun x_2012 (env_1876: unit,
            x_4190:
              ((word8) array, word64, (word8) vector, word64, word64) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4572 ()
  block L_4572 ()
    val x_4192: word64 = #4 (x_4190)
    val x_4193: word64 = #3 (x_4190)
    val x_4194: (word8) vector = #2 (x_4190)
    val x_4195: word64 = #1 (x_4190)
    val x_4196: (word8) array = #0 (x_4190)
    val x_4191: unit =
      prim Array_copyVector[word8] (x_4196, x_4195, x_4194, x_4193, x_4192)
    return (x_4191)
fun x_3925 (env_1877: unit, x_4197: word64):
  {returns = Some ((word8) array), raises = Some (exn)} =
L_4573 ()
  block L_4573 ()
    val x_4198: (word8) array = prim Array_alloc[word8] (x_4197)
    return (x_4198)
fun >=_9 (env_1878: unit, x_4199: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4574 ()
  block L_4574 ()
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_4575
  block L_4575 (env_1879: unit)
    call L_4576 (<_5 (env_1879, x_4199)) handle _ => raise
  block L_4576 (x_4200: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4577
  block L_4577 (env_1880: unit)
    call tail not_1 (env_1880, x_4200)
fun >_9 (env_1881: unit, x_4201: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4578 ()
  block L_4578 ()
    val b_31: word64 = #1 (x_4201)
    val a_15: word64 = #0 (x_4201)
    val x_4202: (word64, word64) tuple = (b_31, a_15)
    case <_2 (*con <Env_2 (x_152)*) of
      <Env_2 => L_4579
  block L_4579 (env_1882: unit)
    call tail <_5 (env_1882, x_4202)
fun <_5 (env_1883: unit, x_4203: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4580 ()
  block L_4580 ()
    val x_4205: word64 = #1 (x_4203)
    val x_4206: word64 = #0 (x_4203)
    val x_4204: bool = prim WordS64_lt (x_4206, x_4205)
    return (x_4204)
fun x_2020 (env_1884: unit, x_4207: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4581 ()
  block L_4581 ()
    case -!_1 (*con -!Env_1 (x_149)*) of
      -!Env_1 => L_4582
  block L_4582 (env_1885: unit)
    call L_4583 (-!_3 (env_1885, x_4207)) handle _ => raise
  block L_4583 (r_2: word64)
    val x_4209: word64 = #1 (x_4207)
    val x_4210: word64 = #0 (x_4207)
    val x_4208: bool = prim WordS64_subCheckP (x_4210, x_4209)
    case x_4208 of
      true => L_4585 | false => L_4584
  block L_4584 ()
    return (r_2)
  block L_4585 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun -!_3 (env_1886: unit, x_4211: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4586 ()
  block L_4586 ()
    val x_4213: word64 = #1 (x_4211)
    val x_4214: word64 = #0 (x_4211)
    val x_4212: word64 = prim Word64_sub (x_4214, x_4213)
    return (x_4212)
fun x_1227 (env_1887: unit, x_4215: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4587 ()
  block L_4587 ()
    case ~!_1 (*con ~!Env_1 (x_146)*) of
      ~!Env_1 => L_4588
  block L_4588 (env_1888: unit)
    call L_4589 (~!_3 (env_1888, x_4215)) handle _ => raise
  block L_4589 (r_3: word64)
    val x_4216: bool = prim WordS64_negCheckP (x_4215)
    case x_4216 of
      true => L_4591 | false => L_4590
  block L_4590 ()
    return (r_3)
  block L_4591 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun ~!_3 (env_1889: unit, x_4217: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4592 ()
  block L_4592 ()
    val x_4218: word64 = prim Word64_neg (x_4217)
    return (x_4218)
fun x_3755 (env_1890: unit, x_4219: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4593 ()
  block L_4593 ()
    case +!_1 (*con +!Env_1 (x_143)*) of
      +!Env_1 => L_4594
  block L_4594 (env_1891: unit)
    call L_4595 (+!_2 (env_1891, x_4219)) handle _ => raise
  block L_4595 (r_4: word64)
    val x_4221: word64 = #1 (x_4219)
    val x_4222: word64 = #0 (x_4219)
    val x_4220: bool = prim WordS64_addCheckP (x_4222, x_4221)
    case x_4220 of
      true => L_4597 | false => L_4596
  block L_4596 ()
    return (r_4)
  block L_4597 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun +!_2 (env_1892: unit, x_4223: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4598 ()
  block L_4598 ()
    val x_4225: word64 = #1 (x_4223)
    val x_4226: word64 = #0 (x_4223)
    val x_4224: word64 = prim Word64_add (x_4226, x_4225)
    return (x_4224)
fun >=_6 (env_1893: unit, x_4227: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4599 ()
  block L_4599 ()
    val b_32: word32 = #1 (x_4227)
    val a_16: word32 = #0 (x_4227)
    val x_4228: (word32, word32) tuple = (b_32, a_16)
    case <=_0 (*con <=Env_ ... le_2)*) of
      <=Env_0 => L_4600
  block L_4600 (env_1894: unit)
    call tail <=_4 (env_1894, x_4228)
fun >_5 (env_1895: unit, x_4229: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4601 ()
  block L_4601 ()
    val b_33: word32 = #1 (x_4229)
    val a_17: word32 = #0 (x_4229)
    val x_4230: (word32, word32) tuple = (b_33, a_17)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_4602
  block L_4602 (env_1896: unit)
    call tail <_6 (env_1896, x_4230)
fun <=_4 (env_1897: unit, x_4231: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4603 ()
  block L_4603 ()
    val b_34: word32 = #1 (x_4231)
    val a_18: word32 = #0 (x_4231)
    val x_4232: (word32, word32) tuple = (b_34, a_18)
    case <_1 (*con <Env_1 (x_142)*) of
      <Env_1 => L_4604
  block L_4604 (env_1898: unit)
    call L_4605 (<_6 (env_1898, x_4232)) handle _ => raise
  block L_4605 (x_4233: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4606
  block L_4606 (env_1899: unit)
    call tail not_1 (env_1899, x_4233)
fun <_6 (env_1900: unit, x_4234: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4607 ()
  block L_4607 ()
    val x_4236: word32 = #1 (x_4234)
    val x_4237: word32 = #0 (x_4234)
    val x_4235: bool = prim WordS32_lt (x_4237, x_4236)
    return (x_4235)
fun remUnsafe_1 (env_1901: unit, x_4238: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4608 ()
  block L_4608 ()
    val x_4240: word32 = #1 (x_4238)
    val x_4241: word32 = #0 (x_4238)
    val x_4239: word32 = prim WordS32_rem (x_4241, x_4240)
    return (x_4239)
fun x_1442 (env_1902: unit, x_4242: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4609 ()
  block L_4609 ()
    case -!_0 (*con -!Env_0 (x_138)*) of
      -!Env_0 => L_4610
  block L_4610 (env_1903: unit)
    call L_4611 (-!_2 (env_1903, x_4242)) handle _ => raise
  block L_4611 (r_5: word32)
    val x_4244: word32 = #1 (x_4242)
    val x_4245: word32 = #0 (x_4242)
    val x_4243: bool = prim WordS32_subCheckP (x_4245, x_4244)
    case x_4243 of
      true => L_4613 | false => L_4612
  block L_4612 ()
    return (r_5)
  block L_4613 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun -!_2 (env_1904: unit, x_4246: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4614 ()
  block L_4614 ()
    val x_4248: word32 = #1 (x_4246)
    val x_4249: word32 = #0 (x_4246)
    val x_4247: word32 = prim Word32_sub (x_4249, x_4248)
    return (x_4247)
fun x_2137 (env_1905: unit, x_4250: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4615 ()
  block L_4615 ()
    case ~!_0 (*con ~!Env_0 (x_135)*) of
      ~!Env_0 => L_4616
  block L_4616 (env_1906: unit)
    call L_4617 (~!_2 (env_1906, x_4250)) handle _ => raise
  block L_4617 (r_6: word32)
    val x_4251: bool = prim WordS32_negCheckP (x_4250)
    case x_4251 of
      true => L_4619 | false => L_4618
  block L_4618 ()
    return (r_6)
  block L_4619 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun ~!_2 (env_1907: unit, x_4252: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4620 ()
  block L_4620 ()
    val x_4253: word32 = prim Word32_neg (x_4252)
    return (x_4253)
fun x_1285 (env_1908: unit, x_4254: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4621 ()
  block L_4621 ()
    case +!_0 (*con +!Env_0 (x_132)*) of
      +!Env_0 => L_4622
  block L_4622 (env_1909: unit)
    call L_4623 (+!_3 (env_1909, x_4254)) handle _ => raise
  block L_4623 (r_7: word32)
    val x_4256: word32 = #1 (x_4254)
    val x_4257: word32 = #0 (x_4254)
    val x_4255: bool = prim WordS32_addCheckP (x_4257, x_4256)
    case x_4255 of
      true => L_4625 | false => L_4624
  block L_4624 ()
    return (r_7)
  block L_4625 ()
    raise (x_63 (*con Overfl ... x_62)*))
fun +!_3 (env_1910: unit, x_4258: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4626 ()
  block L_4626 ()
    val x_4260: word32 = #1 (x_4258)
    val x_4261: word32 = #0 (x_4258)
    val x_4259: word32 = prim Word32_add (x_4261, x_4260)
    return (x_4259)
fun >>?_4 (env_1911: unit, x_4262: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4627 ()
  block L_4627 ()
    val x_4264: word32 = #1 (x_4262)
    val x_4265: word64 = #0 (x_4262)
    val x_4263: word64 = prim WordU64_rshift (x_4265, x_4264)
    return (x_4263)
fun ~>>?_1 (env_1912: unit, x_4266: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4628 ()
  block L_4628 ()
    val x_4268: word32 = #1 (x_4266)
    val x_4269: word64 = #0 (x_4266)
    val x_4267: word64 = prim WordS64_rshift (x_4269, x_4268)
    return (x_4267)
fun notb_7 (env_1913: unit, x_4270: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4629 ()
  block L_4629 ()
    val x_4271: word64 = prim Word64_notb (x_4270)
    return (x_4271)
fun <<?_4 (env_1914: unit, x_4272: (word64, word32) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4630 ()
  block L_4630 ()
    val x_4274: word32 = #1 (x_4272)
    val x_4275: word64 = #0 (x_4272)
    val x_4273: word64 = prim Word64_lshift (x_4275, x_4274)
    return (x_4273)
fun andb_2 (env_1915: unit, x_4276: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4631 ()
  block L_4631 ()
    val x_4278: word64 = #1 (x_4276)
    val x_4279: word64 = #0 (x_4276)
    val x_4277: word64 = prim Word64_andb (x_4279, x_4278)
    return (x_4277)
fun +_5 (env_1916: unit, x_4280: (word64, word64) tuple):
  {returns = Some (word64), raises = Some (exn)} =
L_4632 ()
  block L_4632 ()
    val x_4282: word64 = #1 (x_4280)
    val x_4283: word64 = #0 (x_4280)
    val x_4281: word64 = prim Word64_add (x_4283, x_4282)
    return (x_4281)
fun >=_10 (env_1917: unit, x_4284: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4633 ()
  block L_4633 ()
    case <_0 (*con <Env_0 (x_125)*) of
      <Env_0 => L_4634
  block L_4634 (env_1918: unit)
    call L_4635 (<_7 (env_1918, x_4284)) handle _ => raise
  block L_4635 (x_4285: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4636
  block L_4636 (env_1919: unit)
    call tail not_1 (env_1919, x_4285)
fun <_7 (env_1920: unit, x_4286: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4637 ()
  block L_4637 ()
    val x_4288: word32 = #1 (x_4286)
    val x_4289: word32 = #0 (x_4286)
    val x_4287: bool = prim WordU32_lt (x_4289, x_4288)
    return (x_4287)
fun xorb_1 (env_1921: unit, x_4290: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4638 ()
  block L_4638 ()
    val x_4292: word32 = #1 (x_4290)
    val x_4293: word32 = #0 (x_4290)
    val x_4291: word32 = prim Word32_xorb (x_4293, x_4292)
    return (x_4291)
fun -_3 (env_1922: unit, x_4294: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4639 ()
  block L_4639 ()
    val x_4296: word32 = #1 (x_4294)
    val x_4297: word32 = #0 (x_4294)
    val x_4295: word32 = prim Word32_sub (x_4297, x_4296)
    return (x_4295)
fun >>?_5 (env_1923: unit, x_4298: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4640 ()
  block L_4640 ()
    val x_4300: word32 = #1 (x_4298)
    val x_4301: word32 = #0 (x_4298)
    val x_4299: word32 = prim WordU32_rshift (x_4301, x_4300)
    return (x_4299)
fun notb_6 (env_1924: unit, x_4302: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4641 ()
  block L_4641 ()
    val x_4303: word32 = prim Word32_notb (x_4302)
    return (x_4303)
fun <<?_5 (env_1925: unit, x_4304: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4642 ()
  block L_4642 ()
    val x_4306: word32 = #1 (x_4304)
    val x_4307: word32 = #0 (x_4304)
    val x_4305: word32 = prim Word32_lshift (x_4307, x_4306)
    return (x_4305)
fun andb_3 (env_1926: unit, x_4308: (word32, word32) tuple):
  {returns = Some (word32), raises = Some (exn)} =
L_4643 ()
  block L_4643 ()
    val x_4310: word32 = #1 (x_4308)
    val x_4311: word32 = #0 (x_4308)
    val x_4309: word32 = prim Word32_andb (x_4311, x_4310)
    return (x_4309)
fun >>?_6 (env_1927: unit, x_4312: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4644 ()
  block L_4644 ()
    val x_4314: word32 = #1 (x_4312)
    val x_4315: word16 = #0 (x_4312)
    val x_4313: word16 = prim WordU16_rshift (x_4315, x_4314)
    return (x_4313)
fun notb_5 (env_1928: unit, x_4316: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_4645 ()
  block L_4645 ()
    val x_4317: word16 = prim Word16_notb (x_4316)
    return (x_4317)
fun <<?_6 (env_1929: unit, x_4318: (word16, word32) tuple):
  {returns = Some (word16), raises = Some (exn)} =
L_4646 ()
  block L_4646 ()
    val x_4320: word32 = #1 (x_4318)
    val x_4321: word16 = #0 (x_4318)
    val x_4319: word16 = prim Word16_lshift (x_4321, x_4320)
    return (x_4319)
fun >>?_7 (env_1930: unit, x_4322: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4647 ()
  block L_4647 ()
    val x_4324: word32 = #1 (x_4322)
    val x_4325: word8 = #0 (x_4322)
    val x_4323: word8 = prim WordU8_rshift (x_4325, x_4324)
    return (x_4323)
fun notb_4 (env_1931: unit, x_4326: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_4648 ()
  block L_4648 ()
    val x_4327: word8 = prim Word8_notb (x_4326)
    return (x_4327)
fun <<?_7 (env_1932: unit, x_4328: (word8, word32) tuple):
  {returns = Some (word8), raises = Some (exn)} =
L_4649 ()
  block L_4649 ()
    val x_4330: word32 = #1 (x_4328)
    val x_4331: word8 = #0 (x_4328)
    val x_4329: word8 = prim Word8_lshift (x_4331, x_4330)
    return (x_4329)
fun sextdFromInt64ToInt64_1 (env_1933: unit, x_4332: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4650 ()
  block L_4650 ()
    return (x_4332)
fun sextdFromInt64ToInt32_1 (env_1934: unit, x_4333: word64):
  {returns = Some (word32), raises = Some (exn)} =
L_4651 ()
  block L_4651 ()
    val x_4334: word32 = prim WordS64_extdToWord32 (x_4333)
    return (x_4334)
fun sextdFromInt32ToWord64_1 (env_1935: unit, x_4335: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4652 ()
  block L_4652 ()
    val x_4336: word64 = prim WordS32_extdToWord64 (x_4335)
    return (x_4336)
fun sextdFromInt32ToWord32_1 (env_1936: unit, x_4337: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4653 ()
  block L_4653 ()
    return (x_4337)
fun sextdFromInt32ToInt64_1 (env_1937: unit, x_4338: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4654 ()
  block L_4654 ()
    val x_4339: word64 = prim WordS32_extdToWord64 (x_4338)
    return (x_4339)
fun sextdFromInt32ToInt32_1 (env_1938: unit, x_4340: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4655 ()
  block L_4655 ()
    return (x_4340)
fun sextdFromInt16ToInt64_1 (env_1939: unit, x_4341: word16):
  {returns = Some (word64), raises = Some (exn)} =
L_4656 ()
  block L_4656 ()
    val x_4342: word64 = prim WordS16_extdToWord64 (x_4341)
    return (x_4342)
fun sextdFromInt8ToInt64_1 (env_1940: unit, x_4343: word8):
  {returns = Some (word64), raises = Some (exn)} =
L_4657 ()
  block L_4657 ()
    val x_4344: word64 = prim WordS8_extdToWord64 (x_4343)
    return (x_4344)
fun zextdFromWord32ToWord64_1 (env_1941: unit, x_4345: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4658 ()
  block L_4658 ()
    val x_4346: word64 = prim WordU32_extdToWord64 (x_4345)
    return (x_4346)
fun zextdFromWord32ToWord32_1 (env_1942: unit, x_4347: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4659 ()
  block L_4659 ()
    return (x_4347)
fun zextdFromInt64ToWord64_1 (env_1943: unit, x_4348: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4660 ()
  block L_4660 ()
    return (x_4348)
fun zextdFromInt32ToWord64_1 (env_1944: unit, x_4349: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4661 ()
  block L_4661 ()
    val x_4350: word64 = prim WordU32_extdToWord64 (x_4349)
    return (x_4350)
fun zextdFromInt32ToWord32_1 (env_1945: unit, x_4351: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4662 ()
  block L_4662 ()
    return (x_4351)
fun zextdFromInt32ToInt64_1 (env_1946: unit, x_4352: word32):
  {returns = Some (word64), raises = Some (exn)} =
L_4663 ()
  block L_4663 ()
    val x_4353: word64 = prim WordU32_extdToWord64 (x_4352)
    return (x_4353)
fun zextdFromInt32ToInt32_1 (env_1947: unit, x_4354: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4664 ()
  block L_4664 ()
    return (x_4354)
fun zextdFromInt32ToInt16_1 (env_1948: unit, x_4355: word32):
  {returns = Some (word16), raises = Some (exn)} =
L_4665 ()
  block L_4665 ()
    val x_4356: word16 = prim WordU32_extdToWord16 (x_4355)
    return (x_4356)
fun zextdFromInt32ToInt8_1 (env_1949: unit, x_4357: word32):
  {returns = Some (word8), raises = Some (exn)} =
L_4666 ()
  block L_4666 ()
    val x_4358: word8 = prim WordU32_extdToWord8 (x_4357)
    return (x_4358)
fun idFromWord64ToInt64_1 (env_1950: unit, x_4359: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4667 ()
  block L_4667 ()
    return (x_4359)
fun idFromWord32ToInt32_1 (env_1951: unit, x_4360: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4668 ()
  block L_4668 ()
    return (x_4360)
fun idFromWord16ToInt16_1 (env_1952: unit, x_4361: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_4669 ()
  block L_4669 ()
    return (x_4361)
fun idFromWord8ToInt8_1 (env_1953: unit, x_4362: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_4670 ()
  block L_4670 ()
    return (x_4362)
fun idFromInt64ToWord64_1 (env_1954: unit, x_4363: word64):
  {returns = Some (word64), raises = Some (exn)} =
L_4671 ()
  block L_4671 ()
    return (x_4363)
fun idFromInt32ToWord32_1 (env_1955: unit, x_4364: word32):
  {returns = Some (word32), raises = Some (exn)} =
L_4672 ()
  block L_4672 ()
    return (x_4364)
fun idFromInt16ToWord16_1 (env_1956: unit, x_4365: word16):
  {returns = Some (word16), raises = Some (exn)} =
L_4673 ()
  block L_4673 ()
    return (x_4365)
fun idFromInt8ToWord8_1 (env_1957: unit, x_4366: word8):
  {returns = Some (word8), raises = Some (exn)} =
L_4674 ()
  block L_4674 ()
    return (x_4366)
fun x_3896 (env_1958: unit, x_4367: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4675 ()
  block L_4675 ()
    case x_81 (*con xEnv_7 (x_80)*) of
      xEnv_7 => L_4676
  block L_4676 (env_1959: unit)
    call L_4677 (x_1234 (env_1959, x_4367)) handle _ => raise
  block L_4677 (x_4368: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4678
  block L_4678 (env_1960: unit)
    call tail not_1 (env_1960, x_4368)
fun x_1133 (env_1961: unit, x_4369: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4679 ()
  block L_4679 ()
    case x_79 (*con xEnv_6 (x_78)*) of
      xEnv_6 => L_4680
  block L_4680 (env_1962: unit)
    call L_4681 (x_1711 (env_1962, x_4369)) handle _ => raise
  block L_4681 (x_4370: bool)
    case not_0 (*con notEnv ... le_0)*) of
      notEnv_0 => L_4682
  block L_4682 (env_1963: unit)
    call tail not_1 (env_1963, x_4370)
fun x_2026 (env_1964: unit, x_4371: (word8, word8) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4683 ()
  block L_4683 ()
    val x_4373: word8 = #1 (x_4371)
    val x_4374: word8 = #0 (x_4371)
    val x_4372: bool = prim MLton_equal[word8] (x_4374, x_4373)
    return (x_4372)
fun x_1234 (env_1965: unit, x_4375: (word64, word64) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4684 ()
  block L_4684 ()
    val x_4377: word64 = #1 (x_4375)
    val x_4378: word64 = #0 (x_4375)
    val x_4376: bool = prim MLton_equal[word64] (x_4378, x_4377)
    return (x_4376)
fun x_1711 (env_1966: unit, x_4379: (word32, word32) tuple):
  {returns = Some (bool), raises = Some (exn)} =
L_4685 ()
  block L_4685 ()
    val x_4381: word32 = #1 (x_4379)
    val x_4382: word32 = #0 (x_4379)
    val x_4380: bool = prim MLton_equal[word32] (x_4382, x_4381)
    return (x_4380)
fun x_2054 (env_1967: unit, x_4383: ((bool) ref, bool) tuple):
  {returns = Some (unit), raises = Some (exn)} =
L_4686 ()
  block L_4686 ()
    val x_4385: bool = #1 (x_4383)
    val x_4386: (bool) ref = #0 (x_4383)
    val x_4384: unit = prim Ref_assign[bool] (x_4386, x_4385)
    return (x_4384)
fun x_1957 (env_1968: unit, x_4387: (list_2) ref):
  {returns = Some (list_2), raises = Some (exn)} =
L_4687 ()
  block L_4687 ()
    val x_4388: list_2 = prim Ref_deref[list_2] (x_4387)
    return (x_4388)
fun x_1454 (env_1969: unit, x_4389: (list_0) ref):
  {returns = Some (list_0), raises = Some (exn)} =
L_4688 ()
  block L_4688 ()
    val x_4390: list_0 = prim Ref_deref[list_0] (x_4389)
    return (x_4390)
fun x_1997 (env_1970: unit, x_4391: (bool) ref):
  {returns = Some (bool), raises = Some (exn)} =
L_4689 ()
  block L_4689 ()
    val x_4392: bool = prim Ref_deref[bool] (x_4391)
    return (x_4392)
fun name_1 (env_1971: unit, x_4393: exn):
  {returns = Some ((word8) vector), raises = Some (exn)} =
L_4690 ()
  block L_4690 ()
    case x_4393 of
      UNKNOWN_0 => L_4735
    | Poll_0 => L_4734
    | DoublyRedirected_0 => L_4733
    | MisuseOfForget_0 => L_4732
    | Interrupt_0 => L_4731
    | Io_1 => L_4730
    | Ord_0 => L_4729
    | Ln_0 => L_4728
    | Sqrt_0 => L_4727
    | InvalidArc_0 => L_4726
    | Path_0 => L_4725
    | RandomAccessNotSupported_0 => L_4724
    | NonblockingNotSupported_0 => L_4723
    | Io_0 => L_4722
    | ClosedStream_0 => L_4721
    | BlockingNotSupported_0 => L_4720
    | Date_0 => L_4719
    | Time_0 => L_4718
    | Bad_1 => L_4717
    | Bad_0 => L_4716
    | Unordered_0 => L_4715
    | SysErr_0 => L_4714
    | UnequalLengths_0 => L_4713
    | Empty_0 => L_4712
    | Option_0 => L_4711
    | Fail_0 => L_4710
    | Chr_0 => L_4709
    | CreateVectorNotFull_1 => L_4708
    | CreateAlreadyGotVector_1 => L_4707
    | Vector_updateUnsafe_0 => L_4706
    | Vector_uninitUnsafe_0 => L_4705
    | Vector_uninitIsNop_0 => L_4704
    | CreateVectorNotFull_0 => L_4703
    | CreateAlreadyGotVector_0 => L_4702
    | Subscript_0 => L_4701
    | Span_0 => L_4700
    | Size_0 => L_4699
    | Overflow_0 => L_4698
    | Fail32_0 => L_4697
    | Fail16_0 => L_4696
    | Fail8_0 => L_4695
    | Domain_0 => L_4694
    | Div_0 => L_4693
    | Match_0 => L_4692
    | Bind_0 => L_4691
  block L_4691 (x_4394: (unit) ref)
    return (x_52 (*"Bind"*))
  block L_4692 (x_4395: (unit) ref)
    return (x_51 (*"Match"*))
  block L_4693 (x_4396: (unit) ref)
    return (x_50 (*"Div"*))
  block L_4694 (x_4397: (unit) ref)
    return (x_49 (*"Domain"*))
  block L_4695 (x_4398: ((unit) ref, (word8) vector) tuple)
    return (x_48 (*"Fail8"*))
  block L_4696 (x_4399: ((unit) ref, (word16) vector) tuple)
    return (x_47 (*"Fail16"*))
  block L_4697 (x_4400: ((unit) ref, (word32) vector) tuple)
    return (x_46 (*"Fail32"*))
  block L_4698 (x_4401: (unit) ref)
    return (x_45 (*"Overflow"*))
  block L_4699 (x_4402: (unit) ref)
    return (x_44 (*"Size"*))
  block L_4700 (x_4403: (unit) ref)
    return (x_43 (*"Span"*))
  block L_4701 (x_4404: (unit) ref)
    return (x_42 (*"Subscript"*))
  block L_4702 (x_4405: (unit) ref)
    return (x_41 (*"CreateAlr ... ctor"*))
  block L_4703 (x_4406: (unit) ref)
    return (x_40 (*"CreateVec ... Full"*))
  block L_4704 (x_4407: (unit) ref)
    return (x_39 (*"Vector_uninitIsNop"*))
  block L_4705 (x_4408: (unit) ref)
    return (x_38 (*"Vector_un ... safe"*))
  block L_4706 (x_4409: (unit) ref)
    return (x_37 (*"Vector_up ... safe"*))
  block L_4707 (x_4410: (unit) ref)
    return (x_36 (*"CreateAlr ... ctor"*))
  block L_4708 (x_4411: (unit) ref)
    return (x_35 (*"CreateVec ... Full"*))
  block L_4709 (x_4412: (unit) ref)
    return (x_34 (*"Chr"*))
  block L_4710 (x_4413: ((unit) ref, (word8) vector) tuple)
    return (x_33 (*"Fail"*))
  block L_4711 (x_4414: (unit) ref)
    return (x_32 (*"Option"*))
  block L_4712 (x_4415: (unit) ref)
    return (x_31 (*"Empty"*))
  block L_4713 (x_4416: (unit) ref)
    return (x_30 (*"UnequalLengths"*))
  block L_4714 (x_4417: ((unit) ref, ((word8) vector, t_0) tuple) tuple)
    return (x_29 (*"SysErr"*))
  block L_4715 (x_4418: (unit) ref)
    return (x_28 (*"Unordered"*))
  block L_4716 (x_4419: (unit) ref)
    return (x_27 (*"Bad"*))
  block L_4717 (x_4420: (unit) ref)
    return (x_26 (*"Bad"*))
  block L_4718 (x_4421: (unit) ref)
    return (x_25 (*"Time"*))
  block L_4719 (x_4422: (unit) ref)
    return (x_24 (*"Date"*))
  block L_4720 (x_4423: (unit) ref)
    return (x_23 (*"BlockingN ... rted"*))
  block L_4721 (x_4424: (unit) ref)
    return (x_22 (*"ClosedStream"*))
  block L_4722 (x_4425:
                  ((unit) ref, (exn, (word8) vector, (word8) vector) tuple) tuple)
    return (x_21 (*"Io"*))
  block L_4723 (x_4426: (unit) ref)
    return (x_20 (*"Nonblocki ... rted"*))
  block L_4724 (x_4427: (unit) ref)
    return (x_19 (*"RandomAcc ... rted"*))
  block L_4725 (x_4428: (unit) ref)
    return (x_18 (*"Path"*))
  block L_4726 (x_4429: (unit) ref)
    return (x_17 (*"InvalidArc"*))
  block L_4727 (x_4430: (unit) ref)
    return (x_16 (*"Sqrt"*))
  block L_4728 (x_4431: (unit) ref)
    return (x_15 (*"Ln"*))
  block L_4729 (x_4432: (unit) ref)
    return (x_14 (*"Ord"*))
  block L_4730 (x_4433: ((unit) ref, (word8) vector) tuple)
    return (x_13 (*"Io"*))
  block L_4731 (x_4434: (unit) ref)
    return (x_12 (*"Interrupt"*))
  block L_4732 (x_4435: (unit) ref)
    return (x_11 (*"MisuseOfForget"*))
  block L_4733 (x_4436: (unit) ref)
    return (x_10 (*"DoublyRedirected"*))
  block L_4734 (x_4437: (unit) ref)
    return (x_9 (*"Poll"*))
  block L_4735 (x_4438: (unit) ref)
    return (x_8 (*"UNKNOWN"*))
fun not_1 (env_1972: unit, x_4439: bool):
  {returns = Some (bool), raises = Some (exn)} =
L_4736 ()
  block L_4736 ()
    case x_4439 of
      true => L_4738 | false => L_4737
  block L_4737 ()
    return (x_7 (*con true*))
  block L_4738 ()
    return (x_6 (*con false*))
fun x_1972 (env_1973: unit, x_4440: unit):
  {returns = Some (unit), raises = Some (exn)} =
L_4739 ()
  block L_4739 ()
    val _: unit = prim MLton_bug (x_3 (*"toplevel  ... lled"*))
    bug
fun x_1976 (env_1974: unit, x_4441: exn):
  {returns = Some (unit), raises = Some (exn)} =
L_4740 ()
  block L_4740 ()
    val _: unit = prim MLton_bug (x_0 (*"toplevel  ... lled"*))
    bug


(* Main: *) main_0
